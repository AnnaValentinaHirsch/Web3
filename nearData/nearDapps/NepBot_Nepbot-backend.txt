*GitHub Repository "NepBot/Nepbot-backend"*

'''--- README.md ---
# Nepbot backend

This repository contains the code for the backend of Nepbot, a discord bot for the Near blockchain community. The Guild Owner in a Discord Guild can use command to generate rules and bind them to the roles. The bot will check the user's on-chain assets and status to decide whether the user can access the role or not. In the meanwhile, members in the Guild can also use Nepbot's commands to check certain information on the Near blockchain. Details can be found in the command folder.

## Contents:
* [Service](#service)
  * [Commands](#commands)
  * [Controllers](#controllers)
  * [Discord_actions](#discord_actions)
  * [Events](#events)
  * [Schedule_tasks](#schedule_tasks)
* [Pkg](#pkg)
  * [Modules](#modules)
  * [utils](#utils)
* [Note](#note)
* [Local debug](#local-debug)
* [Authors](#authors)

## Service
### Commands
* [verify](./service/commands/verify.js)  
  Connect your NEAR wallet to verify your on-chain assets and status on Near protocol.
* [setrule](./service/commands/setrule.js)  
  Set token-gated rules for roles in this server.
* [set_twitter_rule](./service/commands/set_twitter_rule.js)  
  Set Twitter rules for roles in this server.
* [check_proposal](./service/commands/check_proposal.js)  
  Check DAO proposals on AstroDao.
* [checkwallet](./service/commands/checkwallet.js)  
  Show the NEAR wallet currently connected to your account.
* [create_snapshot](./service/commands/create_snapshot.js)  
  Create a snapshot based on the current block height and a contract address.
* [createnft](./service/commands/createnft.js)  
  Create an NFT collection or add collectibles to existing collections.
* [listcollections](./service/commands/listcollections.js)  
  List existing NFT collections for this server.
* [mint](./service/commands/mint.js)  
  Mint an NFT from an NFT collection in this server.
* [paras_leaderboard](./service/commands/paras_leaderboard.js)  
  Tracking the leaderboard on Paras OR input a account_id to track your rank on the leaderboard.
* [paras_staking](./service/commands/paras_reward.js)  
  Tracking your staking status on Paras.
* [ft_airdrop](./service/commands/ft_airdrop.js)  
  Airdrop a specific fungible token (NEP-141) on NEAR.
* [poll](./service/commands/poll.js)  
  Create a poll for the server.

### Controllers
* [block_chain](./service/controllers/block_chain.js)  
  When using some commands, users need to interact with temporary links that expire after 5 mins. This file is used to generate a signature.
* [discord_api](./service/controllers/discord_api.js)  
  This file is used to interact with the Nepbot frontend, and also used to send messages to the Discord Guild via frontend.
* [indexer_api](./service/controllers/indexer_api.js)  
  This file is used to interact with the NEAR Indexer.
* [paras](./service/controllers/paras.js)  
  This file is used to interact with the Paras API.
* [twitter](./service/controllers/twitter.js)  
  This file is used to interact with the Twitter API.
* [user](./service/controllers/user.js)  
  This file is used to interact with the frontend to get the user info in the Discord Guild.

### Discord_actions
* [guildCreate](./service/discord_actions/guildCreate.js)  
  The file in this folder is used to handle the event when the bot joins a new guild.
* [interactionCreate](./service/discord_actions/interactionCreate.js)  
  The file in this folder is used to handle the event when a user uses the command in the guild.

### Events
* [events](./service/events)  
  The file in this folder is used to handle the event when a user joins the guild.
  All the events can be found in the https://discord.js.org/#/docs/main/stable/class/Client?scrollTo=e-channelCreate

### Schedule_tasks
* [schedule_tasks](./service/schedule_tasks)  
  Using Near Lake to get data from the Near blockchain, and then filtering it to get the data we need. The data will be used for the rules.

## Pkg
### Modules
* [db_driver](./pkg/modules/db_driver)  
  This file is used to connect to the mysql database that includes Near on chain data.
* [object](./pkg/modules/object)  
  This file is used to generate the object for the database.

### utils
* [utils](./pkg/utils)  
  This folder is used to store the utils for the project.
  Each platform has different ways to interact with the blockchain, so generating specific utils to interact with them is necessary.

## Note
If you need to execute this project, the [near_net_sample.json](./conf/near_net_sample.json) and [.env_sample](./.env_sample) files are needed, there is a sample file in the current folder. Don't forget to rename the both file by deleting `_sample`.

## Local debug
1. Apply for a Discord Bot and get the token from https://discord.com/developers/applications
2. Apply for a Twitter Developer account and get the token from https://developer.twitter.com/en/portal/dashboard
3. Using the url to connect to the mysql database.
4. Install the dependencies.
  ```bash
  npm install --save
  ```
5. Run the project.
 ```bash
 node index.js
 ```

## Authors
[Nepbot Team](https://github.com/NepBot)
'''
'''--- conf/near_net_sample.json ---
{
  "nearWallet": {
    "networkId": "testnet",
    "nodeUrl": "https://rpc.testnet.near.org",
    "walletUrl": "https://wallet.testnet.near.org",
    "helperUrl": "https://helper.testnet.near.org"
  },
  "port": 6000,
  "rule_contract": "app.dev-nepbot.testnet",
  "nft_contract": "nft.dev-nepbot.testnet",
  "snapshot_contract": "snapshot.dev-nepbot.testnet",
  "airdrop_contract": "airdrop.dev-nepbot.testnet",
  "linkdrop": "linkdrop6.bhc8521.testnet",
  "account_id": "dev-nepbot.testnet",
  "oct_contract": "registry.test_oct.testnet",
  "near_indexer": "postgres://public_readonly:nearprotocol@testnet.db.explorer.indexer.near.dev/testnet_explorer",
  "wallet_auth_url":"http://127.0.0.1:8080",
  "indexer_service_url":"https://testnet-api.kitwallet.app",
  "paras": {
    "api":"https://api-v3-marketplace-testnet.paras.id",
    "nft_contract": "paras-token-v2.testnet",
    "stake_contract":"dev-1641987418790-52566958498708",
    "token_contract":"dev-1631277489384-75412609538902"
  },
  "astrodao":{
    "api":"https://testnet.app.astrodao.com/api/server/v1/daos",
    "contract":"sputnikv2.testnet"
  },
  "twitter":{
    "callback_url": "http://13.214.203.20:8080/twitter/verify"
  },
  "near_lake_config": {
    "s3BucketName": "near-lake-data-testnet",
    "s3RegionName": "eu-central-1"
  },
  "fields": {
    "twitter_role": ["To Unlock Role", "Role"],
    "airdrop_hash": ["Airdrop ID", "Hash"],
    "twitter_follow": ["Follow"],
    "twitter_retweet": ["Retweet"],
    "twitter_like": ["Like Tweet"],
    "proposal_id": ["Proposal ID"],
    "contract_address": ["Contract Address"]
  }
}
'''
'''--- index.js ---
// Load config info
const config = require('./pkg/utils/config');

// Load logger
const logger = require('./pkg/utils/logger');

// Checking connection of mysql whether success or not.
require('./pkg/models/db_driver/mysql_driver');

// Sync models to mysql
require('./pkg/utils/sync_models');

// Run backend app
const app = require('./service/app');
app.listen(config.port, () => {
  logger.info(`app listening at http://127.0.0.1:${config.port}/api`);
});

// Run discord bot
require('./service/discord_bot');

// Run twitter app
require('./service/twitter_app');

// Run schedule task
const task = require('./service/schedule_task');
task.scheduleTask();
task.guildDeleteTask();
task.userDisconnectTask();
// schedule need to be run here
'''
'''--- nepbot-cli.js ---
const yargs = require('yargs');
const appRoot = require('app-root-path');
const fs = require('node:fs');
const scriptsDir = `${ appRoot }/scripts`;

const scriptFiles = fs.readdirSync(scriptsDir).filter(file => file.endsWith('.js'));
const scriptNames = [];

for (const file of scriptFiles) {
  scriptNames.push(file.replace('.js', ''));
}

async function init() {
  const yargsObj = yargs
    .scriptName('nepbot-cli')
    .usage('$0 <cmd> [args]');
    // .options({
    //   accountId: {
    //     type: 'string',
    //     describe: 'account ID',
    //     alias: 'a',
    //     hidden: false,
    //   }
    // })
  for (const scriptName of scriptNames) {
    const script = require(`${scriptsDir}/${scriptName}.js`);
    let commandStr = `${scriptName}`;
    for (arg of script.params.args) {
      commandStr += ` [${arg.name}]`;
    }
    yargsObj.command(commandStr, script.params.description, (yargs) => {
      for (arg of script.params.args) {
        yargs.positional(arg.name, {
          type: arg.type,
          describe: arg.describe,
        });
      }
    }, async function(argv) {
      await script.execute(argv);
    });
  }
  yargsObj.argv;
}

init();
'''
'''--- package-lock.json ---
{
  "name": "nepbot-backend",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "nepbot-backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@discordjs/builders": "^0.13.0",
        "@discordjs/rest": "^0.4.1",
        "app-root-path": "^3.0.0",
        "axios": "^0.27.2",
        "discord-api-types": "^0.31.2",
        "discord.js": "^13.6.0",
        "dotenv": "^16.0.0",
        "js-base64": "^3.7.2",
        "koa": "^2.13.4",
        "koa-bodyparser": "^4.3.0",
        "koa-router": "^10.1.1",
        "koa-session": "^6.2.0",
        "koa2-cors": "^2.0.6",
        "log4js": "^6.4.6",
        "mongoose": "^6.8.0",
        "multer": "^1.4.4",
        "multiparty": "^4.2.3",
        "mysql2": "^2.3.3",
        "near-api-js": "^0.44.2",
        "near-lake-framework": "^1.0.4",
        "node-schedule": "^2.1.0",
        "package.json": "^2.0.1",
        "parse-database-url": "^0.3.0",
        "pg": "^8.7.3",
        "pg-hstore": "^2.3.4",
        "request": "^2.88.2",
        "request-promise": "^4.2.6",
        "sequelize": "^6.21.3",
        "snake-case": "^3.0.4",
        "text-table": "^0.2.0",
        "twitter-api-v2": "^1.12.5",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "eslint": "^8.14.0"
      }
    },
    "node_modules/@aws-crypto/crc32": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/crc32/-/crc32-2.0.0.tgz",
      "integrity": "sha512-TvE1r2CUueyXOuHdEigYjIZVesInd9KN+K/TFFNfkkxRThiNxO6i4ZqqAVMoEjAamZZ1AA8WXJkjCz7YShHPQA==",
      "dependencies": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/crc32/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/crc32c": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/crc32c/-/crc32c-2.0.0.tgz",
      "integrity": "sha512-vF0eMdMHx3O3MoOXUfBZry8Y4ZDtcuskjjKgJz8YfIDjLStxTZrYXk+kZqtl6A0uCmmiN/Eb/JbC/CndTV1MHg==",
      "dependencies": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/crc32c/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/ie11-detection": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/ie11-detection/-/ie11-detection-2.0.2.tgz",
      "integrity": "sha512-5XDMQY98gMAf/WRTic5G++jfmS/VLM0rwpiOpaainKi4L0nqWMSB1SzsrEG5rjFZGYN6ZAefO+/Yta2dFM0kMw==",
      "dependencies": {
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/ie11-detection/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/sha1-browser": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha1-browser/-/sha1-browser-2.0.0.tgz",
      "integrity": "sha512-3fIVRjPFY8EG5HWXR+ZJZMdWNRpwbxGzJ9IH9q93FpbgCH8u8GHRi46mZXp3cYD7gealmyqpm3ThZwLKJjWJhA==",
      "dependencies": {
        "@aws-crypto/ie11-detection": "^2.0.0",
        "@aws-crypto/supports-web-crypto": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "@aws-sdk/util-locate-window": "^3.0.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha1-browser/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/sha256-browser": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-browser/-/sha256-browser-2.0.0.tgz",
      "integrity": "sha512-rYXOQ8BFOaqMEHJrLHul/25ckWH6GTJtdLSajhlqGMx0PmSueAuvboCuZCTqEKlxR8CQOwRarxYMZZSYlhRA1A==",
      "dependencies": {
        "@aws-crypto/ie11-detection": "^2.0.0",
        "@aws-crypto/sha256-js": "^2.0.0",
        "@aws-crypto/supports-web-crypto": "^2.0.0",
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "@aws-sdk/util-locate-window": "^3.0.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-browser/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/sha256-js": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-js/-/sha256-js-2.0.0.tgz",
      "integrity": "sha512-VZY+mCY4Nmrs5WGfitmNqXzaE873fcIZDu54cbaDaaamsaTOP1DBImV9F4pICc3EHjQXujyE8jig+PFCaew9ig==",
      "dependencies": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-js/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/supports-web-crypto": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/supports-web-crypto/-/supports-web-crypto-2.0.2.tgz",
      "integrity": "sha512-6mbSsLHwZ99CTOOswvCRP3C+VCWnzBf+1SnbWxzzJ9lR0mA0JnY2JEAhp8rqmTE0GPFy88rrM27ffgp62oErMQ==",
      "dependencies": {
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-crypto/util": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-2.0.2.tgz",
      "integrity": "sha512-Lgu5v/0e/BcrZ5m/IWqzPUf3UYFTy/PpeED+uc9SWUR1iZQL8XXbGQg10UfllwwBryO3hFF5dizK+78aoXC1eA==",
      "dependencies": {
        "@aws-sdk/types": "^3.110.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/util/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/@aws-sdk/abort-controller": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.201.0.tgz",
      "integrity": "sha512-xJ984k+CKlGjBmvNarzM8Y+b6X4L1Zt0TycQmVBJq7fAr/ju9l13pQIoXR5WlDIW1FkGeVczF5Nu6fN46SCORQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/chunked-blob-reader": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/chunked-blob-reader/-/chunked-blob-reader-3.188.0.tgz",
      "integrity": "sha512-zkPRFZZPL3eH+kH86LDYYXImiClA1/sW60zYOjse9Pgka+eDJlvBN6hcYxwDEKjcwATYiSRR1aVQHcfCinlGXg==",
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/chunked-blob-reader-native": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/chunked-blob-reader-native/-/chunked-blob-reader-native-3.204.0.tgz",
      "integrity": "sha512-ejJntS6usQpKKwisIaK4yYjo8DKEPpk7eJ7fJCw0r4WmIa7xN3amZISP4TrnKa401nWxbfzd40Wh/R5p75JMNQ==",
      "dependencies": {
        "@aws-sdk/util-base64": "3.202.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-cognito-identity/-/client-cognito-identity-3.226.0.tgz",
      "integrity": "sha512-f97yYtFN2YyVLCkDM51yLakb5NKy9gTSSXWe9mA9rgynLPfgsJbIHXv3zr1Qg0Ay0p4j1eLYukLaVw1MKlHDgw==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.226.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-node": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-signing": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/abort-controller": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.226.0.tgz",
      "integrity": "sha512-cJVzr1xxPBd08voknXvR0RLgtZKGKt6WyDpH/BaPCu3rfSqWCDZKzwqe940eqosjmKrxC6pUZNKASIqHOQ8xxQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-sso": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.226.0.tgz",
      "integrity": "sha512-+Hl1YSLKrxPnQLijhWryI6uV8eKZIsUhvWlzFKx75kjxzjsC/jyk5zV59jnCu0SCCepXB8DKyLVa2WpH7iAHew==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-sts": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.226.0.tgz",
      "integrity": "sha512-ZBlqRVbnHvvbkN5g56+mXltNybHNzgV69+2ARubQ8ge9U2qF/LweCmGqZnZLWqdGXwaB9IOvz5ZW2npyJh1X/A==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-node": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-sdk-sts": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-signing": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/config-resolver": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.226.0.tgz",
      "integrity": "sha512-0UWXtfnTT0OtnRP8jJodc8V7xAnWSqsh4RCRyV5uu3Z2Tv+xyW91GKxO+gOXoUP0hHu0lvBM9lYiMJcJWZYLYw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-env": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.226.0.tgz",
      "integrity": "sha512-sd8uK1ojbXxaZXlthzw/VXZwCPUtU3PjObOfr3Evj7MPIM2IH8h29foOlggx939MdLQGboJf9gKvLlvKDWtJRA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-imds": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.226.0.tgz",
      "integrity": "sha512-//z/COQm2AjYFI1Lb0wKHTQSrvLFTyuKLFQGPJsKS7DPoxGOCKB7hmYerlbl01IDoCxTdyL//TyyPxbZEOQD5Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-ini": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.226.0.tgz",
      "integrity": "sha512-Sj7SGl53qmKkD7wvgU0MSTyj8ho6A3tKVbadTHljVz60jiauTEM97Z1DIai6U3oPFVteaKqx7npc8ozeK6mKNg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/credential-provider-sso": "3.226.0",
        "@aws-sdk/credential-provider-web-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.226.0.tgz",
      "integrity": "sha512-kuOeiVmlhSyMC1Eix0pqHmb4EmpbMHrTw+9ObZbQ2bRXy05Q9fLA6SVBcI01bI1KVh7Qqz9i8ojOY3A2zscjyA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/credential-provider-ini": "3.226.0",
        "@aws-sdk/credential-provider-process": "3.226.0",
        "@aws-sdk/credential-provider-sso": "3.226.0",
        "@aws-sdk/credential-provider-web-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-process": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.226.0.tgz",
      "integrity": "sha512-iUDMdnrTvbvaCFhWwqyXrhvQ9+ojPqPqXhwZtY1X/Qaz+73S9gXBPJHZaZb2Ke0yKE1Ql3bJbKvmmxC/qLQMng==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-sso": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.226.0.tgz",
      "integrity": "sha512-QSBeyOIAus4/8u/DeAstE8w/zw+F7PQohdB8JFP/BPaCfc8uKue4UkqqvQWRfm4VSEnHeXt037MDopmCpd98Iw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/token-providers": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/credential-provider-web-identity": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.226.0.tgz",
      "integrity": "sha512-CCpv847rLB0SFOHz2igvUMFAzeT2fD3YnY4C8jltuJoEkn0ITn1Hlgt13nTJ5BUuvyti2mvyXZHmNzhMIMrIlw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/fetch-http-handler": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.226.0.tgz",
      "integrity": "sha512-JewZPMNEBXfi1xVnRa7pVtK/zgZD8/lQ/YnD8pq79WuMa2cwyhDtr8oqCoqsPW+WJT5ScXoMtuHxN78l8eKWgg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/querystring-builder": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/hash-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.226.0.tgz",
      "integrity": "sha512-MdlJhJ9/Espwd0+gUXdZRsHuostB2WxEVAszWxobP0FTT9PnicqnfK7ExmW+DUAc0ywxtEbR3e0UND65rlSTVw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/invalid-dependency": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.226.0.tgz",
      "integrity": "sha512-QXOYFmap8g9QzRjumcRCIo2GEZkdCwd7ePQW0OABWPhKHzlJ74vvBxywjU3s39EEBEluWXtZ7Iufg6GxZM4ifw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-content-length": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.226.0.tgz",
      "integrity": "sha512-ksUzlHJN2JMuyavjA46a4sctvnrnITqt2tbGGWWrAuXY1mel2j+VbgnmJUiwHKUO6bTFBBeft5Vd1TSOb4JmiA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-endpoint": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.226.0.tgz",
      "integrity": "sha512-EvLFafjtUxTT0AC9p3aBQu1/fjhWdIeK58jIXaNFONfZ3F8QbEYUPuF/SqZvJM6cWfOO9qwYKkRDbCSTYhprIg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-host-header": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.226.0.tgz",
      "integrity": "sha512-haVkWVh6BUPwKgWwkL6sDvTkcZWvJjv8AgC8jiQuSl8GLZdzHTB8Qhi3IsfFta9HAuoLjxheWBE5Z/L0UrfhLA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-logger": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.226.0.tgz",
      "integrity": "sha512-m9gtLrrYnpN6yckcQ09rV7ExWOLMuq8mMPF/K3DbL/YL0TuILu9i2T1W+JuxSX+K9FMG2HrLAKivE/kMLr55xA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-recursion-detection": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.226.0.tgz",
      "integrity": "sha512-mwRbdKEUeuNH5TEkyZ5FWxp6bL2UC1WbY+LDv6YjHxmSMKpAoOueEdtU34PqDOLrpXXxIGHDFmjeGeMfktyEcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-retry": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.226.0.tgz",
      "integrity": "sha512-uMn4dSkv9Na2uvt6K3HgTnVrCRAlGv1MBAtUDLXONqUv1L/Z1fp3CkFkLKQHKylfBwBhe6dXfYEo87i8LZFoqg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/service-error-classification": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-sdk-sts": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.226.0.tgz",
      "integrity": "sha512-NN9T/qoSD1kZvAT+VLny3NnlqgylYQcsgV3rvi/8lYzw/G/2s8VS6sm/VTWGGZhx08wZRv20MWzYu3bftcyqUg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-signing": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-serde": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.226.0.tgz",
      "integrity": "sha512-nPuOOAkSfx9TxzdKFx0X2bDlinOxGrqD7iof926K/AEflxGD1DBdcaDdjlYlPDW2CVE8LV/rAgbYuLxh/E/1VA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-signing": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.226.0.tgz",
      "integrity": "sha512-E6HmtPcl+IjYDDzi1xI2HpCbBq2avNWcjvCriMZWuTAtRVpnA6XDDGW5GY85IfS3A8G8vuWqEVPr8JcYUcjfew==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-stack": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.226.0.tgz",
      "integrity": "sha512-85wF29LvPvpoed60fZGDYLwv1Zpd/cM0C22WSSFPw1SSJeqO4gtFYyCg2squfT3KI6kF43IIkOCJ+L7GtryPug==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-user-agent": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.226.0.tgz",
      "integrity": "sha512-N1WnfzCW1Y5yWhVAphf8OPGTe8Df3vmV7/LdsoQfmpkCZgLZeK2o0xITkUQhRj1mbw7yp8tVFLFV3R2lMurdAQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/node-config-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.226.0.tgz",
      "integrity": "sha512-B8lQDqiRk7X5izFEUMXmi8CZLOKCTWQJU9HQf3ako+sF0gexo4nHN3jhoRWyLtcgC5S3on/2jxpAcqtm7kuY3w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/node-http-handler": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.226.0.tgz",
      "integrity": "sha512-xQCddnZNMiPmjr3W7HYM+f5ir4VfxgJh37eqZwX6EZmyItFpNNeVzKUgA920ka1VPz/ZUYB+2OFGiX3LCLkkaA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/abort-controller": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/querystring-builder": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/property-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
      "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/protocol-http": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.226.0.tgz",
      "integrity": "sha512-zWkVqiTA9RXL6y0hhfZc9bcU4DX2NI6Hw9IhQmSPeM59mdbPjJlY4bLlMr5YxywqO3yQ/ylNoAfrEzrDjlOSRg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/querystring-builder": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.226.0.tgz",
      "integrity": "sha512-LVurypuNeotO4lmirKXRC4NYrZRAyMJXuwO0f2a5ZAUJCjauwYrifKue6yCfU7bls7gut7nfcR6B99WBYpHs3g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/querystring-parser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.226.0.tgz",
      "integrity": "sha512-FzB+VrQ47KAFxiPt2YXrKZ8AOLZQqGTLCKHzx4bjxGmwgsjV8yIbtJiJhZLMcUQV4LtGeIY9ixIqQhGvnZHE4A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/service-error-classification": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.226.0.tgz",
      "integrity": "sha512-9R01dBpE8JILe2CTft7YN2tMufT2mMWMTqxmHwPSmOpsxHTj8hEII7GTfvpb95ThHwW7XMNhg7pbHLbrTJZCVA==",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
      "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/signature-v4": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.226.0.tgz",
      "integrity": "sha512-/R5q5agdPd7HJB68XMzpxrNPk158EHUvkFkuRu5Qf3kkkHebEzWEBlWoVpUe6ss4rP9Tqcue6xPuaftEmhjpYw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/smithy-client": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.226.0.tgz",
      "integrity": "sha512-BWr1FhWSUhkSBp0TLzliD5AQBjA2Jmo9FlOOt+cBwd9BKkSGlGj+HgATYJ83Sjjg2+J6qvEZBxB78LKVHhorBw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/types": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
      "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/url-parser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.226.0.tgz",
      "integrity": "sha512-p5RLE0QWyP0OcTOLmFcLdVgUcUEzmEfmdrnOxyNzomcYb0p3vUagA5zfa1HVK2azsQJFBv28GfvMnba9bGhObg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/querystring-parser": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-base64": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
      "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-body-length-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
      "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-buffer-from": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
      "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-config-provider": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
      "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-defaults-mode-browser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.226.0.tgz",
      "integrity": "sha512-chLx+6AeMSjuPsCVbI1B4Pg3jftjjcsuTsJucjo0DKBb1VSWqPCitmOILQVvKiA2Km8TSs3VcbUuOCyDExkzAg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-defaults-mode-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.226.0.tgz",
      "integrity": "sha512-Zr0AEj6g8gqiOhr31Pa2tdOFdPQciaAUCg3Uj/eH0znNBdVoptCj67oCW/I5v4pY4ZLZtGhr3uuoxDJH2MB3yg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-endpoints": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.226.0.tgz",
      "integrity": "sha512-iqOkac/zLmyPBUJd7SLN0PeZMkOmlGgD5PHmmekTClOkce2eUjK9SNX1PzL73aXPoPTyhg9QGLH8uEZEQ8YUzg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-middleware": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.226.0.tgz",
      "integrity": "sha512-B96CQnwX4gRvQdaQkdUtqvDPkrptV5+va6FVeJOocU/DbSYMAScLxtR3peMS8cnlOT6nL1Eoa42OI9AfZz1VwQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-user-agent-browser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.226.0.tgz",
      "integrity": "sha512-PhBIu2h6sPJPcv2I7ELfFizdl5pNiL4LfxrasMCYXQkJvVnoXztHA1x+CQbXIdtZOIlpjC+6BjDcE0uhnpvfcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-user-agent-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.226.0.tgz",
      "integrity": "sha512-othPc5Dz/pkYkxH+nZPhc1Al0HndQT8zHD4e9h+EZ+8lkd8n+IsnLfTS/mSJWrfiC6UlNRVw55cItstmJyMe/A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "aws-crt": ">=1.0.0"
      },
      "peerDependenciesMeta": {
        "aws-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-utf8-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
      "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-s3": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-s3/-/client-s3-3.204.0.tgz",
      "integrity": "sha512-TtaOQ0ArmqV23Ie/FUChMIdAT5ebg5FSSimN3X2SFVmXRt9c9N73X/gLHKqzf30Dgsl7M/w9O6jFtlbvANjBmA==",
      "dependencies": {
        "@aws-crypto/sha1-browser": "2.0.0",
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.204.0",
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/credential-provider-node": "3.204.0",
        "@aws-sdk/eventstream-serde-browser": "3.201.0",
        "@aws-sdk/eventstream-serde-config-resolver": "3.201.0",
        "@aws-sdk/eventstream-serde-node": "3.201.0",
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/hash-blob-browser": "3.204.0",
        "@aws-sdk/hash-node": "3.201.0",
        "@aws-sdk/hash-stream-node": "3.201.0",
        "@aws-sdk/invalid-dependency": "3.201.0",
        "@aws-sdk/md5-js": "3.204.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.201.0",
        "@aws-sdk/middleware-content-length": "3.201.0",
        "@aws-sdk/middleware-endpoint": "3.201.0",
        "@aws-sdk/middleware-expect-continue": "3.201.0",
        "@aws-sdk/middleware-flexible-checksums": "3.201.0",
        "@aws-sdk/middleware-host-header": "3.201.0",
        "@aws-sdk/middleware-location-constraint": "3.201.0",
        "@aws-sdk/middleware-logger": "3.201.0",
        "@aws-sdk/middleware-recursion-detection": "3.201.0",
        "@aws-sdk/middleware-retry": "3.201.0",
        "@aws-sdk/middleware-sdk-s3": "3.201.0",
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/middleware-signing": "3.201.0",
        "@aws-sdk/middleware-ssec": "3.201.0",
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/middleware-user-agent": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4-multi-region": "3.201.0",
        "@aws-sdk/smithy-client": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-base64-browser": "3.188.0",
        "@aws-sdk/util-base64-node": "3.201.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.201.0",
        "@aws-sdk/util-defaults-mode-browser": "3.201.0",
        "@aws-sdk/util-defaults-mode-node": "3.201.0",
        "@aws-sdk/util-endpoints": "3.202.0",
        "@aws-sdk/util-stream-browser": "3.204.0",
        "@aws-sdk/util-stream-node": "3.201.0",
        "@aws-sdk/util-user-agent-browser": "3.201.0",
        "@aws-sdk/util-user-agent-node": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "@aws-sdk/util-waiter": "3.201.0",
        "@aws-sdk/xml-builder": "3.201.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.204.0.tgz",
      "integrity": "sha512-AECcNrcAQxV/Jlu8ogshRaYwt2jayx0omQJs/SXj70mWxmbk4MQnb+DqJIpPpOKBHaza/xlC2TKS1RzkiuZxyw==",
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/hash-node": "3.201.0",
        "@aws-sdk/invalid-dependency": "3.201.0",
        "@aws-sdk/middleware-content-length": "3.201.0",
        "@aws-sdk/middleware-endpoint": "3.201.0",
        "@aws-sdk/middleware-host-header": "3.201.0",
        "@aws-sdk/middleware-logger": "3.201.0",
        "@aws-sdk/middleware-recursion-detection": "3.201.0",
        "@aws-sdk/middleware-retry": "3.201.0",
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/middleware-user-agent": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/smithy-client": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-base64-browser": "3.188.0",
        "@aws-sdk/util-base64-node": "3.201.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.201.0",
        "@aws-sdk/util-defaults-mode-browser": "3.201.0",
        "@aws-sdk/util-defaults-mode-node": "3.201.0",
        "@aws-sdk/util-endpoints": "3.202.0",
        "@aws-sdk/util-user-agent-browser": "3.201.0",
        "@aws-sdk/util-user-agent-node": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso-oidc/-/client-sso-oidc-3.226.0.tgz",
      "integrity": "sha512-IKzAhL6RoPs7IZ/rJvekjedQ4oesazCO+Aqh9l2Xct+XY0MFBdh4amgg4t/8fjksfIzmJH48BZoNv5gVak6yRw==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/abort-controller": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.226.0.tgz",
      "integrity": "sha512-cJVzr1xxPBd08voknXvR0RLgtZKGKt6WyDpH/BaPCu3rfSqWCDZKzwqe940eqosjmKrxC6pUZNKASIqHOQ8xxQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/config-resolver": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.226.0.tgz",
      "integrity": "sha512-0UWXtfnTT0OtnRP8jJodc8V7xAnWSqsh4RCRyV5uu3Z2Tv+xyW91GKxO+gOXoUP0hHu0lvBM9lYiMJcJWZYLYw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/credential-provider-imds": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.226.0.tgz",
      "integrity": "sha512-//z/COQm2AjYFI1Lb0wKHTQSrvLFTyuKLFQGPJsKS7DPoxGOCKB7hmYerlbl01IDoCxTdyL//TyyPxbZEOQD5Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/fetch-http-handler": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.226.0.tgz",
      "integrity": "sha512-JewZPMNEBXfi1xVnRa7pVtK/zgZD8/lQ/YnD8pq79WuMa2cwyhDtr8oqCoqsPW+WJT5ScXoMtuHxN78l8eKWgg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/querystring-builder": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/hash-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.226.0.tgz",
      "integrity": "sha512-MdlJhJ9/Espwd0+gUXdZRsHuostB2WxEVAszWxobP0FTT9PnicqnfK7ExmW+DUAc0ywxtEbR3e0UND65rlSTVw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/invalid-dependency": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.226.0.tgz",
      "integrity": "sha512-QXOYFmap8g9QzRjumcRCIo2GEZkdCwd7ePQW0OABWPhKHzlJ74vvBxywjU3s39EEBEluWXtZ7Iufg6GxZM4ifw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-content-length": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.226.0.tgz",
      "integrity": "sha512-ksUzlHJN2JMuyavjA46a4sctvnrnITqt2tbGGWWrAuXY1mel2j+VbgnmJUiwHKUO6bTFBBeft5Vd1TSOb4JmiA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-endpoint": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.226.0.tgz",
      "integrity": "sha512-EvLFafjtUxTT0AC9p3aBQu1/fjhWdIeK58jIXaNFONfZ3F8QbEYUPuF/SqZvJM6cWfOO9qwYKkRDbCSTYhprIg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-host-header": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.226.0.tgz",
      "integrity": "sha512-haVkWVh6BUPwKgWwkL6sDvTkcZWvJjv8AgC8jiQuSl8GLZdzHTB8Qhi3IsfFta9HAuoLjxheWBE5Z/L0UrfhLA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-logger": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.226.0.tgz",
      "integrity": "sha512-m9gtLrrYnpN6yckcQ09rV7ExWOLMuq8mMPF/K3DbL/YL0TuILu9i2T1W+JuxSX+K9FMG2HrLAKivE/kMLr55xA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-recursion-detection": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.226.0.tgz",
      "integrity": "sha512-mwRbdKEUeuNH5TEkyZ5FWxp6bL2UC1WbY+LDv6YjHxmSMKpAoOueEdtU34PqDOLrpXXxIGHDFmjeGeMfktyEcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-retry": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.226.0.tgz",
      "integrity": "sha512-uMn4dSkv9Na2uvt6K3HgTnVrCRAlGv1MBAtUDLXONqUv1L/Z1fp3CkFkLKQHKylfBwBhe6dXfYEo87i8LZFoqg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/service-error-classification": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-serde": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.226.0.tgz",
      "integrity": "sha512-nPuOOAkSfx9TxzdKFx0X2bDlinOxGrqD7iof926K/AEflxGD1DBdcaDdjlYlPDW2CVE8LV/rAgbYuLxh/E/1VA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-stack": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.226.0.tgz",
      "integrity": "sha512-85wF29LvPvpoed60fZGDYLwv1Zpd/cM0C22WSSFPw1SSJeqO4gtFYyCg2squfT3KI6kF43IIkOCJ+L7GtryPug==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/middleware-user-agent": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.226.0.tgz",
      "integrity": "sha512-N1WnfzCW1Y5yWhVAphf8OPGTe8Df3vmV7/LdsoQfmpkCZgLZeK2o0xITkUQhRj1mbw7yp8tVFLFV3R2lMurdAQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/node-config-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.226.0.tgz",
      "integrity": "sha512-B8lQDqiRk7X5izFEUMXmi8CZLOKCTWQJU9HQf3ako+sF0gexo4nHN3jhoRWyLtcgC5S3on/2jxpAcqtm7kuY3w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/node-http-handler": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.226.0.tgz",
      "integrity": "sha512-xQCddnZNMiPmjr3W7HYM+f5ir4VfxgJh37eqZwX6EZmyItFpNNeVzKUgA920ka1VPz/ZUYB+2OFGiX3LCLkkaA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/abort-controller": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/querystring-builder": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/property-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
      "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/protocol-http": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.226.0.tgz",
      "integrity": "sha512-zWkVqiTA9RXL6y0hhfZc9bcU4DX2NI6Hw9IhQmSPeM59mdbPjJlY4bLlMr5YxywqO3yQ/ylNoAfrEzrDjlOSRg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/querystring-builder": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.226.0.tgz",
      "integrity": "sha512-LVurypuNeotO4lmirKXRC4NYrZRAyMJXuwO0f2a5ZAUJCjauwYrifKue6yCfU7bls7gut7nfcR6B99WBYpHs3g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/querystring-parser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.226.0.tgz",
      "integrity": "sha512-FzB+VrQ47KAFxiPt2YXrKZ8AOLZQqGTLCKHzx4bjxGmwgsjV8yIbtJiJhZLMcUQV4LtGeIY9ixIqQhGvnZHE4A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/service-error-classification": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.226.0.tgz",
      "integrity": "sha512-9R01dBpE8JILe2CTft7YN2tMufT2mMWMTqxmHwPSmOpsxHTj8hEII7GTfvpb95ThHwW7XMNhg7pbHLbrTJZCVA==",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
      "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/signature-v4": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.226.0.tgz",
      "integrity": "sha512-/R5q5agdPd7HJB68XMzpxrNPk158EHUvkFkuRu5Qf3kkkHebEzWEBlWoVpUe6ss4rP9Tqcue6xPuaftEmhjpYw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/smithy-client": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.226.0.tgz",
      "integrity": "sha512-BWr1FhWSUhkSBp0TLzliD5AQBjA2Jmo9FlOOt+cBwd9BKkSGlGj+HgATYJ83Sjjg2+J6qvEZBxB78LKVHhorBw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/types": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
      "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/url-parser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.226.0.tgz",
      "integrity": "sha512-p5RLE0QWyP0OcTOLmFcLdVgUcUEzmEfmdrnOxyNzomcYb0p3vUagA5zfa1HVK2azsQJFBv28GfvMnba9bGhObg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/querystring-parser": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-base64": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
      "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-body-length-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
      "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-buffer-from": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
      "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-config-provider": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
      "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-defaults-mode-browser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.226.0.tgz",
      "integrity": "sha512-chLx+6AeMSjuPsCVbI1B4Pg3jftjjcsuTsJucjo0DKBb1VSWqPCitmOILQVvKiA2Km8TSs3VcbUuOCyDExkzAg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-defaults-mode-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.226.0.tgz",
      "integrity": "sha512-Zr0AEj6g8gqiOhr31Pa2tdOFdPQciaAUCg3Uj/eH0znNBdVoptCj67oCW/I5v4pY4ZLZtGhr3uuoxDJH2MB3yg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-endpoints": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.226.0.tgz",
      "integrity": "sha512-iqOkac/zLmyPBUJd7SLN0PeZMkOmlGgD5PHmmekTClOkce2eUjK9SNX1PzL73aXPoPTyhg9QGLH8uEZEQ8YUzg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-middleware": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.226.0.tgz",
      "integrity": "sha512-B96CQnwX4gRvQdaQkdUtqvDPkrptV5+va6FVeJOocU/DbSYMAScLxtR3peMS8cnlOT6nL1Eoa42OI9AfZz1VwQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-user-agent-browser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.226.0.tgz",
      "integrity": "sha512-PhBIu2h6sPJPcv2I7ELfFizdl5pNiL4LfxrasMCYXQkJvVnoXztHA1x+CQbXIdtZOIlpjC+6BjDcE0uhnpvfcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-user-agent-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.226.0.tgz",
      "integrity": "sha512-othPc5Dz/pkYkxH+nZPhc1Al0HndQT8zHD4e9h+EZ+8lkd8n+IsnLfTS/mSJWrfiC6UlNRVw55cItstmJyMe/A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "aws-crt": ">=1.0.0"
      },
      "peerDependenciesMeta": {
        "aws-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/util-utf8-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
      "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sts": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.204.0.tgz",
      "integrity": "sha512-Tp6FqENRw31XK5r5hul1JXnQgHBhbbXhoMebyFih6/zjpATaqg0bnV6tpww4yPi3uc+yDGXKw2/tDroSsyTsRA==",
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/credential-provider-node": "3.204.0",
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/hash-node": "3.201.0",
        "@aws-sdk/invalid-dependency": "3.201.0",
        "@aws-sdk/middleware-content-length": "3.201.0",
        "@aws-sdk/middleware-endpoint": "3.201.0",
        "@aws-sdk/middleware-host-header": "3.201.0",
        "@aws-sdk/middleware-logger": "3.201.0",
        "@aws-sdk/middleware-recursion-detection": "3.201.0",
        "@aws-sdk/middleware-retry": "3.201.0",
        "@aws-sdk/middleware-sdk-sts": "3.201.0",
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/middleware-signing": "3.201.0",
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/middleware-user-agent": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/smithy-client": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-base64-browser": "3.188.0",
        "@aws-sdk/util-base64-node": "3.201.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.201.0",
        "@aws-sdk/util-defaults-mode-browser": "3.201.0",
        "@aws-sdk/util-defaults-mode-node": "3.201.0",
        "@aws-sdk/util-endpoints": "3.202.0",
        "@aws-sdk/util-user-agent-browser": "3.201.0",
        "@aws-sdk/util-user-agent-node": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/config-resolver": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.201.0.tgz",
      "integrity": "sha512-6YLIel7OGMGi+r8XC1A54cQJRIpx/NJ4fBALy44zFpQ+fdJUEmw4daUf1LECmAQiPA2Pr/hD0nBtX+wiiTf5/g==",
      "dependencies": {
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-config-provider": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-cognito-identity": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-cognito-identity/-/credential-provider-cognito-identity-3.226.0.tgz",
      "integrity": "sha512-ukueK6kgTxvUX89oQBoArj7Oh0dYfkToHypnin08SHRZry9VNnK5IfSMO+Q1tXmxCnDtai1ejaAOny900OjMyg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-cognito-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-cognito-identity/node_modules/@aws-sdk/property-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
      "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-cognito-identity/node_modules/@aws-sdk/types": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
      "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-env": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.201.0.tgz",
      "integrity": "sha512-g2MJsowzFhSsIOITUjYp7EzWFeHINjEP526Uf+5z2/p2kxQVwYYWZQK7j+tPE2Bk3MEjGOCmVHbbE7IFj0rNHw==",
      "dependencies": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-imds": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.201.0.tgz",
      "integrity": "sha512-i8U2k3/L3iUWJJ1GSlwVBMfLQ2OTUT97E8yJi/xz5GavYuPOsUQWQe4fp7WGQivxh+AqybXAGFUCYub6zfUqag==",
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-ini": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.204.0.tgz",
      "integrity": "sha512-ddtaS0ya5lgZZwfuJ/FuniroreLJ6yDgPAasol/rla9U5EU0qUEK1+6PX463exghUGjYfTqxdrKXhGYZfuEoIw==",
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.201.0",
        "@aws-sdk/credential-provider-imds": "3.201.0",
        "@aws-sdk/credential-provider-sso": "3.204.0",
        "@aws-sdk/credential-provider-web-identity": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-node": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.204.0.tgz",
      "integrity": "sha512-kGbR5JE90zBGDS4cIz7tlUklMMeOm5oc5ES74YStLUacpQKwzVcHmDG8aT2DCONS/wEYysOIs5LygHurOJ/+Ww==",
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.201.0",
        "@aws-sdk/credential-provider-imds": "3.201.0",
        "@aws-sdk/credential-provider-ini": "3.204.0",
        "@aws-sdk/credential-provider-process": "3.201.0",
        "@aws-sdk/credential-provider-sso": "3.204.0",
        "@aws-sdk/credential-provider-web-identity": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-process": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.201.0.tgz",
      "integrity": "sha512-jTK3HSZgNj/hVrWb0wuF/cPUWSJYoRI/80fnN55o6QLS8WWIgOI8o2PNeVTAT5OrKioSoN4fgKTeUm3DZy3npQ==",
      "dependencies": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-sso": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.204.0.tgz",
      "integrity": "sha512-iS884Gda99x4zmdCK3XxFcceve4wB+wudpeTUm2wwX9AGrSzoUnLWqNXv/R8UAMAsKANaWMBkqv/bsHpsEitZw==",
      "dependencies": {
        "@aws-sdk/client-sso": "3.204.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-web-identity": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.201.0.tgz",
      "integrity": "sha512-U54bqhYaClPVZfswgknhlICp3BAtKXpOgHQCUF8cko5xUgbL4lVgd1rC3lWviGFMQAaTIF3QOXyEouemxr3VXw==",
      "dependencies": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-providers/-/credential-providers-3.226.0.tgz",
      "integrity": "sha512-oNkUBxlX0kmwt8jEyQAH7p5Tk1g9iWEKGGCTPPZ7A5RoZpmv83zT8ReZ/+QsSmJIWGb0zzraHMzKbmfMSeztZg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-cognito-identity": "3.226.0",
        "@aws-sdk/client-sso": "3.226.0",
        "@aws-sdk/client-sts": "3.226.0",
        "@aws-sdk/credential-provider-cognito-identity": "3.226.0",
        "@aws-sdk/credential-provider-env": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/credential-provider-ini": "3.226.0",
        "@aws-sdk/credential-provider-node": "3.226.0",
        "@aws-sdk/credential-provider-process": "3.226.0",
        "@aws-sdk/credential-provider-sso": "3.226.0",
        "@aws-sdk/credential-provider-web-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/abort-controller": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.226.0.tgz",
      "integrity": "sha512-cJVzr1xxPBd08voknXvR0RLgtZKGKt6WyDpH/BaPCu3rfSqWCDZKzwqe940eqosjmKrxC6pUZNKASIqHOQ8xxQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/client-sso": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.226.0.tgz",
      "integrity": "sha512-+Hl1YSLKrxPnQLijhWryI6uV8eKZIsUhvWlzFKx75kjxzjsC/jyk5zV59jnCu0SCCepXB8DKyLVa2WpH7iAHew==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/client-sts": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.226.0.tgz",
      "integrity": "sha512-ZBlqRVbnHvvbkN5g56+mXltNybHNzgV69+2ARubQ8ge9U2qF/LweCmGqZnZLWqdGXwaB9IOvz5ZW2npyJh1X/A==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-node": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-sdk-sts": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-signing": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/config-resolver": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.226.0.tgz",
      "integrity": "sha512-0UWXtfnTT0OtnRP8jJodc8V7xAnWSqsh4RCRyV5uu3Z2Tv+xyW91GKxO+gOXoUP0hHu0lvBM9lYiMJcJWZYLYw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-env": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.226.0.tgz",
      "integrity": "sha512-sd8uK1ojbXxaZXlthzw/VXZwCPUtU3PjObOfr3Evj7MPIM2IH8h29foOlggx939MdLQGboJf9gKvLlvKDWtJRA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-imds": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.226.0.tgz",
      "integrity": "sha512-//z/COQm2AjYFI1Lb0wKHTQSrvLFTyuKLFQGPJsKS7DPoxGOCKB7hmYerlbl01IDoCxTdyL//TyyPxbZEOQD5Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-ini": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.226.0.tgz",
      "integrity": "sha512-Sj7SGl53qmKkD7wvgU0MSTyj8ho6A3tKVbadTHljVz60jiauTEM97Z1DIai6U3oPFVteaKqx7npc8ozeK6mKNg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/credential-provider-sso": "3.226.0",
        "@aws-sdk/credential-provider-web-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.226.0.tgz",
      "integrity": "sha512-kuOeiVmlhSyMC1Eix0pqHmb4EmpbMHrTw+9ObZbQ2bRXy05Q9fLA6SVBcI01bI1KVh7Qqz9i8ojOY3A2zscjyA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/credential-provider-ini": "3.226.0",
        "@aws-sdk/credential-provider-process": "3.226.0",
        "@aws-sdk/credential-provider-sso": "3.226.0",
        "@aws-sdk/credential-provider-web-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-process": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.226.0.tgz",
      "integrity": "sha512-iUDMdnrTvbvaCFhWwqyXrhvQ9+ojPqPqXhwZtY1X/Qaz+73S9gXBPJHZaZb2Ke0yKE1Ql3bJbKvmmxC/qLQMng==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-sso": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.226.0.tgz",
      "integrity": "sha512-QSBeyOIAus4/8u/DeAstE8w/zw+F7PQohdB8JFP/BPaCfc8uKue4UkqqvQWRfm4VSEnHeXt037MDopmCpd98Iw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/token-providers": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/credential-provider-web-identity": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.226.0.tgz",
      "integrity": "sha512-CCpv847rLB0SFOHz2igvUMFAzeT2fD3YnY4C8jltuJoEkn0ITn1Hlgt13nTJ5BUuvyti2mvyXZHmNzhMIMrIlw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/fetch-http-handler": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.226.0.tgz",
      "integrity": "sha512-JewZPMNEBXfi1xVnRa7pVtK/zgZD8/lQ/YnD8pq79WuMa2cwyhDtr8oqCoqsPW+WJT5ScXoMtuHxN78l8eKWgg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/querystring-builder": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/hash-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.226.0.tgz",
      "integrity": "sha512-MdlJhJ9/Espwd0+gUXdZRsHuostB2WxEVAszWxobP0FTT9PnicqnfK7ExmW+DUAc0ywxtEbR3e0UND65rlSTVw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/invalid-dependency": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.226.0.tgz",
      "integrity": "sha512-QXOYFmap8g9QzRjumcRCIo2GEZkdCwd7ePQW0OABWPhKHzlJ74vvBxywjU3s39EEBEluWXtZ7Iufg6GxZM4ifw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-content-length": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.226.0.tgz",
      "integrity": "sha512-ksUzlHJN2JMuyavjA46a4sctvnrnITqt2tbGGWWrAuXY1mel2j+VbgnmJUiwHKUO6bTFBBeft5Vd1TSOb4JmiA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-endpoint": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.226.0.tgz",
      "integrity": "sha512-EvLFafjtUxTT0AC9p3aBQu1/fjhWdIeK58jIXaNFONfZ3F8QbEYUPuF/SqZvJM6cWfOO9qwYKkRDbCSTYhprIg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-host-header": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.226.0.tgz",
      "integrity": "sha512-haVkWVh6BUPwKgWwkL6sDvTkcZWvJjv8AgC8jiQuSl8GLZdzHTB8Qhi3IsfFta9HAuoLjxheWBE5Z/L0UrfhLA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-logger": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.226.0.tgz",
      "integrity": "sha512-m9gtLrrYnpN6yckcQ09rV7ExWOLMuq8mMPF/K3DbL/YL0TuILu9i2T1W+JuxSX+K9FMG2HrLAKivE/kMLr55xA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-recursion-detection": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.226.0.tgz",
      "integrity": "sha512-mwRbdKEUeuNH5TEkyZ5FWxp6bL2UC1WbY+LDv6YjHxmSMKpAoOueEdtU34PqDOLrpXXxIGHDFmjeGeMfktyEcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-retry": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.226.0.tgz",
      "integrity": "sha512-uMn4dSkv9Na2uvt6K3HgTnVrCRAlGv1MBAtUDLXONqUv1L/Z1fp3CkFkLKQHKylfBwBhe6dXfYEo87i8LZFoqg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/service-error-classification": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-sdk-sts": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.226.0.tgz",
      "integrity": "sha512-NN9T/qoSD1kZvAT+VLny3NnlqgylYQcsgV3rvi/8lYzw/G/2s8VS6sm/VTWGGZhx08wZRv20MWzYu3bftcyqUg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-signing": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-serde": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.226.0.tgz",
      "integrity": "sha512-nPuOOAkSfx9TxzdKFx0X2bDlinOxGrqD7iof926K/AEflxGD1DBdcaDdjlYlPDW2CVE8LV/rAgbYuLxh/E/1VA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-signing": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.226.0.tgz",
      "integrity": "sha512-E6HmtPcl+IjYDDzi1xI2HpCbBq2avNWcjvCriMZWuTAtRVpnA6XDDGW5GY85IfS3A8G8vuWqEVPr8JcYUcjfew==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/signature-v4": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-stack": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.226.0.tgz",
      "integrity": "sha512-85wF29LvPvpoed60fZGDYLwv1Zpd/cM0C22WSSFPw1SSJeqO4gtFYyCg2squfT3KI6kF43IIkOCJ+L7GtryPug==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/middleware-user-agent": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.226.0.tgz",
      "integrity": "sha512-N1WnfzCW1Y5yWhVAphf8OPGTe8Df3vmV7/LdsoQfmpkCZgLZeK2o0xITkUQhRj1mbw7yp8tVFLFV3R2lMurdAQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/node-config-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.226.0.tgz",
      "integrity": "sha512-B8lQDqiRk7X5izFEUMXmi8CZLOKCTWQJU9HQf3ako+sF0gexo4nHN3jhoRWyLtcgC5S3on/2jxpAcqtm7kuY3w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/node-http-handler": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.226.0.tgz",
      "integrity": "sha512-xQCddnZNMiPmjr3W7HYM+f5ir4VfxgJh37eqZwX6EZmyItFpNNeVzKUgA920ka1VPz/ZUYB+2OFGiX3LCLkkaA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/abort-controller": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/querystring-builder": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/property-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
      "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/protocol-http": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.226.0.tgz",
      "integrity": "sha512-zWkVqiTA9RXL6y0hhfZc9bcU4DX2NI6Hw9IhQmSPeM59mdbPjJlY4bLlMr5YxywqO3yQ/ylNoAfrEzrDjlOSRg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/querystring-builder": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.226.0.tgz",
      "integrity": "sha512-LVurypuNeotO4lmirKXRC4NYrZRAyMJXuwO0f2a5ZAUJCjauwYrifKue6yCfU7bls7gut7nfcR6B99WBYpHs3g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/querystring-parser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.226.0.tgz",
      "integrity": "sha512-FzB+VrQ47KAFxiPt2YXrKZ8AOLZQqGTLCKHzx4bjxGmwgsjV8yIbtJiJhZLMcUQV4LtGeIY9ixIqQhGvnZHE4A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/service-error-classification": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.226.0.tgz",
      "integrity": "sha512-9R01dBpE8JILe2CTft7YN2tMufT2mMWMTqxmHwPSmOpsxHTj8hEII7GTfvpb95ThHwW7XMNhg7pbHLbrTJZCVA==",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
      "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/signature-v4": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.226.0.tgz",
      "integrity": "sha512-/R5q5agdPd7HJB68XMzpxrNPk158EHUvkFkuRu5Qf3kkkHebEzWEBlWoVpUe6ss4rP9Tqcue6xPuaftEmhjpYw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.226.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/smithy-client": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.226.0.tgz",
      "integrity": "sha512-BWr1FhWSUhkSBp0TLzliD5AQBjA2Jmo9FlOOt+cBwd9BKkSGlGj+HgATYJ83Sjjg2+J6qvEZBxB78LKVHhorBw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/types": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
      "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/url-parser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.226.0.tgz",
      "integrity": "sha512-p5RLE0QWyP0OcTOLmFcLdVgUcUEzmEfmdrnOxyNzomcYb0p3vUagA5zfa1HVK2azsQJFBv28GfvMnba9bGhObg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/querystring-parser": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-base64": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
      "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-body-length-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
      "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-buffer-from": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
      "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-config-provider": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
      "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-defaults-mode-browser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.226.0.tgz",
      "integrity": "sha512-chLx+6AeMSjuPsCVbI1B4Pg3jftjjcsuTsJucjo0DKBb1VSWqPCitmOILQVvKiA2Km8TSs3VcbUuOCyDExkzAg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-defaults-mode-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.226.0.tgz",
      "integrity": "sha512-Zr0AEj6g8gqiOhr31Pa2tdOFdPQciaAUCg3Uj/eH0znNBdVoptCj67oCW/I5v4pY4ZLZtGhr3uuoxDJH2MB3yg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-endpoints": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.226.0.tgz",
      "integrity": "sha512-iqOkac/zLmyPBUJd7SLN0PeZMkOmlGgD5PHmmekTClOkce2eUjK9SNX1PzL73aXPoPTyhg9QGLH8uEZEQ8YUzg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-middleware": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.226.0.tgz",
      "integrity": "sha512-B96CQnwX4gRvQdaQkdUtqvDPkrptV5+va6FVeJOocU/DbSYMAScLxtR3peMS8cnlOT6nL1Eoa42OI9AfZz1VwQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-user-agent-browser": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.226.0.tgz",
      "integrity": "sha512-PhBIu2h6sPJPcv2I7ELfFizdl5pNiL4LfxrasMCYXQkJvVnoXztHA1x+CQbXIdtZOIlpjC+6BjDcE0uhnpvfcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-user-agent-node": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.226.0.tgz",
      "integrity": "sha512-othPc5Dz/pkYkxH+nZPhc1Al0HndQT8zHD4e9h+EZ+8lkd8n+IsnLfTS/mSJWrfiC6UlNRVw55cItstmJyMe/A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "aws-crt": ">=1.0.0"
      },
      "peerDependenciesMeta": {
        "aws-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/credential-providers/node_modules/@aws-sdk/util-utf8-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
      "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/eventstream-codec": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-codec/-/eventstream-codec-3.201.0.tgz",
      "integrity": "sha512-lz0FFzOMXvVdy47GnRk+niK+L7MxUZITvK7UUOL6u++JB+54jS+EsD9iLSNhM5qoR9vCiFjabBhkPz9Ml6bdmw==",
      "dependencies": {
        "@aws-crypto/crc32": "2.0.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/eventstream-serde-browser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-browser/-/eventstream-serde-browser-3.201.0.tgz",
      "integrity": "sha512-3/rZRBTxikj1Uyo8NDdaXey9zy7Xck/rKjykpBMbUYr4lnvXZDGQ0ie4/EMz+k5UbRsZgP46KdJo2ThgwTBvdw==",
      "dependencies": {
        "@aws-sdk/eventstream-serde-universal": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/eventstream-serde-config-resolver": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-config-resolver/-/eventstream-serde-config-resolver-3.201.0.tgz",
      "integrity": "sha512-dUpqO5yX1TdAShIuyBuWMiW7DWj9adtoeAzFvqPyQMXRFTPDQcggSelfoaXGcvUQUfcNZDUbCoigU23f+xmk6Q==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/eventstream-serde-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-node/-/eventstream-serde-node-3.201.0.tgz",
      "integrity": "sha512-h7YYPKrPIRjsAq8PnpkAmmwnz2UofHr98BCFtw/eAIFVLZ8lzQbi1kI+dAmwPSlY1L59tgXakmJ6cGvtsDdG5w==",
      "dependencies": {
        "@aws-sdk/eventstream-serde-universal": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/eventstream-serde-universal": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-universal/-/eventstream-serde-universal-3.201.0.tgz",
      "integrity": "sha512-Iq7sofa2Ns/ToseL8/m0PwIO5PHY800K4fi3i+6P1JA0bpZxmvkA/bfn+WCLvcB7sNluasqETHNxGs6DgNteIA==",
      "dependencies": {
        "@aws-sdk/eventstream-codec": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/fetch-http-handler": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.204.0.tgz",
      "integrity": "sha512-TfIhWYQ4CTjrD+FSuBcKMSVrqq8GCwqCfUyalWmSKo4JIFhN5OxUnOFb1/ecE/TJX+YgZ65w4qhVJVHHmh229Q==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/querystring-builder": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/hash-blob-browser": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-blob-browser/-/hash-blob-browser-3.204.0.tgz",
      "integrity": "sha512-Et0Nic7jnrYtqQt97JMPGkKJ3CFaulW70vFElDypV+TURsuxelweANQfrHsurk+xvHLHakMG5glAVHgyONtXZg==",
      "dependencies": {
        "@aws-sdk/chunked-blob-reader": "3.188.0",
        "@aws-sdk/chunked-blob-reader-native": "3.204.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/hash-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.201.0.tgz",
      "integrity": "sha512-WJsMZg5/TMoWnLM+0NuwLwFzHsi89Bi9J1Dt7JdJHXFLoEZV54FEz1PK/Sq5NOldhVljpXQwWOB2dHA2wxFztg==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/hash-stream-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-stream-node/-/hash-stream-node-3.201.0.tgz",
      "integrity": "sha512-nagsIlflHlFNswa6XQfpH7/G0OkKu8t2BhZ5NnNzPCx56kcY2asztwBTEeRJEGu8FaaHhUXbVuWi746AK6PHSQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/invalid-dependency": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.201.0.tgz",
      "integrity": "sha512-f/zgntOfIozNyKSaG9dvHjjBaR3y20kYNswMYkSuCM2NIT5LpyHiiq5I11TwaocatUFcDztWpcsv7vHpIgI5Ig==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/is-array-buffer": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/is-array-buffer/-/is-array-buffer-3.201.0.tgz",
      "integrity": "sha512-UPez5qLh3dNgt0DYnPD/q0mVJY84rA17QE26hVNOW3fAji8W2wrwrxdacWOxyXvlxWsVRcKmr+lay1MDqpAMfg==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/md5-js": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/md5-js/-/md5-js-3.204.0.tgz",
      "integrity": "sha512-RXiCvi58Xl2ja9bmd5iFVZyzhGVzBdlLC7uu8Ug9IbF++6muBJ2WdjMkhoMsi5GXqs6238rX3rRt3dLVGKEIqA==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/middleware-bucket-endpoint": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-bucket-endpoint/-/middleware-bucket-endpoint-3.201.0.tgz",
      "integrity": "sha512-ZZp3YwkEaPqrdL46WzYOMWdBixaVDG0crCdoyBNw/3cI+4bFcsgFp369mqDDmRj3cuJKV4QNSRjlr2ElTz65dQ==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-arn-parser": "3.201.0",
        "@aws-sdk/util-config-provider": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-content-length": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.201.0.tgz",
      "integrity": "sha512-p4G9AtdrKO8A3Z4RyZiy0isEYwuge7bQRBS7UzcGkcIOhJONq2pcM+gRZYz+NWvfYYNWUg5uODsFQfU8342yKg==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-endpoint": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.201.0.tgz",
      "integrity": "sha512-F3JlXo5GusbeZR956hA9VxmDxUeg77Xh6o8fveAE2+G4Bjcb1iq9jPNlw6A14vDj3oTKenv2LLnjL2OIfl6hRA==",
      "dependencies": {
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-config-provider": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-expect-continue": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-expect-continue/-/middleware-expect-continue-3.201.0.tgz",
      "integrity": "sha512-tpNLdHpwgWAvoMicUARld5MwQ2B6iKGW6vN1Z1si9LTJWGtu8ZXAWACuUDLxC+6A1mDkAcbEc7oy4ABjFldUqA==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-flexible-checksums": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-flexible-checksums/-/middleware-flexible-checksums-3.201.0.tgz",
      "integrity": "sha512-InmDcMeaBu1QQ9oS+85eq+hJWTZjYUe9QK2f6S035Tka9FBee4kI8eU61ImNit5FsFsw+POcVGmjYukeXsB4QA==",
      "dependencies": {
        "@aws-crypto/crc32": "2.0.0",
        "@aws-crypto/crc32c": "2.0.0",
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-host-header": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.201.0.tgz",
      "integrity": "sha512-7KNzdV7nFcKAoahvgGAlzsOq9FFDsU5h3w2iPtVdJhz6ZRDH/2v6WFeUCji+UNZip36gFfMPivoO8Y5smb5r/A==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-location-constraint": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-location-constraint/-/middleware-location-constraint-3.201.0.tgz",
      "integrity": "sha512-3QL6rM/7Qw0rIqRRI7hQJ6YupR1EXbyhrGQC5nMoZSZ/dQkGkYQLQJmwQDc4yadkJEGE8E1k2yQN0dF65PnJDA==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-logger": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.201.0.tgz",
      "integrity": "sha512-kYLsa9x3oUJxYU7V5KOO50Kl7b0kk+I4ltkrdarLvvXcVI7ZXmWHzHLT2dkUhj8S0ceVdi0FYHVPJ3GoE8re4A==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-recursion-detection": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.201.0.tgz",
      "integrity": "sha512-NGOr+n559ZcJLdFoJR8LNGdrOJFIp2BTuWEDYeicNdNb0bETTXrkzcfT1BRhV9CWqCDmjFvjdrzbhS0cw/UUGA==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-retry": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.201.0.tgz",
      "integrity": "sha512-4jQjSKCpSc4oB1X9nNq4FbIAwQrr+mvmUSmg/oe2Llf42Ak1G9gg3rNTtQdfzA/wNMlL4ZFfF5Br+uz06e1hnQ==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/service-error-classification": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-sdk-s3": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-s3/-/middleware-sdk-s3-3.201.0.tgz",
      "integrity": "sha512-IZGFWevHMQnyDnJTK2MponaSuFbHkj7z7MYX964hC0qoJEfED+rYPYIhUIPjZm5RiQq34MDQPWHLkNQLf9HnPg==",
      "dependencies": {
        "@aws-sdk/middleware-bucket-endpoint": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-arn-parser": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-sdk-sts": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.201.0.tgz",
      "integrity": "sha512-clZuXcoN0mAP4JH5C6pW5+0tdF25+fpFJqE7GNRjjH/NYNk6ImVI0Kq2espEWwVBuaS0/chTDK3b+pK8YOWdhw==",
      "dependencies": {
        "@aws-sdk/middleware-signing": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-serde": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.201.0.tgz",
      "integrity": "sha512-Z7AzIuqEDvsZmp80zeT1oYxsoB8uQZby20Z8kF6/vNoq3sIzaGf/wHeNn0p+Vgo2auGSbZcVUZKoDptQLSLwIQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-signing": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.201.0.tgz",
      "integrity": "sha512-08ri5+mB28tva9RjVIXFcUP5lRTx+Pj8C2HYqF2GL5H3uAo+h3RQ++fEG1uwUMLf7tCEFivcw6SHA1KmCnB7+w==",
      "dependencies": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-ssec": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-ssec/-/middleware-ssec-3.201.0.tgz",
      "integrity": "sha512-o1OUjVhtXeFbNyNijw4NPu/2xcA2SqqGNg0e5TP0j4HKfZ1S/QVKVCenx+9dlwlElW0tAQxL4bsNGNWOar3FTA==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-stack": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.201.0.tgz",
      "integrity": "sha512-lqHYSBP5FBxzA5w5XiYYYpfXabFzleXonqRkqZts1tapNJ4sOd+itiKG8JoNP7LDOwJ8qxNW/a33/gQeh3wkwQ==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-user-agent": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.201.0.tgz",
      "integrity": "sha512-/rYZ93WN1gDJudXis/0382CEoTqRa4qZJA608u2EPWs5aiMocUrm7pjH5XvKm2OYX8K/lyaMSBvL2OTIMzXGaQ==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/node-config-provider": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.201.0.tgz",
      "integrity": "sha512-JO0K2qPTYn+pPC7g8rWr1oueg9CqGCkYbINuAuz79vjToOLUQnZT9GiFm7QADe6J6RT1oGEKRQabNaJnp8cFpQ==",
      "dependencies": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/node-http-handler": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.201.0.tgz",
      "integrity": "sha512-bWjXBd4WCiQcV4PwY+eFnlz9tZ4UiqfiJteav4MDt8YWkVlsVnR8RutmVSm3KZZjO2tJNSrla0ZWBebkNnI/Xg==",
      "dependencies": {
        "@aws-sdk/abort-controller": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/querystring-builder": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/property-provider": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.201.0.tgz",
      "integrity": "sha512-lVMP75VsYHIW04uYbkjA0I8Bb7b+aEj6PBBLdFoA22S0uCeJOD42OSr2Gtg2fToDGO7LQJw/K2D+LMCYKfZ3vQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/protocol-http": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.201.0.tgz",
      "integrity": "sha512-RdOc1elWFpj8MogxG87nkhtylw0a+OD7W8WFM+Gw4yJMkl7cwW42VIBFfb0+KCGZfIQltIeSLRvfe3WvVPyo7Q==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/querystring-builder": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.201.0.tgz",
      "integrity": "sha512-FgQnVHpYR19w/HmHEgWpykCn9tdogW0n45Ins6LBCo2aImDf9kBATD4xgN/F2rtogGuLGgu5LIIMHIOj1Tzs/w==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/querystring-parser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.201.0.tgz",
      "integrity": "sha512-vS9Ljbqrwi0sIKYxgyZYJUN1AcE291hvuqwty9etgD2w/26SbWiMhjIW/fXJUOZjUvGKkYCpbivJYSzAGAuWfQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/service-error-classification": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.201.0.tgz",
      "integrity": "sha512-Pfcfmurgq8UpM0rXco6FVblcruqN4Mo3TW8/yaXrbctWpmdNT/8v19fffQIIgk94TU8Vf/nPJ7E5DXL7MZr4Fw==",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.201.0.tgz",
      "integrity": "sha512-Pbxk0TXep0yI8MnK7Prly6JuBm5Me9AITav8/zPEgTZ3fMhXhQhhiuQcuTCI9GeosSzoiu8VvK53oPtBZZFnXQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/signature-v4": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.201.0.tgz",
      "integrity": "sha512-zEHoG1/hzJq169slggkPy1SN9YPWI78Bbe/MvHGYmCmQDspblu60JSBIbAatNqAxAmcWKc2HqpyGKjCkMG94ZA==",
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/signature-v4-multi-region": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4-multi-region/-/signature-v4-multi-region-3.201.0.tgz",
      "integrity": "sha512-5lVYYcWDwZd/q0mYPGn4zht08nIeeACYCM8HKYMwF7Qzcrne+RM0F4GU1ZWoId1pxjiX+xQSOUEeskx3A5wUtg==",
      "dependencies": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-arn-parser": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "@aws-sdk/signature-v4-crt": "^3.118.0"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/signature-v4-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/smithy-client": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.201.0.tgz",
      "integrity": "sha512-cL87Jgxczee8YFkWGWKQ2Ze0vjn4+eCa1kDvEYMCOQvNujTuFgatXLgije5a7nVkSnL9WLoIP7Y7fsBGrKfMnQ==",
      "dependencies": {
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/token-providers": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/token-providers/-/token-providers-3.226.0.tgz",
      "integrity": "sha512-3ouRt2i3ve8ivg54PxPhtOTcipzf6BoQsMw0EiO23yYKujhyeFH2IkxV4EYC687xFrUjheqJf8FWU/DD8EQ/ow==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso-oidc": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/token-providers/node_modules/@aws-sdk/property-provider": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
      "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/token-providers/node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
      "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/token-providers/node_modules/@aws-sdk/types": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
      "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/types": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.201.0.tgz",
      "integrity": "sha512-RCQj2pQyHD330Jd4c5CHJ87k2ZqC3Mmtl6nhwH1dy3vbnGUpc3q+3yinOKoTAY934kIa7ia32Y/2EjuyHxaj1A==",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/url-parser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.201.0.tgz",
      "integrity": "sha512-V15aqj0tj4Y79VpuIdHUvX4Nvn4hYPB0RAn/qg5CCComIl0doLOirAQtW1MOBOyctdRlD9Uv7d1QdPLzJZMHjQ==",
      "dependencies": {
        "@aws-sdk/querystring-parser": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-arn-parser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-arn-parser/-/util-arn-parser-3.201.0.tgz",
      "integrity": "sha512-FNZsr9ofEf3Ybglgj8ElhuXnHnSFCF1ctT/zGPwNc+7XTMROO36uPIxP22J/GTyMpf4Bx48rXs8JTFvu3P3hig==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-base64": {
      "version": "3.202.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.202.0.tgz",
      "integrity": "sha512-0QlvxCSU2CITeR/x87zls9ma+CkN3EXRGM3M5XnHWaneDI9K+O2uPpAbDfLh0SBJyO0AfIMn7Vh/BvnNNPEDpg==",
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-base64-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64-browser/-/util-base64-browser-3.188.0.tgz",
      "integrity": "sha512-qlH+5NZBLiyKziL335BEPedYxX6j+p7KFRWXvDQox9S+s+gLCayednpK+fteOhBenCcR9fUZOVuAPScy1I8qCg==",
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-base64-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64-node/-/util-base64-node-3.201.0.tgz",
      "integrity": "sha512-ydZqNpB3l5kiicInpPDExPb5xHI7uyVIa1vMupnuIrJ412iNb0F2+K8LlFynzw6fSJShVKnqFcWOYRA96z1iIw==",
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-body-length-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-browser/-/util-body-length-browser-3.188.0.tgz",
      "integrity": "sha512-8VpnwFWXhnZ/iRSl9mTf+VKOX9wDE8QtN4bj9pBfxwf90H1X7E8T6NkiZD3k+HubYf2J94e7DbeHs7fuCPW5Qg==",
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-body-length-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.201.0.tgz",
      "integrity": "sha512-q+gwQoLn/DOwirb2hgZJeEwo1D3vLhoD6FfSV42Ecfvtb4jHnWReWMHguujfCubuDgZCrMEvYQzuocS75HHsbA==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-buffer-from": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.201.0.tgz",
      "integrity": "sha512-s6Wjltd9vU+vR3n0pqSPmNDcrrkrVTdV4t7x2zz3nDsFKTI77iVNafDmuaUlOA/bIlpjCJqaWecoVrZmEKeR7A==",
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-config-provider": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.201.0.tgz",
      "integrity": "sha512-cCRJlnRRP8vrLJomzJRBIyiyohsjJKmnIaQ9t0tAhGCywZbyjx6TlpYRZYfVWo+MwdF1Pi8ZScTrFPW0JuBOIQ==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-defaults-mode-browser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.201.0.tgz",
      "integrity": "sha512-skRMAM+xrV/sDvvtHC81ExEKQEiZFaRrRdUT39fBX1SpGnFTo2wpv7XK+rAW2XopGgnLPytXLQD97Kub79o4zA==",
      "dependencies": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/util-defaults-mode-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.201.0.tgz",
      "integrity": "sha512-9N5LXRhxigbkbEcjQ4nNXHuQxp0VFlbc2/5wbcuPjIKX/OROiQI4mYQ6nuSKk7eku5sNFb9FtEHeD/RZo8od6Q==",
      "dependencies": {
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/credential-provider-imds": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/util-endpoints": {
      "version": "3.202.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.202.0.tgz",
      "integrity": "sha512-sNees5uDp7nfEbvzaA1DAHqoEvEb9ZOkdNH5gcj/FMBETbr00YtsuXsTZogTHQsX/otRTiudZBE3iH7R4SLSAQ==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-hex-encoding": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-hex-encoding/-/util-hex-encoding-3.201.0.tgz",
      "integrity": "sha512-7t1vR1pVxKx0motd3X9rI3m/xNp78p3sHtP5yo4NP4ARpxyJ0fokBomY8ScaH2D/B+U5o9ARxldJUdMqyBlJcA==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-locate-window": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-locate-window/-/util-locate-window-3.201.0.tgz",
      "integrity": "sha512-hPJgifWh/rADabLAk1C9xXA2B3O4NUmbU58KgBRgC1HksiiHGFVZObB5fkBH8US/XV2jwORkpSf4OhretXQuKg==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-middleware": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.201.0.tgz",
      "integrity": "sha512-iAitcEZo17IyKn4ku1IBgtomr25esu5OuSRjw5Or4bNOeqXB0w50cItf/9qft8LIhbvBEAUtNAYXvqNzvhTZdQ==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-stream-browser": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-stream-browser/-/util-stream-browser-3.204.0.tgz",
      "integrity": "sha512-LH+Th/Oww6icUvqVbL5Y+R4mUGUuwLRWpiOJnK8/Ufyw7JMEvHZOGXPIAtXmEB1t+0gTVVDCP0Z0y6ItINlGtA==",
      "dependencies": {
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-stream-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-stream-node/-/util-stream-node-3.201.0.tgz",
      "integrity": "sha512-RWU+ZJHKL4lYZBeNIpHo5EuNaYRDkJeytP8cbBQn+wuzDz19mGF2uikK+JaQdNd5HG9lovDP66SJ8gJ0WBnwNw==",
      "dependencies": {
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-uri-escape": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-uri-escape/-/util-uri-escape-3.201.0.tgz",
      "integrity": "sha512-TeTWbGx4LU2c5rx0obHeDFeO9HvwYwQtMh1yniBz00pQb6Qt6YVOETVQikRZ+XRQwEyCg/dA375UplIpiy54mA==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-user-agent-browser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.201.0.tgz",
      "integrity": "sha512-iL2gyz7GuUVtZcMZpqvfxdFrl9hc28qpagymmJ/w2yhN86YNPHdK8Sx1Yo6VxNGVDCCWGb7tHXf7VP+U4Yv/Lg==",
      "dependencies": {
        "@aws-sdk/types": "3.201.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-user-agent-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.201.0.tgz",
      "integrity": "sha512-6lhhvwB3AZSISnYQpDGdlyTrzfYK2P9QYjy7vZEBRd9TSOaggiFICXe03ZvZfVOSeg0EInlMKn1fIHzPUHRuHQ==",
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "aws-crt": ">=1.0.0"
      },
      "peerDependenciesMeta": {
        "aws-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/util-utf8-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.188.0.tgz",
      "integrity": "sha512-jt627x0+jE+Ydr9NwkFstg3cUvgWh56qdaqAMDsqgRlKD21md/6G226z/Qxl7lb1VEW2LlmCx43ai/37Qwcj2Q==",
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-utf8-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.201.0.tgz",
      "integrity": "sha512-A+bJFR/1rHYOJg137E69L1sX0I+LH+xf9ZjMXG9BVO0hSo7yDPoJVpHrzTJyOc3tuRITjIGBv9Qi4TKcoOSi1A==",
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-waiter": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-waiter/-/util-waiter-3.201.0.tgz",
      "integrity": "sha512-NE8+BkPDXq86oyVr9EKN1s+iN8GID8mhj6DbtEZKZES3fJ36xH7MldRylgCewgv1Qpd1W00M4c/mVvUx3zp7sg==",
      "dependencies": {
        "@aws-sdk/abort-controller": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/xml-builder": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/xml-builder/-/xml-builder-3.201.0.tgz",
      "integrity": "sha512-brRdB1wwMgjWEnOQsv7zSUhIQuh7DEicrfslAqHop4S4FtSI3GQAShpQqgOpMTNFYcpaWKmE/Y1MJmNY7xLCnw==",
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@discordjs/builders": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@discordjs/builders/-/builders-0.13.0.tgz",
      "integrity": "sha512-4L9y26KRNNU8Y7J78SRUN1Uhava9D8jfit/YqEaKi8gQRc7PdqKqk2poybo6RXaiyt/BgKYPfcjxT7WvzGfYCA==",
      "dependencies": {
        "@sapphire/shapeshift": "^2.0.0",
        "@sindresorhus/is": "^4.6.0",
        "discord-api-types": "^0.31.1",
        "fast-deep-equal": "^3.1.3",
        "ts-mixer": "^6.0.1",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=16.9.0"
      }
    },
    "node_modules/@discordjs/collection": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@discordjs/collection/-/collection-0.4.0.tgz",
      "integrity": "sha512-zmjq+l/rV35kE6zRrwe8BHqV78JvIh2ybJeZavBi5NySjWXqN3hmmAKg7kYMMXSeiWtSsMoZ/+MQi0DiQWy2lw==",
      "engines": {
        "node": ">=16.0.0",
        "npm": ">=7.0.0"
      }
    },
    "node_modules/@discordjs/rest": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@discordjs/rest/-/rest-0.4.1.tgz",
      "integrity": "sha512-rtWy+AIfNlfjGkAgA2TJLASdqli07aTNQceVGT6RQQiQaEqV0nsfBO4WtDlDzk7PmO3w+InP3dpwEolJI5jz0A==",
      "dependencies": {
        "@discordjs/collection": "^0.7.0-dev",
        "@sapphire/async-queue": "^1.3.1",
        "@sapphire/snowflake": "^3.2.1",
        "@types/node-fetch": "^2.6.1",
        "discord-api-types": "^0.29.0",
        "form-data": "^4.0.0",
        "node-fetch": "^2.6.7",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=16.9.0"
      }
    },
    "node_modules/@discordjs/rest/node_modules/@discordjs/collection": {
      "version": "0.7.0-dev.1650672508-3617093",
      "resolved": "https://registry.npmjs.org/@discordjs/collection/-/collection-0.7.0-dev.1650672508-3617093.tgz",
      "integrity": "sha512-Got8gPiFFEwY0tJo6hK/ZGvg8LFEYMyopchL/l5WjvN5YXDSKqlcSfWk3SqA9F8Eb2ZloauUoXY2B3uMMJUUBA==",
      "engines": {
        "node": ">=16.9.0"
      }
    },
    "node_modules/@discordjs/rest/node_modules/discord-api-types": {
      "version": "0.29.0",
      "resolved": "https://registry.npmjs.org/discord-api-types/-/discord-api-types-0.29.0.tgz",
      "integrity": "sha512-Ekq1ICNpOTVajXKZguNFrsDeTmam+ZeA38txsNLZnANdXUjU6QBPIZLUQTC6MzigFGb0Tt8vk4xLnXmzv0shNg=="
    },
    "node_modules/@eslint/eslintrc": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.2.2.tgz",
      "integrity": "sha512-lTVWHs7O2hjBFZunXTZYnYqtB9GakA1lnxIf+gKq2nY5gxkkNi/lQvveW6t8gFdOHTg6nG50Xs95PrLqVpcaLg==",
      "dev": true,
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.3.1",
        "globals": "^13.9.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.0.4",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.9.5",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.9.5.tgz",
      "integrity": "sha512-ObyMyWxZiCu/yTisA7uzx81s40xR2fD5Cg/2Kq7G02ajkNubJf6BopgDTmDyc3U7sXpNKM8cYOw7s7Tyr+DnCw==",
      "dev": true,
      "dependencies": {
        "@humanwhocodes/object-schema": "^1.2.1",
        "debug": "^4.1.1",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
      "integrity": "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
      "dev": true
    },
    "node_modules/@sapphire/async-queue": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/@sapphire/async-queue/-/async-queue-1.3.1.tgz",
      "integrity": "sha512-FFTlPOWZX1kDj9xCAsRzH5xEJfawg1lNoYAA+ecOWJMHOfiZYb1uXOI3ne9U4UILSEPwfE68p3T9wUHwIQfR0g==",
      "engines": {
        "node": ">=v14.0.0",
        "npm": ">=7.0.0"
      }
    },
    "node_modules/@sapphire/shapeshift": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@sapphire/shapeshift/-/shapeshift-2.1.0.tgz",
      "integrity": "sha512-Z1ISLP9pNI3jpKJxx82xtDpEsfomhJ3iPqcKdYLjAHmQP2X5yqQF6phA0Wd+MmdXp081wepOiT59XEN0xdTVvQ==",
      "engines": {
        "node": ">=v15.0.0",
        "npm": ">=7.0.0"
      }
    },
    "node_modules/@sapphire/snowflake": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/@sapphire/snowflake/-/snowflake-3.2.2.tgz",
      "integrity": "sha512-ula2O0kpSZtX9rKXNeQMrHwNd7E4jPDJYUXmEGTFdMRfyfMw+FPyh04oKMjAiDuOi64bYgVkOV3MjK+loImFhQ==",
      "engines": {
        "node": ">=v14.0.0",
        "npm": ">=7.0.0"
      }
    },
    "node_modules/@sindresorhus/is": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
      "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/is?sponsor=1"
      }
    },
    "node_modules/@types/debug": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.7.tgz",
      "integrity": "sha512-9AonUzyTjXXhEOa0DnqpzZi6VHlqKMswga9EXjpXnnqxwLtdvPPtlO8evrI5D9S6asFRCQ6v+wpiUKbw+vKqyg==",
      "dependencies": {
        "@types/ms": "*"
      }
    },
    "node_modules/@types/ms": {
      "version": "0.7.31",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-0.7.31.tgz",
      "integrity": "sha512-iiUgKzV9AuaEkZqkOLDIvlQiL6ltuZd9tGcW3gwpnX8JbuiuhFlEGmmFXEXkN50Cvq7Os88IY2v0dkDqXYWVgA=="
    },
    "node_modules/@types/node": {
      "version": "17.0.26",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-17.0.26.tgz",
      "integrity": "sha512-z/FG/6DUO7pnze3AE3TBGIjGGKkvCcGcWINe1C7cADY8hKLJPDYpzsNE37uExQ4md5RFtTCvg+M8Mu1Enyeg2A=="
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.1.tgz",
      "integrity": "sha512-oMqjURCaxoSIsHSr1E47QHzbmzNR5rK8McHuNb11BOM9cHcIK3Avy0s/b2JlXHoQGTYS3NsvWzV1M0iK7l0wbA==",
      "dependencies": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "node_modules/@types/node-fetch/node_modules/form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@types/validator": {
      "version": "13.7.2",
      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.7.2.tgz",
      "integrity": "sha512-KFcchQ3h0OPQgFirBRPZr5F/sVjxZsOrQHedj3zi8AH3Zv/hOLx2OLR4hxR5HcfoU+33n69ZuOfzthKVdMoTiw=="
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/@types/ws": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.3.tgz",
      "integrity": "sha512-6YOoWjruKj1uLf3INHH7D3qTXwFfEsg1kf3c0uDdSBJwfa/llkwIjrAGV7j7mVgGNbzTQ3HiHKKDXl6bJPD97w==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/abs": {
      "version": "1.3.14",
      "resolved": "https://registry.npmjs.org/abs/-/abs-1.3.14.tgz",
      "integrity": "sha512-PrS26IzwKLWwuURpiKl8wRmJ2KdR/azaVrLEBWG/TALwT20Y7qjtYp1qcMLHA4206hBHY5phv3w4pjf9NPv4Vw==",
      "dependencies": {
        "ul": "^5.0.0"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz",
      "integrity": "sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/app-root-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/app-root-path/-/app-root-path-3.0.0.tgz",
      "integrity": "sha512-qMcx+Gy2UZynHjOHOIXPNvpf+9cjvk3cWrBBK7zg4gH9+clobJRb9NGzcT7mQTcV/6Gm/1WelUtqxVXnNlrwcw==",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw=="
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA=="
    },
    "node_modules/axios": {
      "version": "0.27.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.27.2.tgz",
      "integrity": "sha512-t+yRIyySRTp/wua5xEr+z1q60QmLq8ABsS5O9Me1AsE5dfKqgnCFzwiCZZ/cGNd1lq4/7akDWMxdhVlucjmnOQ==",
      "dependencies": {
        "follow-redirects": "^1.14.9",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bcrypt-pbkdf/node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg=="
    },
    "node_modules/bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "node_modules/borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bowser": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/bowser/-/bowser-2.11.0.tgz",
      "integrity": "sha512-AlcaJBi/pqqJBIQ8U9Mcpc9i8Aqxn88Skv5d+xBX006BY5u8N3mGLHa5Lgppa7L/HfwgwLgZ6NYs+Ag6uUmJRA=="
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/bson": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.0.tgz",
      "integrity": "sha512-VrlEE4vuiO1WTpfof4VmaVolCVYkYTgB9iWgYNOrVlnifpME/06fhFRmONgBhClD5pFC1t9ZWqFUQEQAzY43bA==",
      "dependencies": {
        "buffer": "^5.6.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "node_modules/buffer-writer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/buffer-writer/-/buffer-writer-2.0.0.tgz",
      "integrity": "sha512-a7ZpuTZU1TRtnwyCNW3I5dc0wWNC3VR9S++Ewyk2HHZdrO3CQJqSpd+95Us590V6AL7JqUAH2IwZ/398PmNFgw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/busboy": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-0.2.14.tgz",
      "integrity": "sha512-InWFDomvlkEj+xWLBfU3AvnbVYqeTWmQopiW0tWWEy5yehYm2YkGEc59sUmw/4ty5Zj/b0WHGs1LgecuBSBGrg==",
      "dependencies": {
        "dicer": "0.2.5",
        "readable-stream": "1.1.x"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/cache-content-type": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/cache-content-type/-/cache-content-type-1.0.1.tgz",
      "integrity": "sha512-IKufZ1o4Ut42YUrZSo8+qnMTrFuKkvyoLXUywKz9GJ5BrhOFGhLdkx9sG4KAnVvbY6kEcSFjLQul+DVmBm2bgA==",
      "dependencies": {
        "mime-types": "^2.1.18",
        "ylru": "^1.2.0"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE="
    },
    "node_modules/capture-stack-trace": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/capture-stack-trace/-/capture-stack-trace-1.0.1.tgz",
      "integrity": "sha512-mYQLZnx5Qt1JgB1WEiMCf2647plpGeQ2NMR/5L0HNZzGQo4fuSPnK+wjfPnKZV0aiJDgzmWqqkV/g7JD+DW0qw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw=="
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/co-body": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/co-body/-/co-body-6.1.0.tgz",
      "integrity": "sha512-m7pOT6CdLN7FuXUcpuz/8lfQ/L77x8SchHCF4G0RBTJO20Wzmhn5Sp4/5WsKy8OSpifBSUrmg83qEqaDHdyFuQ==",
      "dependencies": {
        "inflation": "^2.0.0",
        "qs": "^6.5.2",
        "raw-body": "^2.3.3",
        "type-is": "^1.6.16"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
      "dev": true
    },
    "node_modules/concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "engines": [
        "node >= 0.8"
      ],
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/concat-stream/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "node_modules/concat-stream/node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/concat-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/concat-stream/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookies": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/cookies/-/cookies-0.8.0.tgz",
      "integrity": "sha512-8aPsApQfebXnuI+537McwYsDtjVxGm8gTIzQI3FDW6t5t/DAhERxtnbEPN/8RX+uZthoz4eCOgloXaE5cYyNow==",
      "dependencies": {
        "depd": "~2.0.0",
        "keygrip": "~1.1.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/copy-to": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/copy-to/-/copy-to-2.0.1.tgz",
      "integrity": "sha1-JoD7uAaKSNCGVrYJgJK9r8kG9KU="
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ=="
    },
    "node_modules/crc": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/crc/-/crc-3.8.0.tgz",
      "integrity": "sha512-iX3mfgcTMIq3ZKLIsVFAbv7+Mc10kxabAGQb8HvjA1o3T1PIYprbakQ65d3I+2HGHt6nSKkM9PYjgoJO2KcFBQ==",
      "dependencies": {
        "buffer": "^5.1.0"
      }
    },
    "node_modules/create-error-class": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/create-error-class/-/create-error-class-3.0.2.tgz",
      "integrity": "sha1-Br56vvlHo/FKMP1hBnHUAbyot7Y=",
      "dependencies": {
        "capture-stack-trace": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cron-parser": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-3.5.0.tgz",
      "integrity": "sha512-wyVZtbRs6qDfFd8ap457w3XVntdvqcwBGxBoTvJQH9KGVKL/fB+h2k3C8AqiVxvUQKN1Ps/Ns46CNViOpVDhfQ==",
      "dependencies": {
        "is-nan": "^1.3.2",
        "luxon": "^1.26.0"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/date-format": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/date-format/-/date-format-4.0.9.tgz",
      "integrity": "sha512-+8J+BOUpSrlKLQLeF8xJJVTxS8QfRSuJgwxSVvslzgO3E6khbI0F5mMEPf5mTYhCCm4h99knYP6H3W9n3BQFrg==",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-equal": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-1.0.1.tgz",
      "integrity": "sha1-9dJgKStmDghO/0zbyfCK0yR0SLU="
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true
    },
    "node_modules/deffy": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/deffy/-/deffy-2.2.4.tgz",
      "integrity": "sha512-pLc9lsbsWjr6RxmJ2OLyvm+9l4j1yK69h+TML/gUit/t3vTijpkNGh8LioaJYTGO7F25m6HZndADcUOo2PsiUg==",
      "dependencies": {
        "typpy": "^2.0.0"
      }
    },
    "node_modules/define-properties": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.4.tgz",
      "integrity": "sha512-uckOqKcfaVvtBdsVkdPv3XjveQJsNQqmhXgRi8uhvWWuPYZCNlzT8qAyblUgNoXdHdjMTzAqeGjAoli8f+bzPA==",
      "dependencies": {
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o="
    },
    "node_modules/denque": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.0.1.tgz",
      "integrity": "sha512-tfiWc6BQLXNLpNiR5iGd0Ocu3P3VpxfzFiqubLgMfhfOw9WyvgJBd46CClNn9k3qfbjvT//0cf7AlYRX/OslMQ==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dicer": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.2.5.tgz",
      "integrity": "sha1-WZbAhrszIYyBLAkL3cCc0S+stw8=",
      "dependencies": {
        "readable-stream": "1.1.x",
        "streamsearch": "0.1.2"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/discord-api-types": {
      "version": "0.31.2",
      "resolved": "https://registry.npmjs.org/discord-api-types/-/discord-api-types-0.31.2.tgz",
      "integrity": "sha512-gpzXTvFVg7AjKVVJFH0oJGC0q0tO34iJGSHZNz9u3aqLxlD6LfxEs9wWVVikJqn9gra940oUTaPFizCkRDcEiA=="
    },
    "node_modules/discord.js": {
      "version": "13.6.0",
      "resolved": "https://registry.npmjs.org/discord.js/-/discord.js-13.6.0.tgz",
      "integrity": "sha512-tXNR8zgsEPxPBvGk3AQjJ9ljIIC6/LOPjzKwpwz8Y1Q2X66Vi3ZqFgRHYwnHKC0jC0F+l4LzxlhmOJsBZDNg9g==",
      "dependencies": {
        "@discordjs/builders": "^0.11.0",
        "@discordjs/collection": "^0.4.0",
        "@sapphire/async-queue": "^1.1.9",
        "@types/node-fetch": "^2.5.12",
        "@types/ws": "^8.2.2",
        "discord-api-types": "^0.26.0",
        "form-data": "^4.0.0",
        "node-fetch": "^2.6.1",
        "ws": "^8.4.0"
      },
      "engines": {
        "node": ">=16.6.0",
        "npm": ">=7.0.0"
      }
    },
    "node_modules/discord.js/node_modules/@discordjs/builders": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@discordjs/builders/-/builders-0.11.0.tgz",
      "integrity": "sha512-ZTB8yJdJKrKlq44dpWkNUrAtEJEq0gqpb7ASdv4vmq6/mZal5kOv312hQ56I/vxwMre+VIkoHquNUAfnTbiYtg==",
      "dependencies": {
        "@sindresorhus/is": "^4.2.0",
        "discord-api-types": "^0.26.0",
        "ts-mixer": "^6.0.0",
        "tslib": "^2.3.1",
        "zod": "^3.11.6"
      },
      "engines": {
        "node": ">=16.0.0",
        "npm": ">=7.0.0"
      }
    },
    "node_modules/discord.js/node_modules/discord-api-types": {
      "version": "0.26.1",
      "resolved": "https://registry.npmjs.org/discord-api-types/-/discord-api-types-0.26.1.tgz",
      "integrity": "sha512-T5PdMQ+Y1MEECYMV5wmyi9VEYPagEDEi4S0amgsszpWY0VB9JJ/hEvM6BgLhbdnKky4gfmZEXtEEtojN8ZKJQQ==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/dotenv": {
      "version": "16.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
      "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/dottie": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/dottie/-/dottie-2.0.2.tgz",
      "integrity": "sha512-fmrwR04lsniq/uSr8yikThDTrM7epXHBAAjH9TbeH3rEA8tdCO7mRzB9hdmdGyJCxF8KERo9CITcm3kGuoyMhg=="
    },
    "node_modules/duplexer2": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.4.tgz",
      "integrity": "sha1-ixLauHjA1p4+eJEFFmKjL8a93ME=",
      "dependencies": {
        "readable-stream": "^2.0.2"
      }
    },
    "node_modules/duplexer2/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "node_modules/duplexer2/node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/duplexer2/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/duplexer2/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/err": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/err/-/err-1.1.1.tgz",
      "integrity": "sha1-65KOLhGjFmSPeCgz0PlyWLpDwvg=",
      "dependencies": {
        "typpy": "^2.2.0"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.14.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.14.0.tgz",
      "integrity": "sha512-3/CE4aJX7LNEiE3i6FeodHmI/38GZtWCsAtsymScmzYapx8q1nVVb+eLcLSzATmCPXw5pT4TqVs1E0OmxAd9tw==",
      "dev": true,
      "dependencies": {
        "@eslint/eslintrc": "^1.2.2",
        "@humanwhocodes/config-array": "^0.9.2",
        "ajv": "^6.10.0",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.1.1",
        "eslint-utils": "^3.0.0",
        "eslint-visitor-keys": "^3.3.0",
        "espree": "^9.3.1",
        "esquery": "^1.4.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^6.0.1",
        "globals": "^13.6.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.0.4",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.1",
        "regexpp": "^3.2.0",
        "strip-ansi": "^6.0.1",
        "strip-json-comments": "^3.1.0",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.1.1.tgz",
      "integrity": "sha512-QKQM/UXpIiHcLqJ5AOyIW7XZmzjkzQXYE54n1++wb0u9V/abW3l9uQnxX8Z5Xd18xyKIMTUAyQ0k1e8pz6LUrw==",
      "dev": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/eslint-utils": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-3.0.0.tgz",
      "integrity": "sha512-uuQC43IGctw68pJA1RgbQS8/NP7rch6Cwd4j3ZBtgo4/8Flj4eGE7ZYSZRN3iq5pVUv6GPdW5Z1RFleo84uLDA==",
      "dev": true,
      "dependencies": {
        "eslint-visitor-keys": "^2.0.0"
      },
      "engines": {
        "node": "^10.0.0 || ^12.0.0 || >= 14.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      },
      "peerDependencies": {
        "eslint": ">=5"
      }
    },
    "node_modules/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
      "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.3.0.tgz",
      "integrity": "sha512-mQ+suqKJVyeuwGYHAdjMFqjCyfl8+Ldnxuyp3ldiMBFKkvytrXUZWaiPCEav8qDHKty44bD+qV1IP4T+w+xXRA==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/espree": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.3.1.tgz",
      "integrity": "sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.7.0",
        "acorn-jsx": "^5.3.1",
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/esquery": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.4.0.tgz",
      "integrity": "sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/exec-limiter": {
      "version": "3.2.13",
      "resolved": "https://registry.npmjs.org/exec-limiter/-/exec-limiter-3.2.13.tgz",
      "integrity": "sha512-86Ri699bwiHZVBzTzNj8gspqAhCPchg70zPVWIh3qzUOA1pUMcb272Em3LPk8AE0mS95B9yMJhtqF8vFJAn0dA==",
      "dependencies": {
        "limit-it": "^3.0.0",
        "typpy": "^2.1.0"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=",
      "engines": [
        "node >=0.6.0"
      ]
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
      "dev": true
    },
    "node_modules/fast-xml-parser": {
      "version": "4.0.11",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.0.11.tgz",
      "integrity": "sha512-4aUg3aNRR/WjQAcpceODG1C3x3lFANXRo8+1biqfieHmg9pyMt7qB4lQV/Ta6sJCTbA5vfD8fnA8S54JATiFUA==",
      "dependencies": {
        "strnum": "^1.0.5"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      },
      "funding": {
        "type": "paypal",
        "url": "https://paypal.me/naturalintelligence"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
      "integrity": "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
      "dev": true,
      "dependencies": {
        "flatted": "^3.1.0",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.2.5",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.2.5.tgz",
      "integrity": "sha512-WIWGi2L3DyTUvUrwRKgGi9TwxQMUEqPOPQBVi71R96jZXJdFskXEmf54BoZaS1kknGODoIGASGEzBUYdyMCBJg=="
    },
    "node_modules/follow-redirects": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.1.tgz",
      "integrity": "sha512-yLAMQs+k0b2m7cVxpS1VKJVvoz7SS9Td1zss3XRwXj+ZDH00RJgnuLx7E44wx02kQLrdM3aOOy+FpzS7+8OizA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "dev": true
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/function.name": {
      "version": "1.0.13",
      "resolved": "https://registry.npmjs.org/function.name/-/function.name-1.0.13.tgz",
      "integrity": "sha512-mVrqdoy5npWZyoXl4DxCeuVF6delDcQjVS9aPdvLYlBxtMTZDR2B5GVEQEoM1jJyspCqg3C0v4ABkLE7tp9xFA==",
      "dependencies": {
        "noop6": "^1.0.1"
      }
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
      "dev": true
    },
    "node_modules/generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "dependencies": {
        "is-property": "^1.0.2"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/git-package-json": {
      "version": "1.4.10",
      "resolved": "https://registry.npmjs.org/git-package-json/-/git-package-json-1.4.10.tgz",
      "integrity": "sha512-DRAcvbzd2SxGK7w8OgYfvKqhFliT5keX0lmSmVdgScgf1kkl5tbbo7Pam6uYoCa1liOiipKxQZG8quCtGWl/fA==",
      "dependencies": {
        "deffy": "^2.2.1",
        "err": "^1.1.1",
        "gry": "^5.0.0",
        "normalize-package-data": "^2.3.5",
        "oargv": "^3.4.1",
        "one-by-one": "^3.1.0",
        "r-json": "^1.2.1",
        "r-package-json": "^1.0.0",
        "tmp": "0.0.28"
      }
    },
    "node_modules/git-source": {
      "version": "1.1.10",
      "resolved": "https://registry.npmjs.org/git-source/-/git-source-1.1.10.tgz",
      "integrity": "sha512-XZZ7ZgnLL35oLgM/xjnLYgtlKlxJG0FohC1kWDvGkU7s1VKGXK0pFF/g1itQEwQ3D+uTQzBnzPi8XbqOv7Wc1Q==",
      "dependencies": {
        "git-url-parse": "^5.0.1"
      }
    },
    "node_modules/git-up": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/git-up/-/git-up-1.2.1.tgz",
      "integrity": "sha1-JkSAoAax2EJhrB/gmjpRacV+oZ0=",
      "dependencies": {
        "is-ssh": "^1.0.0",
        "parse-url": "^1.0.0"
      }
    },
    "node_modules/git-url-parse": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/git-url-parse/-/git-url-parse-5.0.1.tgz",
      "integrity": "sha1-/j15xnRq4FBIz6UIyB553du6OEM=",
      "dependencies": {
        "git-up": "^1.0.0"
      }
    },
    "node_modules/glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
      "dev": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "13.13.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.13.0.tgz",
      "integrity": "sha512-EQ7Q18AJlPwp3vUDL4mKA0KXrXyNIQyWon6T6XQiBQF0XHvRsiCSrWmmeATpUzdJN2HhWZU6Pdl0a9zdep5p6A==",
      "dev": true,
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/got": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-5.6.0.tgz",
      "integrity": "sha1-ux1+4WO3gIK7yOuDbz85UATqb78=",
      "dependencies": {
        "create-error-class": "^3.0.1",
        "duplexer2": "^0.1.4",
        "is-plain-obj": "^1.0.0",
        "is-redirect": "^1.0.0",
        "is-retry-allowed": "^1.0.0",
        "is-stream": "^1.0.0",
        "lowercase-keys": "^1.0.0",
        "node-status-codes": "^1.0.0",
        "object-assign": "^4.0.1",
        "parse-json": "^2.1.0",
        "pinkie-promise": "^2.0.0",
        "read-all-stream": "^3.0.0",
        "readable-stream": "^2.0.5",
        "timed-out": "^2.0.0",
        "unzip-response": "^1.0.0",
        "url-parse-lax": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/got/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "node_modules/got/node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/got/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/got/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.10",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
      "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA=="
    },
    "node_modules/gry": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/gry/-/gry-5.0.8.tgz",
      "integrity": "sha512-meq9ZjYVpLzZh3ojhTg7IMad9grGsx6rUUKHLqPnhLXzJkRQvEL2U3tQpS5/WentYTtHtxkT3Ew/mb10D6F6/g==",
      "dependencies": {
        "abs": "^1.2.1",
        "exec-limiter": "^3.0.0",
        "one-by-one": "^3.0.0",
        "ul": "^5.0.0"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz",
      "integrity": "sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==",
      "dependencies": {
        "get-intrinsic": "^1.1.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.0.tgz",
      "integrity": "sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==",
      "dependencies": {
        "has-symbols": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw=="
    },
    "node_modules/http-assert": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/http-assert/-/http-assert-1.5.0.tgz",
      "integrity": "sha512-uPpH7OKX4H25hBmU6G1jWNaqJGpTXxey+YOUizJUAgu0AjLUeC8D73hTrhvDS5D+GJN1DN1+hhc/eF/wpxtp0w==",
      "dependencies": {
        "deep-equal": "~1.0.1",
        "http-errors": "~1.8.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/ignore": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
      "integrity": "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "dev": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflation": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/inflation/-/inflation-2.0.0.tgz",
      "integrity": "sha1-i0F+R8KPklpFEz2RTKH9OJEH8w8=",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/inflection": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/inflection/-/inflection-1.13.2.tgz",
      "integrity": "sha512-cmZlljCRTBFouT8UzMzrGcVEvkv6D/wBdcdKG7J1QH5cXjtU75Dm+P27v9EKu/Y43UYyCJd1WC4zLebRrC8NBw==",
      "engines": [
        "node >= 0.4.0"
      ]
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dev": true,
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0="
    },
    "node_modules/is-class-hotfix": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/is-class-hotfix/-/is-class-hotfix-0.0.6.tgz",
      "integrity": "sha512-0n+pzCC6ICtVr/WXnN2f03TK/3BfXY7me4cjCAqT8TYXEl0+JBRoqBo94JJHXcyDSLUeWbNX8Fvy5g5RJdAstQ=="
    },
    "node_modules/is-core-module": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.0.10.tgz",
      "integrity": "sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-nan": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/is-nan/-/is-nan-1.3.2.tgz",
      "integrity": "sha512-E+zBKpQ2t6MEo1VsonYmluk9NxGrbzpeeLC2xIViuO2EjU2xsXsBPwTr3Ykv9l08UYEVEdWeRZNouaZqF6RN0w==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz",
      "integrity": "sha1-caUMhCnfync8kqOQpKA7OfzVHT4=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="
    },
    "node_modules/is-redirect": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-redirect/-/is-redirect-1.0.0.tgz",
      "integrity": "sha1-HQPd7VO9jbDzDCbk+V02/HyH3CQ=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-retry-allowed": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/is-retry-allowed/-/is-retry-allowed-1.2.0.tgz",
      "integrity": "sha512-RUbUeKwvm3XG2VYamhJL1xFktgjvPzL0Hq8C+6yrWIswDy3BIXGqCxhxkc30N9jqK311gVU137K8Ei55/zVJRg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-ssh": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/is-ssh/-/is-ssh-1.3.3.tgz",
      "integrity": "sha512-NKzJmQzJfEEma3w5cJNcUMxoXfDjz0Zj0eyCalHn2E6VOwlzjZo0yuO2fcBSf8zhFuVCL/82/r5gRcoi6aEPVQ==",
      "dependencies": {
        "protocols": "^1.1.0"
      }
    },
    "node_modules/is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-type-of": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-type-of/-/is-type-of-1.2.1.tgz",
      "integrity": "sha512-uK0kyX9LZYhSDS7H2sVJQJop1UnWPWmo5RvR3q2kFH6AUHYs7sOrVg0b4nyBHw29kRRNFofYN/JbHZDlHiItTA==",
      "dependencies": {
        "core-util-is": "^1.0.2",
        "is-class-hotfix": "~0.0.6",
        "isstream": "~0.1.2"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "node_modules/isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "dev": true
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
    },
    "node_modules/iterate-object": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/iterate-object/-/iterate-object-1.3.4.tgz",
      "integrity": "sha512-4dG1D1x/7g8PwHS9aK6QV5V94+ZvyP4+d19qDv43EzImmrndysIl4prmJ1hWWIGCqrZHyaHBm6BSEWHOLnpoNw=="
    },
    "node_modules/js-base64": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/js-base64/-/js-base64-3.7.2.tgz",
      "integrity": "sha512-NnRs6dsyqUXejqk/yv2aiXlAvOs56sLkX6nUdeaNezI5LFFLlsZjOThmwnrcwh5ZZRwZlCMnVAY3CvhIhoVEKQ=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM="
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA=="
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
      "dev": true
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.0.tgz",
      "integrity": "sha512-rVBUGGwvqg130iwYu8k7lutHuDBFj1yGRdnlE44wEhxAmFBad1zcL66PdWC1raw3tIObY6XWhtv3VL04xQb/cg==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/keygrip": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/keygrip/-/keygrip-1.1.0.tgz",
      "integrity": "sha512-iYSchDJ+liQ8iwbSI2QqsQOvqv58eJCEanyJPJi+Khyu8smkcKSFUCbPwzFcL7YVtZ6eONjqRX/38caJ7QjRAQ==",
      "dependencies": {
        "tsscmp": "1.0.6"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/koa": {
      "version": "2.13.4",
      "resolved": "https://registry.npmjs.org/koa/-/koa-2.13.4.tgz",
      "integrity": "sha512-43zkIKubNbnrULWlHdN5h1g3SEKXOEzoAlRsHOTFpnlDu8JlAOZSMJBLULusuXRequboiwJcj5vtYXKB3k7+2g==",
      "dependencies": {
        "accepts": "^1.3.5",
        "cache-content-type": "^1.0.0",
        "content-disposition": "~0.5.2",
        "content-type": "^1.0.4",
        "cookies": "~0.8.0",
        "debug": "^4.3.2",
        "delegates": "^1.0.0",
        "depd": "^2.0.0",
        "destroy": "^1.0.4",
        "encodeurl": "^1.0.2",
        "escape-html": "^1.0.3",
        "fresh": "~0.5.2",
        "http-assert": "^1.3.0",
        "http-errors": "^1.6.3",
        "is-generator-function": "^1.0.7",
        "koa-compose": "^4.1.0",
        "koa-convert": "^2.0.0",
        "on-finished": "^2.3.0",
        "only": "~0.0.2",
        "parseurl": "^1.3.2",
        "statuses": "^1.5.0",
        "type-is": "^1.6.16",
        "vary": "^1.1.2"
      },
      "engines": {
        "node": "^4.8.4 || ^6.10.1 || ^7.10.1 || >= 8.1.4"
      }
    },
    "node_modules/koa-bodyparser": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/koa-bodyparser/-/koa-bodyparser-4.3.0.tgz",
      "integrity": "sha512-uyV8G29KAGwZc4q/0WUAjH+Tsmuv9ImfBUF2oZVyZtaeo0husInagyn/JH85xMSxM0hEk/mbCII5ubLDuqW/Rw==",
      "dependencies": {
        "co-body": "^6.0.0",
        "copy-to": "^2.0.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/koa-compose": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/koa-compose/-/koa-compose-4.1.0.tgz",
      "integrity": "sha512-8ODW8TrDuMYvXRwra/Kh7/rJo9BtOfPc6qO8eAfC80CnCvSjSl0bkRM24X6/XBBEyj0v1nRUQ1LyOy3dbqOWXw=="
    },
    "node_modules/koa-convert": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/koa-convert/-/koa-convert-2.0.0.tgz",
      "integrity": "sha512-asOvN6bFlSnxewce2e/DK3p4tltyfC4VM7ZwuTuepI7dEQVcvpyFuBcEARu1+Hxg8DIwytce2n7jrZtRlPrARA==",
      "dependencies": {
        "co": "^4.6.0",
        "koa-compose": "^4.1.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/koa-router": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/koa-router/-/koa-router-10.1.1.tgz",
      "integrity": "sha512-z/OzxVjf5NyuNO3t9nJpx7e1oR3FSBAauiwXtMQu4ppcnuNZzTaQ4p21P8A6r2Es8uJJM339oc4oVW+qX7SqnQ==",
      "dependencies": {
        "debug": "^4.1.1",
        "http-errors": "^1.7.3",
        "koa-compose": "^4.1.0",
        "methods": "^1.1.2",
        "path-to-regexp": "^6.1.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/koa-session": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/koa-session/-/koa-session-6.2.0.tgz",
      "integrity": "sha512-l2ZC6D1BnRkIXhWkRgpewdqKn38/9/2WScmxyShuN408TxX+J/gUzdzGBIvGZaRwmezOU819sNpGmfFGLeDckg==",
      "dependencies": {
        "crc": "^3.4.4",
        "debug": "^3.1.0",
        "is-type-of": "^1.0.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">=7.6"
      }
    },
    "node_modules/koa-session/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/koa-session/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/koa2-cors": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/koa2-cors/-/koa2-cors-2.0.6.tgz",
      "integrity": "sha512-JRCcSM4lamM+8kvKGDKlesYk2ASrmSTczDtGUnIadqMgnHU4Ct5Gw7Bxt3w3m6d6dy3WN0PU4oMP43HbddDEWg==",
      "engines": {
        "node": ">= 7.6.0"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/limit-it": {
      "version": "3.2.10",
      "resolved": "https://registry.npmjs.org/limit-it/-/limit-it-3.2.10.tgz",
      "integrity": "sha512-T0NK99pHnkimldr1WUqvbGV1oWDku/xC9J/OqzJFsV1jeOS6Bwl8W7vkeQIBqwiON9dTALws+rX/XPMQqWerDQ==",
      "dependencies": {
        "typpy": "^2.0.0"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "node_modules/log4js": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/log4js/-/log4js-6.4.6.tgz",
      "integrity": "sha512-1XMtRBZszmVZqPAOOWczH+Q94AI42mtNWjvjA5RduKTSWjEc56uOBbyM1CJnfN4Ym0wSd8cQ43zOojlSHgRDAw==",
      "dependencies": {
        "date-format": "^4.0.9",
        "debug": "^4.3.4",
        "flatted": "^3.2.5",
        "rfdc": "^1.3.0",
        "streamroller": "^3.0.8"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="
    },
    "node_modules/long-timeout": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/long-timeout/-/long-timeout-0.1.1.tgz",
      "integrity": "sha1-lyHXiLR+C8taJMLivuGg2lXatRQ="
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/luxon": {
      "version": "1.28.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-1.28.0.tgz",
      "integrity": "sha512-TfTiyvZhwBYM/7QdAVDh+7dBTBA29v4ik0Ce9zda3Mnf8on1S5KJI8P2jKFZ8+5C0jhmr0KwJEO/Wdpm0VeWJQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz",
      "integrity": "sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q=="
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/moment": {
      "version": "2.29.3",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.3.tgz",
      "integrity": "sha512-c6YRvhEo//6T2Jz/vVtYzqBzwvPT95JBQ+smCytzf7c50oMZRsR/a4w88aD34I+/QVSfnoAnSBFPJHItlOMJVw==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/moment-timezone": {
      "version": "0.5.34",
      "resolved": "https://registry.npmjs.org/moment-timezone/-/moment-timezone-0.5.34.tgz",
      "integrity": "sha512-3zAEHh2hKUs3EXLESx/wsgw6IQdusOT8Bxm3D9UrHPQR7zlMmzwybC8zHEM1tQ4LJwP7fcxrWr8tuBg05fFCbg==",
      "dependencies": {
        "moment": ">= 2.9.0"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mongodb": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.12.1.tgz",
      "integrity": "sha512-koT87tecZmxPKtxRQD8hCKfn+ockEL2xBiUvx3isQGI6mFmagWt4f4AyCE9J4sKepnLhMacoCTQQA6SLAI2L6w==",
      "dependencies": {
        "bson": "^4.7.0",
        "mongodb-connection-string-url": "^2.5.4",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=12.9.0"
      },
      "optionalDependencies": {
        "@aws-sdk/credential-providers": "^3.186.0",
        "saslprep": "^1.0.3"
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-uri": {
      "version": "0.9.7",
      "resolved": "https://registry.npmjs.org/mongodb-uri/-/mongodb-uri-0.9.7.tgz",
      "integrity": "sha1-D3ca0W9IOuZfQoeWlCjp+8SqYYE=",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/mongoose": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-6.8.0.tgz",
      "integrity": "sha512-zlUfjcLya3pLfLTxwyH5S9bZUolJWGKF2M7PEV0118jv4VWHR/krjb6LIWu1RPQN2rwYmnmjjzJLVhbhmHqSmg==",
      "dependencies": {
        "bson": "^4.7.0",
        "kareem": "2.5.0",
        "mongodb": "4.12.1",
        "mpath": "0.9.0",
        "mquery": "4.0.3",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-4.0.3.tgz",
      "integrity": "sha512-J5heI+P08I6VJ2Ky3+33IpCdAvlYGTSUjwTPxkAr8i8EoduPMBX2OY/wa3IKZIQl7MU4SbFk8ndgSKyB/cl1zA==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/multer": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.4.tgz",
      "integrity": "sha512-2wY2+xD4udX612aMqMcB8Ws2Voq6NIUPEtD1be6m411T4uDH/VtL9i//xvcyFlTVfRdaBsk7hV5tgrGQqhuBiw==",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^0.2.11",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.4",
        "object-assign": "^4.1.1",
        "on-finished": "^2.3.0",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/multiparty": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/multiparty/-/multiparty-4.2.3.tgz",
      "integrity": "sha512-Ak6EUJZuhGS8hJ3c2fY6UW5MbkGUPMBEGd13djUzoY/BHqV/gTuFWtC6IuVA7A2+v3yjBS6c4or50xhzTQZImQ==",
      "dependencies": {
        "http-errors": "~1.8.1",
        "safe-buffer": "5.2.1",
        "uid-safe": "2.1.5"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/mysql2": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-2.3.3.tgz",
      "integrity": "sha512-wxJUev6LgMSgACDkb/InIFxDprRa6T95+VEoR+xPvtngtccNH2dGjEB/fVZ8yg1gWv1510c9CvXuJHi5zUm0ZA==",
      "dependencies": {
        "denque": "^2.0.1",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.6.3",
        "long": "^4.0.0",
        "lru-cache": "^6.0.0",
        "named-placeholders": "^1.1.2",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/named-placeholders": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.2.tgz",
      "integrity": "sha512-wiFWqxoLL3PGVReSZpjLVxyJ1bRqe+KKJVbr4hGs1KWfTZTQyezHFBbuKj9hsizHyGV2ne7EMjHdxEGAybD5SA==",
      "dependencies": {
        "lru-cache": "^4.1.3"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/named-placeholders/node_modules/lru-cache": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
      "dependencies": {
        "pseudomap": "^1.0.2",
        "yallist": "^2.1.2"
      }
    },
    "node_modules/named-placeholders/node_modules/yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
      "dev": true
    },
    "node_modules/near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-lake-framework": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/near-lake-framework/-/near-lake-framework-1.0.4.tgz",
      "integrity": "sha512-OMHwDsD46ZqR6UjdaoIjUL01b9fIZ3klov2X3EDM9v/oinCdCoagjML3GJE1ZpbsBsT5WvxkeFFo6vqD83LjOw==",
      "dependencies": {
        "@aws-sdk/client-s3": "^3.32.0"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-schedule": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/node-schedule/-/node-schedule-2.1.0.tgz",
      "integrity": "sha512-nl4JTiZ7ZQDc97MmpTq9BQjYhq7gOtoh7SiPH069gBFBj0PzD8HI7zyFs6rzqL8Y5tTiEEYLxgtbx034YPrbyQ==",
      "dependencies": {
        "cron-parser": "^3.5.0",
        "long-timeout": "0.1.1",
        "sorted-array-functions": "^1.3.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/node-status-codes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-status-codes/-/node-status-codes-1.0.0.tgz",
      "integrity": "sha1-WuVUHQJGRdMqWPzdyc7s6nrjrC8=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/noop6": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/noop6/-/noop6-1.0.9.tgz",
      "integrity": "sha512-DB3Hwyd89dPr5HqEPg3YHjzvwh/mCqizC1zZ8vyofqc+TQRyPDnT4wgXXbLGF4z9YAzwwTLi8pNLhGqcbSjgkA=="
    },
    "node_modules/normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "dependencies": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      }
    },
    "node_modules/normalize-package-data/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/oargv": {
      "version": "3.4.10",
      "resolved": "https://registry.npmjs.org/oargv/-/oargv-3.4.10.tgz",
      "integrity": "sha512-SXaMANv9sr7S/dP0vj0+Ybipa47UE1ntTWQ2rpPRhC6Bsvfl+Jg03Xif7jfL0sWKOYWK8oPjcZ5eJ82t8AP/8g==",
      "dependencies": {
        "iterate-object": "^1.1.0",
        "ul": "^5.0.0"
      }
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/obj-def": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/obj-def/-/obj-def-1.0.9.tgz",
      "integrity": "sha512-bQ4ya3VYD6FAA1+s6mEhaURRHSmw4+sKaXE6UyXZ1XDYc5D+c7look25dFdydmLd18epUegh398gdDkMUZI9xg==",
      "dependencies": {
        "deffy": "^2.2.2"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.0",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.0.tgz",
      "integrity": "sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dev": true,
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/one-by-one": {
      "version": "3.2.8",
      "resolved": "https://registry.npmjs.org/one-by-one/-/one-by-one-3.2.8.tgz",
      "integrity": "sha512-HR/pSzZdm46Xqj58K+Bu64kMbSTw8/u77AwWvV+rprO/OsuR++pPlkUJn+SmwqBGRgHKwSKQ974V3uls7crIeQ==",
      "dependencies": {
        "obj-def": "^1.0.0",
        "sliced": "^1.0.1"
      }
    },
    "node_modules/only": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/only/-/only-0.0.2.tgz",
      "integrity": "sha1-Kv3oTQPlC5qO3EROMGEKcCle37Q="
    },
    "node_modules/optionator": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.1.tgz",
      "integrity": "sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==",
      "dev": true,
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/package-json": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-2.4.0.tgz",
      "integrity": "sha1-DRW9Z9HLvduyyiIv8u24a8sxqLs=",
      "dependencies": {
        "got": "^5.0.0",
        "registry-auth-token": "^3.0.1",
        "registry-url": "^3.0.3",
        "semver": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/package-json-path": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/package-json-path/-/package-json-path-1.0.9.tgz",
      "integrity": "sha512-uNu7f6Ef7tQHZRnkyVnCtzdSYVN9uBtge/sG7wzcUaawFWkPYUq67iXxRGrQSg/q0tzxIB8jSyIYUKjG2Jn//A==",
      "dependencies": {
        "abs": "^1.2.1"
      }
    },
    "node_modules/package-json/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/package.json": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/package.json/-/package.json-2.0.1.tgz",
      "integrity": "sha512-pSxZ6XR5yEawRN2ekxx9IKgPN5uNAYco7MCPxtBEWMKO3UKWa1X2CtQMzMgloeGj2g2o6cue3Sb5iPkByIJqlw==",
      "deprecated": "Use pkg.json instead.",
      "dependencies": {
        "git-package-json": "^1.4.0",
        "git-source": "^1.1.0",
        "package-json": "^2.3.1"
      }
    },
    "node_modules/packet-reader": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/packet-reader/-/packet-reader-1.0.0.tgz",
      "integrity": "sha512-HAKu/fG3HpHFO0AA8WE8q2g+gBJaZ9MG7fcKk+IJPLTGAD6Psw4443l+9DGRbOIh3/aXr7Phy0TjilYivJo5XQ=="
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-database-url": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/parse-database-url/-/parse-database-url-0.3.0.tgz",
      "integrity": "sha1-NpZmMh6SfJreY838Gqr2+zdFPQ0=",
      "dependencies": {
        "mongodb-uri": ">= 0.9.7"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/parse-json": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
      "integrity": "sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=",
      "dependencies": {
        "error-ex": "^1.2.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/parse-url": {
      "version": "1.3.11",
      "resolved": "https://registry.npmjs.org/parse-url/-/parse-url-1.3.11.tgz",
      "integrity": "sha1-V8FUKKuKiSsfQ4aWRccR0OFEtVQ=",
      "dependencies": {
        "is-ssh": "^1.3.0",
        "protocols": "^1.4.0"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "node_modules/path-to-regexp": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-6.2.0.tgz",
      "integrity": "sha512-f66KywYG6+43afgE/8j/GoiNyygk/bnoCbps++3ErRKsIYkGGupyv07R2Ok5m9i67Iqc+T2g1eAUGUPzWhYTyg=="
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
    },
    "node_modules/pg": {
      "version": "8.7.3",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.7.3.tgz",
      "integrity": "sha512-HPmH4GH4H3AOprDJOazoIcpI49XFsHCe8xlrjHkWiapdbHK+HLtbm/GQzXYAZwmPju/kzKhjaSfMACG+8cgJcw==",
      "dependencies": {
        "buffer-writer": "2.0.0",
        "packet-reader": "1.0.0",
        "pg-connection-string": "^2.5.0",
        "pg-pool": "^3.5.1",
        "pg-protocol": "^1.5.0",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "pg-native": ">=2.0.0"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-connection-string": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.5.0.tgz",
      "integrity": "sha512-r5o/V/ORTA6TmUnyWZR9nCj1klXCO2CEKNRlVuJptZe85QuhFayC7WeMic7ndayT5IRIR0S0xFxFi2ousartlQ=="
    },
    "node_modules/pg-hstore": {
      "version": "2.3.4",
      "resolved": "https://registry.npmjs.org/pg-hstore/-/pg-hstore-2.3.4.tgz",
      "integrity": "sha512-N3SGs/Rf+xA1M2/n0JBiXFDVMzdekwLZLAO0g7mpDY9ouX+fDI7jS6kTq3JujmYbtNSJ53TJ0q4G98KVZSM4EA==",
      "dependencies": {
        "underscore": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.8.x"
      }
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.5.1",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.5.1.tgz",
      "integrity": "sha512-6iCR0wVrro6OOHFsyavV+i6KYL4lVNyYAB9RD18w66xSzN+d8b66HiwuP30Gp1SH5O9T82fckkzsRjlrhD0ioQ==",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.5.0.tgz",
      "integrity": "sha512-muRttij7H8TqRNu/DxrAJQITO4Ac7RmX3Klyr/9mJEOBeIpgnF8f9jAfRz5d3XwQZl5qBjF9gLsUtMPJE0vezQ=="
    },
    "node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/pinkie": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pinkie-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
      "dependencies": {
        "pinkie": "^2.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha1-AntTPAqokOJtFy1Hz5zOzFIazTU=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prepend-http": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-1.0.4.tgz",
      "integrity": "sha1-1PRWKwzjaW5BrFLQ4ALlemNdxtw=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "node_modules/protocols": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/protocols/-/protocols-1.4.8.tgz",
      "integrity": "sha512-IgjKyaUSjsROSO8/D49Ab7hP8mJgTYcqApOqdPhLoPxAplXmkp+zRvsrSQjFn5by0rhm4VH0GAUELIPpx7B1yg=="
    },
    "node_modules/pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "node_modules/psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ=="
    },
    "node_modules/punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.10.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.10.3.tgz",
      "integrity": "sha512-wr7M2E0OFRfIfJZjKGieI8lBKb7fRCH4Fv5KNPEs7gJ8jadvotdsS08PzOKR7opXhZ/Xkjtt3WF9g38drmyRqQ==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/r-json": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/r-json/-/r-json-1.2.10.tgz",
      "integrity": "sha512-hu9vyLjSlHXT62NAS7DjI9WazDlvjN0lgp3n431dCVnirVcLkZIpzSwA3orhZEKzdDD2jqNYI+w0yG0aFf4kpA=="
    },
    "node_modules/r-package-json": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/r-package-json/-/r-package-json-1.0.9.tgz",
      "integrity": "sha512-G4Vpf1KImWmmPFGdtWQTU0L9zk0SjqEC4qs/jE7AQ+Ylmr5kizMzGeC4wnHp5+ijPqNN+2ZPpvyjVNdN1CDVcg==",
      "dependencies": {
        "package-json-path": "^1.0.0",
        "r-json": "^1.2.1"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha1-T2ih3Arli9P7lYSMMDJNt11kNgs=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/raw-body/node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/rc/node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/read-all-stream": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/read-all-stream/-/read-all-stream-3.1.0.tgz",
      "integrity": "sha1-NcPhd/IHjveJ7kv6+kNzB06u9Po=",
      "dependencies": {
        "pinkie-promise": "^2.0.0",
        "readable-stream": "^2.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/read-all-stream/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "node_modules/read-all-stream/node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/read-all-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/read-all-stream/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "1.1.14",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
      "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.1",
        "isarray": "0.0.1",
        "string_decoder": "~0.10.x"
      }
    },
    "node_modules/regexpp": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
      "integrity": "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/registry-auth-token": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-3.4.0.tgz",
      "integrity": "sha512-4LM6Fw8eBQdwMYcES4yTnn2TqIasbXuwDx3um+QRs7S55aMKCBKBxvPXl2RiUjHwuJLTyYfxSpmfSAjQpcuP+A==",
      "dependencies": {
        "rc": "^1.1.6",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/registry-url": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-3.1.0.tgz",
      "integrity": "sha1-PU74cPc93h138M+aOBQyRE4XSUI=",
      "dependencies": {
        "rc": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/request-promise": {
      "version": "4.2.6",
      "resolved": "https://registry.npmjs.org/request-promise/-/request-promise-4.2.6.tgz",
      "integrity": "sha512-HCHI3DJJUakkOr8fNoCc73E5nU5bqITjOYFMDrKHYOXWXrgD/SBaC7LjwuPymUprRyuF06UK7hd/lMHkmUXglQ==",
      "deprecated": "request-promise has been deprecated because it extends the now deprecated request package, see https://github.com/request/request/issues/3142",
      "dependencies": {
        "bluebird": "^3.5.0",
        "request-promise-core": "1.1.4",
        "stealthy-require": "^1.1.1",
        "tough-cookie": "^2.3.3"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "request": "^2.34"
      }
    },
    "node_modules/request-promise-core": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/request-promise-core/-/request-promise-core-1.1.4.tgz",
      "integrity": "sha512-TTbAfBBRdWD7aNNOoVOBH4pN/KigV6LyapYNNlAPA8JwbovRti1E88m3sYAwsLi5ryhPKsE9APwnjFTgdUjTpw==",
      "dependencies": {
        "lodash": "^4.17.19"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "request": "^2.34"
      }
    },
    "node_modules/request/node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/request/node_modules/qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/request/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "dependencies": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/retry-as-promised": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/retry-as-promised/-/retry-as-promised-5.0.0.tgz",
      "integrity": "sha512-6S+5LvtTl2ggBumk04hBo/4Uf6fRJUwIgunGZ7CYEBCeufGFW1Pu6ucUf/UskHeWOIsUcLOGLFXPig5tR5V1nA=="
    },
    "node_modules/rfdc": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.3.0.tgz",
      "integrity": "sha512-V2hovdzFbOi77/WajaSMXk2OLm+xNIeQdMMuB7icj7bk6zi2F8GGAxigcnDFpJHbNyNcgyJDiP+8nOrY5cZGrA=="
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dev": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/semver": {
      "version": "7.3.7",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
      "integrity": "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha1-1WgS4cAXpuTnw+Ojeh2m143TyT4="
    },
    "node_modules/sequelize": {
      "version": "6.21.3",
      "resolved": "https://registry.npmjs.org/sequelize/-/sequelize-6.21.3.tgz",
      "integrity": "sha512-cJPrTTVCofUxaaNKoIETiXCYh2xJ+OFq5jMHJQqftp34M4kNoLpTfUMPSwYtRUeTcSh1/5HodfJXIBi7troIFA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/sequelize"
        }
      ],
      "dependencies": {
        "@types/debug": "^4.1.7",
        "@types/validator": "^13.7.1",
        "debug": "^4.3.3",
        "dottie": "^2.0.2",
        "inflection": "^1.13.2",
        "lodash": "^4.17.21",
        "moment": "^2.29.1",
        "moment-timezone": "^0.5.34",
        "pg-connection-string": "^2.5.0",
        "retry-as-promised": "^5.0.0",
        "semver": "^7.3.5",
        "sequelize-pool": "^7.1.0",
        "toposort-class": "^1.0.1",
        "uuid": "^8.3.2",
        "validator": "^13.7.0",
        "wkx": "^0.5.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependenciesMeta": {
        "ibm_db": {
          "optional": true
        },
        "mariadb": {
          "optional": true
        },
        "mysql2": {
          "optional": true
        },
        "pg": {
          "optional": true
        },
        "pg-hstore": {
          "optional": true
        },
        "snowflake-sdk": {
          "optional": true
        },
        "sqlite3": {
          "optional": true
        },
        "tedious": {
          "optional": true
        }
      }
    },
    "node_modules/sequelize-pool": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-7.1.0.tgz",
      "integrity": "sha512-G9c0qlIWQSK29pR/5U2JF5dDQeqqHRragoyahj/Nx4KOOQ3CPPfzxnfqFPCSB7x5UgjOgnZ61nSxz+fjDpRlJg==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/sliced": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/sliced/-/sliced-1.0.1.tgz",
      "integrity": "sha1-CzpmK10Ewxd7GSa+qCsD+Dei70E="
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/snake-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/sorted-array-functions": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/sorted-array-functions/-/sorted-array-functions-1.3.0.tgz",
      "integrity": "sha512-2sqgzeFlid6N4Z2fUQ1cvFmTOLRi/sEDzSQ0OKYchqgoPmQBVyM3959qYx3fpS6Esef80KjmpgPeEr028dP3OA=="
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/spdx-correct": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
      "dependencies": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-exceptions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A=="
    },
    "node_modules/spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "dependencies": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-license-ids": {
      "version": "3.0.11",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.11.tgz",
      "integrity": "sha512-Ctl2BrFiM0X3MANYgj3CkygxhRmr9mi6xhejbdO960nF6EDJApTYpn0BQnDKlnNBULKiCN1n3w9EBkHK8ZWg+g=="
    },
    "node_modules/split2": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.1.0.tgz",
      "integrity": "sha512-VBiJxFkxiXRlUIeyMQi8s4hgvKCSjtknJv/LVYbrgALPwf5zSKmEwV9Lst25AkvMDnvxODugjdl6KZgwKM1WYQ==",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/sqlstring": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
      "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/sshpk": {
      "version": "1.17.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.17.0.tgz",
      "integrity": "sha512-/9HIEs1ZXGhSPE8X6Ccm7Nam1z8KcoCqPdI7ecm1N33EzAetWahvQWVqLZtaZQ+IDKX4IyA2o0gBzqIMkAagHQ==",
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sshpk/node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/stealthy-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/stealthy-require/-/stealthy-require-1.1.1.tgz",
      "integrity": "sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/streamroller": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/streamroller/-/streamroller-3.0.8.tgz",
      "integrity": "sha512-VI+ni3czbFZrd1MrlybxykWZ8sMDCMtTU7YJyhgb9M5X6d1DDxLdJr+gSnmRpXPMnIWxWKMaAE8K0WumBp3lDg==",
      "dependencies": {
        "date-format": "^4.0.9",
        "debug": "^4.3.4",
        "fs-extra": "^10.1.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/streamsearch": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz",
      "integrity": "sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo=",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "0.10.31",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strnum": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA=="
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw=="
    },
    "node_modules/timed-out": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/timed-out/-/timed-out-2.0.0.tgz",
      "integrity": "sha1-84sK6B03R9YoAB9B2vxlKs5nHAo=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/tmp": {
      "version": "0.0.28",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.28.tgz",
      "integrity": "sha1-Fyc1t/YU6nrzlmT6hM8N5OUV0SA=",
      "dependencies": {
        "os-tmpdir": "~1.0.1"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/toposort-class": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toposort-class/-/toposort-class-1.0.1.tgz",
      "integrity": "sha1-f/0feMi+KMO6Rc1OGj9e4ZO9mYg="
    },
    "node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
    },
    "node_modules/ts-mixer": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ts-mixer/-/ts-mixer-6.0.1.tgz",
      "integrity": "sha512-hvE+ZYXuINrx6Ei6D6hz+PTim0Uf++dYbK9FFifLNwQj+RwKquhQpn868yZsCtJYiclZF1u8l6WZxxKi+vv7Rg=="
    },
    "node_modules/tslib": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.4.0.tgz",
      "integrity": "sha512-d6xOpEDfsi2CZVlPQzGeux8XMwLT9hssAsaPYExaQMuYskwb+x1x7J371tWlbBdWHroy99KnVB6qIkUbs5X3UQ=="
    },
    "node_modules/tsscmp": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/tsscmp/-/tsscmp-1.0.6.tgz",
      "integrity": "sha512-LxhtAkPDTkVCMQjt2h6eBVY28KCjikZqZfMcC15YBeNjkgUpdCfBu5HoiOTDu86v6smE8yOjyEktJ8hlbANHQA==",
      "engines": {
        "node": ">=0.6.x"
      }
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/twitter-api-v2": {
      "version": "1.12.5",
      "resolved": "https://registry.npmjs.org/twitter-api-v2/-/twitter-api-v2-1.12.5.tgz",
      "integrity": "sha512-kgsEjRfm2kdvAgqXd5druYYxykXEXamae6V/TDyYnws0MClcYBlbtOyGn/HPXEfn2NylbQrjDwkCLaD3qkRgMA=="
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c="
    },
    "node_modules/typpy": {
      "version": "2.3.13",
      "resolved": "https://registry.npmjs.org/typpy/-/typpy-2.3.13.tgz",
      "integrity": "sha512-vOxIcQz9sxHi+rT09SJ5aDgVgrPppQjwnnayTrMye1ODaU8gIZTDM19t9TxmEElbMihx2Nq/0/b/MtyKfayRqA==",
      "dependencies": {
        "function.name": "^1.0.3"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ul": {
      "version": "5.2.15",
      "resolved": "https://registry.npmjs.org/ul/-/ul-5.2.15.tgz",
      "integrity": "sha512-svLEUy8xSCip5IWnsRa0UOg+2zP0Wsj4qlbjTmX6GJSmvKMHADBuHOm1dpNkWqWPIGuVSqzUkV3Cris5JrlTRQ==",
      "dependencies": {
        "deffy": "^2.2.2",
        "typpy": "^2.3.4"
      }
    },
    "node_modules/underscore": {
      "version": "1.13.3",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.3.tgz",
      "integrity": "sha512-QvjkYpiD+dJJraRA8+dGAU4i7aBbb2s0S3jA45TFOvg2VgqvdCDd/3N6CqA8gluk1W91GLoXg5enMUx560QzuA=="
    },
    "node_modules/universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unzip-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/unzip-response/-/unzip-response-1.0.2.tgz",
      "integrity": "sha1-uYTwh3/AqJwsdzzB73tbIytbBv4=",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse-lax": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-1.0.0.tgz",
      "integrity": "sha1-evjzA2Rem9eaJy56FKxovAYJ2nM=",
      "dependencies": {
        "prepend-http": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
      "integrity": "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
      "dev": true
    },
    "node_modules/validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "dependencies": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "node_modules/validator": {
      "version": "13.7.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.7.0.tgz",
      "integrity": "sha512-nYXQLCBkpJ8X6ltALua9dRrZDHVYxjJ1wgskNt1lH9fzGjs3tgojGSCBjmEPwkWS1y29+DrizMTW19Pr9uB2nw==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "engines": [
        "node >=0.6.0"
      ],
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/verror/node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wkx": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/wkx/-/wkx-0.5.0.tgz",
      "integrity": "sha512-Xng/d4Ichh8uN4l0FToV/258EjMGU9MGcA0HV2d9B/ZpZB3lqQm7nkOdZdm5GhKtLLhAE7PiVQwN4eN+2YJJUg==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
      "integrity": "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "dev": true
    },
    "node_modules/ws": {
      "version": "8.5.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.5.0.tgz",
      "integrity": "sha512-BWX0SWVgLPzYwF8lTzEy1egjhS4S4OEAHfsO8o65WOVsrnSRGaSiUaa9e0ggGlkMTtBlmOpEXiie9RUcBO86qg==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "17.5.1",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.5.1.tgz",
      "integrity": "sha512-t6YAJcxDkNX7NFYiVtKvWUz8l+PaKTLiL63mJYWR2GnHq2gjEWISzsLp9wg3aY36dY1j+gfIEL3pIF+XlJJfbA==",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ylru": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/ylru/-/ylru-1.3.2.tgz",
      "integrity": "sha512-RXRJzMiK6U2ye0BlGGZnmpwJDPgakn6aNQ0A7gHRbD4I0uvK4TW6UqkK1V0pp9jskjJBAXd3dRrbzWkqJ+6cxA==",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/zod": {
      "version": "3.14.4",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.14.4.tgz",
      "integrity": "sha512-U9BFLb2GO34Sfo9IUYp0w3wJLlmcyGoMd75qU9yf+DrdGA4kEx6e+l9KOkAlyUO0PSQzZCa3TR4qVlcmwqSDuw==",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  },
  "dependencies": {
    "@aws-crypto/crc32": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/crc32/-/crc32-2.0.0.tgz",
      "integrity": "sha512-TvE1r2CUueyXOuHdEigYjIZVesInd9KN+K/TFFNfkkxRThiNxO6i4ZqqAVMoEjAamZZ1AA8WXJkjCz7YShHPQA==",
      "requires": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/crc32c": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/crc32c/-/crc32c-2.0.0.tgz",
      "integrity": "sha512-vF0eMdMHx3O3MoOXUfBZry8Y4ZDtcuskjjKgJz8YfIDjLStxTZrYXk+kZqtl6A0uCmmiN/Eb/JbC/CndTV1MHg==",
      "requires": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/ie11-detection": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/ie11-detection/-/ie11-detection-2.0.2.tgz",
      "integrity": "sha512-5XDMQY98gMAf/WRTic5G++jfmS/VLM0rwpiOpaainKi4L0nqWMSB1SzsrEG5rjFZGYN6ZAefO+/Yta2dFM0kMw==",
      "requires": {
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/sha1-browser": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha1-browser/-/sha1-browser-2.0.0.tgz",
      "integrity": "sha512-3fIVRjPFY8EG5HWXR+ZJZMdWNRpwbxGzJ9IH9q93FpbgCH8u8GHRi46mZXp3cYD7gealmyqpm3ThZwLKJjWJhA==",
      "requires": {
        "@aws-crypto/ie11-detection": "^2.0.0",
        "@aws-crypto/supports-web-crypto": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "@aws-sdk/util-locate-window": "^3.0.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/sha256-browser": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-browser/-/sha256-browser-2.0.0.tgz",
      "integrity": "sha512-rYXOQ8BFOaqMEHJrLHul/25ckWH6GTJtdLSajhlqGMx0PmSueAuvboCuZCTqEKlxR8CQOwRarxYMZZSYlhRA1A==",
      "requires": {
        "@aws-crypto/ie11-detection": "^2.0.0",
        "@aws-crypto/sha256-js": "^2.0.0",
        "@aws-crypto/supports-web-crypto": "^2.0.0",
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "@aws-sdk/util-locate-window": "^3.0.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/sha256-js": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-js/-/sha256-js-2.0.0.tgz",
      "integrity": "sha512-VZY+mCY4Nmrs5WGfitmNqXzaE873fcIZDu54cbaDaaamsaTOP1DBImV9F4pICc3EHjQXujyE8jig+PFCaew9ig==",
      "requires": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/supports-web-crypto": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/supports-web-crypto/-/supports-web-crypto-2.0.2.tgz",
      "integrity": "sha512-6mbSsLHwZ99CTOOswvCRP3C+VCWnzBf+1SnbWxzzJ9lR0mA0JnY2JEAhp8rqmTE0GPFy88rrM27ffgp62oErMQ==",
      "requires": {
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-crypto/util": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-2.0.2.tgz",
      "integrity": "sha512-Lgu5v/0e/BcrZ5m/IWqzPUf3UYFTy/PpeED+uc9SWUR1iZQL8XXbGQg10UfllwwBryO3hFF5dizK+78aoXC1eA==",
      "requires": {
        "@aws-sdk/types": "^3.110.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "@aws-sdk/abort-controller": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.201.0.tgz",
      "integrity": "sha512-xJ984k+CKlGjBmvNarzM8Y+b6X4L1Zt0TycQmVBJq7fAr/ju9l13pQIoXR5WlDIW1FkGeVczF5Nu6fN46SCORQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/chunked-blob-reader": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/chunked-blob-reader/-/chunked-blob-reader-3.188.0.tgz",
      "integrity": "sha512-zkPRFZZPL3eH+kH86LDYYXImiClA1/sW60zYOjse9Pgka+eDJlvBN6hcYxwDEKjcwATYiSRR1aVQHcfCinlGXg==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/chunked-blob-reader-native": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/chunked-blob-reader-native/-/chunked-blob-reader-native-3.204.0.tgz",
      "integrity": "sha512-ejJntS6usQpKKwisIaK4yYjo8DKEPpk7eJ7fJCw0r4WmIa7xN3amZISP4TrnKa401nWxbfzd40Wh/R5p75JMNQ==",
      "requires": {
        "@aws-sdk/util-base64": "3.202.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/client-cognito-identity": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-cognito-identity/-/client-cognito-identity-3.226.0.tgz",
      "integrity": "sha512-f97yYtFN2YyVLCkDM51yLakb5NKy9gTSSXWe9mA9rgynLPfgsJbIHXv3zr1Qg0Ay0p4j1eLYukLaVw1MKlHDgw==",
      "optional": true,
      "requires": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.226.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/credential-provider-node": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-signing": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "dependencies": {
        "@aws-sdk/abort-controller": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.226.0.tgz",
          "integrity": "sha512-cJVzr1xxPBd08voknXvR0RLgtZKGKt6WyDpH/BaPCu3rfSqWCDZKzwqe940eqosjmKrxC6pUZNKASIqHOQ8xxQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/client-sso": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.226.0.tgz",
          "integrity": "sha512-+Hl1YSLKrxPnQLijhWryI6uV8eKZIsUhvWlzFKx75kjxzjsC/jyk5zV59jnCu0SCCepXB8DKyLVa2WpH7iAHew==",
          "optional": true,
          "requires": {
            "@aws-crypto/sha256-browser": "2.0.0",
            "@aws-crypto/sha256-js": "2.0.0",
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/fetch-http-handler": "3.226.0",
            "@aws-sdk/hash-node": "3.226.0",
            "@aws-sdk/invalid-dependency": "3.226.0",
            "@aws-sdk/middleware-content-length": "3.226.0",
            "@aws-sdk/middleware-endpoint": "3.226.0",
            "@aws-sdk/middleware-host-header": "3.226.0",
            "@aws-sdk/middleware-logger": "3.226.0",
            "@aws-sdk/middleware-recursion-detection": "3.226.0",
            "@aws-sdk/middleware-retry": "3.226.0",
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/middleware-user-agent": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/node-http-handler": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/smithy-client": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "@aws-sdk/util-body-length-browser": "3.188.0",
            "@aws-sdk/util-body-length-node": "3.208.0",
            "@aws-sdk/util-defaults-mode-browser": "3.226.0",
            "@aws-sdk/util-defaults-mode-node": "3.226.0",
            "@aws-sdk/util-endpoints": "3.226.0",
            "@aws-sdk/util-user-agent-browser": "3.226.0",
            "@aws-sdk/util-user-agent-node": "3.226.0",
            "@aws-sdk/util-utf8-browser": "3.188.0",
            "@aws-sdk/util-utf8-node": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/client-sts": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.226.0.tgz",
          "integrity": "sha512-ZBlqRVbnHvvbkN5g56+mXltNybHNzgV69+2ARubQ8ge9U2qF/LweCmGqZnZLWqdGXwaB9IOvz5ZW2npyJh1X/A==",
          "optional": true,
          "requires": {
            "@aws-crypto/sha256-browser": "2.0.0",
            "@aws-crypto/sha256-js": "2.0.0",
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/credential-provider-node": "3.226.0",
            "@aws-sdk/fetch-http-handler": "3.226.0",
            "@aws-sdk/hash-node": "3.226.0",
            "@aws-sdk/invalid-dependency": "3.226.0",
            "@aws-sdk/middleware-content-length": "3.226.0",
            "@aws-sdk/middleware-endpoint": "3.226.0",
            "@aws-sdk/middleware-host-header": "3.226.0",
            "@aws-sdk/middleware-logger": "3.226.0",
            "@aws-sdk/middleware-recursion-detection": "3.226.0",
            "@aws-sdk/middleware-retry": "3.226.0",
            "@aws-sdk/middleware-sdk-sts": "3.226.0",
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/middleware-signing": "3.226.0",
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/middleware-user-agent": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/node-http-handler": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/smithy-client": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "@aws-sdk/util-body-length-browser": "3.188.0",
            "@aws-sdk/util-body-length-node": "3.208.0",
            "@aws-sdk/util-defaults-mode-browser": "3.226.0",
            "@aws-sdk/util-defaults-mode-node": "3.226.0",
            "@aws-sdk/util-endpoints": "3.226.0",
            "@aws-sdk/util-user-agent-browser": "3.226.0",
            "@aws-sdk/util-user-agent-node": "3.226.0",
            "@aws-sdk/util-utf8-browser": "3.188.0",
            "@aws-sdk/util-utf8-node": "3.208.0",
            "fast-xml-parser": "4.0.11",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/config-resolver": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.226.0.tgz",
          "integrity": "sha512-0UWXtfnTT0OtnRP8jJodc8V7xAnWSqsh4RCRyV5uu3Z2Tv+xyW91GKxO+gOXoUP0hHu0lvBM9lYiMJcJWZYLYw==",
          "optional": true,
          "requires": {
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-config-provider": "3.208.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-env": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.226.0.tgz",
          "integrity": "sha512-sd8uK1ojbXxaZXlthzw/VXZwCPUtU3PjObOfr3Evj7MPIM2IH8h29foOlggx939MdLQGboJf9gKvLlvKDWtJRA==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-imds": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.226.0.tgz",
          "integrity": "sha512-//z/COQm2AjYFI1Lb0wKHTQSrvLFTyuKLFQGPJsKS7DPoxGOCKB7hmYerlbl01IDoCxTdyL//TyyPxbZEOQD5Q==",
          "optional": true,
          "requires": {
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-ini": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.226.0.tgz",
          "integrity": "sha512-Sj7SGl53qmKkD7wvgU0MSTyj8ho6A3tKVbadTHljVz60jiauTEM97Z1DIai6U3oPFVteaKqx7npc8ozeK6mKNg==",
          "optional": true,
          "requires": {
            "@aws-sdk/credential-provider-env": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/credential-provider-sso": "3.226.0",
            "@aws-sdk/credential-provider-web-identity": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.226.0.tgz",
          "integrity": "sha512-kuOeiVmlhSyMC1Eix0pqHmb4EmpbMHrTw+9ObZbQ2bRXy05Q9fLA6SVBcI01bI1KVh7Qqz9i8ojOY3A2zscjyA==",
          "optional": true,
          "requires": {
            "@aws-sdk/credential-provider-env": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/credential-provider-ini": "3.226.0",
            "@aws-sdk/credential-provider-process": "3.226.0",
            "@aws-sdk/credential-provider-sso": "3.226.0",
            "@aws-sdk/credential-provider-web-identity": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-process": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.226.0.tgz",
          "integrity": "sha512-iUDMdnrTvbvaCFhWwqyXrhvQ9+ojPqPqXhwZtY1X/Qaz+73S9gXBPJHZaZb2Ke0yKE1Ql3bJbKvmmxC/qLQMng==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-sso": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.226.0.tgz",
          "integrity": "sha512-QSBeyOIAus4/8u/DeAstE8w/zw+F7PQohdB8JFP/BPaCfc8uKue4UkqqvQWRfm4VSEnHeXt037MDopmCpd98Iw==",
          "optional": true,
          "requires": {
            "@aws-sdk/client-sso": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/token-providers": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-web-identity": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.226.0.tgz",
          "integrity": "sha512-CCpv847rLB0SFOHz2igvUMFAzeT2fD3YnY4C8jltuJoEkn0ITn1Hlgt13nTJ5BUuvyti2mvyXZHmNzhMIMrIlw==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/fetch-http-handler": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.226.0.tgz",
          "integrity": "sha512-JewZPMNEBXfi1xVnRa7pVtK/zgZD8/lQ/YnD8pq79WuMa2cwyhDtr8oqCoqsPW+WJT5ScXoMtuHxN78l8eKWgg==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/querystring-builder": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/hash-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.226.0.tgz",
          "integrity": "sha512-MdlJhJ9/Espwd0+gUXdZRsHuostB2WxEVAszWxobP0FTT9PnicqnfK7ExmW+DUAc0ywxtEbR3e0UND65rlSTVw==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/invalid-dependency": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.226.0.tgz",
          "integrity": "sha512-QXOYFmap8g9QzRjumcRCIo2GEZkdCwd7ePQW0OABWPhKHzlJ74vvBxywjU3s39EEBEluWXtZ7Iufg6GxZM4ifw==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-content-length": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.226.0.tgz",
          "integrity": "sha512-ksUzlHJN2JMuyavjA46a4sctvnrnITqt2tbGGWWrAuXY1mel2j+VbgnmJUiwHKUO6bTFBBeft5Vd1TSOb4JmiA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-endpoint": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.226.0.tgz",
          "integrity": "sha512-EvLFafjtUxTT0AC9p3aBQu1/fjhWdIeK58jIXaNFONfZ3F8QbEYUPuF/SqZvJM6cWfOO9qwYKkRDbCSTYhprIg==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-config-provider": "3.208.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-host-header": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.226.0.tgz",
          "integrity": "sha512-haVkWVh6BUPwKgWwkL6sDvTkcZWvJjv8AgC8jiQuSl8GLZdzHTB8Qhi3IsfFta9HAuoLjxheWBE5Z/L0UrfhLA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-logger": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.226.0.tgz",
          "integrity": "sha512-m9gtLrrYnpN6yckcQ09rV7ExWOLMuq8mMPF/K3DbL/YL0TuILu9i2T1W+JuxSX+K9FMG2HrLAKivE/kMLr55xA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-recursion-detection": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.226.0.tgz",
          "integrity": "sha512-mwRbdKEUeuNH5TEkyZ5FWxp6bL2UC1WbY+LDv6YjHxmSMKpAoOueEdtU34PqDOLrpXXxIGHDFmjeGeMfktyEcA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-retry": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.226.0.tgz",
          "integrity": "sha512-uMn4dSkv9Na2uvt6K3HgTnVrCRAlGv1MBAtUDLXONqUv1L/Z1fp3CkFkLKQHKylfBwBhe6dXfYEo87i8LZFoqg==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/service-error-classification": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1",
            "uuid": "^8.3.2"
          }
        },
        "@aws-sdk/middleware-sdk-sts": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.226.0.tgz",
          "integrity": "sha512-NN9T/qoSD1kZvAT+VLny3NnlqgylYQcsgV3rvi/8lYzw/G/2s8VS6sm/VTWGGZhx08wZRv20MWzYu3bftcyqUg==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-signing": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-serde": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.226.0.tgz",
          "integrity": "sha512-nPuOOAkSfx9TxzdKFx0X2bDlinOxGrqD7iof926K/AEflxGD1DBdcaDdjlYlPDW2CVE8LV/rAgbYuLxh/E/1VA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-signing": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.226.0.tgz",
          "integrity": "sha512-E6HmtPcl+IjYDDzi1xI2HpCbBq2avNWcjvCriMZWuTAtRVpnA6XDDGW5GY85IfS3A8G8vuWqEVPr8JcYUcjfew==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-stack": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.226.0.tgz",
          "integrity": "sha512-85wF29LvPvpoed60fZGDYLwv1Zpd/cM0C22WSSFPw1SSJeqO4gtFYyCg2squfT3KI6kF43IIkOCJ+L7GtryPug==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-user-agent": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.226.0.tgz",
          "integrity": "sha512-N1WnfzCW1Y5yWhVAphf8OPGTe8Df3vmV7/LdsoQfmpkCZgLZeK2o0xITkUQhRj1mbw7yp8tVFLFV3R2lMurdAQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/node-config-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.226.0.tgz",
          "integrity": "sha512-B8lQDqiRk7X5izFEUMXmi8CZLOKCTWQJU9HQf3ako+sF0gexo4nHN3jhoRWyLtcgC5S3on/2jxpAcqtm7kuY3w==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/node-http-handler": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.226.0.tgz",
          "integrity": "sha512-xQCddnZNMiPmjr3W7HYM+f5ir4VfxgJh37eqZwX6EZmyItFpNNeVzKUgA920ka1VPz/ZUYB+2OFGiX3LCLkkaA==",
          "optional": true,
          "requires": {
            "@aws-sdk/abort-controller": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/querystring-builder": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/property-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
          "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/protocol-http": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.226.0.tgz",
          "integrity": "sha512-zWkVqiTA9RXL6y0hhfZc9bcU4DX2NI6Hw9IhQmSPeM59mdbPjJlY4bLlMr5YxywqO3yQ/ylNoAfrEzrDjlOSRg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/querystring-builder": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.226.0.tgz",
          "integrity": "sha512-LVurypuNeotO4lmirKXRC4NYrZRAyMJXuwO0f2a5ZAUJCjauwYrifKue6yCfU7bls7gut7nfcR6B99WBYpHs3g==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-uri-escape": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/querystring-parser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.226.0.tgz",
          "integrity": "sha512-FzB+VrQ47KAFxiPt2YXrKZ8AOLZQqGTLCKHzx4bjxGmwgsjV8yIbtJiJhZLMcUQV4LtGeIY9ixIqQhGvnZHE4A==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/service-error-classification": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.226.0.tgz",
          "integrity": "sha512-9R01dBpE8JILe2CTft7YN2tMufT2mMWMTqxmHwPSmOpsxHTj8hEII7GTfvpb95ThHwW7XMNhg7pbHLbrTJZCVA==",
          "optional": true
        },
        "@aws-sdk/shared-ini-file-loader": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
          "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/signature-v4": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.226.0.tgz",
          "integrity": "sha512-/R5q5agdPd7HJB68XMzpxrNPk158EHUvkFkuRu5Qf3kkkHebEzWEBlWoVpUe6ss4rP9Tqcue6xPuaftEmhjpYw==",
          "optional": true,
          "requires": {
            "@aws-sdk/is-array-buffer": "3.201.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-hex-encoding": "3.201.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "@aws-sdk/util-uri-escape": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/smithy-client": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.226.0.tgz",
          "integrity": "sha512-BWr1FhWSUhkSBp0TLzliD5AQBjA2Jmo9FlOOt+cBwd9BKkSGlGj+HgATYJ83Sjjg2+J6qvEZBxB78LKVHhorBw==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/types": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
          "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/url-parser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.226.0.tgz",
          "integrity": "sha512-p5RLE0QWyP0OcTOLmFcLdVgUcUEzmEfmdrnOxyNzomcYb0p3vUagA5zfa1HVK2azsQJFBv28GfvMnba9bGhObg==",
          "optional": true,
          "requires": {
            "@aws-sdk/querystring-parser": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-base64": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
          "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
          "optional": true,
          "requires": {
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-body-length-node": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
          "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-buffer-from": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
          "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
          "optional": true,
          "requires": {
            "@aws-sdk/is-array-buffer": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-config-provider": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
          "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-defaults-mode-browser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.226.0.tgz",
          "integrity": "sha512-chLx+6AeMSjuPsCVbI1B4Pg3jftjjcsuTsJucjo0DKBb1VSWqPCitmOILQVvKiA2Km8TSs3VcbUuOCyDExkzAg==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "bowser": "^2.11.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-defaults-mode-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.226.0.tgz",
          "integrity": "sha512-Zr0AEj6g8gqiOhr31Pa2tdOFdPQciaAUCg3Uj/eH0znNBdVoptCj67oCW/I5v4pY4ZLZtGhr3uuoxDJH2MB3yg==",
          "optional": true,
          "requires": {
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-endpoints": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.226.0.tgz",
          "integrity": "sha512-iqOkac/zLmyPBUJd7SLN0PeZMkOmlGgD5PHmmekTClOkce2eUjK9SNX1PzL73aXPoPTyhg9QGLH8uEZEQ8YUzg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-middleware": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.226.0.tgz",
          "integrity": "sha512-B96CQnwX4gRvQdaQkdUtqvDPkrptV5+va6FVeJOocU/DbSYMAScLxtR3peMS8cnlOT6nL1Eoa42OI9AfZz1VwQ==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-user-agent-browser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.226.0.tgz",
          "integrity": "sha512-PhBIu2h6sPJPcv2I7ELfFizdl5pNiL4LfxrasMCYXQkJvVnoXztHA1x+CQbXIdtZOIlpjC+6BjDcE0uhnpvfcA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "bowser": "^2.11.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-user-agent-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.226.0.tgz",
          "integrity": "sha512-othPc5Dz/pkYkxH+nZPhc1Al0HndQT8zHD4e9h+EZ+8lkd8n+IsnLfTS/mSJWrfiC6UlNRVw55cItstmJyMe/A==",
          "optional": true,
          "requires": {
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-utf8-node": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
          "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        }
      }
    },
    "@aws-sdk/client-s3": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-s3/-/client-s3-3.204.0.tgz",
      "integrity": "sha512-TtaOQ0ArmqV23Ie/FUChMIdAT5ebg5FSSimN3X2SFVmXRt9c9N73X/gLHKqzf30Dgsl7M/w9O6jFtlbvANjBmA==",
      "requires": {
        "@aws-crypto/sha1-browser": "2.0.0",
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.204.0",
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/credential-provider-node": "3.204.0",
        "@aws-sdk/eventstream-serde-browser": "3.201.0",
        "@aws-sdk/eventstream-serde-config-resolver": "3.201.0",
        "@aws-sdk/eventstream-serde-node": "3.201.0",
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/hash-blob-browser": "3.204.0",
        "@aws-sdk/hash-node": "3.201.0",
        "@aws-sdk/hash-stream-node": "3.201.0",
        "@aws-sdk/invalid-dependency": "3.201.0",
        "@aws-sdk/md5-js": "3.204.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.201.0",
        "@aws-sdk/middleware-content-length": "3.201.0",
        "@aws-sdk/middleware-endpoint": "3.201.0",
        "@aws-sdk/middleware-expect-continue": "3.201.0",
        "@aws-sdk/middleware-flexible-checksums": "3.201.0",
        "@aws-sdk/middleware-host-header": "3.201.0",
        "@aws-sdk/middleware-location-constraint": "3.201.0",
        "@aws-sdk/middleware-logger": "3.201.0",
        "@aws-sdk/middleware-recursion-detection": "3.201.0",
        "@aws-sdk/middleware-retry": "3.201.0",
        "@aws-sdk/middleware-sdk-s3": "3.201.0",
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/middleware-signing": "3.201.0",
        "@aws-sdk/middleware-ssec": "3.201.0",
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/middleware-user-agent": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4-multi-region": "3.201.0",
        "@aws-sdk/smithy-client": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-base64-browser": "3.188.0",
        "@aws-sdk/util-base64-node": "3.201.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.201.0",
        "@aws-sdk/util-defaults-mode-browser": "3.201.0",
        "@aws-sdk/util-defaults-mode-node": "3.201.0",
        "@aws-sdk/util-endpoints": "3.202.0",
        "@aws-sdk/util-stream-browser": "3.204.0",
        "@aws-sdk/util-stream-node": "3.201.0",
        "@aws-sdk/util-user-agent-browser": "3.201.0",
        "@aws-sdk/util-user-agent-node": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "@aws-sdk/util-waiter": "3.201.0",
        "@aws-sdk/xml-builder": "3.201.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/client-sso": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.204.0.tgz",
      "integrity": "sha512-AECcNrcAQxV/Jlu8ogshRaYwt2jayx0omQJs/SXj70mWxmbk4MQnb+DqJIpPpOKBHaza/xlC2TKS1RzkiuZxyw==",
      "requires": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/hash-node": "3.201.0",
        "@aws-sdk/invalid-dependency": "3.201.0",
        "@aws-sdk/middleware-content-length": "3.201.0",
        "@aws-sdk/middleware-endpoint": "3.201.0",
        "@aws-sdk/middleware-host-header": "3.201.0",
        "@aws-sdk/middleware-logger": "3.201.0",
        "@aws-sdk/middleware-recursion-detection": "3.201.0",
        "@aws-sdk/middleware-retry": "3.201.0",
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/middleware-user-agent": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/smithy-client": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-base64-browser": "3.188.0",
        "@aws-sdk/util-base64-node": "3.201.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.201.0",
        "@aws-sdk/util-defaults-mode-browser": "3.201.0",
        "@aws-sdk/util-defaults-mode-node": "3.201.0",
        "@aws-sdk/util-endpoints": "3.202.0",
        "@aws-sdk/util-user-agent-browser": "3.201.0",
        "@aws-sdk/util-user-agent-node": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/client-sso-oidc": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso-oidc/-/client-sso-oidc-3.226.0.tgz",
      "integrity": "sha512-IKzAhL6RoPs7IZ/rJvekjedQ4oesazCO+Aqh9l2Xct+XY0MFBdh4amgg4t/8fjksfIzmJH48BZoNv5gVak6yRw==",
      "optional": true,
      "requires": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.226.0",
        "@aws-sdk/fetch-http-handler": "3.226.0",
        "@aws-sdk/hash-node": "3.226.0",
        "@aws-sdk/invalid-dependency": "3.226.0",
        "@aws-sdk/middleware-content-length": "3.226.0",
        "@aws-sdk/middleware-endpoint": "3.226.0",
        "@aws-sdk/middleware-host-header": "3.226.0",
        "@aws-sdk/middleware-logger": "3.226.0",
        "@aws-sdk/middleware-recursion-detection": "3.226.0",
        "@aws-sdk/middleware-retry": "3.226.0",
        "@aws-sdk/middleware-serde": "3.226.0",
        "@aws-sdk/middleware-stack": "3.226.0",
        "@aws-sdk/middleware-user-agent": "3.226.0",
        "@aws-sdk/node-config-provider": "3.226.0",
        "@aws-sdk/node-http-handler": "3.226.0",
        "@aws-sdk/protocol-http": "3.226.0",
        "@aws-sdk/smithy-client": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "@aws-sdk/url-parser": "3.226.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.226.0",
        "@aws-sdk/util-defaults-mode-node": "3.226.0",
        "@aws-sdk/util-endpoints": "3.226.0",
        "@aws-sdk/util-user-agent-browser": "3.226.0",
        "@aws-sdk/util-user-agent-node": "3.226.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "dependencies": {
        "@aws-sdk/abort-controller": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.226.0.tgz",
          "integrity": "sha512-cJVzr1xxPBd08voknXvR0RLgtZKGKt6WyDpH/BaPCu3rfSqWCDZKzwqe940eqosjmKrxC6pUZNKASIqHOQ8xxQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/config-resolver": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.226.0.tgz",
          "integrity": "sha512-0UWXtfnTT0OtnRP8jJodc8V7xAnWSqsh4RCRyV5uu3Z2Tv+xyW91GKxO+gOXoUP0hHu0lvBM9lYiMJcJWZYLYw==",
          "optional": true,
          "requires": {
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-config-provider": "3.208.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-imds": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.226.0.tgz",
          "integrity": "sha512-//z/COQm2AjYFI1Lb0wKHTQSrvLFTyuKLFQGPJsKS7DPoxGOCKB7hmYerlbl01IDoCxTdyL//TyyPxbZEOQD5Q==",
          "optional": true,
          "requires": {
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/fetch-http-handler": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.226.0.tgz",
          "integrity": "sha512-JewZPMNEBXfi1xVnRa7pVtK/zgZD8/lQ/YnD8pq79WuMa2cwyhDtr8oqCoqsPW+WJT5ScXoMtuHxN78l8eKWgg==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/querystring-builder": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/hash-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.226.0.tgz",
          "integrity": "sha512-MdlJhJ9/Espwd0+gUXdZRsHuostB2WxEVAszWxobP0FTT9PnicqnfK7ExmW+DUAc0ywxtEbR3e0UND65rlSTVw==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/invalid-dependency": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.226.0.tgz",
          "integrity": "sha512-QXOYFmap8g9QzRjumcRCIo2GEZkdCwd7ePQW0OABWPhKHzlJ74vvBxywjU3s39EEBEluWXtZ7Iufg6GxZM4ifw==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-content-length": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.226.0.tgz",
          "integrity": "sha512-ksUzlHJN2JMuyavjA46a4sctvnrnITqt2tbGGWWrAuXY1mel2j+VbgnmJUiwHKUO6bTFBBeft5Vd1TSOb4JmiA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-endpoint": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.226.0.tgz",
          "integrity": "sha512-EvLFafjtUxTT0AC9p3aBQu1/fjhWdIeK58jIXaNFONfZ3F8QbEYUPuF/SqZvJM6cWfOO9qwYKkRDbCSTYhprIg==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-config-provider": "3.208.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-host-header": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.226.0.tgz",
          "integrity": "sha512-haVkWVh6BUPwKgWwkL6sDvTkcZWvJjv8AgC8jiQuSl8GLZdzHTB8Qhi3IsfFta9HAuoLjxheWBE5Z/L0UrfhLA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-logger": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.226.0.tgz",
          "integrity": "sha512-m9gtLrrYnpN6yckcQ09rV7ExWOLMuq8mMPF/K3DbL/YL0TuILu9i2T1W+JuxSX+K9FMG2HrLAKivE/kMLr55xA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-recursion-detection": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.226.0.tgz",
          "integrity": "sha512-mwRbdKEUeuNH5TEkyZ5FWxp6bL2UC1WbY+LDv6YjHxmSMKpAoOueEdtU34PqDOLrpXXxIGHDFmjeGeMfktyEcA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-retry": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.226.0.tgz",
          "integrity": "sha512-uMn4dSkv9Na2uvt6K3HgTnVrCRAlGv1MBAtUDLXONqUv1L/Z1fp3CkFkLKQHKylfBwBhe6dXfYEo87i8LZFoqg==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/service-error-classification": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1",
            "uuid": "^8.3.2"
          }
        },
        "@aws-sdk/middleware-serde": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.226.0.tgz",
          "integrity": "sha512-nPuOOAkSfx9TxzdKFx0X2bDlinOxGrqD7iof926K/AEflxGD1DBdcaDdjlYlPDW2CVE8LV/rAgbYuLxh/E/1VA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-stack": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.226.0.tgz",
          "integrity": "sha512-85wF29LvPvpoed60fZGDYLwv1Zpd/cM0C22WSSFPw1SSJeqO4gtFYyCg2squfT3KI6kF43IIkOCJ+L7GtryPug==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-user-agent": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.226.0.tgz",
          "integrity": "sha512-N1WnfzCW1Y5yWhVAphf8OPGTe8Df3vmV7/LdsoQfmpkCZgLZeK2o0xITkUQhRj1mbw7yp8tVFLFV3R2lMurdAQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/node-config-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.226.0.tgz",
          "integrity": "sha512-B8lQDqiRk7X5izFEUMXmi8CZLOKCTWQJU9HQf3ako+sF0gexo4nHN3jhoRWyLtcgC5S3on/2jxpAcqtm7kuY3w==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/node-http-handler": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.226.0.tgz",
          "integrity": "sha512-xQCddnZNMiPmjr3W7HYM+f5ir4VfxgJh37eqZwX6EZmyItFpNNeVzKUgA920ka1VPz/ZUYB+2OFGiX3LCLkkaA==",
          "optional": true,
          "requires": {
            "@aws-sdk/abort-controller": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/querystring-builder": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/property-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
          "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/protocol-http": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.226.0.tgz",
          "integrity": "sha512-zWkVqiTA9RXL6y0hhfZc9bcU4DX2NI6Hw9IhQmSPeM59mdbPjJlY4bLlMr5YxywqO3yQ/ylNoAfrEzrDjlOSRg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/querystring-builder": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.226.0.tgz",
          "integrity": "sha512-LVurypuNeotO4lmirKXRC4NYrZRAyMJXuwO0f2a5ZAUJCjauwYrifKue6yCfU7bls7gut7nfcR6B99WBYpHs3g==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-uri-escape": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/querystring-parser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.226.0.tgz",
          "integrity": "sha512-FzB+VrQ47KAFxiPt2YXrKZ8AOLZQqGTLCKHzx4bjxGmwgsjV8yIbtJiJhZLMcUQV4LtGeIY9ixIqQhGvnZHE4A==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/service-error-classification": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.226.0.tgz",
          "integrity": "sha512-9R01dBpE8JILe2CTft7YN2tMufT2mMWMTqxmHwPSmOpsxHTj8hEII7GTfvpb95ThHwW7XMNhg7pbHLbrTJZCVA==",
          "optional": true
        },
        "@aws-sdk/shared-ini-file-loader": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
          "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/signature-v4": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.226.0.tgz",
          "integrity": "sha512-/R5q5agdPd7HJB68XMzpxrNPk158EHUvkFkuRu5Qf3kkkHebEzWEBlWoVpUe6ss4rP9Tqcue6xPuaftEmhjpYw==",
          "optional": true,
          "requires": {
            "@aws-sdk/is-array-buffer": "3.201.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-hex-encoding": "3.201.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "@aws-sdk/util-uri-escape": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/smithy-client": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.226.0.tgz",
          "integrity": "sha512-BWr1FhWSUhkSBp0TLzliD5AQBjA2Jmo9FlOOt+cBwd9BKkSGlGj+HgATYJ83Sjjg2+J6qvEZBxB78LKVHhorBw==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/types": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
          "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/url-parser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.226.0.tgz",
          "integrity": "sha512-p5RLE0QWyP0OcTOLmFcLdVgUcUEzmEfmdrnOxyNzomcYb0p3vUagA5zfa1HVK2azsQJFBv28GfvMnba9bGhObg==",
          "optional": true,
          "requires": {
            "@aws-sdk/querystring-parser": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-base64": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
          "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
          "optional": true,
          "requires": {
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-body-length-node": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
          "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-buffer-from": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
          "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
          "optional": true,
          "requires": {
            "@aws-sdk/is-array-buffer": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-config-provider": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
          "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-defaults-mode-browser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.226.0.tgz",
          "integrity": "sha512-chLx+6AeMSjuPsCVbI1B4Pg3jftjjcsuTsJucjo0DKBb1VSWqPCitmOILQVvKiA2Km8TSs3VcbUuOCyDExkzAg==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "bowser": "^2.11.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-defaults-mode-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.226.0.tgz",
          "integrity": "sha512-Zr0AEj6g8gqiOhr31Pa2tdOFdPQciaAUCg3Uj/eH0znNBdVoptCj67oCW/I5v4pY4ZLZtGhr3uuoxDJH2MB3yg==",
          "optional": true,
          "requires": {
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-endpoints": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.226.0.tgz",
          "integrity": "sha512-iqOkac/zLmyPBUJd7SLN0PeZMkOmlGgD5PHmmekTClOkce2eUjK9SNX1PzL73aXPoPTyhg9QGLH8uEZEQ8YUzg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-middleware": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.226.0.tgz",
          "integrity": "sha512-B96CQnwX4gRvQdaQkdUtqvDPkrptV5+va6FVeJOocU/DbSYMAScLxtR3peMS8cnlOT6nL1Eoa42OI9AfZz1VwQ==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-user-agent-browser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.226.0.tgz",
          "integrity": "sha512-PhBIu2h6sPJPcv2I7ELfFizdl5pNiL4LfxrasMCYXQkJvVnoXztHA1x+CQbXIdtZOIlpjC+6BjDcE0uhnpvfcA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "bowser": "^2.11.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-user-agent-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.226.0.tgz",
          "integrity": "sha512-othPc5Dz/pkYkxH+nZPhc1Al0HndQT8zHD4e9h+EZ+8lkd8n+IsnLfTS/mSJWrfiC6UlNRVw55cItstmJyMe/A==",
          "optional": true,
          "requires": {
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-utf8-node": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
          "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        }
      }
    },
    "@aws-sdk/client-sts": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.204.0.tgz",
      "integrity": "sha512-Tp6FqENRw31XK5r5hul1JXnQgHBhbbXhoMebyFih6/zjpATaqg0bnV6tpww4yPi3uc+yDGXKw2/tDroSsyTsRA==",
      "requires": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/credential-provider-node": "3.204.0",
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/hash-node": "3.201.0",
        "@aws-sdk/invalid-dependency": "3.201.0",
        "@aws-sdk/middleware-content-length": "3.201.0",
        "@aws-sdk/middleware-endpoint": "3.201.0",
        "@aws-sdk/middleware-host-header": "3.201.0",
        "@aws-sdk/middleware-logger": "3.201.0",
        "@aws-sdk/middleware-recursion-detection": "3.201.0",
        "@aws-sdk/middleware-retry": "3.201.0",
        "@aws-sdk/middleware-sdk-sts": "3.201.0",
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/middleware-signing": "3.201.0",
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/middleware-user-agent": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/smithy-client": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-base64-browser": "3.188.0",
        "@aws-sdk/util-base64-node": "3.201.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.201.0",
        "@aws-sdk/util-defaults-mode-browser": "3.201.0",
        "@aws-sdk/util-defaults-mode-node": "3.201.0",
        "@aws-sdk/util-endpoints": "3.202.0",
        "@aws-sdk/util-user-agent-browser": "3.201.0",
        "@aws-sdk/util-user-agent-node": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/config-resolver": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.201.0.tgz",
      "integrity": "sha512-6YLIel7OGMGi+r8XC1A54cQJRIpx/NJ4fBALy44zFpQ+fdJUEmw4daUf1LECmAQiPA2Pr/hD0nBtX+wiiTf5/g==",
      "requires": {
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-config-provider": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-cognito-identity": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-cognito-identity/-/credential-provider-cognito-identity-3.226.0.tgz",
      "integrity": "sha512-ukueK6kgTxvUX89oQBoArj7Oh0dYfkToHypnin08SHRZry9VNnK5IfSMO+Q1tXmxCnDtai1ejaAOny900OjMyg==",
      "optional": true,
      "requires": {
        "@aws-sdk/client-cognito-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "dependencies": {
        "@aws-sdk/property-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
          "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/types": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
          "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        }
      }
    },
    "@aws-sdk/credential-provider-env": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.201.0.tgz",
      "integrity": "sha512-g2MJsowzFhSsIOITUjYp7EzWFeHINjEP526Uf+5z2/p2kxQVwYYWZQK7j+tPE2Bk3MEjGOCmVHbbE7IFj0rNHw==",
      "requires": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-imds": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.201.0.tgz",
      "integrity": "sha512-i8U2k3/L3iUWJJ1GSlwVBMfLQ2OTUT97E8yJi/xz5GavYuPOsUQWQe4fp7WGQivxh+AqybXAGFUCYub6zfUqag==",
      "requires": {
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-ini": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.204.0.tgz",
      "integrity": "sha512-ddtaS0ya5lgZZwfuJ/FuniroreLJ6yDgPAasol/rla9U5EU0qUEK1+6PX463exghUGjYfTqxdrKXhGYZfuEoIw==",
      "requires": {
        "@aws-sdk/credential-provider-env": "3.201.0",
        "@aws-sdk/credential-provider-imds": "3.201.0",
        "@aws-sdk/credential-provider-sso": "3.204.0",
        "@aws-sdk/credential-provider-web-identity": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-node": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.204.0.tgz",
      "integrity": "sha512-kGbR5JE90zBGDS4cIz7tlUklMMeOm5oc5ES74YStLUacpQKwzVcHmDG8aT2DCONS/wEYysOIs5LygHurOJ/+Ww==",
      "requires": {
        "@aws-sdk/credential-provider-env": "3.201.0",
        "@aws-sdk/credential-provider-imds": "3.201.0",
        "@aws-sdk/credential-provider-ini": "3.204.0",
        "@aws-sdk/credential-provider-process": "3.201.0",
        "@aws-sdk/credential-provider-sso": "3.204.0",
        "@aws-sdk/credential-provider-web-identity": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-process": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.201.0.tgz",
      "integrity": "sha512-jTK3HSZgNj/hVrWb0wuF/cPUWSJYoRI/80fnN55o6QLS8WWIgOI8o2PNeVTAT5OrKioSoN4fgKTeUm3DZy3npQ==",
      "requires": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-sso": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.204.0.tgz",
      "integrity": "sha512-iS884Gda99x4zmdCK3XxFcceve4wB+wudpeTUm2wwX9AGrSzoUnLWqNXv/R8UAMAsKANaWMBkqv/bsHpsEitZw==",
      "requires": {
        "@aws-sdk/client-sso": "3.204.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-provider-web-identity": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.201.0.tgz",
      "integrity": "sha512-U54bqhYaClPVZfswgknhlICp3BAtKXpOgHQCUF8cko5xUgbL4lVgd1rC3lWviGFMQAaTIF3QOXyEouemxr3VXw==",
      "requires": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/credential-providers": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-providers/-/credential-providers-3.226.0.tgz",
      "integrity": "sha512-oNkUBxlX0kmwt8jEyQAH7p5Tk1g9iWEKGGCTPPZ7A5RoZpmv83zT8ReZ/+QsSmJIWGb0zzraHMzKbmfMSeztZg==",
      "optional": true,
      "requires": {
        "@aws-sdk/client-cognito-identity": "3.226.0",
        "@aws-sdk/client-sso": "3.226.0",
        "@aws-sdk/client-sts": "3.226.0",
        "@aws-sdk/credential-provider-cognito-identity": "3.226.0",
        "@aws-sdk/credential-provider-env": "3.226.0",
        "@aws-sdk/credential-provider-imds": "3.226.0",
        "@aws-sdk/credential-provider-ini": "3.226.0",
        "@aws-sdk/credential-provider-node": "3.226.0",
        "@aws-sdk/credential-provider-process": "3.226.0",
        "@aws-sdk/credential-provider-sso": "3.226.0",
        "@aws-sdk/credential-provider-web-identity": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "dependencies": {
        "@aws-sdk/abort-controller": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.226.0.tgz",
          "integrity": "sha512-cJVzr1xxPBd08voknXvR0RLgtZKGKt6WyDpH/BaPCu3rfSqWCDZKzwqe940eqosjmKrxC6pUZNKASIqHOQ8xxQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/client-sso": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.226.0.tgz",
          "integrity": "sha512-+Hl1YSLKrxPnQLijhWryI6uV8eKZIsUhvWlzFKx75kjxzjsC/jyk5zV59jnCu0SCCepXB8DKyLVa2WpH7iAHew==",
          "optional": true,
          "requires": {
            "@aws-crypto/sha256-browser": "2.0.0",
            "@aws-crypto/sha256-js": "2.0.0",
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/fetch-http-handler": "3.226.0",
            "@aws-sdk/hash-node": "3.226.0",
            "@aws-sdk/invalid-dependency": "3.226.0",
            "@aws-sdk/middleware-content-length": "3.226.0",
            "@aws-sdk/middleware-endpoint": "3.226.0",
            "@aws-sdk/middleware-host-header": "3.226.0",
            "@aws-sdk/middleware-logger": "3.226.0",
            "@aws-sdk/middleware-recursion-detection": "3.226.0",
            "@aws-sdk/middleware-retry": "3.226.0",
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/middleware-user-agent": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/node-http-handler": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/smithy-client": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "@aws-sdk/util-body-length-browser": "3.188.0",
            "@aws-sdk/util-body-length-node": "3.208.0",
            "@aws-sdk/util-defaults-mode-browser": "3.226.0",
            "@aws-sdk/util-defaults-mode-node": "3.226.0",
            "@aws-sdk/util-endpoints": "3.226.0",
            "@aws-sdk/util-user-agent-browser": "3.226.0",
            "@aws-sdk/util-user-agent-node": "3.226.0",
            "@aws-sdk/util-utf8-browser": "3.188.0",
            "@aws-sdk/util-utf8-node": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/client-sts": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.226.0.tgz",
          "integrity": "sha512-ZBlqRVbnHvvbkN5g56+mXltNybHNzgV69+2ARubQ8ge9U2qF/LweCmGqZnZLWqdGXwaB9IOvz5ZW2npyJh1X/A==",
          "optional": true,
          "requires": {
            "@aws-crypto/sha256-browser": "2.0.0",
            "@aws-crypto/sha256-js": "2.0.0",
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/credential-provider-node": "3.226.0",
            "@aws-sdk/fetch-http-handler": "3.226.0",
            "@aws-sdk/hash-node": "3.226.0",
            "@aws-sdk/invalid-dependency": "3.226.0",
            "@aws-sdk/middleware-content-length": "3.226.0",
            "@aws-sdk/middleware-endpoint": "3.226.0",
            "@aws-sdk/middleware-host-header": "3.226.0",
            "@aws-sdk/middleware-logger": "3.226.0",
            "@aws-sdk/middleware-recursion-detection": "3.226.0",
            "@aws-sdk/middleware-retry": "3.226.0",
            "@aws-sdk/middleware-sdk-sts": "3.226.0",
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/middleware-signing": "3.226.0",
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/middleware-user-agent": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/node-http-handler": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/smithy-client": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "@aws-sdk/util-body-length-browser": "3.188.0",
            "@aws-sdk/util-body-length-node": "3.208.0",
            "@aws-sdk/util-defaults-mode-browser": "3.226.0",
            "@aws-sdk/util-defaults-mode-node": "3.226.0",
            "@aws-sdk/util-endpoints": "3.226.0",
            "@aws-sdk/util-user-agent-browser": "3.226.0",
            "@aws-sdk/util-user-agent-node": "3.226.0",
            "@aws-sdk/util-utf8-browser": "3.188.0",
            "@aws-sdk/util-utf8-node": "3.208.0",
            "fast-xml-parser": "4.0.11",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/config-resolver": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.226.0.tgz",
          "integrity": "sha512-0UWXtfnTT0OtnRP8jJodc8V7xAnWSqsh4RCRyV5uu3Z2Tv+xyW91GKxO+gOXoUP0hHu0lvBM9lYiMJcJWZYLYw==",
          "optional": true,
          "requires": {
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-config-provider": "3.208.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-env": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.226.0.tgz",
          "integrity": "sha512-sd8uK1ojbXxaZXlthzw/VXZwCPUtU3PjObOfr3Evj7MPIM2IH8h29foOlggx939MdLQGboJf9gKvLlvKDWtJRA==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-imds": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.226.0.tgz",
          "integrity": "sha512-//z/COQm2AjYFI1Lb0wKHTQSrvLFTyuKLFQGPJsKS7DPoxGOCKB7hmYerlbl01IDoCxTdyL//TyyPxbZEOQD5Q==",
          "optional": true,
          "requires": {
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-ini": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.226.0.tgz",
          "integrity": "sha512-Sj7SGl53qmKkD7wvgU0MSTyj8ho6A3tKVbadTHljVz60jiauTEM97Z1DIai6U3oPFVteaKqx7npc8ozeK6mKNg==",
          "optional": true,
          "requires": {
            "@aws-sdk/credential-provider-env": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/credential-provider-sso": "3.226.0",
            "@aws-sdk/credential-provider-web-identity": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.226.0.tgz",
          "integrity": "sha512-kuOeiVmlhSyMC1Eix0pqHmb4EmpbMHrTw+9ObZbQ2bRXy05Q9fLA6SVBcI01bI1KVh7Qqz9i8ojOY3A2zscjyA==",
          "optional": true,
          "requires": {
            "@aws-sdk/credential-provider-env": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/credential-provider-ini": "3.226.0",
            "@aws-sdk/credential-provider-process": "3.226.0",
            "@aws-sdk/credential-provider-sso": "3.226.0",
            "@aws-sdk/credential-provider-web-identity": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-process": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.226.0.tgz",
          "integrity": "sha512-iUDMdnrTvbvaCFhWwqyXrhvQ9+ojPqPqXhwZtY1X/Qaz+73S9gXBPJHZaZb2Ke0yKE1Ql3bJbKvmmxC/qLQMng==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-sso": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.226.0.tgz",
          "integrity": "sha512-QSBeyOIAus4/8u/DeAstE8w/zw+F7PQohdB8JFP/BPaCfc8uKue4UkqqvQWRfm4VSEnHeXt037MDopmCpd98Iw==",
          "optional": true,
          "requires": {
            "@aws-sdk/client-sso": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/token-providers": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/credential-provider-web-identity": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.226.0.tgz",
          "integrity": "sha512-CCpv847rLB0SFOHz2igvUMFAzeT2fD3YnY4C8jltuJoEkn0ITn1Hlgt13nTJ5BUuvyti2mvyXZHmNzhMIMrIlw==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/fetch-http-handler": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.226.0.tgz",
          "integrity": "sha512-JewZPMNEBXfi1xVnRa7pVtK/zgZD8/lQ/YnD8pq79WuMa2cwyhDtr8oqCoqsPW+WJT5ScXoMtuHxN78l8eKWgg==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/querystring-builder": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-base64": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/hash-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.226.0.tgz",
          "integrity": "sha512-MdlJhJ9/Espwd0+gUXdZRsHuostB2WxEVAszWxobP0FTT9PnicqnfK7ExmW+DUAc0ywxtEbR3e0UND65rlSTVw==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/invalid-dependency": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.226.0.tgz",
          "integrity": "sha512-QXOYFmap8g9QzRjumcRCIo2GEZkdCwd7ePQW0OABWPhKHzlJ74vvBxywjU3s39EEBEluWXtZ7Iufg6GxZM4ifw==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-content-length": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.226.0.tgz",
          "integrity": "sha512-ksUzlHJN2JMuyavjA46a4sctvnrnITqt2tbGGWWrAuXY1mel2j+VbgnmJUiwHKUO6bTFBBeft5Vd1TSOb4JmiA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-endpoint": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.226.0.tgz",
          "integrity": "sha512-EvLFafjtUxTT0AC9p3aBQu1/fjhWdIeK58jIXaNFONfZ3F8QbEYUPuF/SqZvJM6cWfOO9qwYKkRDbCSTYhprIg==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-serde": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/url-parser": "3.226.0",
            "@aws-sdk/util-config-provider": "3.208.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-host-header": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.226.0.tgz",
          "integrity": "sha512-haVkWVh6BUPwKgWwkL6sDvTkcZWvJjv8AgC8jiQuSl8GLZdzHTB8Qhi3IsfFta9HAuoLjxheWBE5Z/L0UrfhLA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-logger": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.226.0.tgz",
          "integrity": "sha512-m9gtLrrYnpN6yckcQ09rV7ExWOLMuq8mMPF/K3DbL/YL0TuILu9i2T1W+JuxSX+K9FMG2HrLAKivE/kMLr55xA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-recursion-detection": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.226.0.tgz",
          "integrity": "sha512-mwRbdKEUeuNH5TEkyZ5FWxp6bL2UC1WbY+LDv6YjHxmSMKpAoOueEdtU34PqDOLrpXXxIGHDFmjeGeMfktyEcA==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-retry": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.226.0.tgz",
          "integrity": "sha512-uMn4dSkv9Na2uvt6K3HgTnVrCRAlGv1MBAtUDLXONqUv1L/Z1fp3CkFkLKQHKylfBwBhe6dXfYEo87i8LZFoqg==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/service-error-classification": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1",
            "uuid": "^8.3.2"
          }
        },
        "@aws-sdk/middleware-sdk-sts": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.226.0.tgz",
          "integrity": "sha512-NN9T/qoSD1kZvAT+VLny3NnlqgylYQcsgV3rvi/8lYzw/G/2s8VS6sm/VTWGGZhx08wZRv20MWzYu3bftcyqUg==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-signing": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-serde": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.226.0.tgz",
          "integrity": "sha512-nPuOOAkSfx9TxzdKFx0X2bDlinOxGrqD7iof926K/AEflxGD1DBdcaDdjlYlPDW2CVE8LV/rAgbYuLxh/E/1VA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-signing": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.226.0.tgz",
          "integrity": "sha512-E6HmtPcl+IjYDDzi1xI2HpCbBq2avNWcjvCriMZWuTAtRVpnA6XDDGW5GY85IfS3A8G8vuWqEVPr8JcYUcjfew==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/signature-v4": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-stack": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.226.0.tgz",
          "integrity": "sha512-85wF29LvPvpoed60fZGDYLwv1Zpd/cM0C22WSSFPw1SSJeqO4gtFYyCg2squfT3KI6kF43IIkOCJ+L7GtryPug==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/middleware-user-agent": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.226.0.tgz",
          "integrity": "sha512-N1WnfzCW1Y5yWhVAphf8OPGTe8Df3vmV7/LdsoQfmpkCZgLZeK2o0xITkUQhRj1mbw7yp8tVFLFV3R2lMurdAQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/node-config-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.226.0.tgz",
          "integrity": "sha512-B8lQDqiRk7X5izFEUMXmi8CZLOKCTWQJU9HQf3ako+sF0gexo4nHN3jhoRWyLtcgC5S3on/2jxpAcqtm7kuY3w==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/shared-ini-file-loader": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/node-http-handler": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.226.0.tgz",
          "integrity": "sha512-xQCddnZNMiPmjr3W7HYM+f5ir4VfxgJh37eqZwX6EZmyItFpNNeVzKUgA920ka1VPz/ZUYB+2OFGiX3LCLkkaA==",
          "optional": true,
          "requires": {
            "@aws-sdk/abort-controller": "3.226.0",
            "@aws-sdk/protocol-http": "3.226.0",
            "@aws-sdk/querystring-builder": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/property-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
          "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/protocol-http": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.226.0.tgz",
          "integrity": "sha512-zWkVqiTA9RXL6y0hhfZc9bcU4DX2NI6Hw9IhQmSPeM59mdbPjJlY4bLlMr5YxywqO3yQ/ylNoAfrEzrDjlOSRg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/querystring-builder": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.226.0.tgz",
          "integrity": "sha512-LVurypuNeotO4lmirKXRC4NYrZRAyMJXuwO0f2a5ZAUJCjauwYrifKue6yCfU7bls7gut7nfcR6B99WBYpHs3g==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-uri-escape": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/querystring-parser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.226.0.tgz",
          "integrity": "sha512-FzB+VrQ47KAFxiPt2YXrKZ8AOLZQqGTLCKHzx4bjxGmwgsjV8yIbtJiJhZLMcUQV4LtGeIY9ixIqQhGvnZHE4A==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/service-error-classification": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.226.0.tgz",
          "integrity": "sha512-9R01dBpE8JILe2CTft7YN2tMufT2mMWMTqxmHwPSmOpsxHTj8hEII7GTfvpb95ThHwW7XMNhg7pbHLbrTJZCVA==",
          "optional": true
        },
        "@aws-sdk/shared-ini-file-loader": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
          "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/signature-v4": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.226.0.tgz",
          "integrity": "sha512-/R5q5agdPd7HJB68XMzpxrNPk158EHUvkFkuRu5Qf3kkkHebEzWEBlWoVpUe6ss4rP9Tqcue6xPuaftEmhjpYw==",
          "optional": true,
          "requires": {
            "@aws-sdk/is-array-buffer": "3.201.0",
            "@aws-sdk/types": "3.226.0",
            "@aws-sdk/util-hex-encoding": "3.201.0",
            "@aws-sdk/util-middleware": "3.226.0",
            "@aws-sdk/util-uri-escape": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/smithy-client": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.226.0.tgz",
          "integrity": "sha512-BWr1FhWSUhkSBp0TLzliD5AQBjA2Jmo9FlOOt+cBwd9BKkSGlGj+HgATYJ83Sjjg2+J6qvEZBxB78LKVHhorBw==",
          "optional": true,
          "requires": {
            "@aws-sdk/middleware-stack": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/types": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
          "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/url-parser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.226.0.tgz",
          "integrity": "sha512-p5RLE0QWyP0OcTOLmFcLdVgUcUEzmEfmdrnOxyNzomcYb0p3vUagA5zfa1HVK2azsQJFBv28GfvMnba9bGhObg==",
          "optional": true,
          "requires": {
            "@aws-sdk/querystring-parser": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-base64": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
          "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
          "optional": true,
          "requires": {
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-body-length-node": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
          "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-buffer-from": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
          "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
          "optional": true,
          "requires": {
            "@aws-sdk/is-array-buffer": "3.201.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-config-provider": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
          "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-defaults-mode-browser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.226.0.tgz",
          "integrity": "sha512-chLx+6AeMSjuPsCVbI1B4Pg3jftjjcsuTsJucjo0DKBb1VSWqPCitmOILQVvKiA2Km8TSs3VcbUuOCyDExkzAg==",
          "optional": true,
          "requires": {
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "bowser": "^2.11.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-defaults-mode-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.226.0.tgz",
          "integrity": "sha512-Zr0AEj6g8gqiOhr31Pa2tdOFdPQciaAUCg3Uj/eH0znNBdVoptCj67oCW/I5v4pY4ZLZtGhr3uuoxDJH2MB3yg==",
          "optional": true,
          "requires": {
            "@aws-sdk/config-resolver": "3.226.0",
            "@aws-sdk/credential-provider-imds": "3.226.0",
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/property-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-endpoints": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.226.0.tgz",
          "integrity": "sha512-iqOkac/zLmyPBUJd7SLN0PeZMkOmlGgD5PHmmekTClOkce2eUjK9SNX1PzL73aXPoPTyhg9QGLH8uEZEQ8YUzg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-middleware": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.226.0.tgz",
          "integrity": "sha512-B96CQnwX4gRvQdaQkdUtqvDPkrptV5+va6FVeJOocU/DbSYMAScLxtR3peMS8cnlOT6nL1Eoa42OI9AfZz1VwQ==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-user-agent-browser": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.226.0.tgz",
          "integrity": "sha512-PhBIu2h6sPJPcv2I7ELfFizdl5pNiL4LfxrasMCYXQkJvVnoXztHA1x+CQbXIdtZOIlpjC+6BjDcE0uhnpvfcA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "bowser": "^2.11.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-user-agent-node": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.226.0.tgz",
          "integrity": "sha512-othPc5Dz/pkYkxH+nZPhc1Al0HndQT8zHD4e9h+EZ+8lkd8n+IsnLfTS/mSJWrfiC6UlNRVw55cItstmJyMe/A==",
          "optional": true,
          "requires": {
            "@aws-sdk/node-config-provider": "3.226.0",
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/util-utf8-node": {
          "version": "3.208.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
          "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
          "optional": true,
          "requires": {
            "@aws-sdk/util-buffer-from": "3.208.0",
            "tslib": "^2.3.1"
          }
        }
      }
    },
    "@aws-sdk/eventstream-codec": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-codec/-/eventstream-codec-3.201.0.tgz",
      "integrity": "sha512-lz0FFzOMXvVdy47GnRk+niK+L7MxUZITvK7UUOL6u++JB+54jS+EsD9iLSNhM5qoR9vCiFjabBhkPz9Ml6bdmw==",
      "requires": {
        "@aws-crypto/crc32": "2.0.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/eventstream-serde-browser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-browser/-/eventstream-serde-browser-3.201.0.tgz",
      "integrity": "sha512-3/rZRBTxikj1Uyo8NDdaXey9zy7Xck/rKjykpBMbUYr4lnvXZDGQ0ie4/EMz+k5UbRsZgP46KdJo2ThgwTBvdw==",
      "requires": {
        "@aws-sdk/eventstream-serde-universal": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/eventstream-serde-config-resolver": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-config-resolver/-/eventstream-serde-config-resolver-3.201.0.tgz",
      "integrity": "sha512-dUpqO5yX1TdAShIuyBuWMiW7DWj9adtoeAzFvqPyQMXRFTPDQcggSelfoaXGcvUQUfcNZDUbCoigU23f+xmk6Q==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/eventstream-serde-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-node/-/eventstream-serde-node-3.201.0.tgz",
      "integrity": "sha512-h7YYPKrPIRjsAq8PnpkAmmwnz2UofHr98BCFtw/eAIFVLZ8lzQbi1kI+dAmwPSlY1L59tgXakmJ6cGvtsDdG5w==",
      "requires": {
        "@aws-sdk/eventstream-serde-universal": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/eventstream-serde-universal": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/eventstream-serde-universal/-/eventstream-serde-universal-3.201.0.tgz",
      "integrity": "sha512-Iq7sofa2Ns/ToseL8/m0PwIO5PHY800K4fi3i+6P1JA0bpZxmvkA/bfn+WCLvcB7sNluasqETHNxGs6DgNteIA==",
      "requires": {
        "@aws-sdk/eventstream-codec": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/fetch-http-handler": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.204.0.tgz",
      "integrity": "sha512-TfIhWYQ4CTjrD+FSuBcKMSVrqq8GCwqCfUyalWmSKo4JIFhN5OxUnOFb1/ecE/TJX+YgZ65w4qhVJVHHmh229Q==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/querystring-builder": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/hash-blob-browser": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-blob-browser/-/hash-blob-browser-3.204.0.tgz",
      "integrity": "sha512-Et0Nic7jnrYtqQt97JMPGkKJ3CFaulW70vFElDypV+TURsuxelweANQfrHsurk+xvHLHakMG5glAVHgyONtXZg==",
      "requires": {
        "@aws-sdk/chunked-blob-reader": "3.188.0",
        "@aws-sdk/chunked-blob-reader-native": "3.204.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/hash-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.201.0.tgz",
      "integrity": "sha512-WJsMZg5/TMoWnLM+0NuwLwFzHsi89Bi9J1Dt7JdJHXFLoEZV54FEz1PK/Sq5NOldhVljpXQwWOB2dHA2wxFztg==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/hash-stream-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-stream-node/-/hash-stream-node-3.201.0.tgz",
      "integrity": "sha512-nagsIlflHlFNswa6XQfpH7/G0OkKu8t2BhZ5NnNzPCx56kcY2asztwBTEeRJEGu8FaaHhUXbVuWi746AK6PHSQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/invalid-dependency": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.201.0.tgz",
      "integrity": "sha512-f/zgntOfIozNyKSaG9dvHjjBaR3y20kYNswMYkSuCM2NIT5LpyHiiq5I11TwaocatUFcDztWpcsv7vHpIgI5Ig==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/is-array-buffer": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/is-array-buffer/-/is-array-buffer-3.201.0.tgz",
      "integrity": "sha512-UPez5qLh3dNgt0DYnPD/q0mVJY84rA17QE26hVNOW3fAji8W2wrwrxdacWOxyXvlxWsVRcKmr+lay1MDqpAMfg==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/md5-js": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/md5-js/-/md5-js-3.204.0.tgz",
      "integrity": "sha512-RXiCvi58Xl2ja9bmd5iFVZyzhGVzBdlLC7uu8Ug9IbF++6muBJ2WdjMkhoMsi5GXqs6238rX3rRt3dLVGKEIqA==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-bucket-endpoint": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-bucket-endpoint/-/middleware-bucket-endpoint-3.201.0.tgz",
      "integrity": "sha512-ZZp3YwkEaPqrdL46WzYOMWdBixaVDG0crCdoyBNw/3cI+4bFcsgFp369mqDDmRj3cuJKV4QNSRjlr2ElTz65dQ==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-arn-parser": "3.201.0",
        "@aws-sdk/util-config-provider": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-content-length": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.201.0.tgz",
      "integrity": "sha512-p4G9AtdrKO8A3Z4RyZiy0isEYwuge7bQRBS7UzcGkcIOhJONq2pcM+gRZYz+NWvfYYNWUg5uODsFQfU8342yKg==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-endpoint": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.201.0.tgz",
      "integrity": "sha512-F3JlXo5GusbeZR956hA9VxmDxUeg77Xh6o8fveAE2+G4Bjcb1iq9jPNlw6A14vDj3oTKenv2LLnjL2OIfl6hRA==",
      "requires": {
        "@aws-sdk/middleware-serde": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/url-parser": "3.201.0",
        "@aws-sdk/util-config-provider": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-expect-continue": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-expect-continue/-/middleware-expect-continue-3.201.0.tgz",
      "integrity": "sha512-tpNLdHpwgWAvoMicUARld5MwQ2B6iKGW6vN1Z1si9LTJWGtu8ZXAWACuUDLxC+6A1mDkAcbEc7oy4ABjFldUqA==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-flexible-checksums": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-flexible-checksums/-/middleware-flexible-checksums-3.201.0.tgz",
      "integrity": "sha512-InmDcMeaBu1QQ9oS+85eq+hJWTZjYUe9QK2f6S035Tka9FBee4kI8eU61ImNit5FsFsw+POcVGmjYukeXsB4QA==",
      "requires": {
        "@aws-crypto/crc32": "2.0.0",
        "@aws-crypto/crc32c": "2.0.0",
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-host-header": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.201.0.tgz",
      "integrity": "sha512-7KNzdV7nFcKAoahvgGAlzsOq9FFDsU5h3w2iPtVdJhz6ZRDH/2v6WFeUCji+UNZip36gFfMPivoO8Y5smb5r/A==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-location-constraint": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-location-constraint/-/middleware-location-constraint-3.201.0.tgz",
      "integrity": "sha512-3QL6rM/7Qw0rIqRRI7hQJ6YupR1EXbyhrGQC5nMoZSZ/dQkGkYQLQJmwQDc4yadkJEGE8E1k2yQN0dF65PnJDA==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-logger": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.201.0.tgz",
      "integrity": "sha512-kYLsa9x3oUJxYU7V5KOO50Kl7b0kk+I4ltkrdarLvvXcVI7ZXmWHzHLT2dkUhj8S0ceVdi0FYHVPJ3GoE8re4A==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-recursion-detection": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.201.0.tgz",
      "integrity": "sha512-NGOr+n559ZcJLdFoJR8LNGdrOJFIp2BTuWEDYeicNdNb0bETTXrkzcfT1BRhV9CWqCDmjFvjdrzbhS0cw/UUGA==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-retry": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.201.0.tgz",
      "integrity": "sha512-4jQjSKCpSc4oB1X9nNq4FbIAwQrr+mvmUSmg/oe2Llf42Ak1G9gg3rNTtQdfzA/wNMlL4ZFfF5Br+uz06e1hnQ==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/service-error-classification": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      }
    },
    "@aws-sdk/middleware-sdk-s3": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-s3/-/middleware-sdk-s3-3.201.0.tgz",
      "integrity": "sha512-IZGFWevHMQnyDnJTK2MponaSuFbHkj7z7MYX964hC0qoJEfED+rYPYIhUIPjZm5RiQq34MDQPWHLkNQLf9HnPg==",
      "requires": {
        "@aws-sdk/middleware-bucket-endpoint": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-arn-parser": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-sdk-sts": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.201.0.tgz",
      "integrity": "sha512-clZuXcoN0mAP4JH5C6pW5+0tdF25+fpFJqE7GNRjjH/NYNk6ImVI0Kq2espEWwVBuaS0/chTDK3b+pK8YOWdhw==",
      "requires": {
        "@aws-sdk/middleware-signing": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-serde": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.201.0.tgz",
      "integrity": "sha512-Z7AzIuqEDvsZmp80zeT1oYxsoB8uQZby20Z8kF6/vNoq3sIzaGf/wHeNn0p+Vgo2auGSbZcVUZKoDptQLSLwIQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-signing": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.201.0.tgz",
      "integrity": "sha512-08ri5+mB28tva9RjVIXFcUP5lRTx+Pj8C2HYqF2GL5H3uAo+h3RQ++fEG1uwUMLf7tCEFivcw6SHA1KmCnB7+w==",
      "requires": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-ssec": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-ssec/-/middleware-ssec-3.201.0.tgz",
      "integrity": "sha512-o1OUjVhtXeFbNyNijw4NPu/2xcA2SqqGNg0e5TP0j4HKfZ1S/QVKVCenx+9dlwlElW0tAQxL4bsNGNWOar3FTA==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-stack": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.201.0.tgz",
      "integrity": "sha512-lqHYSBP5FBxzA5w5XiYYYpfXabFzleXonqRkqZts1tapNJ4sOd+itiKG8JoNP7LDOwJ8qxNW/a33/gQeh3wkwQ==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/middleware-user-agent": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.201.0.tgz",
      "integrity": "sha512-/rYZ93WN1gDJudXis/0382CEoTqRa4qZJA608u2EPWs5aiMocUrm7pjH5XvKm2OYX8K/lyaMSBvL2OTIMzXGaQ==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/node-config-provider": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.201.0.tgz",
      "integrity": "sha512-JO0K2qPTYn+pPC7g8rWr1oueg9CqGCkYbINuAuz79vjToOLUQnZT9GiFm7QADe6J6RT1oGEKRQabNaJnp8cFpQ==",
      "requires": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/shared-ini-file-loader": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/node-http-handler": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.201.0.tgz",
      "integrity": "sha512-bWjXBd4WCiQcV4PwY+eFnlz9tZ4UiqfiJteav4MDt8YWkVlsVnR8RutmVSm3KZZjO2tJNSrla0ZWBebkNnI/Xg==",
      "requires": {
        "@aws-sdk/abort-controller": "3.201.0",
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/querystring-builder": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/property-provider": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.201.0.tgz",
      "integrity": "sha512-lVMP75VsYHIW04uYbkjA0I8Bb7b+aEj6PBBLdFoA22S0uCeJOD42OSr2Gtg2fToDGO7LQJw/K2D+LMCYKfZ3vQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/protocol-http": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.201.0.tgz",
      "integrity": "sha512-RdOc1elWFpj8MogxG87nkhtylw0a+OD7W8WFM+Gw4yJMkl7cwW42VIBFfb0+KCGZfIQltIeSLRvfe3WvVPyo7Q==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/querystring-builder": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.201.0.tgz",
      "integrity": "sha512-FgQnVHpYR19w/HmHEgWpykCn9tdogW0n45Ins6LBCo2aImDf9kBATD4xgN/F2rtogGuLGgu5LIIMHIOj1Tzs/w==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/querystring-parser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.201.0.tgz",
      "integrity": "sha512-vS9Ljbqrwi0sIKYxgyZYJUN1AcE291hvuqwty9etgD2w/26SbWiMhjIW/fXJUOZjUvGKkYCpbivJYSzAGAuWfQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/service-error-classification": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.201.0.tgz",
      "integrity": "sha512-Pfcfmurgq8UpM0rXco6FVblcruqN4Mo3TW8/yaXrbctWpmdNT/8v19fffQIIgk94TU8Vf/nPJ7E5DXL7MZr4Fw=="
    },
    "@aws-sdk/shared-ini-file-loader": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.201.0.tgz",
      "integrity": "sha512-Pbxk0TXep0yI8MnK7Prly6JuBm5Me9AITav8/zPEgTZ3fMhXhQhhiuQcuTCI9GeosSzoiu8VvK53oPtBZZFnXQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/signature-v4": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.201.0.tgz",
      "integrity": "sha512-zEHoG1/hzJq169slggkPy1SN9YPWI78Bbe/MvHGYmCmQDspblu60JSBIbAatNqAxAmcWKc2HqpyGKjCkMG94ZA==",
      "requires": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.201.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/signature-v4-multi-region": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4-multi-region/-/signature-v4-multi-region-3.201.0.tgz",
      "integrity": "sha512-5lVYYcWDwZd/q0mYPGn4zht08nIeeACYCM8HKYMwF7Qzcrne+RM0F4GU1ZWoId1pxjiX+xQSOUEeskx3A5wUtg==",
      "requires": {
        "@aws-sdk/protocol-http": "3.201.0",
        "@aws-sdk/signature-v4": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-arn-parser": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/smithy-client": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.201.0.tgz",
      "integrity": "sha512-cL87Jgxczee8YFkWGWKQ2Ze0vjn4+eCa1kDvEYMCOQvNujTuFgatXLgije5a7nVkSnL9WLoIP7Y7fsBGrKfMnQ==",
      "requires": {
        "@aws-sdk/middleware-stack": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/token-providers": {
      "version": "3.226.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/token-providers/-/token-providers-3.226.0.tgz",
      "integrity": "sha512-3ouRt2i3ve8ivg54PxPhtOTcipzf6BoQsMw0EiO23yYKujhyeFH2IkxV4EYC687xFrUjheqJf8FWU/DD8EQ/ow==",
      "optional": true,
      "requires": {
        "@aws-sdk/client-sso-oidc": "3.226.0",
        "@aws-sdk/property-provider": "3.226.0",
        "@aws-sdk/shared-ini-file-loader": "3.226.0",
        "@aws-sdk/types": "3.226.0",
        "tslib": "^2.3.1"
      },
      "dependencies": {
        "@aws-sdk/property-provider": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.226.0.tgz",
          "integrity": "sha512-TsljjG+Sg0LmdgfiAlWohluWKnxB/k8xenjeozZfzOr5bHmNHtdbWv6BtNvD/R83hw7SFXxbJHlD5H4u9p2NFg==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/shared-ini-file-loader": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.226.0.tgz",
          "integrity": "sha512-661VQefsARxVyyV2FX9V61V+nNgImk7aN2hYlFKla6BCwZfMng+dEtD0xVGyg1PfRw0qvEv5LQyxMVgHcUSevA==",
          "optional": true,
          "requires": {
            "@aws-sdk/types": "3.226.0",
            "tslib": "^2.3.1"
          }
        },
        "@aws-sdk/types": {
          "version": "3.226.0",
          "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.226.0.tgz",
          "integrity": "sha512-MmmNHrWeO4man7wpOwrAhXlevqtOV9ZLcH4RhnG5LmRce0RFOApx24HoKENfFCcOyCm5LQBlsXCqi0dZWDWU0A==",
          "optional": true,
          "requires": {
            "tslib": "^2.3.1"
          }
        }
      }
    },
    "@aws-sdk/types": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.201.0.tgz",
      "integrity": "sha512-RCQj2pQyHD330Jd4c5CHJ87k2ZqC3Mmtl6nhwH1dy3vbnGUpc3q+3yinOKoTAY934kIa7ia32Y/2EjuyHxaj1A=="
    },
    "@aws-sdk/url-parser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.201.0.tgz",
      "integrity": "sha512-V15aqj0tj4Y79VpuIdHUvX4Nvn4hYPB0RAn/qg5CCComIl0doLOirAQtW1MOBOyctdRlD9Uv7d1QdPLzJZMHjQ==",
      "requires": {
        "@aws-sdk/querystring-parser": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-arn-parser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-arn-parser/-/util-arn-parser-3.201.0.tgz",
      "integrity": "sha512-FNZsr9ofEf3Ybglgj8ElhuXnHnSFCF1ctT/zGPwNc+7XTMROO36uPIxP22J/GTyMpf4Bx48rXs8JTFvu3P3hig==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-base64": {
      "version": "3.202.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.202.0.tgz",
      "integrity": "sha512-0QlvxCSU2CITeR/x87zls9ma+CkN3EXRGM3M5XnHWaneDI9K+O2uPpAbDfLh0SBJyO0AfIMn7Vh/BvnNNPEDpg==",
      "requires": {
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-base64-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64-browser/-/util-base64-browser-3.188.0.tgz",
      "integrity": "sha512-qlH+5NZBLiyKziL335BEPedYxX6j+p7KFRWXvDQox9S+s+gLCayednpK+fteOhBenCcR9fUZOVuAPScy1I8qCg==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-base64-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64-node/-/util-base64-node-3.201.0.tgz",
      "integrity": "sha512-ydZqNpB3l5kiicInpPDExPb5xHI7uyVIa1vMupnuIrJ412iNb0F2+K8LlFynzw6fSJShVKnqFcWOYRA96z1iIw==",
      "requires": {
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-body-length-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-browser/-/util-body-length-browser-3.188.0.tgz",
      "integrity": "sha512-8VpnwFWXhnZ/iRSl9mTf+VKOX9wDE8QtN4bj9pBfxwf90H1X7E8T6NkiZD3k+HubYf2J94e7DbeHs7fuCPW5Qg==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-body-length-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.201.0.tgz",
      "integrity": "sha512-q+gwQoLn/DOwirb2hgZJeEwo1D3vLhoD6FfSV42Ecfvtb4jHnWReWMHguujfCubuDgZCrMEvYQzuocS75HHsbA==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-buffer-from": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.201.0.tgz",
      "integrity": "sha512-s6Wjltd9vU+vR3n0pqSPmNDcrrkrVTdV4t7x2zz3nDsFKTI77iVNafDmuaUlOA/bIlpjCJqaWecoVrZmEKeR7A==",
      "requires": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-config-provider": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.201.0.tgz",
      "integrity": "sha512-cCRJlnRRP8vrLJomzJRBIyiyohsjJKmnIaQ9t0tAhGCywZbyjx6TlpYRZYfVWo+MwdF1Pi8ZScTrFPW0JuBOIQ==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-defaults-mode-browser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.201.0.tgz",
      "integrity": "sha512-skRMAM+xrV/sDvvtHC81ExEKQEiZFaRrRdUT39fBX1SpGnFTo2wpv7XK+rAW2XopGgnLPytXLQD97Kub79o4zA==",
      "requires": {
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-defaults-mode-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.201.0.tgz",
      "integrity": "sha512-9N5LXRhxigbkbEcjQ4nNXHuQxp0VFlbc2/5wbcuPjIKX/OROiQI4mYQ6nuSKk7eku5sNFb9FtEHeD/RZo8od6Q==",
      "requires": {
        "@aws-sdk/config-resolver": "3.201.0",
        "@aws-sdk/credential-provider-imds": "3.201.0",
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/property-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-endpoints": {
      "version": "3.202.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.202.0.tgz",
      "integrity": "sha512-sNees5uDp7nfEbvzaA1DAHqoEvEb9ZOkdNH5gcj/FMBETbr00YtsuXsTZogTHQsX/otRTiudZBE3iH7R4SLSAQ==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-hex-encoding": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-hex-encoding/-/util-hex-encoding-3.201.0.tgz",
      "integrity": "sha512-7t1vR1pVxKx0motd3X9rI3m/xNp78p3sHtP5yo4NP4ARpxyJ0fokBomY8ScaH2D/B+U5o9ARxldJUdMqyBlJcA==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-locate-window": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-locate-window/-/util-locate-window-3.201.0.tgz",
      "integrity": "sha512-hPJgifWh/rADabLAk1C9xXA2B3O4NUmbU58KgBRgC1HksiiHGFVZObB5fkBH8US/XV2jwORkpSf4OhretXQuKg==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-middleware": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.201.0.tgz",
      "integrity": "sha512-iAitcEZo17IyKn4ku1IBgtomr25esu5OuSRjw5Or4bNOeqXB0w50cItf/9qft8LIhbvBEAUtNAYXvqNzvhTZdQ==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-stream-browser": {
      "version": "3.204.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-stream-browser/-/util-stream-browser-3.204.0.tgz",
      "integrity": "sha512-LH+Th/Oww6icUvqVbL5Y+R4mUGUuwLRWpiOJnK8/Ufyw7JMEvHZOGXPIAtXmEB1t+0gTVVDCP0Z0y6ItINlGtA==",
      "requires": {
        "@aws-sdk/fetch-http-handler": "3.204.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-base64": "3.202.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-stream-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-stream-node/-/util-stream-node-3.201.0.tgz",
      "integrity": "sha512-RWU+ZJHKL4lYZBeNIpHo5EuNaYRDkJeytP8cbBQn+wuzDz19mGF2uikK+JaQdNd5HG9lovDP66SJ8gJ0WBnwNw==",
      "requires": {
        "@aws-sdk/node-http-handler": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-uri-escape": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-uri-escape/-/util-uri-escape-3.201.0.tgz",
      "integrity": "sha512-TeTWbGx4LU2c5rx0obHeDFeO9HvwYwQtMh1yniBz00pQb6Qt6YVOETVQikRZ+XRQwEyCg/dA375UplIpiy54mA==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-user-agent-browser": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.201.0.tgz",
      "integrity": "sha512-iL2gyz7GuUVtZcMZpqvfxdFrl9hc28qpagymmJ/w2yhN86YNPHdK8Sx1Yo6VxNGVDCCWGb7tHXf7VP+U4Yv/Lg==",
      "requires": {
        "@aws-sdk/types": "3.201.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-user-agent-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.201.0.tgz",
      "integrity": "sha512-6lhhvwB3AZSISnYQpDGdlyTrzfYK2P9QYjy7vZEBRd9TSOaggiFICXe03ZvZfVOSeg0EInlMKn1fIHzPUHRuHQ==",
      "requires": {
        "@aws-sdk/node-config-provider": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-utf8-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.188.0.tgz",
      "integrity": "sha512-jt627x0+jE+Ydr9NwkFstg3cUvgWh56qdaqAMDsqgRlKD21md/6G226z/Qxl7lb1VEW2LlmCx43ai/37Qwcj2Q==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-utf8-node": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.201.0.tgz",
      "integrity": "sha512-A+bJFR/1rHYOJg137E69L1sX0I+LH+xf9ZjMXG9BVO0hSo7yDPoJVpHrzTJyOc3tuRITjIGBv9Qi4TKcoOSi1A==",
      "requires": {
        "@aws-sdk/util-buffer-from": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/util-waiter": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-waiter/-/util-waiter-3.201.0.tgz",
      "integrity": "sha512-NE8+BkPDXq86oyVr9EKN1s+iN8GID8mhj6DbtEZKZES3fJ36xH7MldRylgCewgv1Qpd1W00M4c/mVvUx3zp7sg==",
      "requires": {
        "@aws-sdk/abort-controller": "3.201.0",
        "@aws-sdk/types": "3.201.0",
        "tslib": "^2.3.1"
      }
    },
    "@aws-sdk/xml-builder": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/xml-builder/-/xml-builder-3.201.0.tgz",
      "integrity": "sha512-brRdB1wwMgjWEnOQsv7zSUhIQuh7DEicrfslAqHop4S4FtSI3GQAShpQqgOpMTNFYcpaWKmE/Y1MJmNY7xLCnw==",
      "requires": {
        "tslib": "^2.3.1"
      }
    },
    "@discordjs/builders": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@discordjs/builders/-/builders-0.13.0.tgz",
      "integrity": "sha512-4L9y26KRNNU8Y7J78SRUN1Uhava9D8jfit/YqEaKi8gQRc7PdqKqk2poybo6RXaiyt/BgKYPfcjxT7WvzGfYCA==",
      "requires": {
        "@sapphire/shapeshift": "^2.0.0",
        "@sindresorhus/is": "^4.6.0",
        "discord-api-types": "^0.31.1",
        "fast-deep-equal": "^3.1.3",
        "ts-mixer": "^6.0.1",
        "tslib": "^2.3.1"
      }
    },
    "@discordjs/collection": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@discordjs/collection/-/collection-0.4.0.tgz",
      "integrity": "sha512-zmjq+l/rV35kE6zRrwe8BHqV78JvIh2ybJeZavBi5NySjWXqN3hmmAKg7kYMMXSeiWtSsMoZ/+MQi0DiQWy2lw=="
    },
    "@discordjs/rest": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@discordjs/rest/-/rest-0.4.1.tgz",
      "integrity": "sha512-rtWy+AIfNlfjGkAgA2TJLASdqli07aTNQceVGT6RQQiQaEqV0nsfBO4WtDlDzk7PmO3w+InP3dpwEolJI5jz0A==",
      "requires": {
        "@discordjs/collection": "^0.7.0-dev",
        "@sapphire/async-queue": "^1.3.1",
        "@sapphire/snowflake": "^3.2.1",
        "@types/node-fetch": "^2.6.1",
        "discord-api-types": "^0.29.0",
        "form-data": "^4.0.0",
        "node-fetch": "^2.6.7",
        "tslib": "^2.3.1"
      },
      "dependencies": {
        "@discordjs/collection": {
          "version": "0.7.0-dev.1650672508-3617093",
          "resolved": "https://registry.npmjs.org/@discordjs/collection/-/collection-0.7.0-dev.1650672508-3617093.tgz",
          "integrity": "sha512-Got8gPiFFEwY0tJo6hK/ZGvg8LFEYMyopchL/l5WjvN5YXDSKqlcSfWk3SqA9F8Eb2ZloauUoXY2B3uMMJUUBA=="
        },
        "discord-api-types": {
          "version": "0.29.0",
          "resolved": "https://registry.npmjs.org/discord-api-types/-/discord-api-types-0.29.0.tgz",
          "integrity": "sha512-Ekq1ICNpOTVajXKZguNFrsDeTmam+ZeA38txsNLZnANdXUjU6QBPIZLUQTC6MzigFGb0Tt8vk4xLnXmzv0shNg=="
        }
      }
    },
    "@eslint/eslintrc": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.2.2.tgz",
      "integrity": "sha512-lTVWHs7O2hjBFZunXTZYnYqtB9GakA1lnxIf+gKq2nY5gxkkNi/lQvveW6t8gFdOHTg6nG50Xs95PrLqVpcaLg==",
      "dev": true,
      "requires": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.3.1",
        "globals": "^13.9.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.0.4",
        "strip-json-comments": "^3.1.1"
      }
    },
    "@humanwhocodes/config-array": {
      "version": "0.9.5",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.9.5.tgz",
      "integrity": "sha512-ObyMyWxZiCu/yTisA7uzx81s40xR2fD5Cg/2Kq7G02ajkNubJf6BopgDTmDyc3U7sXpNKM8cYOw7s7Tyr+DnCw==",
      "dev": true,
      "requires": {
        "@humanwhocodes/object-schema": "^1.2.1",
        "debug": "^4.1.1",
        "minimatch": "^3.0.4"
      }
    },
    "@humanwhocodes/object-schema": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
      "integrity": "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
      "dev": true
    },
    "@sapphire/async-queue": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/@sapphire/async-queue/-/async-queue-1.3.1.tgz",
      "integrity": "sha512-FFTlPOWZX1kDj9xCAsRzH5xEJfawg1lNoYAA+ecOWJMHOfiZYb1uXOI3ne9U4UILSEPwfE68p3T9wUHwIQfR0g=="
    },
    "@sapphire/shapeshift": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@sapphire/shapeshift/-/shapeshift-2.1.0.tgz",
      "integrity": "sha512-Z1ISLP9pNI3jpKJxx82xtDpEsfomhJ3iPqcKdYLjAHmQP2X5yqQF6phA0Wd+MmdXp081wepOiT59XEN0xdTVvQ=="
    },
    "@sapphire/snowflake": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/@sapphire/snowflake/-/snowflake-3.2.2.tgz",
      "integrity": "sha512-ula2O0kpSZtX9rKXNeQMrHwNd7E4jPDJYUXmEGTFdMRfyfMw+FPyh04oKMjAiDuOi64bYgVkOV3MjK+loImFhQ=="
    },
    "@sindresorhus/is": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
      "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw=="
    },
    "@types/debug": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.7.tgz",
      "integrity": "sha512-9AonUzyTjXXhEOa0DnqpzZi6VHlqKMswga9EXjpXnnqxwLtdvPPtlO8evrI5D9S6asFRCQ6v+wpiUKbw+vKqyg==",
      "requires": {
        "@types/ms": "*"
      }
    },
    "@types/ms": {
      "version": "0.7.31",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-0.7.31.tgz",
      "integrity": "sha512-iiUgKzV9AuaEkZqkOLDIvlQiL6ltuZd9tGcW3gwpnX8JbuiuhFlEGmmFXEXkN50Cvq7Os88IY2v0dkDqXYWVgA=="
    },
    "@types/node": {
      "version": "17.0.26",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-17.0.26.tgz",
      "integrity": "sha512-z/FG/6DUO7pnze3AE3TBGIjGGKkvCcGcWINe1C7cADY8hKLJPDYpzsNE37uExQ4md5RFtTCvg+M8Mu1Enyeg2A=="
    },
    "@types/node-fetch": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.1.tgz",
      "integrity": "sha512-oMqjURCaxoSIsHSr1E47QHzbmzNR5rK8McHuNb11BOM9cHcIK3Avy0s/b2JlXHoQGTYS3NsvWzV1M0iK7l0wbA==",
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      },
      "dependencies": {
        "form-data": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
          "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "@types/validator": {
      "version": "13.7.2",
      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.7.2.tgz",
      "integrity": "sha512-KFcchQ3h0OPQgFirBRPZr5F/sVjxZsOrQHedj3zi8AH3Zv/hOLx2OLR4hxR5HcfoU+33n69ZuOfzthKVdMoTiw=="
    },
    "@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "requires": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "@types/ws": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.3.tgz",
      "integrity": "sha512-6YOoWjruKj1uLf3INHH7D3qTXwFfEsg1kf3c0uDdSBJwfa/llkwIjrAGV7j7mVgGNbzTQ3HiHKKDXl6bJPD97w==",
      "requires": {
        "@types/node": "*"
      }
    },
    "abs": {
      "version": "1.3.14",
      "resolved": "https://registry.npmjs.org/abs/-/abs-1.3.14.tgz",
      "integrity": "sha512-PrS26IzwKLWwuURpiKl8wRmJ2KdR/azaVrLEBWG/TALwT20Y7qjtYp1qcMLHA4206hBHY5phv3w4pjf9NPv4Vw==",
      "requires": {
        "ul": "^5.0.0"
      }
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "acorn": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz",
      "integrity": "sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==",
      "dev": true
    },
    "acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "requires": {}
    },
    "ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "app-root-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/app-root-path/-/app-root-path-3.0.0.tgz",
      "integrity": "sha512-qMcx+Gy2UZynHjOHOIXPNvpf+9cjvk3cWrBBK7zg4gH9+clobJRb9NGzcT7mQTcV/6Gm/1WelUtqxVXnNlrwcw=="
    },
    "append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw=="
    },
    "argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true
    },
    "asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "requires": {
        "safer-buffer": "~2.1.0"
      }
    },
    "assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw=="
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA=="
    },
    "aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA=="
    },
    "axios": {
      "version": "0.27.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.27.2.tgz",
      "integrity": "sha512-t+yRIyySRTp/wua5xEr+z1q60QmLq8ABsS5O9Me1AsE5dfKqgnCFzwiCZZ/cGNd1lq4/7akDWMxdhVlucjmnOQ==",
      "requires": {
        "follow-redirects": "^1.14.9",
        "form-data": "^4.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
    },
    "bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
      "requires": {
        "tweetnacl": "^0.14.3"
      },
      "dependencies": {
        "tweetnacl": {
          "version": "0.14.5",
          "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
          "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
        }
      }
    },
    "bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg=="
    },
    "bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "bowser": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/bowser/-/bowser-2.11.0.tgz",
      "integrity": "sha512-AlcaJBi/pqqJBIQ8U9Mcpc9i8Aqxn88Skv5d+xBX006BY5u8N3mGLHa5Lgppa7L/HfwgwLgZ6NYs+Ag6uUmJRA=="
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "bson": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.0.tgz",
      "integrity": "sha512-VrlEE4vuiO1WTpfof4VmaVolCVYkYTgB9iWgYNOrVlnifpME/06fhFRmONgBhClD5pFC1t9ZWqFUQEQAzY43bA==",
      "requires": {
        "buffer": "^5.6.0"
      }
    },
    "buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "requires": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "buffer-writer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/buffer-writer/-/buffer-writer-2.0.0.tgz",
      "integrity": "sha512-a7ZpuTZU1TRtnwyCNW3I5dc0wWNC3VR9S++Ewyk2HHZdrO3CQJqSpd+95Us590V6AL7JqUAH2IwZ/398PmNFgw=="
    },
    "busboy": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-0.2.14.tgz",
      "integrity": "sha512-InWFDomvlkEj+xWLBfU3AvnbVYqeTWmQopiW0tWWEy5yehYm2YkGEc59sUmw/4ty5Zj/b0WHGs1LgecuBSBGrg==",
      "requires": {
        "dicer": "0.2.5",
        "readable-stream": "1.1.x"
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "cache-content-type": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/cache-content-type/-/cache-content-type-1.0.1.tgz",
      "integrity": "sha512-IKufZ1o4Ut42YUrZSo8+qnMTrFuKkvyoLXUywKz9GJ5BrhOFGhLdkx9sG4KAnVvbY6kEcSFjLQul+DVmBm2bgA==",
      "requires": {
        "mime-types": "^2.1.18",
        "ylru": "^1.2.0"
      }
    },
    "call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE="
    },
    "capture-stack-trace": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/capture-stack-trace/-/capture-stack-trace-1.0.1.tgz",
      "integrity": "sha512-mYQLZnx5Qt1JgB1WEiMCf2647plpGeQ2NMR/5L0HNZzGQo4fuSPnK+wjfPnKZV0aiJDgzmWqqkV/g7JD+DW0qw=="
    },
    "caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw=="
    },
    "chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      }
    },
    "cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="
    },
    "co-body": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/co-body/-/co-body-6.1.0.tgz",
      "integrity": "sha512-m7pOT6CdLN7FuXUcpuz/8lfQ/L77x8SchHCF4G0RBTJO20Wzmhn5Sp4/5WsKy8OSpifBSUrmg83qEqaDHdyFuQ==",
      "requires": {
        "inflation": "^2.0.0",
        "qs": "^6.5.2",
        "raw-body": "^2.3.3",
        "type-is": "^1.6.16"
      }
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
      "dev": true
    },
    "concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "requires": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      },
      "dependencies": {
        "isarray": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
        },
        "readable-stream": {
          "version": "2.3.7",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
          "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.3",
            "isarray": "~1.0.0",
            "process-nextick-args": "~2.0.0",
            "safe-buffer": "~5.1.1",
            "string_decoder": "~1.1.1",
            "util-deprecate": "~1.0.1"
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        },
        "string_decoder": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
          "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
          "requires": {
            "safe-buffer": "~5.1.0"
          }
        }
      }
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA=="
    },
    "cookies": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/cookies/-/cookies-0.8.0.tgz",
      "integrity": "sha512-8aPsApQfebXnuI+537McwYsDtjVxGm8gTIzQI3FDW6t5t/DAhERxtnbEPN/8RX+uZthoz4eCOgloXaE5cYyNow==",
      "requires": {
        "depd": "~2.0.0",
        "keygrip": "~1.1.0"
      }
    },
    "copy-to": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/copy-to/-/copy-to-2.0.1.tgz",
      "integrity": "sha1-JoD7uAaKSNCGVrYJgJK9r8kG9KU="
    },
    "core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ=="
    },
    "crc": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/crc/-/crc-3.8.0.tgz",
      "integrity": "sha512-iX3mfgcTMIq3ZKLIsVFAbv7+Mc10kxabAGQb8HvjA1o3T1PIYprbakQ65d3I+2HGHt6nSKkM9PYjgoJO2KcFBQ==",
      "requires": {
        "buffer": "^5.1.0"
      }
    },
    "create-error-class": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/create-error-class/-/create-error-class-3.0.2.tgz",
      "integrity": "sha1-Br56vvlHo/FKMP1hBnHUAbyot7Y=",
      "requires": {
        "capture-stack-trace": "^1.0.0"
      }
    },
    "cron-parser": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-3.5.0.tgz",
      "integrity": "sha512-wyVZtbRs6qDfFd8ap457w3XVntdvqcwBGxBoTvJQH9KGVKL/fB+h2k3C8AqiVxvUQKN1Ps/Ns46CNViOpVDhfQ==",
      "requires": {
        "is-nan": "^1.3.2",
        "luxon": "^1.26.0"
      }
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "date-format": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/date-format/-/date-format-4.0.9.tgz",
      "integrity": "sha512-+8J+BOUpSrlKLQLeF8xJJVTxS8QfRSuJgwxSVvslzgO3E6khbI0F5mMEPf5mTYhCCm4h99knYP6H3W9n3BQFrg=="
    },
    "debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "requires": {
        "ms": "2.1.2"
      }
    },
    "deep-equal": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-1.0.1.tgz",
      "integrity": "sha1-9dJgKStmDghO/0zbyfCK0yR0SLU="
    },
    "deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA=="
    },
    "deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true
    },
    "deffy": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/deffy/-/deffy-2.2.4.tgz",
      "integrity": "sha512-pLc9lsbsWjr6RxmJ2OLyvm+9l4j1yK69h+TML/gUit/t3vTijpkNGh8LioaJYTGO7F25m6HZndADcUOo2PsiUg==",
      "requires": {
        "typpy": "^2.0.0"
      }
    },
    "define-properties": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.4.tgz",
      "integrity": "sha512-uckOqKcfaVvtBdsVkdPv3XjveQJsNQqmhXgRi8uhvWWuPYZCNlzT8qAyblUgNoXdHdjMTzAqeGjAoli8f+bzPA==",
      "requires": {
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      }
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk="
    },
    "delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o="
    },
    "denque": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.0.1.tgz",
      "integrity": "sha512-tfiWc6BQLXNLpNiR5iGd0Ocu3P3VpxfzFiqubLgMfhfOw9WyvgJBd46CClNn9k3qfbjvT//0cf7AlYRX/OslMQ=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "dicer": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.2.5.tgz",
      "integrity": "sha1-WZbAhrszIYyBLAkL3cCc0S+stw8=",
      "requires": {
        "readable-stream": "1.1.x",
        "streamsearch": "0.1.2"
      }
    },
    "discord-api-types": {
      "version": "0.31.2",
      "resolved": "https://registry.npmjs.org/discord-api-types/-/discord-api-types-0.31.2.tgz",
      "integrity": "sha512-gpzXTvFVg7AjKVVJFH0oJGC0q0tO34iJGSHZNz9u3aqLxlD6LfxEs9wWVVikJqn9gra940oUTaPFizCkRDcEiA=="
    },
    "discord.js": {
      "version": "13.6.0",
      "resolved": "https://registry.npmjs.org/discord.js/-/discord.js-13.6.0.tgz",
      "integrity": "sha512-tXNR8zgsEPxPBvGk3AQjJ9ljIIC6/LOPjzKwpwz8Y1Q2X66Vi3ZqFgRHYwnHKC0jC0F+l4LzxlhmOJsBZDNg9g==",
      "requires": {
        "@discordjs/builders": "^0.11.0",
        "@discordjs/collection": "^0.4.0",
        "@sapphire/async-queue": "^1.1.9",
        "@types/node-fetch": "^2.5.12",
        "@types/ws": "^8.2.2",
        "discord-api-types": "^0.26.0",
        "form-data": "^4.0.0",
        "node-fetch": "^2.6.1",
        "ws": "^8.4.0"
      },
      "dependencies": {
        "@discordjs/builders": {
          "version": "0.11.0",
          "resolved": "https://registry.npmjs.org/@discordjs/builders/-/builders-0.11.0.tgz",
          "integrity": "sha512-ZTB8yJdJKrKlq44dpWkNUrAtEJEq0gqpb7ASdv4vmq6/mZal5kOv312hQ56I/vxwMre+VIkoHquNUAfnTbiYtg==",
          "requires": {
            "@sindresorhus/is": "^4.2.0",
            "discord-api-types": "^0.26.0",
            "ts-mixer": "^6.0.0",
            "tslib": "^2.3.1",
            "zod": "^3.11.6"
          }
        },
        "discord-api-types": {
          "version": "0.26.1",
          "resolved": "https://registry.npmjs.org/discord-api-types/-/discord-api-types-0.26.1.tgz",
          "integrity": "sha512-T5PdMQ+Y1MEECYMV5wmyi9VEYPagEDEi4S0amgsszpWY0VB9JJ/hEvM6BgLhbdnKky4gfmZEXtEEtojN8ZKJQQ=="
        }
      }
    },
    "doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "requires": {
        "esutils": "^2.0.2"
      }
    },
    "dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "requires": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "dotenv": {
      "version": "16.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
      "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q=="
    },
    "dottie": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/dottie/-/dottie-2.0.2.tgz",
      "integrity": "sha512-fmrwR04lsniq/uSr8yikThDTrM7epXHBAAjH9TbeH3rEA8tdCO7mRzB9hdmdGyJCxF8KERo9CITcm3kGuoyMhg=="
    },
    "duplexer2": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.4.tgz",
      "integrity": "sha1-ixLauHjA1p4+eJEFFmKjL8a93ME=",
      "requires": {
        "readable-stream": "^2.0.2"
      },
      "dependencies": {
        "isarray": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
        },
        "readable-stream": {
          "version": "2.3.7",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
          "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.3",
            "isarray": "~1.0.0",
            "process-nextick-args": "~2.0.0",
            "safe-buffer": "~5.1.1",
            "string_decoder": "~1.1.1",
            "util-deprecate": "~1.0.1"
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        },
        "string_decoder": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
          "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
          "requires": {
            "safe-buffer": "~5.1.0"
          }
        }
      }
    },
    "ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "requires": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k="
    },
    "err": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/err/-/err-1.1.1.tgz",
      "integrity": "sha1-65KOLhGjFmSPeCgz0PlyWLpDwvg=",
      "requires": {
        "typpy": "^2.2.0"
      }
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw=="
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true
    },
    "eslint": {
      "version": "8.14.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.14.0.tgz",
      "integrity": "sha512-3/CE4aJX7LNEiE3i6FeodHmI/38GZtWCsAtsymScmzYapx8q1nVVb+eLcLSzATmCPXw5pT4TqVs1E0OmxAd9tw==",
      "dev": true,
      "requires": {
        "@eslint/eslintrc": "^1.2.2",
        "@humanwhocodes/config-array": "^0.9.2",
        "ajv": "^6.10.0",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.1.1",
        "eslint-utils": "^3.0.0",
        "eslint-visitor-keys": "^3.3.0",
        "espree": "^9.3.1",
        "esquery": "^1.4.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^6.0.1",
        "globals": "^13.6.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.0.4",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.1",
        "regexpp": "^3.2.0",
        "strip-ansi": "^6.0.1",
        "strip-json-comments": "^3.1.0",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      }
    },
    "eslint-scope": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.1.1.tgz",
      "integrity": "sha512-QKQM/UXpIiHcLqJ5AOyIW7XZmzjkzQXYE54n1++wb0u9V/abW3l9uQnxX8Z5Xd18xyKIMTUAyQ0k1e8pz6LUrw==",
      "dev": true,
      "requires": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      }
    },
    "eslint-utils": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-3.0.0.tgz",
      "integrity": "sha512-uuQC43IGctw68pJA1RgbQS8/NP7rch6Cwd4j3ZBtgo4/8Flj4eGE7ZYSZRN3iq5pVUv6GPdW5Z1RFleo84uLDA==",
      "dev": true,
      "requires": {
        "eslint-visitor-keys": "^2.0.0"
      },
      "dependencies": {
        "eslint-visitor-keys": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
          "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
          "dev": true
        }
      }
    },
    "eslint-visitor-keys": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.3.0.tgz",
      "integrity": "sha512-mQ+suqKJVyeuwGYHAdjMFqjCyfl8+Ldnxuyp3ldiMBFKkvytrXUZWaiPCEav8qDHKty44bD+qV1IP4T+w+xXRA==",
      "dev": true
    },
    "espree": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.3.1.tgz",
      "integrity": "sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ==",
      "dev": true,
      "requires": {
        "acorn": "^8.7.0",
        "acorn-jsx": "^5.3.1",
        "eslint-visitor-keys": "^3.3.0"
      }
    },
    "esquery": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.4.0.tgz",
      "integrity": "sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==",
      "dev": true,
      "requires": {
        "estraverse": "^5.1.0"
      }
    },
    "esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "requires": {
        "estraverse": "^5.2.0"
      }
    },
    "estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true
    },
    "esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true
    },
    "exec-limiter": {
      "version": "3.2.13",
      "resolved": "https://registry.npmjs.org/exec-limiter/-/exec-limiter-3.2.13.tgz",
      "integrity": "sha512-86Ri699bwiHZVBzTzNj8gspqAhCPchg70zPVWIh3qzUOA1pUMcb272Em3LPk8AE0mS95B9yMJhtqF8vFJAn0dA==",
      "requires": {
        "limit-it": "^3.0.0",
        "typpy": "^2.1.0"
      }
    },
    "extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
    },
    "fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
      "dev": true
    },
    "fast-xml-parser": {
      "version": "4.0.11",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.0.11.tgz",
      "integrity": "sha512-4aUg3aNRR/WjQAcpceODG1C3x3lFANXRo8+1biqfieHmg9pyMt7qB4lQV/Ta6sJCTbA5vfD8fnA8S54JATiFUA==",
      "requires": {
        "strnum": "^1.0.5"
      }
    },
    "file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "requires": {
        "flat-cache": "^3.0.4"
      }
    },
    "flat-cache": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
      "integrity": "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
      "dev": true,
      "requires": {
        "flatted": "^3.1.0",
        "rimraf": "^3.0.2"
      }
    },
    "flatted": {
      "version": "3.2.5",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.2.5.tgz",
      "integrity": "sha512-WIWGi2L3DyTUvUrwRKgGi9TwxQMUEqPOPQBVi71R96jZXJdFskXEmf54BoZaS1kknGODoIGASGEzBUYdyMCBJg=="
    },
    "follow-redirects": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.1.tgz",
      "integrity": "sha512-yLAMQs+k0b2m7cVxpS1VKJVvoz7SS9Td1zss3XRwXj+ZDH00RJgnuLx7E44wx02kQLrdM3aOOy+FpzS7+8OizA=="
    },
    "forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="
    },
    "form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac="
    },
    "fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "requires": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "dev": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "function.name": {
      "version": "1.0.13",
      "resolved": "https://registry.npmjs.org/function.name/-/function.name-1.0.13.tgz",
      "integrity": "sha512-mVrqdoy5npWZyoXl4DxCeuVF6delDcQjVS9aPdvLYlBxtMTZDR2B5GVEQEoM1jJyspCqg3C0v4ABkLE7tp9xFA==",
      "requires": {
        "noop6": "^1.0.1"
      }
    },
    "functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
      "dev": true
    },
    "generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "requires": {
        "is-property": "^1.0.2"
      }
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg=="
    },
    "get-intrinsic": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.1"
      }
    },
    "getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "git-package-json": {
      "version": "1.4.10",
      "resolved": "https://registry.npmjs.org/git-package-json/-/git-package-json-1.4.10.tgz",
      "integrity": "sha512-DRAcvbzd2SxGK7w8OgYfvKqhFliT5keX0lmSmVdgScgf1kkl5tbbo7Pam6uYoCa1liOiipKxQZG8quCtGWl/fA==",
      "requires": {
        "deffy": "^2.2.1",
        "err": "^1.1.1",
        "gry": "^5.0.0",
        "normalize-package-data": "^2.3.5",
        "oargv": "^3.4.1",
        "one-by-one": "^3.1.0",
        "r-json": "^1.2.1",
        "r-package-json": "^1.0.0",
        "tmp": "0.0.28"
      }
    },
    "git-source": {
      "version": "1.1.10",
      "resolved": "https://registry.npmjs.org/git-source/-/git-source-1.1.10.tgz",
      "integrity": "sha512-XZZ7ZgnLL35oLgM/xjnLYgtlKlxJG0FohC1kWDvGkU7s1VKGXK0pFF/g1itQEwQ3D+uTQzBnzPi8XbqOv7Wc1Q==",
      "requires": {
        "git-url-parse": "^5.0.1"
      }
    },
    "git-up": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/git-up/-/git-up-1.2.1.tgz",
      "integrity": "sha1-JkSAoAax2EJhrB/gmjpRacV+oZ0=",
      "requires": {
        "is-ssh": "^1.0.0",
        "parse-url": "^1.0.0"
      }
    },
    "git-url-parse": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/git-url-parse/-/git-url-parse-5.0.1.tgz",
      "integrity": "sha1-/j15xnRq4FBIz6UIyB553du6OEM=",
      "requires": {
        "git-up": "^1.0.0"
      }
    },
    "glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
      "dev": true,
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.3"
      }
    },
    "globals": {
      "version": "13.13.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.13.0.tgz",
      "integrity": "sha512-EQ7Q18AJlPwp3vUDL4mKA0KXrXyNIQyWon6T6XQiBQF0XHvRsiCSrWmmeATpUzdJN2HhWZU6Pdl0a9zdep5p6A==",
      "dev": true,
      "requires": {
        "type-fest": "^0.20.2"
      }
    },
    "got": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-5.6.0.tgz",
      "integrity": "sha1-ux1+4WO3gIK7yOuDbz85UATqb78=",
      "requires": {
        "create-error-class": "^3.0.1",
        "duplexer2": "^0.1.4",
        "is-plain-obj": "^1.0.0",
        "is-redirect": "^1.0.0",
        "is-retry-allowed": "^1.0.0",
        "is-stream": "^1.0.0",
        "lowercase-keys": "^1.0.0",
        "node-status-codes": "^1.0.0",
        "object-assign": "^4.0.1",
        "parse-json": "^2.1.0",
        "pinkie-promise": "^2.0.0",
        "read-all-stream": "^3.0.0",
        "readable-stream": "^2.0.5",
        "timed-out": "^2.0.0",
        "unzip-response": "^1.0.0",
        "url-parse-lax": "^1.0.0"
      },
      "dependencies": {
        "isarray": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
        },
        "readable-stream": {
          "version": "2.3.7",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
          "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.3",
            "isarray": "~1.0.0",
            "process-nextick-args": "~2.0.0",
            "safe-buffer": "~5.1.1",
            "string_decoder": "~1.1.1",
            "util-deprecate": "~1.0.1"
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        },
        "string_decoder": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
          "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
          "requires": {
            "safe-buffer": "~5.1.0"
          }
        }
      }
    },
    "graceful-fs": {
      "version": "4.2.10",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
      "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA=="
    },
    "gry": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/gry/-/gry-5.0.8.tgz",
      "integrity": "sha512-meq9ZjYVpLzZh3ojhTg7IMad9grGsx6rUUKHLqPnhLXzJkRQvEL2U3tQpS5/WentYTtHtxkT3Ew/mb10D6F6/g==",
      "requires": {
        "abs": "^1.2.1",
        "exec-limiter": "^3.0.0",
        "one-by-one": "^3.0.0",
        "ul": "^5.0.0"
      }
    },
    "har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="
    },
    "har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "requires": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      }
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true
    },
    "has-property-descriptors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz",
      "integrity": "sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==",
      "requires": {
        "get-intrinsic": "^1.1.1"
      }
    },
    "has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
    },
    "has-tostringtag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.0.tgz",
      "integrity": "sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==",
      "requires": {
        "has-symbols": "^1.0.2"
      }
    },
    "hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw=="
    },
    "http-assert": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/http-assert/-/http-assert-1.5.0.tgz",
      "integrity": "sha512-uPpH7OKX4H25hBmU6G1jWNaqJGpTXxey+YOUizJUAgu0AjLUeC8D73hTrhvDS5D+GJN1DN1+hhc/eF/wpxtp0w==",
      "requires": {
        "deep-equal": "~1.0.1",
        "http-errors": "~1.8.0"
      }
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        }
      }
    },
    "http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "requires": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      }
    },
    "iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      }
    },
    "ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
    },
    "ignore": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
      "integrity": "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
      "dev": true
    },
    "import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "requires": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "dev": true
    },
    "inflation": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/inflation/-/inflation-2.0.0.tgz",
      "integrity": "sha1-i0F+R8KPklpFEz2RTKH9OJEH8w8="
    },
    "inflection": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/inflection/-/inflection-1.13.2.tgz",
      "integrity": "sha512-cmZlljCRTBFouT8UzMzrGcVEvkv6D/wBdcdKG7J1QH5cXjtU75Dm+P27v9EKu/Y43UYyCJd1WC4zLebRrC8NBw=="
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dev": true,
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew=="
    },
    "ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0="
    },
    "is-class-hotfix": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/is-class-hotfix/-/is-class-hotfix-0.0.6.tgz",
      "integrity": "sha512-0n+pzCC6ICtVr/WXnN2f03TK/3BfXY7me4cjCAqT8TYXEl0+JBRoqBo94JJHXcyDSLUeWbNX8Fvy5g5RJdAstQ=="
    },
    "is-core-module": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-generator-function": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.0.10.tgz",
      "integrity": "sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==",
      "requires": {
        "has-tostringtag": "^1.0.0"
      }
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-nan": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/is-nan/-/is-nan-1.3.2.tgz",
      "integrity": "sha512-E+zBKpQ2t6MEo1VsonYmluk9NxGrbzpeeLC2xIViuO2EjU2xsXsBPwTr3Ykv9l08UYEVEdWeRZNouaZqF6RN0w==",
      "requires": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3"
      }
    },
    "is-plain-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz",
      "integrity": "sha1-caUMhCnfync8kqOQpKA7OfzVHT4="
    },
    "is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="
    },
    "is-redirect": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-redirect/-/is-redirect-1.0.0.tgz",
      "integrity": "sha1-HQPd7VO9jbDzDCbk+V02/HyH3CQ="
    },
    "is-retry-allowed": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/is-retry-allowed/-/is-retry-allowed-1.2.0.tgz",
      "integrity": "sha512-RUbUeKwvm3XG2VYamhJL1xFktgjvPzL0Hq8C+6yrWIswDy3BIXGqCxhxkc30N9jqK311gVU137K8Ei55/zVJRg=="
    },
    "is-ssh": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/is-ssh/-/is-ssh-1.3.3.tgz",
      "integrity": "sha512-NKzJmQzJfEEma3w5cJNcUMxoXfDjz0Zj0eyCalHn2E6VOwlzjZo0yuO2fcBSf8zhFuVCL/82/r5gRcoi6aEPVQ==",
      "requires": {
        "protocols": "^1.1.0"
      }
    },
    "is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ="
    },
    "is-type-of": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-type-of/-/is-type-of-1.2.1.tgz",
      "integrity": "sha512-uK0kyX9LZYhSDS7H2sVJQJop1UnWPWmo5RvR3q2kFH6AUHYs7sOrVg0b4nyBHw29kRRNFofYN/JbHZDlHiItTA==",
      "requires": {
        "core-util-is": "^1.0.2",
        "is-class-hotfix": "~0.0.6",
        "isstream": "~0.1.2"
      }
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "dev": true
    },
    "isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
    },
    "iterate-object": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/iterate-object/-/iterate-object-1.3.4.tgz",
      "integrity": "sha512-4dG1D1x/7g8PwHS9aK6QV5V94+ZvyP4+d19qDv43EzImmrndysIl4prmJ1hWWIGCqrZHyaHBm6BSEWHOLnpoNw=="
    },
    "js-base64": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/js-base64/-/js-base64-3.7.2.tgz",
      "integrity": "sha512-NnRs6dsyqUXejqk/yv2aiXlAvOs56sLkX6nUdeaNezI5LFFLlsZjOThmwnrcwh5ZZRwZlCMnVAY3CvhIhoVEKQ=="
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "requires": {
        "argparse": "^2.0.1"
      }
    },
    "jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM="
    },
    "json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA=="
    },
    "json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
      "dev": true
    },
    "json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
    },
    "jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "requires": {
        "graceful-fs": "^4.1.6",
        "universalify": "^2.0.0"
      }
    },
    "jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "requires": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      }
    },
    "kareem": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.0.tgz",
      "integrity": "sha512-rVBUGGwvqg130iwYu8k7lutHuDBFj1yGRdnlE44wEhxAmFBad1zcL66PdWC1raw3tIObY6XWhtv3VL04xQb/cg=="
    },
    "keygrip": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/keygrip/-/keygrip-1.1.0.tgz",
      "integrity": "sha512-iYSchDJ+liQ8iwbSI2QqsQOvqv58eJCEanyJPJi+Khyu8smkcKSFUCbPwzFcL7YVtZ6eONjqRX/38caJ7QjRAQ==",
      "requires": {
        "tsscmp": "1.0.6"
      }
    },
    "koa": {
      "version": "2.13.4",
      "resolved": "https://registry.npmjs.org/koa/-/koa-2.13.4.tgz",
      "integrity": "sha512-43zkIKubNbnrULWlHdN5h1g3SEKXOEzoAlRsHOTFpnlDu8JlAOZSMJBLULusuXRequboiwJcj5vtYXKB3k7+2g==",
      "requires": {
        "accepts": "^1.3.5",
        "cache-content-type": "^1.0.0",
        "content-disposition": "~0.5.2",
        "content-type": "^1.0.4",
        "cookies": "~0.8.0",
        "debug": "^4.3.2",
        "delegates": "^1.0.0",
        "depd": "^2.0.0",
        "destroy": "^1.0.4",
        "encodeurl": "^1.0.2",
        "escape-html": "^1.0.3",
        "fresh": "~0.5.2",
        "http-assert": "^1.3.0",
        "http-errors": "^1.6.3",
        "is-generator-function": "^1.0.7",
        "koa-compose": "^4.1.0",
        "koa-convert": "^2.0.0",
        "on-finished": "^2.3.0",
        "only": "~0.0.2",
        "parseurl": "^1.3.2",
        "statuses": "^1.5.0",
        "type-is": "^1.6.16",
        "vary": "^1.1.2"
      }
    },
    "koa-bodyparser": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/koa-bodyparser/-/koa-bodyparser-4.3.0.tgz",
      "integrity": "sha512-uyV8G29KAGwZc4q/0WUAjH+Tsmuv9ImfBUF2oZVyZtaeo0husInagyn/JH85xMSxM0hEk/mbCII5ubLDuqW/Rw==",
      "requires": {
        "co-body": "^6.0.0",
        "copy-to": "^2.0.1"
      }
    },
    "koa-compose": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/koa-compose/-/koa-compose-4.1.0.tgz",
      "integrity": "sha512-8ODW8TrDuMYvXRwra/Kh7/rJo9BtOfPc6qO8eAfC80CnCvSjSl0bkRM24X6/XBBEyj0v1nRUQ1LyOy3dbqOWXw=="
    },
    "koa-convert": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/koa-convert/-/koa-convert-2.0.0.tgz",
      "integrity": "sha512-asOvN6bFlSnxewce2e/DK3p4tltyfC4VM7ZwuTuepI7dEQVcvpyFuBcEARu1+Hxg8DIwytce2n7jrZtRlPrARA==",
      "requires": {
        "co": "^4.6.0",
        "koa-compose": "^4.1.0"
      }
    },
    "koa-router": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/koa-router/-/koa-router-10.1.1.tgz",
      "integrity": "sha512-z/OzxVjf5NyuNO3t9nJpx7e1oR3FSBAauiwXtMQu4ppcnuNZzTaQ4p21P8A6r2Es8uJJM339oc4oVW+qX7SqnQ==",
      "requires": {
        "debug": "^4.1.1",
        "http-errors": "^1.7.3",
        "koa-compose": "^4.1.0",
        "methods": "^1.1.2",
        "path-to-regexp": "^6.1.0"
      }
    },
    "koa-session": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/koa-session/-/koa-session-6.2.0.tgz",
      "integrity": "sha512-l2ZC6D1BnRkIXhWkRgpewdqKn38/9/2WScmxyShuN408TxX+J/gUzdzGBIvGZaRwmezOU819sNpGmfFGLeDckg==",
      "requires": {
        "crc": "^3.4.4",
        "debug": "^3.1.0",
        "is-type-of": "^1.0.0",
        "uuid": "^3.3.2"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "uuid": {
          "version": "3.4.0",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
          "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A=="
        }
      }
    },
    "koa2-cors": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/koa2-cors/-/koa2-cors-2.0.6.tgz",
      "integrity": "sha512-JRCcSM4lamM+8kvKGDKlesYk2ASrmSTczDtGUnIadqMgnHU4Ct5Gw7Bxt3w3m6d6dy3WN0PU4oMP43HbddDEWg=="
    },
    "levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "requires": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      }
    },
    "limit-it": {
      "version": "3.2.10",
      "resolved": "https://registry.npmjs.org/limit-it/-/limit-it-3.2.10.tgz",
      "integrity": "sha512-T0NK99pHnkimldr1WUqvbGV1oWDku/xC9J/OqzJFsV1jeOS6Bwl8W7vkeQIBqwiON9dTALws+rX/XPMQqWerDQ==",
      "requires": {
        "typpy": "^2.0.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "log4js": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/log4js/-/log4js-6.4.6.tgz",
      "integrity": "sha512-1XMtRBZszmVZqPAOOWczH+Q94AI42mtNWjvjA5RduKTSWjEc56uOBbyM1CJnfN4Ym0wSd8cQ43zOojlSHgRDAw==",
      "requires": {
        "date-format": "^4.0.9",
        "debug": "^4.3.4",
        "flatted": "^3.2.5",
        "rfdc": "^1.3.0",
        "streamroller": "^3.0.8"
      }
    },
    "long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="
    },
    "long-timeout": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/long-timeout/-/long-timeout-0.1.1.tgz",
      "integrity": "sha1-lyHXiLR+C8taJMLivuGg2lXatRQ="
    },
    "lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "requires": {
        "tslib": "^2.0.3"
      }
    },
    "lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA=="
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "luxon": {
      "version": "1.28.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-1.28.0.tgz",
      "integrity": "sha512-TfTiyvZhwBYM/7QdAVDh+7dBTBA29v4ik0Ce9zda3Mnf8on1S5KJI8P2jKFZ8+5C0jhmr0KwJEO/Wdpm0VeWJQ=="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz",
      "integrity": "sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q=="
    },
    "mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "requires": {
        "minimist": "^1.2.6"
      }
    },
    "moment": {
      "version": "2.29.3",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.3.tgz",
      "integrity": "sha512-c6YRvhEo//6T2Jz/vVtYzqBzwvPT95JBQ+smCytzf7c50oMZRsR/a4w88aD34I+/QVSfnoAnSBFPJHItlOMJVw=="
    },
    "moment-timezone": {
      "version": "0.5.34",
      "resolved": "https://registry.npmjs.org/moment-timezone/-/moment-timezone-0.5.34.tgz",
      "integrity": "sha512-3zAEHh2hKUs3EXLESx/wsgw6IQdusOT8Bxm3D9UrHPQR7zlMmzwybC8zHEM1tQ4LJwP7fcxrWr8tuBg05fFCbg==",
      "requires": {
        "moment": ">= 2.9.0"
      }
    },
    "mongodb": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.12.1.tgz",
      "integrity": "sha512-koT87tecZmxPKtxRQD8hCKfn+ockEL2xBiUvx3isQGI6mFmagWt4f4AyCE9J4sKepnLhMacoCTQQA6SLAI2L6w==",
      "requires": {
        "@aws-sdk/credential-providers": "^3.186.0",
        "bson": "^4.7.0",
        "mongodb-connection-string-url": "^2.5.4",
        "saslprep": "^1.0.3",
        "socks": "^2.7.1"
      }
    },
    "mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "requires": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
          "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
          "requires": {
            "punycode": "^2.1.1"
          }
        },
        "webidl-conversions": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
          "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
          "version": "11.0.0",
          "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
          "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
          "requires": {
            "tr46": "^3.0.0",
            "webidl-conversions": "^7.0.0"
          }
        }
      }
    },
    "mongodb-uri": {
      "version": "0.9.7",
      "resolved": "https://registry.npmjs.org/mongodb-uri/-/mongodb-uri-0.9.7.tgz",
      "integrity": "sha1-D3ca0W9IOuZfQoeWlCjp+8SqYYE="
    },
    "mongoose": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-6.8.0.tgz",
      "integrity": "sha512-zlUfjcLya3pLfLTxwyH5S9bZUolJWGKF2M7PEV0118jv4VWHR/krjb6LIWu1RPQN2rwYmnmjjzJLVhbhmHqSmg==",
      "requires": {
        "bson": "^4.7.0",
        "kareem": "2.5.0",
        "mongodb": "4.12.1",
        "mpath": "0.9.0",
        "mquery": "4.0.3",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew=="
    },
    "mquery": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-4.0.3.tgz",
      "integrity": "sha512-J5heI+P08I6VJ2Ky3+33IpCdAvlYGTSUjwTPxkAr8i8EoduPMBX2OY/wa3IKZIQl7MU4SbFk8ndgSKyB/cl1zA==",
      "requires": {
        "debug": "4.x"
      }
    },
    "ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "multer": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.4.tgz",
      "integrity": "sha512-2wY2+xD4udX612aMqMcB8Ws2Voq6NIUPEtD1be6m411T4uDH/VtL9i//xvcyFlTVfRdaBsk7hV5tgrGQqhuBiw==",
      "requires": {
        "append-field": "^1.0.0",
        "busboy": "^0.2.11",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.4",
        "object-assign": "^4.1.1",
        "on-finished": "^2.3.0",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      }
    },
    "multiparty": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/multiparty/-/multiparty-4.2.3.tgz",
      "integrity": "sha512-Ak6EUJZuhGS8hJ3c2fY6UW5MbkGUPMBEGd13djUzoY/BHqV/gTuFWtC6IuVA7A2+v3yjBS6c4or50xhzTQZImQ==",
      "requires": {
        "http-errors": "~1.8.1",
        "safe-buffer": "5.2.1",
        "uid-safe": "2.1.5"
      }
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "mysql2": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-2.3.3.tgz",
      "integrity": "sha512-wxJUev6LgMSgACDkb/InIFxDprRa6T95+VEoR+xPvtngtccNH2dGjEB/fVZ8yg1gWv1510c9CvXuJHi5zUm0ZA==",
      "requires": {
        "denque": "^2.0.1",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.6.3",
        "long": "^4.0.0",
        "lru-cache": "^6.0.0",
        "named-placeholders": "^1.1.2",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      }
    },
    "named-placeholders": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.2.tgz",
      "integrity": "sha512-wiFWqxoLL3PGVReSZpjLVxyJ1bRqe+KKJVbr4hGs1KWfTZTQyezHFBbuKj9hsizHyGV2ne7EMjHdxEGAybD5SA==",
      "requires": {
        "lru-cache": "^4.1.3"
      },
      "dependencies": {
        "lru-cache": {
          "version": "4.1.5",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
          "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
          "requires": {
            "pseudomap": "^1.0.2",
            "yallist": "^2.1.2"
          }
        },
        "yallist": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
          "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
        }
      }
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
      "dev": true
    },
    "near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "requires": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "near-lake-framework": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/near-lake-framework/-/near-lake-framework-1.0.4.tgz",
      "integrity": "sha512-OMHwDsD46ZqR6UjdaoIjUL01b9fIZ3klov2X3EDM9v/oinCdCoagjML3GJE1ZpbsBsT5WvxkeFFo6vqD83LjOw==",
      "requires": {
        "@aws-sdk/client-s3": "^3.32.0"
      }
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "requires": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-schedule": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/node-schedule/-/node-schedule-2.1.0.tgz",
      "integrity": "sha512-nl4JTiZ7ZQDc97MmpTq9BQjYhq7gOtoh7SiPH069gBFBj0PzD8HI7zyFs6rzqL8Y5tTiEEYLxgtbx034YPrbyQ==",
      "requires": {
        "cron-parser": "^3.5.0",
        "long-timeout": "0.1.1",
        "sorted-array-functions": "^1.3.0"
      }
    },
    "node-status-codes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-status-codes/-/node-status-codes-1.0.0.tgz",
      "integrity": "sha1-WuVUHQJGRdMqWPzdyc7s6nrjrC8="
    },
    "noop6": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/noop6/-/noop6-1.0.9.tgz",
      "integrity": "sha512-DB3Hwyd89dPr5HqEPg3YHjzvwh/mCqizC1zZ8vyofqc+TQRyPDnT4wgXXbLGF4z9YAzwwTLi8pNLhGqcbSjgkA=="
    },
    "normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "requires": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      },
      "dependencies": {
        "semver": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
        }
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "oargv": {
      "version": "3.4.10",
      "resolved": "https://registry.npmjs.org/oargv/-/oargv-3.4.10.tgz",
      "integrity": "sha512-SXaMANv9sr7S/dP0vj0+Ybipa47UE1ntTWQ2rpPRhC6Bsvfl+Jg03Xif7jfL0sWKOYWK8oPjcZ5eJ82t8AP/8g==",
      "requires": {
        "iterate-object": "^1.1.0",
        "ul": "^5.0.0"
      }
    },
    "oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ=="
    },
    "obj-def": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/obj-def/-/obj-def-1.0.9.tgz",
      "integrity": "sha512-bQ4ya3VYD6FAA1+s6mEhaURRHSmw4+sKaXE6UyXZ1XDYc5D+c7look25dFdydmLd18epUegh398gdDkMUZI9xg==",
      "requires": {
        "deffy": "^2.2.2"
      }
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "object-inspect": {
      "version": "1.12.0",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.0.tgz",
      "integrity": "sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g=="
    },
    "object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dev": true,
      "requires": {
        "wrappy": "1"
      }
    },
    "one-by-one": {
      "version": "3.2.8",
      "resolved": "https://registry.npmjs.org/one-by-one/-/one-by-one-3.2.8.tgz",
      "integrity": "sha512-HR/pSzZdm46Xqj58K+Bu64kMbSTw8/u77AwWvV+rprO/OsuR++pPlkUJn+SmwqBGRgHKwSKQ974V3uls7crIeQ==",
      "requires": {
        "obj-def": "^1.0.0",
        "sliced": "^1.0.1"
      }
    },
    "only": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/only/-/only-0.0.2.tgz",
      "integrity": "sha1-Kv3oTQPlC5qO3EROMGEKcCle37Q="
    },
    "optionator": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.1.tgz",
      "integrity": "sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==",
      "dev": true,
      "requires": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.3"
      }
    },
    "os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ="
    },
    "package-json": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-2.4.0.tgz",
      "integrity": "sha1-DRW9Z9HLvduyyiIv8u24a8sxqLs=",
      "requires": {
        "got": "^5.0.0",
        "registry-auth-token": "^3.0.1",
        "registry-url": "^3.0.3",
        "semver": "^5.1.0"
      },
      "dependencies": {
        "semver": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
        }
      }
    },
    "package-json-path": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/package-json-path/-/package-json-path-1.0.9.tgz",
      "integrity": "sha512-uNu7f6Ef7tQHZRnkyVnCtzdSYVN9uBtge/sG7wzcUaawFWkPYUq67iXxRGrQSg/q0tzxIB8jSyIYUKjG2Jn//A==",
      "requires": {
        "abs": "^1.2.1"
      }
    },
    "package.json": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/package.json/-/package.json-2.0.1.tgz",
      "integrity": "sha512-pSxZ6XR5yEawRN2ekxx9IKgPN5uNAYco7MCPxtBEWMKO3UKWa1X2CtQMzMgloeGj2g2o6cue3Sb5iPkByIJqlw==",
      "requires": {
        "git-package-json": "^1.4.0",
        "git-source": "^1.1.0",
        "package-json": "^2.3.1"
      }
    },
    "packet-reader": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/packet-reader/-/packet-reader-1.0.0.tgz",
      "integrity": "sha512-HAKu/fG3HpHFO0AA8WE8q2g+gBJaZ9MG7fcKk+IJPLTGAD6Psw4443l+9DGRbOIh3/aXr7Phy0TjilYivJo5XQ=="
    },
    "parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "requires": {
        "callsites": "^3.0.0"
      }
    },
    "parse-database-url": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/parse-database-url/-/parse-database-url-0.3.0.tgz",
      "integrity": "sha1-NpZmMh6SfJreY838Gqr2+zdFPQ0=",
      "requires": {
        "mongodb-uri": ">= 0.9.7"
      }
    },
    "parse-json": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
      "integrity": "sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=",
      "requires": {
        "error-ex": "^1.2.0"
      }
    },
    "parse-url": {
      "version": "1.3.11",
      "resolved": "https://registry.npmjs.org/parse-url/-/parse-url-1.3.11.tgz",
      "integrity": "sha1-V8FUKKuKiSsfQ4aWRccR0OFEtVQ=",
      "requires": {
        "is-ssh": "^1.3.0",
        "protocols": "^1.4.0"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "dev": true
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "path-to-regexp": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-6.2.0.tgz",
      "integrity": "sha512-f66KywYG6+43afgE/8j/GoiNyygk/bnoCbps++3ErRKsIYkGGupyv07R2Ok5m9i67Iqc+T2g1eAUGUPzWhYTyg=="
    },
    "performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
    },
    "pg": {
      "version": "8.7.3",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.7.3.tgz",
      "integrity": "sha512-HPmH4GH4H3AOprDJOazoIcpI49XFsHCe8xlrjHkWiapdbHK+HLtbm/GQzXYAZwmPju/kzKhjaSfMACG+8cgJcw==",
      "requires": {
        "buffer-writer": "2.0.0",
        "packet-reader": "1.0.0",
        "pg-connection-string": "^2.5.0",
        "pg-pool": "^3.5.1",
        "pg-protocol": "^1.5.0",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      }
    },
    "pg-connection-string": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.5.0.tgz",
      "integrity": "sha512-r5o/V/ORTA6TmUnyWZR9nCj1klXCO2CEKNRlVuJptZe85QuhFayC7WeMic7ndayT5IRIR0S0xFxFi2ousartlQ=="
    },
    "pg-hstore": {
      "version": "2.3.4",
      "resolved": "https://registry.npmjs.org/pg-hstore/-/pg-hstore-2.3.4.tgz",
      "integrity": "sha512-N3SGs/Rf+xA1M2/n0JBiXFDVMzdekwLZLAO0g7mpDY9ouX+fDI7jS6kTq3JujmYbtNSJ53TJ0q4G98KVZSM4EA==",
      "requires": {
        "underscore": "^1.13.1"
      }
    },
    "pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw=="
    },
    "pg-pool": {
      "version": "3.5.1",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.5.1.tgz",
      "integrity": "sha512-6iCR0wVrro6OOHFsyavV+i6KYL4lVNyYAB9RD18w66xSzN+d8b66HiwuP30Gp1SH5O9T82fckkzsRjlrhD0ioQ==",
      "requires": {}
    },
    "pg-protocol": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.5.0.tgz",
      "integrity": "sha512-muRttij7H8TqRNu/DxrAJQITO4Ac7RmX3Klyr/9mJEOBeIpgnF8f9jAfRz5d3XwQZl5qBjF9gLsUtMPJE0vezQ=="
    },
    "pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "requires": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      }
    },
    "pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "requires": {
        "split2": "^4.1.0"
      }
    },
    "pinkie": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA="
    },
    "pinkie-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
      "requires": {
        "pinkie": "^2.0.0"
      }
    },
    "postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA=="
    },
    "postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha1-AntTPAqokOJtFy1Hz5zOzFIazTU="
    },
    "postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q=="
    },
    "postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "requires": {
        "xtend": "^4.0.0"
      }
    },
    "prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true
    },
    "prepend-http": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-1.0.4.tgz",
      "integrity": "sha1-1PRWKwzjaW5BrFLQ4ALlemNdxtw="
    },
    "process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "protocols": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/protocols/-/protocols-1.4.8.tgz",
      "integrity": "sha512-IgjKyaUSjsROSO8/D49Ab7hP8mJgTYcqApOqdPhLoPxAplXmkp+zRvsrSQjFn5by0rhm4VH0GAUELIPpx7B1yg=="
    },
    "pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ=="
    },
    "punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
    },
    "qs": {
      "version": "6.10.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.10.3.tgz",
      "integrity": "sha512-wr7M2E0OFRfIfJZjKGieI8lBKb7fRCH4Fv5KNPEs7gJ8jadvotdsS08PzOKR7opXhZ/Xkjtt3WF9g38drmyRqQ==",
      "requires": {
        "side-channel": "^1.0.4"
      }
    },
    "r-json": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/r-json/-/r-json-1.2.10.tgz",
      "integrity": "sha512-hu9vyLjSlHXT62NAS7DjI9WazDlvjN0lgp3n431dCVnirVcLkZIpzSwA3orhZEKzdDD2jqNYI+w0yG0aFf4kpA=="
    },
    "r-package-json": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/r-package-json/-/r-package-json-1.0.9.tgz",
      "integrity": "sha512-G4Vpf1KImWmmPFGdtWQTU0L9zk0SjqEC4qs/jE7AQ+Ylmr5kizMzGeC4wnHp5+ijPqNN+2ZPpvyjVNdN1CDVcg==",
      "requires": {
        "package-json-path": "^1.0.0",
        "r-json": "^1.2.1"
      }
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha1-T2ih3Arli9P7lYSMMDJNt11kNgs="
    },
    "raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "dependencies": {
        "http-errors": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
          "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
          "requires": {
            "depd": "2.0.0",
            "inherits": "2.0.4",
            "setprototypeof": "1.2.0",
            "statuses": "2.0.1",
            "toidentifier": "1.0.1"
          }
        },
        "iconv-lite": {
          "version": "0.4.24",
          "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
          "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
          "requires": {
            "safer-buffer": ">= 2.1.2 < 3"
          }
        },
        "statuses": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
          "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
        }
      }
    },
    "rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "requires": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "dependencies": {
        "strip-json-comments": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
          "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo="
        }
      }
    },
    "read-all-stream": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/read-all-stream/-/read-all-stream-3.1.0.tgz",
      "integrity": "sha1-NcPhd/IHjveJ7kv6+kNzB06u9Po=",
      "requires": {
        "pinkie-promise": "^2.0.0",
        "readable-stream": "^2.0.0"
      },
      "dependencies": {
        "isarray": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
        },
        "readable-stream": {
          "version": "2.3.7",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
          "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.3",
            "isarray": "~1.0.0",
            "process-nextick-args": "~2.0.0",
            "safe-buffer": "~5.1.1",
            "string_decoder": "~1.1.1",
            "util-deprecate": "~1.0.1"
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        },
        "string_decoder": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
          "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
          "requires": {
            "safe-buffer": "~5.1.0"
          }
        }
      }
    },
    "readable-stream": {
      "version": "1.1.14",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
      "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
      "requires": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.1",
        "isarray": "0.0.1",
        "string_decoder": "~0.10.x"
      }
    },
    "regexpp": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
      "integrity": "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
      "dev": true
    },
    "registry-auth-token": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-3.4.0.tgz",
      "integrity": "sha512-4LM6Fw8eBQdwMYcES4yTnn2TqIasbXuwDx3um+QRs7S55aMKCBKBxvPXl2RiUjHwuJLTyYfxSpmfSAjQpcuP+A==",
      "requires": {
        "rc": "^1.1.6",
        "safe-buffer": "^5.0.1"
      }
    },
    "registry-url": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-3.1.0.tgz",
      "integrity": "sha1-PU74cPc93h138M+aOBQyRE4XSUI=",
      "requires": {
        "rc": "^1.0.1"
      }
    },
    "request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "requires": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "dependencies": {
        "form-data": {
          "version": "2.3.3",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
          "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.6",
            "mime-types": "^2.1.12"
          }
        },
        "qs": {
          "version": "6.5.3",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
          "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA=="
        },
        "uuid": {
          "version": "3.4.0",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
          "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A=="
        }
      }
    },
    "request-promise": {
      "version": "4.2.6",
      "resolved": "https://registry.npmjs.org/request-promise/-/request-promise-4.2.6.tgz",
      "integrity": "sha512-HCHI3DJJUakkOr8fNoCc73E5nU5bqITjOYFMDrKHYOXWXrgD/SBaC7LjwuPymUprRyuF06UK7hd/lMHkmUXglQ==",
      "requires": {
        "bluebird": "^3.5.0",
        "request-promise-core": "1.1.4",
        "stealthy-require": "^1.1.1",
        "tough-cookie": "^2.3.3"
      }
    },
    "request-promise-core": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/request-promise-core/-/request-promise-core-1.1.4.tgz",
      "integrity": "sha512-TTbAfBBRdWD7aNNOoVOBH4pN/KigV6LyapYNNlAPA8JwbovRti1E88m3sYAwsLi5ryhPKsE9APwnjFTgdUjTpw==",
      "requires": {
        "lodash": "^4.17.19"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q=="
    },
    "resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "requires": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true
    },
    "retry-as-promised": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/retry-as-promised/-/retry-as-promised-5.0.0.tgz",
      "integrity": "sha512-6S+5LvtTl2ggBumk04hBo/4Uf6fRJUwIgunGZ7CYEBCeufGFW1Pu6ucUf/UskHeWOIsUcLOGLFXPig5tR5V1nA=="
    },
    "rfdc": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.3.0.tgz",
      "integrity": "sha512-V2hovdzFbOi77/WajaSMXk2OLm+xNIeQdMMuB7icj7bk6zi2F8GGAxigcnDFpJHbNyNcgyJDiP+8nOrY5cZGrA=="
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dev": true,
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "semver": {
      "version": "7.3.7",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
      "integrity": "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha1-1WgS4cAXpuTnw+Ojeh2m143TyT4="
    },
    "sequelize": {
      "version": "6.21.3",
      "resolved": "https://registry.npmjs.org/sequelize/-/sequelize-6.21.3.tgz",
      "integrity": "sha512-cJPrTTVCofUxaaNKoIETiXCYh2xJ+OFq5jMHJQqftp34M4kNoLpTfUMPSwYtRUeTcSh1/5HodfJXIBi7troIFA==",
      "requires": {
        "@types/debug": "^4.1.7",
        "@types/validator": "^13.7.1",
        "debug": "^4.3.3",
        "dottie": "^2.0.2",
        "inflection": "^1.13.2",
        "lodash": "^4.17.21",
        "moment": "^2.29.1",
        "moment-timezone": "^0.5.34",
        "pg-connection-string": "^2.5.0",
        "retry-as-promised": "^5.0.0",
        "semver": "^7.3.5",
        "sequelize-pool": "^7.1.0",
        "toposort-class": "^1.0.1",
        "uuid": "^8.3.2",
        "validator": "^13.7.0",
        "wkx": "^0.5.0"
      }
    },
    "sequelize-pool": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-7.1.0.tgz",
      "integrity": "sha512-G9c0qlIWQSK29pR/5U2JF5dDQeqqHRragoyahj/Nx4KOOQ3CPPfzxnfqFPCSB7x5UgjOgnZ61nSxz+fjDpRlJg=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true
    },
    "side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "sliced": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/sliced/-/sliced-1.0.1.tgz",
      "integrity": "sha1-CzpmK10Ewxd7GSa+qCsD+Dei70E="
    },
    "smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
    },
    "snake-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
      "requires": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "requires": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      }
    },
    "sorted-array-functions": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/sorted-array-functions/-/sorted-array-functions-1.3.0.tgz",
      "integrity": "sha512-2sqgzeFlid6N4Z2fUQ1cvFmTOLRi/sEDzSQ0OKYchqgoPmQBVyM3959qYx3fpS6Esef80KjmpgPeEr028dP3OA=="
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "spdx-correct": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
      "requires": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-exceptions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A=="
    },
    "spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "requires": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-license-ids": {
      "version": "3.0.11",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.11.tgz",
      "integrity": "sha512-Ctl2BrFiM0X3MANYgj3CkygxhRmr9mi6xhejbdO960nF6EDJApTYpn0BQnDKlnNBULKiCN1n3w9EBkHK8ZWg+g=="
    },
    "split2": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.1.0.tgz",
      "integrity": "sha512-VBiJxFkxiXRlUIeyMQi8s4hgvKCSjtknJv/LVYbrgALPwf5zSKmEwV9Lst25AkvMDnvxODugjdl6KZgwKM1WYQ=="
    },
    "sqlstring": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
      "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg=="
    },
    "sshpk": {
      "version": "1.17.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.17.0.tgz",
      "integrity": "sha512-/9HIEs1ZXGhSPE8X6Ccm7Nam1z8KcoCqPdI7ecm1N33EzAetWahvQWVqLZtaZQ+IDKX4IyA2o0gBzqIMkAagHQ==",
      "requires": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "dependencies": {
        "tweetnacl": {
          "version": "0.14.5",
          "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
          "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
        }
      }
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
    },
    "stealthy-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/stealthy-require/-/stealthy-require-1.1.1.tgz",
      "integrity": "sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks="
    },
    "streamroller": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/streamroller/-/streamroller-3.0.8.tgz",
      "integrity": "sha512-VI+ni3czbFZrd1MrlybxykWZ8sMDCMtTU7YJyhgb9M5X6d1DDxLdJr+gSnmRpXPMnIWxWKMaAE8K0WumBp3lDg==",
      "requires": {
        "date-format": "^4.0.9",
        "debug": "^4.3.4",
        "fs-extra": "^10.1.0"
      }
    },
    "streamsearch": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz",
      "integrity": "sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo="
    },
    "string_decoder": {
      "version": "0.10.31",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true
    },
    "strnum": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA=="
    },
    "supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw=="
    },
    "timed-out": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/timed-out/-/timed-out-2.0.0.tgz",
      "integrity": "sha1-84sK6B03R9YoAB9B2vxlKs5nHAo="
    },
    "tmp": {
      "version": "0.0.28",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.28.tgz",
      "integrity": "sha1-Fyc1t/YU6nrzlmT6hM8N5OUV0SA=",
      "requires": {
        "os-tmpdir": "~1.0.1"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "toposort-class": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toposort-class/-/toposort-class-1.0.1.tgz",
      "integrity": "sha1-f/0feMi+KMO6Rc1OGj9e4ZO9mYg="
    },
    "tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "requires": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
    },
    "ts-mixer": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ts-mixer/-/ts-mixer-6.0.1.tgz",
      "integrity": "sha512-hvE+ZYXuINrx6Ei6D6hz+PTim0Uf++dYbK9FFifLNwQj+RwKquhQpn868yZsCtJYiclZF1u8l6WZxxKi+vv7Rg=="
    },
    "tslib": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.4.0.tgz",
      "integrity": "sha512-d6xOpEDfsi2CZVlPQzGeux8XMwLT9hssAsaPYExaQMuYskwb+x1x7J371tWlbBdWHroy99KnVB6qIkUbs5X3UQ=="
    },
    "tsscmp": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/tsscmp/-/tsscmp-1.0.6.tgz",
      "integrity": "sha512-LxhtAkPDTkVCMQjt2h6eBVY28KCjikZqZfMcC15YBeNjkgUpdCfBu5HoiOTDu86v6smE8yOjyEktJ8hlbANHQA=="
    },
    "tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "twitter-api-v2": {
      "version": "1.12.5",
      "resolved": "https://registry.npmjs.org/twitter-api-v2/-/twitter-api-v2-1.12.5.tgz",
      "integrity": "sha512-kgsEjRfm2kdvAgqXd5druYYxykXEXamae6V/TDyYnws0MClcYBlbtOyGn/HPXEfn2NylbQrjDwkCLaD3qkRgMA=="
    },
    "type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "requires": {
        "prelude-ls": "^1.2.1"
      }
    },
    "type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c="
    },
    "typpy": {
      "version": "2.3.13",
      "resolved": "https://registry.npmjs.org/typpy/-/typpy-2.3.13.tgz",
      "integrity": "sha512-vOxIcQz9sxHi+rT09SJ5aDgVgrPppQjwnnayTrMye1ODaU8gIZTDM19t9TxmEElbMihx2Nq/0/b/MtyKfayRqA==",
      "requires": {
        "function.name": "^1.0.3"
      }
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "ul": {
      "version": "5.2.15",
      "resolved": "https://registry.npmjs.org/ul/-/ul-5.2.15.tgz",
      "integrity": "sha512-svLEUy8xSCip5IWnsRa0UOg+2zP0Wsj4qlbjTmX6GJSmvKMHADBuHOm1dpNkWqWPIGuVSqzUkV3Cris5JrlTRQ==",
      "requires": {
        "deffy": "^2.2.2",
        "typpy": "^2.3.4"
      }
    },
    "underscore": {
      "version": "1.13.3",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.3.tgz",
      "integrity": "sha512-QvjkYpiD+dJJraRA8+dGAU4i7aBbb2s0S3jA45TFOvg2VgqvdCDd/3N6CqA8gluk1W91GLoXg5enMUx560QzuA=="
    },
    "universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ=="
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw="
    },
    "unzip-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/unzip-response/-/unzip-response-1.0.2.tgz",
      "integrity": "sha1-uYTwh3/AqJwsdzzB73tbIytbBv4="
    },
    "uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "requires": {
        "punycode": "^2.1.0"
      }
    },
    "url-parse-lax": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-1.0.0.tgz",
      "integrity": "sha1-evjzA2Rem9eaJy56FKxovAYJ2nM=",
      "requires": {
        "prepend-http": "^1.0.1"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
    },
    "v8-compile-cache": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
      "integrity": "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
      "dev": true
    },
    "validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "requires": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "validator": {
      "version": "13.7.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.7.0.tgz",
      "integrity": "sha512-nYXQLCBkpJ8X6ltALua9dRrZDHVYxjJ1wgskNt1lH9fzGjs3tgojGSCBjmEPwkWS1y29+DrizMTW19Pr9uB2nw=="
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
    },
    "verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      },
      "dependencies": {
        "core-util-is": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
          "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
        }
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wkx": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/wkx/-/wkx-0.5.0.tgz",
      "integrity": "sha512-Xng/d4Ichh8uN4l0FToV/258EjMGU9MGcA0HV2d9B/ZpZB3lqQm7nkOdZdm5GhKtLLhAE7PiVQwN4eN+2YJJUg==",
      "requires": {
        "@types/node": "*"
      }
    },
    "word-wrap": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
      "integrity": "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
      "dev": true
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "dev": true
    },
    "ws": {
      "version": "8.5.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.5.0.tgz",
      "integrity": "sha512-BWX0SWVgLPzYwF8lTzEy1egjhS4S4OEAHfsO8o65WOVsrnSRGaSiUaa9e0ggGlkMTtBlmOpEXiie9RUcBO86qg==",
      "requires": {}
    },
    "xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ=="
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA=="
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yargs": {
      "version": "17.5.1",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.5.1.tgz",
      "integrity": "sha512-t6YAJcxDkNX7NFYiVtKvWUz8l+PaKTLiL63mJYWR2GnHq2gjEWISzsLp9wg3aY36dY1j+gfIEL3pIF+XlJJfbA==",
      "requires": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.0.0"
      }
    },
    "yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="
    },
    "ylru": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/ylru/-/ylru-1.3.2.tgz",
      "integrity": "sha512-RXRJzMiK6U2ye0BlGGZnmpwJDPgakn6aNQ0A7gHRbD4I0uvK4TW6UqkK1V0pp9jskjJBAXd3dRrbzWkqJ+6cxA=="
    },
    "zod": {
      "version": "3.14.4",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.14.4.tgz",
      "integrity": "sha512-U9BFLb2GO34Sfo9IUYp0w3wJLlmcyGoMd75qU9yf+DrdGA4kEx6e+l9KOkAlyUO0PSQzZCa3TR4qVlcmwqSDuw=="
    }
  }
}

'''
'''--- package.json ---
{
  "name": "nepbot-backend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@discordjs/builders": "^0.13.0",
    "@discordjs/rest": "^0.4.1",
    "app-root-path": "^3.0.0",
    "axios": "^0.27.2",
    "discord-api-types": "^0.31.2",
    "discord.js": "^13.6.0",
    "dotenv": "^16.0.0",
    "ioredis": "^5.3.2",
    "js-base64": "^3.7.2",
    "koa": "^2.13.4",
    "koa-bodyparser": "^4.3.0",
    "koa-router": "^10.1.1",
    "koa-session": "^6.2.0",
    "koa2-cors": "^2.0.6",
    "log4js": "^6.4.6",
    "mongoose": "^6.8.0",
    "multer": "^1.4.4",
    "multiparty": "^4.2.3",
    "mysql2": "^2.3.3",
    "near-api-js": "^0.44.2",
    "near-lake-framework": "^1.0.4",
    "node-schedule": "^2.1.0",
    "package.json": "^2.0.1",
    "parse-database-url": "^0.3.0",
    "pg": "^8.7.3",
    "pg-hstore": "^2.3.4",
    "request": "^2.88.2",
    "request-promise": "^4.2.6",
    "sequelize": "^6.21.3",
    "snake-case": "^3.0.4",
    "text-table": "^0.2.0",
    "twitter-api-v2": "^1.12.5",
    "yargs": "^17.5.1"
  },
  "devDependencies": {
    "eslint": "^8.14.0"
  }
}

'''
'''--- pkg/models/db_driver/mysql_driver.js ---
/*
https://www.sequelize.com.cn/
*/
const logger = require('../../utils/logger');
const config = require('../../utils/config');
const { Sequelize, Op } = require('sequelize');

const operatorsAliases = {
  $eq: Op.eq,
  $ne: Op.ne,
  $in: Op.in,
  $any: Op.any,
  $all: Op.all,
  $values: Op.values,
  $col: Op.col,
  $nin: Op.notIn,
  $gte: Op.gte,
  $lte: Op.lte,
  $gt: Op.gt,
  $lt: Op.lt,
};

const mysql = new Sequelize(`${config.mysql_url}`, {
  logging: msg => logger.trace(msg),
  operatorsAliases,
});

try {
  mysql.authenticate().then(() => logger.info('Connection with mysql has been established successfully.'));
}
catch (error) {
  logger.error('Unable to connect to mysql:', error);
}

module.exports = mysql;

'''
'''--- pkg/models/db_driver/postgre_driver.js ---
const { Pool } = require('pg');
const parse = require('pg-connection-string').parse;
const config = require('../../utils/config');

const connnectStr = parse(config.near_indexer);
const nearIndexerPool = new Pool(connnectStr);
module.exports = nearIndexerPool;
'''
'''--- pkg/models/object/guild_deletes.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const GuildDeletes = mysql.define('guild_deletes', {
  guild_id: {
    type: DataTypes.STRING,
    allowNull: false,
    primaryKey: true,
  },
  expired_at: {
    type:DataTypes.DATE,
    allowNull: false,
  },
});

exports.add = async (data) => {
  return await GuildDeletes.findOrCreate({
    where: data,
  });
};

exports.get = async (data) => {
  return await GuildDeletes.findOne({
    where: data,
  });
};

exports.list = async () => {
  return await GuildDeletes.findAll();
};

exports.delete = async (data) => {
  return await GuildDeletes.destroy({
    where: data,
  });
};
'''
'''--- pkg/models/object/oauth_cache.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const OauthCache = mysql.define('oauth_cache', {
  state:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  code_verifier:{
    type:DataTypes.STRING,
    allowNull: false,
  },
});

exports.get = async (data) => {
  return await OauthCache.findOne({
    where:data,
  });
};

exports.list = async (data) => {
  return await OauthCache.findAll({
    where:data,
  });
};

exports.add = async (data) => {
  return await OauthCache.findOrCreate({
    where: data,
  });
};

exports.delete = async (data) => {
  return await OauthCache.destroy({
    where: data,
  });
};
'''
'''--- pkg/models/object/response.js ---
const logger = require('../../utils/logger');

module.exports = class {
  constructor({ code, message, success, data }) {
    this.code = code || 200;
    this.message = message || 'success';
    this.success = success == null ? true : success;
    this.data = data;
    logger.info(JSON.stringify(this));
  }
};
'''
'''--- pkg/models/object/rule.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const rules = mysql.define('rules', {
  role_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  guild_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  token_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  amount:{
    type:DataTypes.STRING,
    allowNull: false,
  },
});

module.exports = rules;
'''
'''--- pkg/models/object/twitter_rules.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const TwitterRules = mysql.define('twitter_rules', {
  user_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  guild_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  role_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  follow_user_name:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  rt_tweet_link:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  like_tweet_link:{
    type:DataTypes.STRING,
    allowNull: true,
  },
});

exports.get = async (data) => {
  const twitterRule = await TwitterRules.findOne({
    where:data,
  });
  return twitterRule;
};

exports.list = async (data) => {
  const twitterRules = await TwitterRules.findAll({
    where:data,
  });
  return twitterRules;
};

exports.add = async (data) => {
  return await TwitterRules.findOrCreate({
    where: data,
  });
};

exports.delete = async (data) => {
  return await TwitterRules.destroy({
    where: data,
  });
};
'''
'''--- pkg/models/object/twitter_rules_msg.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const TwitterRulesMsg = mysql.define('twitter_rules_msg', {
  user_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  guild_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  channel_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  message_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  twitter_state:{
    type:DataTypes.STRING,
    allowNull: true,
  },
});

exports.get = async (data) => {
  const twitterRulesMsg = await TwitterRulesMsg.findOne({
    where:data,
  });
  return twitterRulesMsg;
};

exports.list = async (data) => {
  const twitterRulesMsg = await TwitterRulesMsg.findAll({
    where:data,
  });
  return twitterRulesMsg;
};

exports.add = async (data) => {
  return await TwitterRulesMsg.findOrCreate({
    where: data,
  });
};

exports.delete = async (data) => {
  return await TwitterRulesMsg.destroy({
    where: data,
  });
};
'''
'''--- pkg/models/object/twitter_users.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const TwitterUsers = mysql.define('twitter_users', {
  user_id:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  state:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  access_token:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  refresh_token:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  expired_at: {
    type:DataTypes.DATE,
    allowNull: true,
  },
  twitter_id:{
    type:DataTypes.STRING,
    allowNull: true,
  },
  twitter_username:{
    type:DataTypes.STRING,
    allowNull: true,
  },
});

exports.get = async (data) => {
  const twitterRule = await TwitterUsers.findOne({
    where:data,
  });
  return twitterRule;
};

exports.list = async (data) => {
  const twitterRules = await TwitterUsers.findAll({
    where:data,
  });
  return twitterRules;
};

exports.add = async (data) => {
  return await TwitterUsers.findOrCreate({
    where: data,
  });
};

exports.update = async (params, condition) => {
  return await TwitterUsers.update(params, {
    where: condition,
  });
};

exports.delete = async (data) => {
  return await TwitterUsers.destroy({
    where: data,
  });
};
'''
'''--- pkg/models/object/user_disconnects.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const UserDisconnects = mysql.define('user_disconnects', {
  guild_id: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  user_id: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  expired_at: {
    type:DataTypes.DATE,
    allowNull: false,
  },
});

exports.add = async (data) => {
  return await UserDisconnects.findOrCreate({
    where: data,
  });
};

exports.get = async (data) => {
  return await UserDisconnects.findOne({
    where: data,
  });
};

exports.list = async () => {
  return await UserDisconnects.findAll();
};

exports.delete = async (data) => {
  return await UserDisconnects.destroy({
    where: data,
  });
};
'''
'''--- pkg/models/object/user_fields.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const UserFields = mysql.define('user_fields', {
  near_wallet_id:{
    type:DataTypes.STRING,
    allowNull:false,
  },
  key:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  value:{
    type:DataTypes.STRING,
    allowNull: false,
  },
});

exports.addUserField = async (data) => {
  const user = await this.getUserField({
    near_wallet_id: data.near_wallet_id,
    key: data.key,
    value: data.value,
  });
  if (user) {
    return await this.updateUserField(data);
  }
  else {
    const user = await UserFields.create(data);
    return user.toJSON();
  }
};

exports.getUserField = async (data) => {
  const user = await UserFields.findOne({
    where:data,
  });
  return user;
};

exports.getUserFields = async (data) => {
  const users = await UserFields.findAll({
    where:data,
  });
  return users;
};

exports.updateUserField = async (data) => {
  if (!data.near_wallet_id) return { msg:'Missing parameters near_wallet_id', code:0 };
  const params = {
    near_wallet_id:data?.near_wallet_id,
    key:data?.key,
    value: data?.value,
  };
  return await UserFields.update(params, {
    where: {
      near_wallet_id:data?.near_wallet_id,
      key:data?.key,
      value: data?.value,
    },
  });
};

exports.deleteUserField = async (data) => {
  return await UserFields.destroy({
    where: {
      near_wallet_id:data?.near_wallet_id,
      key:data?.key,
      value: data?.value,
    },
  });
};
'''
'''--- pkg/models/object/user_infos.js ---
const { DataTypes } = require('sequelize');
const mysql = require('../db_driver/mysql_driver');

const UserInfos = mysql.define('user_infos', {
  user_id: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  guild_id: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  near_wallet_id: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  nonce: {
    type: DataTypes.BIGINT,
    allowNull: false,
  },
});

exports.addUser = async (data) => {
  const user = await this.getUser({
    guild_id:data.guild_id,
    user_id:data.user_id,
  });
  if (user) {
    return await this.updateUser(data);
  }
  else {
    const userInfo = await UserInfos.create(data);
    return userInfo.toJSON();
  }
};

exports.getUser = async (data) => {
  const user = await UserInfos.findOne({
    where:data,
  });
  return user;
};

exports.getUsers = async (data) => {
  return await UserInfos.findAll({
    where:data,
  });
};

exports.getUserCount = async (data) => {
  return await UserInfos.count({
    where: data
  })
}

exports.updateUser = async (data) => {
  if (!data.user_id) return { msg:'Missing parameters user_id', code:0 };
  const params = {
    near_wallet_id: data?.near_wallet_id,
    user_id:data?.user_id,
    guild_id:data?.guild_id,
    nonce: data?.nonce,
  };
  return await UserInfos.update(params, {
    where: {
      user_id:data?.user_id,
      guild_id:data?.guild_id,
    },
  });
};

exports.deleteUser = async (data) => {
  return await UserInfos.destroy({
    where: {
      user_id:data?.user_id,
      guild_id:data?.guild_id,
    },
  });
};
'''
'''--- pkg/utils/airdrop_utils.js ---
const config = require('../../pkg/utils/config');
const logger = require('./logger');
const contractUtils = require('./contract_utils');

exports.getGMTTime = async (duration) => {
  const date = new Date();
  date.setDate(date.getDate() + duration);
  return date.toISOString();
};

//this.getGMTTime('2022-09-01 05:53:22').then(console.log);

exports.formatNFTEmbedMsg = async (interaction) => {
  const fields = interaction.message.embeds[0].fields;
  const result = {};
  for (const field of fields) {
    if (config.fields.airdrop_hash.findIndex(item => item == field.name) > -1) {
      result.hash = field.value;
    }
  }
  return result;
};

exports.formatFTEmbedMsg = async (interaction) => {
  const fields = interaction.message.embeds[0].fields;
  const result = {};
  for (const field of fields) {
    if (config.fields.airdrop_hash.findIndex(item => item == field.name) > -1) {
      result.hash = field.value;
    }
  }
  return result;
};

exports.checkIsClaimed = async (userId, hash) => {
  const account = await contractUtils.contract();
  return await account.viewFunction(config.airdrop_contract, 'check_is_claimed', { user_id: userId, hash });
};

exports.getCampaign = async (hash) => {
  const account = await contractUtils.contract();
  return await account.viewFunction(config.airdrop_contract, 'get_campaign', { hash });
}
'''
'''--- pkg/utils/astrodao_utils.js ---
const axios = require('axios');
const config = require('../../pkg/utils/config');
const logger = require('./logger');
const contractUtils = require('./contract_utils');
const parasApi = require('./paras_api');
const { snakeCase } = require('snake-case');

// this is just a backup for using astrodao API, it's not used in anywhere 2022-08-05
const getMemberInfo = async (daoId) => {
  const memberInfo = await axios
    .get(`${config.astrodao.api}/${daoId}`)
    .then(res => {
      return res.data;
    })
    .catch(error => {
      logger.error(error.response.data);
    });
  return memberInfo;
};

/**
 * get the policy from astrodao
 * @param contractId
 * @returns return the policy
 */
exports.getAstrodaoPolicy = async (contractId) => {
  const account = await contractUtils.contract();
  return await account.viewFunction(contractId, 'get_policy', {});
};

/**
 * @description based on the params to justify the account have role in dao.
 * @param {String} daoId the address of the astrodao
 * @param {String} accountId near wallet id
 * @param {String} roleInDao the name of the role in the astrodao
 * @returns boolean
 */
exports.isMemberHaveRole = async (daoId, accountId, roleInDao) => {
  if (roleInDao == 'all') {
    return true;
  }
  const policy = await this.getAstrodaoPolicy(daoId);
  for (const role of policy.roles) {
    if (role.name == roleInDao && role.kind.Group.includes(accountId)) {
      return true;
    }
  }
  return false;
};
// this.isMemberHaveRole('kalakendradao.sputnik-dao.near', 'gogoshishi.near', 'all').then(console.log);

/**
 *
 * @param {String} daoId
 * @returns the last index of the proposal
 */
exports.getLastProposalId = async (daoId) => {
  const account = await contractUtils.contract();
  return await account.viewFunction(daoId, 'get_last_proposal_id', {});
};

/**
 * 
 * @param {string} daoId
 * @returns array
 */
exports.listActiveProposals = async (daoId, fromIndex, limit) => {
  const account = await contractUtils.contract();
  const proposals = await account.viewFunction(daoId, 'get_proposals', { 'from_index': fromIndex, 'limit': limit }).then(p => p.reverse());
  const activeProposals = [];
  for (const proposal of proposals) {

    if (await isProposalExpired(proposal.submission_time)) {
      if (proposal.status == 'InProgress') {
        activeProposals.push(proposal);
      }
    }
    else {
      break;
    }
  }
  return activeProposals;
};

//this.listActiveProposals('jacktest.sputnikv2.testnet', 86, 25).then(e => console.log(e.length));

exports.isActiveProposal = async (proposal) => {
  if (await isProposalExpired(proposal.submission_time) && proposal.status == 'InProgress') {
    return true;
  }
  return false;
};

const isProposalExpired = async (time) =>{
  const curTime = new Date();
  const subTime = new Date(time / 1000000);
  const expiredTime = subTime.setDate(subTime.getDate() + 7); // 7 days
  if (expiredTime > curTime) {
    return true;
  }
  return false;
};

/**
 *
 * @param {String} daoId
 * @param {String} proposalId
 * @returns
 */
exports.getProposal = async (daoId, proposalId) => {
  try {
    const account = await contractUtils.contract();
    return await account.viewFunction(daoId, 'get_proposal', { id: proposalId });
  }
  catch (e) {
    logger.error(e);
  }
};

//this.getProposal('jacktest.sputnikv2.testnett', 172).then(console.log);

/**
 *
 * @param {Object} proposal
 * @param {string} accountId near wallet id
 * @returns boolean
 */
exports.isAlreadyVote = async (proposal, accountId) => {
  if (accountId in proposal.votes) {
    return true;
  }
  return false;
};

/**
 *
 * @param {JSON} policy
 * @param {JSON} afterProposal this proposal is from formateProposal()
 * @param {String} accountId
 * @returns boolean
 */
exports.checkPermissions = async (policy, afterProposal, accountId) => {
  for (const role of policy.roles) {
    if (role.permissions == null) {
      continue;
    }
    const permissions = await formatPermission(role.permissions);
    if (role.name == 'all') {
      if (permissions.findIndex(permission => permission == afterProposal.proposal_type) > -1) {
        return true;
      }
      else if (role.permissions.includes('*:VoteApprove') || role.permissions.includes('*:VoteRemove')) {
        return true;
      }
      continue;
    }
    else if (role.kind.Group.some(item => item == accountId)) {
      if (permissions.findIndex(permission => permission == afterProposal.proposal_type) > -1) {
        return true;
      }
      else if (role.permissions.includes('*:VoteApprove') || role.permissions.includes('*:VoteRemove')) {
        return true;
      }
      continue;
    }
  }

  return false;
};

// this.checkUserPermissions('jacktest.sputnikv2.testnet', 59, 'jacktest4.testnet').then(console.log);

/**
 *
 * @param {Array} permissions;
 * @returns Array
 */
async function formatPermission(permissions) {
  const permissionsSet = new Set();
  for (const permission of permissions) {
    permissionsSet.add(permission.split(':')[0]);
  }
  return Array.from(permissionsSet);
}
//formatPermission(Array.from(['*:VoteReject', '*:VoteRemove', '*:VoteApprove', '*:AddProposal', '*:Finalize'])).then(console.log);

async function getSubmitTime(time) {
  const subTime = new Date(time / 1000000);
  return subTime.toUTCString();
}
//getSubmitTime('1661061753973331808').then(console.log);

async function getDeadline(subTime, dueTime) {
  const time = new Date((new Date(subTime / 1000000).getTime() + new Date(dueTime / 1000000).getTime()));
  return time.toUTCString();
}

/**
 *
 * @param {json} proposal
 * @returns { proposal_type: snakeCase(proposal.kind), description: 'text show in discord' }
 */
exports.formatProposal = async (proposal) => {
  // logger.info(JSON.stringify(proposal));
  const embeds = [];
  if (typeof proposal.kind == 'object' && 'ChangePolicy' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('policy') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'AddBounty' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('AddBounty') };
    afterProposal.origin = JSON.stringify(proposal);

    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.kind.AddBounty.bounty.description.split('$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Token', value: proposal.kind.AddBounty.bounty.token.length == 0 ? 'Near' : proposal.kind.AddBounty.bounty.token.toString() });
    embeds.push({ name: 'Amount', value: parasApi.prettyBalance(proposal.kind.AddBounty.bounty.amount, 24) });
    embeds.push({ name: 'Available Claims', value: proposal.kind.AddBounty.bounty.times.toString() });
    embeds.push({ name: 'Deadline', value: await getDeadline(proposal.submission_time, proposal.kind.AddBounty.bounty.max_deadline) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });

    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'BountyDone' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('BountyDone') };
    afterProposal.origin = JSON.stringify(proposal);

    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Bounty ID', value: proposal.kind.BountyDone.bounty_id.toString() });
    embeds.push({ name: 'Receiver ID', value: proposal.kind.BountyDone.receiver_id });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });

    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'AddMemberToRole' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('AddMemberToRole') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Target', value: proposal.kind.AddMemberToRole.member_id });
    embeds.push({ name: 'Group', value: proposal.kind.AddMemberToRole.role });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'RemoveMemberFromRole' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('RemoveMemberFromRole') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Target', value: proposal.kind.RemoveMemberFromRole.member_id });
    embeds.push({ name: 'Group', value: proposal.kind.RemoveMemberFromRole.role });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'FunctionCall' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('FunctionCall') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Smart Contract Address', value: proposal.kind.FunctionCall.receiver_id });
    for (const action of proposal.kind.FunctionCall.actions) {
      embeds.push({ name: 'Method Name', value: action.method_name });
      embeds.push({ name: 'JSON', value: action.args });
      embeds.push({ name: 'Deposit', value: action.deposit });
    }
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'Transfer' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('Transfer') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Token ID', value: proposal.kind.Transfer.token_id.length == 0 ? 'Near' : proposal.kind.Transfer.token_id });
    embeds.push({ name: 'Target', value: proposal.kind.Transfer.receiver_id });
    embeds.push({ name: 'Amount', value: parasApi.prettyBalance(proposal.kind.Transfer.amount, 24) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });

    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'UpgradeRemote' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('UpgradeRemote') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Receiver Id', value: proposal.kind.UpgradeRemote.receiver_id });
    embeds.push({ name: 'Method', value: proposal.kind.UpgradeRemote.method_name });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'UpgradeSelf' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('UpgradeSelf') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'string' && proposal.kind == 'Vote') {
    const afterProposal = { proposal_type: snakeCase('Vote') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'SetStakingContract' in proposal.kind) { 
    const afterProposal = { proposal_type: snakeCase('SetStakingContract') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Staking Contract', value: proposal.kind.SetStakingContract.staking_id });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object' && 'ChangeConfig' in proposal.kind) {
    const afterProposal = { proposal_type: snakeCase('config') };
    afterProposal.origin = JSON.stringify(proposal);

    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'object') {
    const afterProposal = { proposal_type: snakeCase('unknown_type') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
  else if (typeof proposal.kind == 'string') {
    const afterProposal = { proposal_type: snakeCase('unknown_type') };
    afterProposal.origin = JSON.stringify(proposal);
    embeds.push({ name: config.fields.proposal_id[0], value: proposal.id.toString() });
    embeds.push({ name: 'Proposer', value: proposal.proposer });
    embeds.push({ name: 'Proposal Type', value: afterProposal.proposal_type });
    embeds.push({ name: 'Description', value: proposal.description.split('$$$$$$')[0].substring(0, 1024) });
    embeds.push({ name: 'Submission Time', value: await getSubmitTime(proposal.submission_time) });
    afterProposal.embeds = embeds;
    return afterProposal;
  }
};

// const proposal = {"id":12,"proposer":"0xv.testnet","description":"1231231231231$$$$","kind":{"Transfer":{"token_id":"","receiver_id":"gogoshishi.testnet","amount":"100000000000000000000000","msg":null}},"status":"InProgress","vote_counts":{},"votes":{},"submission_time":"1672057558008532223"}
// ;
// this.formatProposal(proposal).then(console.log).catch(e => console.log(e));
'''
'''--- pkg/utils/block_stream.js ---
const { S3Client, ListObjectsV2Command, GetObjectCommand } = require("@aws-sdk/client-s3");
const { Readable } = require("stream");

const sleep = (pause) =>
  new Promise((resolve) => setTimeout(resolve, pause));

// In the S3 bucket we store blocks height with prepended zeroes
// because these are string there and to avoid getting earlier
// blocks after later ones because of sorting strings issues
// we decided to prepend zeroes.
// This function normalizes the block height number into the string
function normalizeBlockHeight(number) {
  return number.toString().padStart(12, "0");
}

async function parseBody(stream) {
  const contents = await streamToString(stream);
  const parsed = JSON.parse(contents);
  return parsed;
}

// the function got from
// https://github.com/aws/aws-sdk-js-v3/issues/1877#issuecomment-755387549
function streamToString(stream) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    stream.on("data", (chunk) => chunks.push(chunk));
    stream.on("error", reject);
    stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
  });
}

// Queries the list of the objects in the bucket, grouped by "/" delimiter.
// Returns the list of blocks that can be fetched
// See more about data structure https://github.com/near/near-lake#data-structure
async function listBlocks(
    client,
    bucketName,
    startAfter,
    limit = 200
) {
    const data = await client.send(
        new ListObjectsV2Command({
            Bucket: bucketName,
            MaxKeys: limit,
            Delimiter: "/",
            StartAfter: normalizeBlockHeight(startAfter),
            RequestPayer: "requester",
        })
    );
    return (data.CommonPrefixes || []).map((p) => parseInt(p.Prefix.split("/")[0]));
}

// By the given block height gets the objects:
// - block.json
// - shard_N.json
// Returns the result as `StreamerMessage`
async function fetchStreamerMessage(
    client,
    bucketName,
    blockHeight
) {
    const block = await fetchBlock(client, bucketName, blockHeight);
    const shards = await fetchShards(
        client,
        bucketName,
        blockHeight,
        block.chunks.length
    );
    return { block, shards };
}

// By the given block height gets the block.json
// Reads the content of the objects and parses as a JSON.
async function fetchBlock(
    client,
    bucketName,
    blockHeight
) {
    while (true) {
        try {
            const data = await client.send(
                new GetObjectCommand({
                    Bucket: bucketName,
                    Key: `${normalizeBlockHeight(blockHeight)}/block.json`,
                    RequestPayer: "requester",
                })
            );
            const block = await parseBody(Readable.from(data.Body));
            return block;
        } catch (err) {
            console.error(
                `Failed to fetch ${blockHeight}/block.json. Retrying immediately`,
                err
            );
        }
    }
}

// By the given block height gets the shard_N.json files
// Reads the content of the objects and parses as a JSON.
async function fetchShards(
    client,
    bucketName,
    blockHeight,
    numberOfShards
) {
    if (numberOfShards === 0) return [];

    return await Promise.all(
        [...Array(numberOfShards).keys()].map(async (index) =>
            fetchSingleShard(client, bucketName, blockHeight, index)
        )
    );
}

async function fetchSingleShard(
    client,
    bucketName,
    blockHeight,
    shardId
) {
    try {
    const data = await client.send(
        new GetObjectCommand({
        Bucket: bucketName,
        Key: `${normalizeBlockHeight(blockHeight)}/shard_${shardId}.json`,
        RequestPayer: "requester",
        })
    );
    const shard = await parseBody(Readable.from(data.Body));
    return shard;
    } catch (err) {
    console.error(
        `Failed to fetch ${blockHeight}/shard_${shardId}.json. Retrying immediately`,
        err
    );
    return await fetchSingleShard(client, bucketName, blockHeight, shardId);
    }
}

async function* batchStream(config) {
    const s3Client = new S3Client({ region: config.s3RegionName, endpoint: config.s3Endpoint, forcePathStyle: config.s3ForcePathStyle });

    let startBlockHeight = config.startBlockHeight;
    let endBlockHeight = config.endBlockHeight

    while (startBlockHeight <= endBlockHeight || endBlockHeight == 0) {
        const results = [];
        let blockHeights;
        try {
            blockHeights = await listBlocks(
                s3Client,
                config.s3BucketName,
                startBlockHeight,
            );
        } catch (err) {
            console.error("Failed to list blocks. Retrying.", err);
            continue;
        }

        if (blockHeights.length === 0) {
            // Throttling when there are no new blocks
            const NO_NEW_BLOCKS_THROTTLE_MS = 700;
            await sleep(NO_NEW_BLOCKS_THROTTLE_MS);
            continue;
        }

        yield blockHeights.map(blockHeight => fetchStreamerMessage(s3Client, config.s3BucketName, blockHeight));
        startBlockHeight = Math.max.apply(Math, blockHeights) + 1;
    }
}

async function* fetchAhead(seq, stepsAhead = 10) {
    let queue = [];
    while (true) {
        while (queue.length < stepsAhead) {
            queue.push(seq[Symbol.asyncIterator]().next());
        }

        const { value, done } = await queue.shift();
        if (done) {return};
        yield value;
    }
}

async function* stream(config) {

    let lastProcessedBlockHash;
    let startBlockHeight = config.startBlockHeight;
    let endBlockHeight = config.endBlockHeight

    while (startBlockHeight <= endBlockHeight || endBlockHeight == 0) {
        try {
            for await (let promises of fetchAhead(batchStream({ ...config, startBlockHeight }))) {
                for (let promise of promises) {
                    const streamerMessage = await promise;
                    // check if we have `lastProcessedBlockHash` (might be not set only on start)
                    // compare lastProcessedBlockHash` with `streamerMessage.block.header.prevHash` of the current
                    // block (ensure we never skip blocks even if there is some incident on Lake Indexer side)
                    // retrieve the data from S3 if hashes don't match and repeat the main loop step
                    // if (
                    //     lastProcessedBlockHash &&
                    //     lastProcessedBlockHash !== streamerMessage.block.header.prevHash
                    // ) {
                    //     throw new Error(
                    //     `The hash of the last processed block ${lastProcessedBlockHash} doesn't match the prevHash ${streamerMessage.block.header.prevHash} of the new one ${streamerMessage.block.header.hash}.`);
                    // }

                    yield streamerMessage;

                    lastProcessedBlockHash = streamerMessage.block.header.hash;
                    startBlockHeight = streamerMessage.block.header.height + 1;
                }
            }
        } catch (e) {
            // TODO: Should there be limit for retries?
            console.log('Retrying on error when fetching blocks', e, 'Refetching the data from S3 in 200ms');
            await sleep(200);
        }
    }
}

async function startStream(
    config,
    onStreamerMessageReceived
) {
    let queue = [];
    for await (let streamerMessage of stream(config)) {
        // `queue` here is used to achieve throttling as streamer would run ahead without a stop
        // and if we start from genesis it will spawn millions of `onStreamerMessageReceived` callbacks.
        // This implementation has a pipeline that fetches the data from S3 while `onStreamerMessageReceived`
        // is being processed, so even with a queue size of 1 there is already a benefit.
        // TODO: Reliable error propagation for onStreamerMessageReceived?
        queue.push(onStreamerMessageReceived(streamerMessage));
        if (queue.length > 10) {
            await queue.shift();
        }
    }
}

module.exports = {
    startStream
}
'''
'''--- pkg/utils/config.js ---
// get the app root path
const appRoot = require('app-root-path');
// load .env file into process
require('dotenv').config({ path: `${appRoot}/.env` });
const { keyStores } = require('near-api-js');

const homedir = require('os').homedir();
const path = require('path');
const CREDENTIALS_DIR = '.near-credentials';
const credentialsPath = path.join(homedir, CREDENTIALS_DIR);

const config = require('../../conf/near_net.json');
config.nearWallet.keyStore = new keyStores.UnencryptedFileSystemKeyStore(credentialsPath);

// add the secret config from file (.env) into the following line. same style
config.bot_token = process.env.BOT_TOKEN;
config.bot_appid = process.env.BOT_APPID;
config.mysql_url = process.env.MYSQL_URL;
config.mongo_url = process.env.MONGODB_URL;
config.runtime_env = process.env.RUNTIME_ENV;
config.logger_mode = process.env.LOGGER_MODE;
config.consumer_key = process.env.CONSUMER_KEY;
config.consumer_secret = process.env.CONSUMER_SECRET;
config.bearer_token = process.env.BEARER_TOKEN;
config.client_id = process.env.CLIENT_ID;
config.client_secret = process.env.CLIENT_SECRET;

module.exports = config;
'''
'''--- pkg/utils/contract_utils.js ---
const { connect, WalletConnection, providers } = require('near-api-js');
const config = require('./config');
const BN = require('bn.js');
const logger = require('./logger');
const { provider } = require('./near_utils');
const contract = async () => {
  // connect to NEAR
  const near = await connect(config.nearWallet);
  return await near.account();
};

exports.contract = contract;
exports.getFieldList = async () => {
  const account = await this.contract();
  return await account.viewFunction(config.rule_contract, 'get_token_list', {});
};

exports.getRules = async (guildId) => {
  const account = await this.contract();
  // return await queryRule({guild_id: guildId});
  return await account.viewFunction(config.rule_contract, 'get_guild', { guild_id: guildId });
};
//this.getRules('923197936068861953').then(console.log);

exports.getRulesByField = async (key, value) => {
  const account = await this.contract();
  return await account.viewFunction(config.rule_contract, 'get_field', { field_key: key, field_value: value });
};
//this.getRulesByField('gating_rule', 'Paras Staking').then(console.log);

exports.getBalanceOf = async (tokenId, accountId) => {
  const account = await this.contract();
  return await account.viewFunction(tokenId, 'ft_balance_of', { account_id: accountId });
};

exports.getMetadata = async (tokenId) => {
  const account = await this.contract()
  return await account.viewFunction(tokenId, 'ft_metadata', {})
}

exports.getNftCountOf = async (contractId, accountId) => {
  const account = await this.contract();
  return await account.viewFunction(contractId, 'nft_supply_for_owner', { account_id: accountId });
};

exports.getParasNftCountOf = async (accountId, tokenId) => {
  const account = await this.contract();

  return await account.viewFunction(tokenId, 'nft_supply_for_owner', { account_id: accountId });
};

exports.getNearBalanceOf = async (accountId) => {
  const near = await connect(config.nearWallet);
  const account = await near.account(accountId);
  const balance = await account.getAccountBalance();
  return balance.total;
};

exports.getOctAppchainRole = async (appchain_id, account_id) => {
  const account = await this.contract();
  const validator = await account.viewFunction(appchain_id + '.' + config.oct_contract, 'get_validator_list_of', {});
  const delegator = await account.viewFunction(appchain_id + '.' + config.oct_contract, 'get_delegations_of', { delegator_id: account_id });
  if (validator && validator.findIndex(item => item.validator_id == account_id) > -1) {
    return 'validator';
  }
  else if (delegator && delegator.length > 0) {
    return 'delegator';
  }
  else {
    return;
  }
};

exports.getOct2Role = async (account_id) => {
  const account = await this.contract()
  const validator = await account.viewFunction(config.oct_contract_2, 'get_validator_detail', {validator_id: account_id})
  const delegator = await account.viewFunction(config.oct_contract_2, 'get_delegator_detail', {delegator_id: account_id})
  if (validator) {
    return 'validator';
  } else if (delegator) {
    return 'delegator'
  }
}

exports.getCollectionSeries = async (collectionId) => {
  try {
    const account = await this.contract();
    const series = await account.viewFunction(config.nft_contract, 'get_token_metadata', { collection_id: collectionId });
    return series;
  }
  catch (e) {
    return [];
  }
};

exports.getCollectionsByGuild = async (guildId) => {
  try {
    const account = await this.contract();
    return await account.viewFunction(config.nft_contract, 'get_collections_by_guild', { guild_id: guildId });
  }
  catch (e) {
    return [];
  }
};

async function parseEvents(receiptOutcomes, eventType) {
  // let txDigests = txMap[receipt.receipt.Action.signer_id]
  // if (!txDigests || txDigests.length == 0) {
  //   console.log(receipt)
  //   return []
  // }
  // let tx = {}
  // for (let txDigest of txDigests) {
  //   tx = await provider.txStatus(txDigest.hash, txDigest.signer_id)
  //   if (tx.transaction_outcome.outcome.receipt_ids.findIndex(receipt_id => receipt_id == receipt.receipt_id) > -1) {
  //     break
  //   }
  // }
  let ret = []
  for (let receiptOutcome of receiptOutcomes) {
    const outcome = receiptOutcome.execution_outcome
    const events = outcome.outcome.logs.filter(log => {
      try {
        const logObj = JSON.parse(log.replace("EVENT_JSON:", ""))
        return logObj && logObj.event == eventType
      } catch (e) {
        return false
      }
    }).map(log => JSON.parse(log.replace("EVENT_JSON:", "")))
    ret = ret.concat(events)
  }
  return ret
}

exports.filterTokenActions = (tokenIds, receipts) => {
  const ret = [];
  if (receipts[0] && receipts[0].predecessor_id == 'gogoshishi2.testnet') {
    console.log(receipts[0].receipt.Action)
  }
  
  receipts = receipts.filter(item => 
    item.receipt.Action && tokenIds.findIndex(tokenId => tokenId == item.receiver_id) > -1
  ).map(item => {
    item.receipt.Action.actions = item.receipt.Action.actions.filter(action => action.FunctionCall.method_name.indexOf('ft_transfer') > -1)
    return item
  })
  
  for (receipt of receipts) {
    for (action of receipt.receipt.Action.actions) {
      const obj = {};
      obj.sender_id = receipt.predecessor_id;
      obj.token_id = receipt.receiver_id;
      const args = JSON.parse(Buffer.from(action.FunctionCall.args, 'base64').toString());
      obj.receiver_id = args.receiver_id;
      ret.push(obj);
    }
  }
  return ret;
};

exports.filterOctActions = (receipts) => {
  const ret = [];
  receipts = receipts.filter(item => 
    item.receipt.Action && item.receiver_id == config.oct_contract
  ).map(item => {
    item.receipt.Action.actions = item.receipt.Action.actions.filter(action => action.FunctionCall.method_name == 'sync_state_of')
    return item
  })
  for (receipt of receipts) {
    for (action of receipt.receipt.Action.actions) {
      const obj = {};
      const args = JSON.parse(Buffer.from(action.FunctionCall.args, 'base64').toString());
      obj.appchain_id = args.appchain_id;
      obj.signer_id = receipt.receipt.Action.signer_id;
      ret.push(obj);
    }
  }
  return ret;
};

exports.filterOct2Actions = (receipts) => {
  const ret = [];
  receipts = receipts.filter(item => 
    item.receipt.Action && item.receiver_id == config.oct_contract_2
  ).map(item => {
    item.receipt.Action.actions = item.receipt.Action.actions.filter(action => 
      action.FunctionCall.method_name == 'delegate' ||
      action.FunctionCall.method_name == 'undelegate'
    )
    return item
  })
  for (receipt of receipts) {
    for (action of receipt.receipt.Action.actions) {
      const obj = {};
      obj.signer_id = receipt.receipt.Action.signer_id;
      ret.push(obj);
    }
  }
  return ret;
};

exports.filterRoleActions = (receipts) => {
  const ret = [];
  receipts = receipts.filter(item =>
    item.receipt.Action && item.receiver_id == config.rule_contract
  ).map(item => {
    item.receipt.Action.actions = item.receipt.Action.actions.filter(action => action.FunctionCall.method_name == 'set_roles' || action.FunctionCall.method_name == 'del_roles')
    return item
  })
  for (receipt of receipts) {
    for (action of receipt.receipt.Action.actions) {
      const obj = {};
      obj.method_name = action.FunctionCall.method_name;
      const args = JSON.parse(Buffer.from(action.FunctionCall.args, 'base64').toString());
      obj.roles = args.roles;
      ret.push(obj);
    }
  }
  return ret;
};

exports.filterTransferActions = (accountIds, receipts) => {
  const ret = [];
  receipts = receipts.filter(item => 
    item.receipt.Action && item.receipt.Action.actions.length > 0 && item.receipt.Action.actions.findIndex(action => !!action.Transfer) > -1
  );
  for (let receipt of receipts) {
    if (accountIds.findIndex(accountId => accountId == receipt.receiver_id) > -1) {
      ret.push({ account_id: receipt.receiver_id });
    }
    if (accountIds.findIndex(accountId => accountId == receipt.predecessor_id) > -1) {
      ret.push({ account_id: receipt.predecessor_id });
    }
  }
  return ret;
};

exports.filterNftActions = async (contractIds, receipts, receiptOutcomes) => {
  const ret = [];
  const eventMap = {}
  receipts = receipts.filter(item => item.receipt.Action && contractIds.findIndex(contractId => contractId == item.receiver_id) > -1);
  for (receipt of receipts) {
    const events = await parseEvents(receiptOutcomes, "nft_transfer")
    for (let event of events) {
      for (let item of event.data) {
        const obj = {};
        obj.sender_id = item.old_owner_id;
        obj.contract_id = receipt.receiver_id;
        obj.receiver_id = item.new_owner_id;
        ret.push(obj);
        eventMap[obj.sender_id + obj.contract_id + obj.receiver_id] = true
      }
    }
    for (action of receipt.receipt.Action.actions) {
      if (action.FunctionCall.method_name.indexOf('nft_transfer') > -1) {
        const obj = {}
        obj.sender_id = receipt.predecessor_id;
        obj.contract_id = receipt.receiver_id;
        const args = JSON.parse(Buffer.from(action.FunctionCall.args, 'base64').toString());
        obj.receiver_id = args.receiver_id;
        if (!eventMap[obj.sender_id + obj.contract_id + obj.receiver_id]) {
          ret.push(obj);
        }
      }
    }
  }
  return ret;
};

exports.filterParasActions = async (receipts, receiptOutcomes) => {
  const ret = [];
  receipts = receipts.filter(item => item.receipt.Action && item.receiver_id == config.paras.nft_contract);
  for (receipt of receipts) {
    const events = await parseEvents(receiptOutcomes, "nft_transfer")
    for (let event of events) {
      for (let item of event.data) {
        for (let token_id of item.token_ids) {
          const obj = {};
          obj.sender_id = item.old_owner_id;
          obj.receiver_id = item.new_owner_id;
          obj.token_id = token_id
          ret.push(obj);
        }
      }
    }
  }
  return ret;
};

exports.filterAstroDaoMemberActions = async (daoIds, receipts) => {
  const account = await this.contract();
  const ret = [];
  receipts = receipts.filter(item =>
    item.receipt.Action &&
    daoIds.findIndex(daoId => daoId == item.receiver_id) > -1
  ).map(item => {
    item.receipt.Action.actions = item.receipt.Action.actions.filter(action => action.FunctionCall.method_name == 'act_proposal')
    return item
  })
  for (receipt of receipts) {
    for (action of receipt.receipt.Action.actions) {
      const obj = {};
      obj.dao_id = receipt.receiver_id;
      const args = JSON.parse(Buffer.from(action.FunctionCall.args, 'base64').toString());
      const proposalResult = await account.viewFunction(receipt.receiver_id, 'get_proposal', { 'id': args.id });
      if (!('AddMemberToRole' in proposalResult.kind || 'RemoveMemberFromRole' in proposalResult.kind) && proposalResult.status != 'Approved') {
        continue;
      }
      obj.kind = proposalResult.kind;
      // obj = {dao_id: "xxxxxxxxx.sputnikv2.testnet", kind: {RemoveMemberFromRole: { member_id: 'member_id', role: 'council' }}}
      ret.push(obj);
    }
  }
  return ret;
};

/**
 * get the staking balance for specifying user
 * @param accountId
 * @returns return the total staking balance in string format
 */
exports.getStakingBalance = async (accountId) => {
  const stakingDeposits = await fetch(`${config.indexer_service_url}/staking-deposits/${accountId}`)
    .then((r) => r.json());
  let stakedBalance = new BN('0');
  stakingDeposits.forEach(({ deposit }) => {
    stakedBalance = stakedBalance.add(new BN(deposit));
  });
  return stakedBalance.toString();
};

/**
 * get the staking balance on paras for specifying user
 * @param accountId
 * @returns return the total staking balance in string format
 */
exports.getStakedParas = async (accountId) => {
  const account = await this.contract();
  const data = await account.viewFunction(config.paras.stake_contract, 'list_user_seeds', { account_id: accountId }).then((r) => r[config.paras.token_contract]);
  return new BN(data);
};

/**
 * get the collection info from nepbot contract
 * @param collectionId
 * @returns return collection info
 * CollectionInfo {
            collection_id,
            outer_collection_id: collection.outer_collection_id,
            contract_type: collection.contract_type,
            guild_id: collection.guild_id,
            creator_id: collection.creator_id,
            mintable_roles: collection.mintable_roles,
            royalty: collection.royalty,
            price: collection.price.into(),
            mint_count_limit: collection.mint_count_limit
        }
 */
exports.getCollectionInfo = async (collectionId) => {
  const account = await this.contract();
  return await account.viewFunction(config.nft_contract, 'get_collection', { collection_id: collectionId });
};

exports.getSnapshot = async (hash) => {
  const account = await this.contract();
  return await account.viewFunction(config.snapshot_contract, 'get_snapshot', { hash: hash });
};
'''
'''--- pkg/utils/discord_utils.js ---
const client = require('../../service/discord_bot');
const { Routes } = require('discord-api-types/v9');
const { REST } = require('@discordjs/rest');
const config = require('./config');
const { ThreadChannel } = require('discord.js');
const replies = {};
const rest = new REST({ version: '9' }).setToken(config.bot_token);

exports.getMember = async (guildId, userId) => {
  const guild = await this.getGuild(guildId);
  return await guild.members.fetch(userId);
};

exports.getGuild = async (guildId) => {
  return await client.guilds.fetch(guildId);
};

exports.getGuildCount = async () => {
  return await client.guilds.cache.size
}

// this.getMember('966966468774350948', '912438768043196456').then(e => console.log(e.guild.id));

exports.getRoles = async (guildId, roleId) => {
  const guild = await this.getGuild(guildId);
  if (roleId) {
    const role = await guild.roles.fetch(roleId);
    return role;
  }
  return await guild.roles.fetch();
};

exports.getOwnerId = async (guildId) => {
  const guild = await this.getGuild(guildId);
  return guild.ownerId;
};

exports.addSubCommand = (guildId, commandId, command) => {
  return new Promise((resolve, reject) => {
    rest.put(Routes.applicationCommands(config.bot_appid, guildId, commandId), { body: command });
  });
};

exports.getBotUser = () => {
  return client.user;
};

exports.getBotGuildChannel = (guild) => {
  const res = client.channels.cache.find(channel => channel.name == 'nepbot-join');
  for (channel of client.channels.cache.values()) {
    console.log(channel);
  }
  return res;
};

clearReplies = () => {
  for (const key in replies) {
    const reply = replies[key];
    if (Date.now() - reply.timestamp > 300 * 1000) {
      delete replies[key];
    }
  }
};

exports.getInteraction = (userId, guildId) => {
  return replies[String(userId) + String(guildId)].interaction;
};

exports.setInteraction = (interaction) => {
  clearReplies();
  replies[String(interaction.user.id) + String(interaction.guildId)] = {
    interaction: interaction,
    timestamp: Date.now(),
  };
};

exports.getMemberInGuild = async (guildId, userId) => {
  const guild = await this.getGuild(guildId);
  return await guild.members.fetch(userId);
};

exports.getMemberNameById = async (guildId, userId) => {
  const guild = await this.getGuild(guildId);
  return await guild.members.fetch(userId).user.username;
};

/**
 *
 * @param {string} guildId
 * @param {string} userId
 * @param {String} roleId
 * @returns boolean
 */
exports.isMemberIncludeRole = async (guildId, userId, roleId) => {
  const guild = await this.getGuild(guildId);
  const member = await guild.members.fetch(userId);
  return await member._roles.includes(roleId);
};

//this.isMemberIncludeRole('966966468774350948', '912438768043196456', '1004439142899396638').then(console.log);

/**
 * 
 * @param {string} guildId;
 * @param {string} roleId;
 * @returns a map of GuildMember
 */
exports.getMembersInRole = async (guildId, roleId) => {
  const role = await this.getRoles(guildId, roleId);
  return role.members;
};

//this.getMembersInRole('966966468774350948', '1004475262097952848').then(console.log);

exports.getChannel = async (guildId, channelId) => {
  const guild = await this.getGuild(guildId);
  return guild.channels.fetch(channelId);
};

exports.getMessage = async (guildId, channelId, messageId) => {
  const channel = await this.getChannel(guildId, channelId);
  return channel.messages.fetch(messageId);
};
'''
'''--- pkg/utils/indexer_utils.js ---
const nearIndexerPool = require('../models/db_driver/postgre_driver');
const logger = require('./logger');
const config = require('./config');

const getTxn = async (guildId) => {
	const client = await nearIndexerPool.connect();
	const sqlStr = `
	SELECT
		DISTINCT args -> 'args_json' -> 'roles' AS roles, args -> 'args_json' -> 'timestamp' AS timestamp , originated_from_transaction_hash AS transaction_hash
	FROM
		action_receipt_actions
	RIGHT JOIN receipts ON receipts.receipt_id = action_receipt_actions.receipt_id 
	WHERE
		receipt_receiver_account_id = '${config.rule_contract}' and
		args ->> 'method_name' = 'set_roles' and
		args -> 'args_json' -> 'roles' -> 0 ->> 'guild_id' = '${guildId}'
	ORDER BY args -> 'args_json' -> 'timestamp' desc`;

	const res = await client.query(sqlStr);
	client.release();
	return res.rows
};

const getParasTokenPerOwnerCount = async (collectionId, ownerId) => {
	const client = await nearIndexerPool.connect();
	const sqlStr = `
	SELECT
		COUNT(receipts.receipt_id)
	FROM
		receipts
	RIGHT JOIN action_receipt_actions ON receipts.receipt_id = action_receipt_actions.receipt_id
	RIGHT JOIN execution_outcomes ON receipts.receipt_id = execution_outcomes.receipt_id
	LEFT JOIN transaction_actions ON transaction_actions.transaction_hash = receipts.originated_from_transaction_hash
	WHERE
		action_receipt_actions.receipt_receiver_account_id = '${config.paras.nft_contract}' and
		action_receipt_actions.receipt_predecessor_account_id = '${config.nft_contract}' and
		action_receipt_actions.args ->> 'method_name' = 'nft_mint' and
		action_receipt_actions.args -> 'args_json' ->> 'receiver_id' = '${ownerId}' and
		transaction_actions.args -> 'args_json' ->> 'collection_id' = '${collectionId}' and
		execution_outcomes.status != 'FAILURE'
	`
	const res = await client.query(sqlStr);
	client.release();
	return res.rows[0].count
}

module.exports = {
	getTxn,
	getParasTokenPerOwnerCount
};

'''
'''--- pkg/utils/logger.js ---
/*
reference:
https://blog.csdn.net/EmptyPointer/article/details/108509428
https://www.jianshu.com/p/9604d08db899

log level sorting: all < trace < debug < info < warn < error < fatal < mark < off

logger.trace('this is trace');
logger.debug('this is debug');
logger.info('this is info');
logger.warn('this is warn');
logger.error('this is error');
logger.fatal('this is fatal');
*/

// get the app root path
const appRoot = require('app-root-path');
// load config
const config = require('./config');

const log4js = require('log4js');
log4js.configure({
  appenders: {
    out: { type: 'console' },
    app: {
      type: 'dateFile',
      filename: `${ appRoot }/logs/log`,
      pattern: 'yyyy-MM-dd.log',
      alwaysIncludePattern: true,
      encoding: 'utf-8',
      numBackups:5,
    },
  },
  categories: {
    default: { appenders: ['out', 'app'], level: config.runtime_env },
    file: { appenders: ['app'], level: config.runtime_env },
    console: { appenders: ['out'], level: config.runtime_env },
  },
  replaceConsole: true,
});

const logger = log4js.getLogger(config.logger_mode);

module.exports = logger;
'''
'''--- pkg/utils/model_utils.js ---
exports.addUser = async (data) => {
	const user = await this.getUser({
		guild_id:data.guild_id,
		user_id:data.user_id,
	});
	if (user) {
		return await this.updateUser(data);
	}
	else {
		const userInfo = await UserInfo.create(data);
		return userInfo.toJSON();
	}
};

exports.getUser = async (data) => {
	const user = await UserInfo.findOne({
		where:data,
	});
	return user;
};

exports.getAllUser = async (data) => {
	return await UserInfo.findAll({
		where:data,
	});
};
exports.updateUser = async (data) => {
	if (!data.user_id) return { msg:'Missing parameters user_id', code:0 };
	const params = {
		near_wallet_id: data?.near_wallet_id,
		user_id:data?.user_id,
		guild_id:data?.guild_id,
		nonce: data?.nonce,
	};
	return await UserInfo.update(params, {
		where: {
			user_id:data?.user_id,
			guild_id:data?.guild_id,
		},
	});
};
'''
'''--- pkg/utils/near_utils.js ---
const config = require('./config');
const { connect, WalletConnection } = require('near-api-js');
const tweetnacl = require('tweetnacl');
const bs58 = require('bs58');
const Base64 = require('js-base64');
const js_sha256 = require('js-sha256');
const userInfos = require('../models/object/user_infos');
const logger = require('./logger');

const { providers } = require('near-api-js');

const provider = new providers.JsonRpcProvider(config.nearWallet.nodeUrl);

// sign means signature
const verifySign = (data, signature, public_key) => {
	try {
		const bf_data = new Uint8Array(Buffer.from(JSON.stringify(data)));
		const bf_sign = new Uint8Array(bs58.decode(signature));
		const bf_pk = new Uint8Array(bs58.decode(public_key));
		const valid = tweetnacl.sign.detached.verify(bf_data, bf_sign, bf_pk);
		return valid;
	}
	catch (error) {
		logger.error(error);
	}
};

const verifyAccountOwner = async (account_id, data, signature) => {
	try {
		const near = await connect(config.nearWallet);
		const account = await near.account(account_id);
		const accessKeys = await account.getAccessKeys();
		return accessKeys.some(it => {
			const publicKey = it.public_key.replace('ed25519:', '');
			return verifySign(data, signature, publicKey);
		});
	}
	catch (error) {
		logger.error(error);
	}
};

const verifyOperationSign = async (args, account_id) => {
	const user_info = await userInfos.getUser({
		user_id: args.user_id,
		guild_id: args.guild_id,
	});
	return await verifyAccountOwner(config.account_id, user_info.nonce + account_id, args.sign);
};

const getSign = async (args) => {
	const keyStore = config.nearWallet.keyStore;
	const keyPair = await keyStore.getKey(config.nearWallet.networkId, config.account_id);
	const args_string = JSON.stringify(args);
	const data_buffer = Buffer.from(args_string);
	const { signature } = keyPair.sign(data_buffer);
	return bs58.encode(signature);
};

const genParasAuthToken = async () => {
	const accountId = config.nft_contract;
	const near = await connect(config.nearWallet);
	const account = await near.account(accountId);
	const arr = new Array(accountId);
	for (let i = 0; i < accountId.length; i++) {
		arr[i] = accountId.charCodeAt(i);
	}

	const msgBuf = new Uint8Array(arr);
	const signedMsg = await account.connection.signer.signMessage(msgBuf, accountId, config.nearWallet.networkId);
	const pubKey = Buffer.from(signedMsg.publicKey.data).toString('hex');
	const signature = Buffer.from(signedMsg.signature).toString('hex');
	const payload = [accountId, pubKey, signature];

	return Base64.encode(payload.join('&'));
};

module.exports = {
	verifySign,
	verifyAccountOwner,
	verifyOperationSign,
	getSign,
	genParasAuthToken,
	provider
};
'''
'''--- pkg/utils/paras_api.js ---
/**
 * all source code about paras can be found in https://github.com/orgs/ParasHQ/repositories?type=all
 */
const request = require('request');
const config = require('../../pkg/utils/config');
const rp = require('request-promise');
const fs = require('fs');
const logger = require('./logger');
const axios = require('axios');
const contractUtils = require('./contract_utils');
const { throws } = require('assert');

exports.getCollection = async (collectionId) => {
  const result = await request({
    method:'get',
    url:`${config.paras.api}/collections?collection_id=${collectionId}`,
  });
  if (result.data.status == 1) {
    return result.data.data;
  }
  return false;
};

exports.createCollection = async (formData, auth) => {
  const options = {
    method: 'POST',
    url: `${config.paras.api}/collections`,
    headers: formData.getHeaders({
      'authorization': auth,
    }),
    body: formData,
  };
  const result = await rp(options).catch(e => {
    console.log(e);
  });
  console.log(result);
  return JSON.parse(result);
};

exports.getTokenSeries = async (tokenSeriesId) => {
  const res = await new Promise((resolve, reject) => {
    request(`${config.paras.api}/token?token_series_id=${tokenSeriesId}&contract_id=${config.paras.nft_contract}&__limit=1`, function(error, response, body) {
      if (!error && response.statusCode == 200) {
        resolve(JSON.parse(body));
      }
      reject(error);
    });
  });
  if (res.data.results) {
    return res.data.results[0];
  }
};

exports.getTokenPerOwnerCount = async (collectionId, ownerId, limit) => {
  return await new Promise((resolve, reject) => {
    request(`${config.paras.api}/token?collection_id=${collectionId}&owner_id=${ownerId}&exclude_total_burn=true&__limit=${limit}`, function(error, response, body) {
      if (!error && response.statusCode == 200) {
        const res = JSON.parse(body);
        resolve(res.data.results.length);
      }
      reject(error);
    });
  });

};

exports.getUserInfo = async (accountId) => {
  const userInfo = await axios
    .get(`${config.paras.api}/profiles?accountId=${accountId}`)
    .then(res => {
      return res.data.data.results[0];
    })
    .catch(error => {
      logger.error(error);
    });
  return userInfo;
};
// this.getUserInfo('gogoshishi.near').then(e => console.log(e.level));

const LEVEL = ['Everyone', 'Bronze', 'Silver', 'Gold', 'Platinum'];
exports.checkUserLevel = async (accountLevel, ruleLevel) => {

  if (LEVEL.indexOf(accountLevel) == -1 || LEVEL.indexOf(ruleLevel) == -1) {
    return false;
  }
  else if (LEVEL.indexOf(accountLevel) < LEVEL.indexOf(ruleLevel)) {
    return false;
  }
  else if (LEVEL.indexOf(accountLevel) > LEVEL.indexOf(ruleLevel)) {
    return true;
  }
  else if (LEVEL.indexOf(accountLevel) == LEVEL.indexOf(ruleLevel)) {
    return true;
  }
};
//this.checkUserLevel('Bronze', 'Sliver').then(console.log);

exports.getRaffleId = async () => {
  const current = await axios
    .get(`${config.paras.api}/raffle/current`)
    .then(res => {
      return res.data._id;
    })
    .catch(error => {
      logger.error(error);
    });
  return current;
};

exports.getLeaderBoard = async (raffleId, raffleType, accountId) => {
  if (accountId) {
    const result = await axios
      .get(`${config.paras.api}/raffle/${raffleId}/leaderboards?__skip=0&__limit=1&raffle_type=${raffleType}&account_id=${accountId}`)
      .then(res => {
        return res.data.account_id;
      })
      .catch(error => {
        logger.error(error.response.data);
      });
    return result;
  }
  else {
    const result = await axios
      .get(`${config.paras.api}/raffle/${raffleId}/leaderboards?__skip=0&__limit=10&raffle_type=${raffleType}`)
      .then(res => {
        return res.data.results;
      })
      .catch(error => {
        logger.error(error.response.data);
      });
    return result;
  }
};
// this.getLeaderBoard('platinum', 'smile143.near').then(console.log);

/**
 * get the user locked seeds
 * @param accountId
 * @returns
 * pub struct LockedSeed {
    pub balance: U128,
    pub started_at: u32,
    pub ended_at: u32
}
 */
exports.getUserLockedSeeds = async (accountId) => {
  const account = await contractUtils.contract();
  return await account.viewFunction(config.paras.stake_contract, 'list_user_locked_seeds', { account_id: accountId }).then((e) => (e)[config.paras.token_contract]);
};
//this.getUserLockedSeeds('dolmat.near').then(console.log).catch(e => console.log(e));

exports.getUserSeeds = async (accountId) => {
  const account = await contractUtils.contract();
  return await account.viewFunction(config.paras.stake_contract, 'list_user_seeds', { account_id: accountId }).then((e) => (e)[config.paras.token_contract]);
};
//this.getUserSeeds('dolmat.near').then(console.log).catch(e => console.log(e));

exports.prettyBalance = (balance, decimals = 18, len = 8) => {
  if (!balance) {
    return '0';
  }
  const diff = balance.toString().length - decimals;
  const fixedPoint = Math.max(2, len - Math.max(diff, 0));
  const fixedBalance = (balance / 10 ** decimals).toFixed(fixedPoint);
  const finalBalance = parseFloat(fixedBalance).toString();
  const [head, tail] = finalBalance.split('.');
  if (head == 0) {
    if (tail) {
      return `${head}.${tail.substring(0, len - 1)}`;
    }
    return `${head}`;
  }
  const formattedHead = head.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return tail ? `${formattedHead}.${tail}` : formattedHead;
};

// console.log(this.prettyBalance('3002980000000000000000'));

'''
'''--- pkg/utils/redis.js ---
'use strict';
let txHashMap = {}
let txReceiptMap = {}
const key = "txs"
let Redis = require('ioredis');
let client = new Redis({
  enableAutoPipelining: true
});
client.on('error', function(e) {
  console.error("error:" + e);
});
client.on('connect', function(e) {
  console.log("# redis connected.");
});
client.on('close', function(e) {
  console.log("close:" + e);
});

async function init() {
  let txs = (await client.scan(0, "MATCH", key + "*"))[1]
  let minBlockHeight = 0
  for (let tx of txs) {
    try {
        tx = JSON.parse(tx)
    }catch (e){
      continue
    }
    setTx(tx, true)
    if (minBlockHeight == 0) {
      minBlockHeight = tx.blockHeight
    }
    if (minBlockHeight > tx.blockHeight) {
      minBlockHeight = tx.blockHeight
    }
  }
  return minBlockHeight
}

function getTxByReceipt(receiptId) {
  let txHash = txReceiptMap[receiptId]
  delete txReceiptMap[receiptId]
  return txHashMap[txHash]
}

function delReceipt(receiptId) {
  delete txReceiptMap[receiptId]
}

function delTx(tx) {
  delete txHashMap[tx]
  client.del(`${key}:${tx.transaction.hash}`)
}

function setTx(tx, init = false) {
  let found = txHashMap[tx.transaction.hash] ? true : false
  txHashMap[tx.transaction.hash] = tx
  for (let receiptId of tx.outcome.execution_outcome.outcome.receipt_ids) {
    txReceiptMap[receiptId] = tx.transaction.hash
  }
  if (!init && !found) {
    client.set(`${key}:${tx.transaction.hash}`, JSON.stringify(tx))
    client.expire(`${key}:${tx.transaction.hash}`, 60 * 60 * 24)
  }
}

module.exports = {
  init,
  setTx,
  getTxByReceipt,
  delReceipt,
  delTx
}

'''
'''--- pkg/utils/snapshot_utils.js ---
const config = require('../../pkg/utils/config');
const contractUtils = require('./contract_utils');

exports.getSnapshot = async (hash) => {
  const account = await contractUtils.contract();
  // return await queryRule({guild_id: guildId});
  return await account.viewFunction(config.snapshot_contract, 'get_snapshot', { hash: hash });
};

//this.getSnapshot('BzjRUmCodmNQWNxYFi9U26zWVMZzDFrm5th1sktBD2Nq').then(console.log);
'''
'''--- pkg/utils/sync_models.js ---
const logger = require('./logger');
const mysql = require('../models/db_driver/mysql_driver');

try {
  logger.info('Start to sync all of the models... If the models already exists, it will not sync.');
  mysql.sync({ alter: true }).then(() => logger.info('Sync models to mysql finished.'));
}
catch (error) {
  logger.error('Unable to sync models to the database:', error);
}

'''
'''--- pkg/utils/time_utils.js ---
exports.getExpiredTimeByDay = async (numOfDays) => {
  const date = new Date();
  date.setDate(date.getDate() + numOfDays);
  return date;
};
// this.getExpiredTimeByDay(1).then(console.log);

exports.getExpiredTimeBySecond = async (second) => {
  const expiredAt = Date.now() + second * 1000;
  return new Date(expiredAt).toISOString();
};
// this.getExpiredTime(7200).then(console.log);

exports.getISOTime = async (milliseconds) => {
  if (milliseconds) {
    return new Date(milliseconds).toISOString();
  }
  return new Date().toISOString();
};
// this.getISOTime(1669241673 * 1000).then(console.log);

exports.getUTCTime = async (milliseconds) => {
  if (milliseconds) {
    return new Date(milliseconds).toUTCString();
  }
  return new Date().toUTCString();
};
// this.getGMTTime(1669241673 * 1000).then(console.log);

'''
'''--- pkg/utils/twitter_utils.js ---
const { TwitterApi } = require('twitter-api-v2');
const twitterClient = require('../../service/twitter_app');
const oauthCache = require('../../pkg/models/object/oauth_cache');
const config = require('../../pkg/utils/config');
const twitterUsers = require('../../pkg/models/object/twitter_users');
const twitterRules = require('../../pkg/models/object/twitter_rules');
const twitterRulesMsg = require('../../pkg/models/object/twitter_rules_msg');
const timeUtils = require('../../pkg/utils/time_utils');
const discordUtils = require('./discord_utils');
const logger = require('./logger');

exports.generateOAuthLink = async (interaction) => {
  const { url, codeVerifier, state } = twitterClient.generateOAuth2AuthLink(config.twitter.callback_url, { scope: ['tweet.read', 'users.read', 'offline.access', 'follows.read', 'like.read'] });
  await oauthCache.add({
    state: state,
    code_verifier: codeVerifier,
  });
  const result = await twitterUsers.get({
    user_id: interaction.user.id,
  });
  if (result) {
    await twitterUsers.update({ state: state }, {
      user_id: interaction.user.id,
    });
  }
  else {
    await twitterUsers.add({
      user_id: interaction.user.id,
      state: state,
    });
  }

  await twitterRulesMsg.add({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    channel_id: interaction.channelId,
    message_id:interaction.message.id,
    twitter_state: state,
  });

  return url;
};
// this.generateOAuthLink('456', '789').then(console.log);

exports.isTimeExpired = async (time) => {
  const date = new Date(time).getTime();
  const currDate = new Date().getTime();
  if (date <= currDate) {
    return true;
  }
  else {
    return false;
  }
};
// this.isTimeExpired('2022-09-01 05:53:22').then(console.log);

exports.getClient = async (userId) => {
  const twitterUser = await twitterUsers.get({ user_id: userId });
  if (await this.isTimeExpired(twitterUser.expired_at)) {
    const { client: refreshedClient, accessToken, refreshToken: newRefreshToken } = await twitterClient.refreshOAuth2Token(twitterUser.refresh_token);
    const params = { access_token: accessToken, refresh_token: newRefreshToken, expired_at: await timeUtils.getExpiredTimeBySecond(7200) };
    const condition = { user_id: userId };
    await twitterUsers.update(params, condition);
    return refreshedClient;
  }
  return new TwitterApi(twitterUser.access_token);
};
// this.getClient('966966468774350948', '912438768043196456');

/**
 * @description https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-followers
 * @param {string} userId
 * @param {string} next_token
 * @returns
 */
exports.listUserFollowing = async (userClient, userId, next_token) => {
  if (next_token) {
    return await userClient.v2.get(`users/${userId}/following`, { pagination_token: next_token, max_results: 1000 });
  }
  return await userClient.v2.get(`users/${userId}/following`, { max_results: 1000 });
};
// this.listUserFollower('1169439457').then(console.log);

/**
 *
 * @param {string} userId
 * @param {string} followerId
 * @returns boolean
 */
exports.isUserFollowing = async (userClient, userId, followingUsername) => {
  try {
    let result = await this.listUserFollowing(userClient, userId);
    let isUserFollowing = result.data.some(element => element.username == followingUsername);
    if (isUserFollowing) {
      return true;
    }
    else {
      do {
        result = await this.listUserFollowing(userClient, userId, result.meta.next_token);
        if (result.data && result.data.some(element => element.username == followingUsername)) {
          isUserFollowing = true;
          break;
        }
      } while (result.meta.next_token);
    }
    return isUserFollowing;
  }
  catch (e) {
    return false;
  }

};
// this.isUserFollowing('430789183', '1169439457').then(console.log);

/**
 * @description https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by
 * @param {string} tweetId
 * @param {string} next_token
 * @returns
 */
exports.listRetweetedById = async (userClient, tweetId, next_token) => {
  if (next_token) {
    return await userClient.v2.get(`tweets/${tweetId}/retweeted_by`, { pagination_token: next_token, max_results: 100 });
  }
  return await userClient.v2.get(`tweets/${tweetId}/retweeted_by`, { max_results: 100 });
};
// this.listRetweetedById('1564034348881367040').then(e => console.log(e.data.length));

/**
 *
 * @param {string} tweetId
 * @param {string} userId
 * @returns boolean
 */
exports.isUserRetweeted = async (userClient, tweetId, userId) => {
  try {
    let result = await this.listRetweetedById(userClient, tweetId);
    let isUserRetweeted = result.data.some(element => element.id == userId);
    if (isUserRetweeted) {
      return true;
    }
    else {
      do {
        result = await this.listRetweetedById(userClient, tweetId, result.meta.next_token);
        if (result.data && result.data.some(element => element.id == userId)) {
          isUserRetweeted = true;
          break;
        }
      } while (result.meta.next_token);
    }
    return isUserRetweeted;
  }
  catch (e) {
    logger.error(e);
    return false;
  }

};
// this.isUserRetweeted('1564034348881367040', '430789183').then(console.log);

/**
 * @description https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by
 * @param {string} tweetId
 * @param {string} next_token
 * @returns
 */
exports.listLikedTweetById = async (userClient, userId, next_token) => {
  if (next_token) {
    return await userClient.v2.get(`users/${userId}/liked_tweets`, { pagination_token: next_token, max_results: 100 });
  }
  return await userClient.v2.get(`users/${userId}/liked_tweets`, { max_results: 100 });
};
// this.listRetweetedById('1564034348881367040').then(e => console.log(e.data.length));

/**
 *
 * @param {string} tweetId
 * @param {string} userId
 * @returns boolean
 */
exports.isUserLikedTweet = async (userClient, tweetId, twitterId) => {
  try {
    let result = await this.listLikedTweetById(userClient, twitterId);
    let isUserLiked = result.data.some(element => element.id == tweetId);
    if (isUserLiked) {
      return true;
    }
    else {
      do {
        result = await this.listLikedTweetById(userClient, twitterId, result.meta.next_token);
        if (result.data && result.data.some(element => element.id == tweetId)) {
          isUserLiked = true;
          break;
        }
      } while (result.meta.next_token);
    }
    return isUserLiked;
  }
  catch (e) {
    logger.error(e);
    return false;
  }

};
// this.isUserRetweeted('1564034348881367040', '430789183').then(console.log);

exports.listFollowUserName = async (followUerName) => {
  return followUerName.split(', ').map(element => {
    return element.split('@').at(-1);
  });
};
// this.listFollowUserName('@test, @test').then(console.log);

exports.listTweetLink = async (tweetLink) => {
  return tweetLink.split('+').map(element => {
    return element.split('/').at(-1).split('?')[0];
  });
};
// this.listTweetLink('https://twitter.com/beepopula/status/1566726219797737473?s=20&t=OaDUKnttKJcv9-0ajBseCQ').then(console.log);

exports.verifyRuleFromInteraction = async (userClient, interaction) => {
  const userId = interaction.user.id;
  const message = interaction.message;
  return await this.verifyRule(message, userId, userClient);
};

exports.verifyRuleFromDB = async (userClient, twitterRuleMsg, discordMsg) => {
  const userId = twitterRuleMsg.user_id;
  return await this.verifyRule(discordMsg, userId, userClient);
};

exports.verifyRule = async (message, userId, userClient) => {
  const guildId = message.guildId;
  const twitterUser = await twitterUsers.get({ user_id: userId });
  const twitterId = twitterUser.twitter_id;
  const attachedMsgs = message.embeds[0].fields;
  const guild = await discordUtils.getGuild(guildId);
  let roleId, roleName;
  const resultMsgs = [];
  for (const attachMsg of attachedMsgs) {
    if (config.fields.twitter_role.findIndex(item => item == attachMsg.name) > -1) {
      roleId = await guild.roles.fetch().then(e => e.find(r => r.name === attachMsg.value.split('@').at(-1)).id);
      roleName = attachMsg.value;
      if (await discordUtils.isMemberIncludeRole(guildId, userId, roleId)) {
        const resultMsg = {};
        resultMsg.name = 'Already in role';
        resultMsg.value = `✅ You are already in this role ${roleName}.`;
        resultMsgs.push(resultMsg);
        logger.info(`${JSON.stringify(resultMsg)}`);
        return resultMsgs;
      }
    }
    // Follow
    else if (config.fields.twitter_follow.findIndex(item => item == attachMsg.name) > -1) {
      const followUsers = await this.listFollowUserName(attachMsg.value);
      for (const followUser of followUsers) {
        if (!await this.isUserFollowing(userClient, twitterId, followUser)) {
          const resultMsg = {};
          resultMsg.name = 'Follow';
          resultMsg.value = `❌ Sorry, you don't meet the requirements for this role.\n Must: follow @${followUser} https://twitter.com/${followUser}`;
          resultMsgs.push(resultMsg);
          logger.info(`${JSON.stringify(resultMsg)}`);
        }
      }
    }
    // Rt_Tweet
    else if (config.fields.twitter_retweet.findIndex(item => item == attachMsg.name) > -1) {
      const rtTweetIds = await this.listTweetLink(attachMsg.value);
      for (const rtTweetId of rtTweetIds) {
        if (!await this.isUserRetweeted(userClient, rtTweetId, twitterId)) {
          const resultMsg = {};
          resultMsg.name = 'rt_tweet';
          resultMsg.value = `❌ Sorry, you don't meet the requirements for this role.\n Must: retweet tweet ${attachMsg.value.split('+').find(e => e.includes(rtTweetId))}`;
          resultMsgs.push(resultMsg);
          logger.info(`${JSON.stringify(resultMsg)}`);
        }
      }
    }
    // Like_Tweet
    else if (config.fields.twitter_like.findIndex(item => item == attachMsg.name) > -1) {
      const likeTweetIds = await module.exports.listTweetLink(attachMsg.value);
      for (const tweetId of likeTweetIds) {
        if (!await this.isUserLikedTweet(userClient, tweetId, twitterId)) {
          const resultMsg = {};
          resultMsg.name = 'like_tweet';
          resultMsg.value = `❌ Sorry, you don't meet the requirements for this role.\n Must: like tweet ${attachMsg.value.split('+').find(e => e.includes(tweetId))}`;
          resultMsgs.push(resultMsg);
          logger.info(`${JSON.stringify(resultMsg)}`);
        }
      }
    }

  }

  if (resultMsgs.length == 0) {
    const memberInGuild = await discordUtils.getMemberInGuild(guildId, userId);
    await memberInGuild.roles.add(roleId).then(logger.info(`${memberInGuild.user.username} add role_id ${roleId}(name: ${roleName}) in twitter_utils`)).catch(e => logger.error(e));
    const resultMsg = {};
    resultMsg.name = 'Add role success';
    resultMsg.value = `✅ Role Assigned: ${roleName}`;
    resultMsgs.push(resultMsg);
    logger.info(`${JSON.stringify(resultMsg)}`);
    return resultMsgs;
  }
  else {
    return resultMsgs;
  }
};

'''
'''--- pkg/utils/user_utils.js ---
const logger = require('./logger');
const contractUtils = require('./contract_utils');
const discordUtils = require('./discord_utils');
const parasUtils = require('./paras_api');
const config = require('./config');
const userInfos = require('../models/object/user_infos');
const userFields = require('../models/object/user_fields');
const userDisconnects = require('../models/object/user_disconnects');
const astrodaoUtils = require('./astrodao_utils');
const schedule = require('node-schedule');
const timeUtils = require('./time_utils');
const BN = require('bn.js');
const { verifySign } = require('./near_utils');

exports.verifyUserId = async (args, sign) => {
  if (!(await this.verifyUserSign(args, sign))) {
    return false;
  }
  const nonce = Date.now();
  await userInfos.updateUser({
    user_id: args.user_id,
    guild_id: args.guild_id,
    nonce: nonce,
  });
  return nonce;
};

exports.verifyUserSign = async (args, sign) => {
  const userInfo = await userInfos.getUser({ user_id: args.user_id, guild_id: args.guild_id });
  if (Date.now() - userInfo.nonce > 300 * 1000) { // 5min limit
    logger.error('the user nonce is great than 5 mintes');
    return false;
  }
  const keyStore = config.nearWallet.keyStore;
  const accountId = config.account_id;
  const keyPair = await keyStore.getKey(config.nearWallet.networkId, accountId);
  const ret = verifySign({
    nonce: userInfo.nonce,
    ...args,
  }, sign, keyPair.publicKey.toString().replace('ed25519:', ''));
  return ret;
};
// this.verifyUserId({ user_id: '912438768043196456', guild_id: '966966468774350948', contract_address: 'jacktest.sputnikv2.testnet' }, '5CcghkEQAaYHmjZwYTFyKgfgwNNJNAde7CwodnLWJPLQeWULtdN5GkWJ98xPiK1Hb2BKkndiEWn8gJDCrSvZj1tA').then(console.log);

exports.setUser = async (args, accountId) => {
  if (!accountId) {
    return;
  }
  const rules = await contractUtils.getRules(args.guild_id);
  const roleList = Array.from(new Set(rules.map(({ role_id }) => role_id)));
  const result = await userInfos.getUsers({
    guild_id: args.guild_id,
    near_wallet_id: accountId,
  });
  // when user reverify another wallet, it will check the wallet id wether binding to other user, and then remove the role from the origin user
  for (const user_info of result) {
    try {
      if (user_info.user_id != args.user_id) {
        await this.deleteAllRole(args.guild_id, args.user_id);

        const EXPIRED_DAY = 1; // days
        const expiredAt = await timeUtils.getExpiredTimeByDay(EXPIRED_DAY);
        await userDisconnects.add({
          guild_id: args.guild_id,
          user_id: args.user_id,
          expired_at: expiredAt,
        });
        await userInfos.updateUser({
          guild_id: args.guild_id,
          user_id: args.user_id,
          near_wallet_id: null,
        });
        const jobName = args.user_id + '-' + args.guild_id;
        const job = schedule.scheduleJob(jobName, expiredAt, function() {
          this.deleteData(args.user_id, args.guild_id);
        });
        logger.info(`create new user disconnect schedule job, name: ${job.name} run at ${expiredAt}`);
      }
    }
    catch (e) {
      logger.error(e);
    }
  }
  // update user
  await userInfos.addUser({
    near_wallet_id: accountId,
    user_id: args.user_id,
    guild_id: args.guild_id,
  }).catch(e => logger.error(e));

  // check the data in user_disconnect, if exists, delete the data in user_disconnects and cancel schedule job.
  if (await userDisconnects.get({ user_id: args.user_id, guild_id: args.guild_id })) {
    await userDisconnects.delete({
      guild_id: args.guild_id,
      user_id: args.user_id,
    });
    const jobName = args.user_id + '-' + args.guild_id;
    const job = schedule.scheduledJobs[jobName];
    job.cancel();
    logger.info(`the user: ${args.user_id} reconnect wallet: ${accountId}, so cancel the job: ${job.name}`);
  }

  // add role for new user
  const member = await discordUtils.getMember(args.guild_id, args.user_id);
  for (const roleId of roleList) {

    let isAddRole = false;
    let notDelRole = false;

    // If the user don't in role
    if (!await discordUtils.isMemberIncludeRole(args.guild_id, args.user_id, roleId)) {
      // Second layer of the loop
      for (const rule of rules.filter(m => m.role_id == roleId)) {
        try {
          if (await this.isMemberSatisfyRule(accountId, rule)) {
            isAddRole = isAddRole || true;
          }
          else {
            isAddRole = isAddRole || false;
          }
          await userFields.addUserField({
            near_wallet_id: accountId,
            key: rule.key_field[0],
            value: rule.key_field[1],
          }).catch(e => logger.error(e));
        }
        catch (e) {
          isAddRole = isAddRole || false;
          logger.error(e);
          continue;
        }
      }

      if (isAddRole) {
        await member.roles.add(roleId).then(logger.info(`${member.user.username} add role_id ${roleId} in setUser`)).catch(e => logger.error(e));
      }

    }
    // If the user is in role
    else if (await discordUtils.isMemberIncludeRole(args.guild_id, args.user_id, roleId)) {
      // Second layer of the loop
      for (const rule of rules.filter(m => m.role_id == roleId)) {
        try {
          if (await this.isMemberSatisfyRule(accountId, rule)) {
            notDelRole = notDelRole || true;
          }
          else {
            notDelRole = notDelRole || false;
          }
        }
        catch (e) {
          logger.error(e);
          notDelRole = notDelRole || false;
          continue;
        }
      }

      if (!notDelRole) {
        await member.roles.remove(roleId).then(logger.info(`${member.user.username} remove role_id ${roleId} in setUser`)).catch(e => logger.error(e));
      }

    } // else finished in here
  }
};

/**
 *
 * @param {json} walletId near_wallet_id
 * @param {json} rule
 * @returns boolean
 */
exports.isMemberSatisfyRule = async (walletId, rule) => {
  if (rule.key_field[0] == 'token_id') {

    let stakedParas = new BN('0');
    if (rule.key_field[1] === config.paras.token_contract) {
      stakedParas = await contractUtils.getStakedParas(walletId);
    }
    const newAmount = await contractUtils.getBalanceOf(rule.key_field[1], walletId);
    const tokenAmount = new BN(newAmount).add(stakedParas);

    if (new BN(tokenAmount).cmp(new BN(rule.fields.token_amount)) != -1) {
      logger.debug(`satisfy the {token_id} rule walletId: ${walletId}`);
      return true;
    }
    else if (new BN(tokenAmount).cmp(new BN(rule.fields.token_amount)) == -1) {
      logger.debug(`unsatisfying the {token_id} rule walletId: ${walletId}`);
      return false;
    }

  }
  else if (rule.key_field[0] == 'gating_rule' && rule.key_field[1] == 'Loyalty Level') {
    try {
      const userLevel = await parasUtils.getUserInfo(walletId).then(e => e.level.charAt(0).toUpperCase() + e.level.slice(1));
      if (!await parasUtils.checkUserLevel(userLevel, rule.fields.loyalty_level)) {
        logger.debug(`unsatisfying the ${rule.fields.loyalty_level} rule walletId: ${walletId}`);
        return false;
      }
      return true;
    }
    catch (e) {
      return false;
    }
  }
  else if (rule.key_field[0] == 'gating_rule' && rule.key_field[1] == 'Paras Staking') {
    try {
      // staking amount
      if (rule.fields.paras_staking_duration == '0') {
        const userSeeds = await parasUtils.getUserSeeds(walletId);
        const checkBalance = new BN(userSeeds).cmp(new BN(rule.fields.paras_staking_amount)) != -1 ? true : false;
        if (checkBalance) {
          logger.debug(`satisfy the {paras_staking} rule walletId: ${walletId}`);
          return true;
        }
        else {
          logger.debug(`unsatisfying the {paras_staking} rule walletId: ${walletId}`);
          return false;
        }
      }
      // lock stake amount
      const userLockSeed = await parasUtils.getUserLockedSeeds(walletId);
      const duration = Math.floor(userLockSeed.ended_at / (3600 * 24)) - Math.floor(userLockSeed.started_at / (3600 * 24));
      const isGreatDuration = duration >= parseInt(rule.fields.paras_staking_duration);
      const checkBalance = new BN(userLockSeed.balance).cmp(new BN(rule.fields.paras_staking_amount)) != -1 ? true : false;
      if (isGreatDuration) {
        if (checkBalance) {
          logger.debug(`satisfy the {paras_staking} rule walletId: ${walletId}`);
          return true;
        }
        else {
          logger.debug(`unsatisfying the {paras_staking} rule walletId: ${walletId}`);
          return false;
        }
      }
      else {
        return false;
      }
    }
    catch (e) {
      return false;
    }
  }
  else if (rule.key_field[0] == 'appchain_id') {
    const octRoles = []
    try {
      octRoles.push((await contractUtils.getOctAppchainRole(rule.key_field[1], walletId)))
    } catch (e) {console.log(e)}
    try {
      octRoles.push((await contractUtils.getOct2Role(walletId)))
    } catch (e) {console.log(e)}

    if (octRoles.includes(rule.fields.oct_role)) {
      logger.debug(`satisfy the {appchain_id} rule walletId: ${walletId}`);
      return true;
    } else {
      logger.debug(`unsatisfying the {appchain_id} rule walletId: ${walletId}`);
      return false;
    }
  }
  else if (rule.key_field[0] == 'near') {

    const balance = await contractUtils.getNearBalanceOf(walletId);
    const stakingBalance = await contractUtils.getStakingBalance(walletId);
    const totalBalance = new BN(balance).add(new BN(stakingBalance));

    if (new BN(totalBalance).cmp(new BN(rule.fields.balance)) != -1) {
      logger.debug(`satisfy the {near} rule walletId: ${walletId}`);
      return true;
    }
    if (new BN(totalBalance).cmp(new BN(rule.fields.balance)) == -1) {
      logger.debug(`unsatisfying the {near} rule walletId: ${walletId}`);
      return false;
    }
  }
  else if (rule.key_field[0] == 'nft_contract_id') {
    const tokenAmount = await contractUtils.getNftCountOf(rule.key_field[1], walletId);
    if (new BN(tokenAmount).cmp(new BN(rule.fields.token_amount)) != -1) {
      logger.debug(`satisfy the {nft_contract_id} rule walletId: ${walletId}`);
      return true;
    }
    if (new BN(tokenAmount).cmp(new BN(rule.fields.token_amount)) == -1) {
      logger.debug(`unsatisfying the {nft_contract_id} rule walletId: ${walletId}`);
      return false;
    }
  }
  else if (rule.key_field[0] == config.paras.nft_contract) {

    const tokenAmount = await parasUtils.getTokenPerOwnerCount(rule.key_field[1], walletId);
    if (new BN(tokenAmount).cmp(new BN(rule.fields.token_amount)) != -1) {
      logger.debug(`satisfy the ${config.paras.nft_contract} rule walletId: ${walletId}`);
      return true;
    }
    if (new BN(tokenAmount).cmp(new BN(rule.fields.token_amount)) == -1) {
      logger.debug(`unsatisfying the ${config.paras.nft_contract} rule walletId: ${walletId}`);
      return false;
    }
  }
  else if (rule.key_field[0] == 'astrodao_id') {
    if (await astrodaoUtils.isMemberHaveRole(rule.key_field[1], walletId, rule.fields.astrodao_role)) {
      logger.debug(`satisfy the {astrodao_id} rule walletId: ${walletId}`);
      return true;
    }
    else {
      logger.debug(`unsatisfying the {astrodao_id} rule walletId: ${walletId}`);
      return false;
    }
  }
};

// this.isMemberSatisfyRule('dolmat.near', {
//   guild_id: '923197936068861953',
//   role_id: '1047053310269604001',
//   fields: { paras_staking_amount: "10000000000000000000", paras_staking_duration: "30" },
//   key_field: [ 'gating_rule', 'Paras Staking' ],
// }).then(console.log).catch(e => console.log(e));

exports.deleteData = async (userId, guildId) => {

  try {
    await userDisconnects.delete({
      user_id: userId,
      guild_id: guildId,
    });
    await userInfos.deleteUser({
      user_id: userId,
      guild_id: guildId,
    });
  }
  catch (e) {
    logger.error(e);
  }
};

exports.deleteAllRole = async (guildId, userId) => {
  // remove all roles for user
  try {
    const rules = await contractUtils.getRules(guildId);
    const roleList = Array.from(new Set(rules.map(({ role_id }) => role_id)));
    const member = await discordUtils.getMember(guildId, userId);
    for (const role of roleList) {
      await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role}`)).catch(e => logger.error(e));
    }
  }
  catch (e) {
    logger.error(e);
  }
};

'''
'''--- scripts/re-verify.js ---
exports.execute = async function(args) {
  // Create a new client instance
  const userInfos = require('../pkg/models/object/user_infos');
  // const client = require('./service/discord_bot');
  const userUtils = require('../pkg/utils/user_utils');
  // Load config info
  const client = require('../service/discord_bot.js');

  client.on('ready', async () => {
    const users = await userInfos.getUsers(JSON.parse(args.fields));
    for (const user of users) {
      const args = { guild_id: user.guild_id, user_id: user.user_id };
      const accountId = user.near_wallet_id;
      try {
        await userUtils.setUser(args, accountId);
      }
      catch (e) {
        console.log(e);
      }

    }
    process.exit(0);
  });
};

exports.params = {
  args: [{
    name: 'fields',
    type: 'string',
    describe: 'sql fields',
  }],
  description: 're-verify users',
};

'''
'''--- scripts/rescan-blocks.js ---
exports.execute = async function(args) {
  // Create a new client instance
  const task = require('../service/schedule_task.js');
  const client = require('../service/discord_bot.js');
  client.on('ready', () => {
    try {
      task.scheduleTask(args.height);
    }
    catch (e) {
      console.log(e);
    }

  });
};

exports.params = {
  args: [{
    alias: 's',
    name: 'height',
    type: 'number',
    describe: 'block height',
  }],
  description: 'rescan blocks',
};

'''
'''--- scripts/sync-description.js ---
exports.execute = async function() {
  const logger = require('../pkg/utils/logger');
  const guildCreate = require('../service/events/guildCreate');
  const client = require('../service/discord_bot.js');

  client.on('ready', async () => {
    const guilds = client.guilds.cache.values();
    for (const guild of guilds) {
      logger.info(`sync the newest description in ${ guild.name } ...`);
      await guildCreate.execute(guild);
      logger.info(`sync finished in ${ guild.name }.`);
    }
    process.exit(0);
  });
};

exports.params = {
  args: [],
  description: 'update nepbot channels',
};
'''
'''--- service/app.js ---
const fs = require('fs');
const logger = require('../pkg/utils/logger');
// get the app root path
const appRoot = require('app-root-path');
const controller_dir = `${appRoot}/service/controllers`;
const multer = require('multer');
const upload = multer();

const Koa = require('koa');

const router = require('koa-router')();

const bodyParser = require('koa-bodyparser');

// resolve the cross region problem
const cors = require('koa2-cors');

const session = require('koa-session');

const app = new Koa();

app.use(cors({
  origin: '*',
  credentials: true, 
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'], 
  allowHeaders: ['Content-Type', 'Authorization', 'Accept'], 
  exposeHeaders: ['WWW-Authenticate', 'Server-Authorization']
}));

// parse request body:
app.use(bodyParser());

app.keys = ['6987-139-168-173-228.au.ngrok.io'];
const CONFIG = {
  key: 'koa:sess',
  maxAge: 86400000,
  overwrite: true,
  httpOnly: true,
  signed: true,
  rolling: false,
  renew: true,
};
app.use(session(CONFIG, app));

// log request URL:
app.use(async (ctx, next) => {
  logger.info(`Process ${ctx.request.method} ${ctx.request.url}...`);
  await next();
});

// add controllers:F
addControllers(controller_dir);
app.use(router.routes());

// export app used in index.js
module.exports = app;

// mapping each different API in folder of controllers
function addMapping(mapping) {
  for (const url in mapping) {
    if (url.startsWith('GET ')) {
      const path = url.substring(4);
      router.get(path, mapping[url]);
      logger.info(`register URL mapping: GET ${path}`);
    }
    else if (url.startsWith('POST ')) {
      const path = url.substring(5);
      router.post(path, mapping[url]);
      logger.info(`register URL mapping: POST ${path}`);
    }
    else if (url.startsWith('PUT ')) {
      const path = url.substring(4);
      router.put(path, mapping[url]);
      logger.info(`register URL mapping: PUT ${path}`);
    }
    else if (url.startsWith('DELETE ')) {
      const path = url.substring(7);
      router.del(path, mapping[url]);
      logger.info(`register URL mapping: DELETE ${path}`);
    }
    else {
      logger.info(`invalid URL: ${url}`);
    }
  }
}
// read file to registry new api by using mapping function.
function addControllers(dir) {
  fs.readdirSync(`${dir}`).filter((f) => {
    return f.endsWith('.js');
  }).forEach((f) => {
    logger.info(`process controller: ${f}...`);
    const mapping = require(`${dir}/${f}`);
    addMapping(mapping);
  });
}
'''
'''--- service/commands/check_proposal.js ---
const userInfos = require('../../pkg/models/object/user_infos');
const astrodao_utils = require('../../pkg/utils/astrodao_utils');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed } = require('discord.js');
const logger = require('../../pkg/utils/logger');

const data = new SlashCommandBuilder()
  .setName('check_proposal')
  .setDescription('List active proposal; Nepbot will automatically set a range from last 25 proposals')
  .addStringOption(option =>
    option.setName('contract_address')
      .setDescription('The Astrodao Contract Address')
      .setRequired(true))
  .addIntegerOption(option =>
    option.setName('from')
      .setDescription('The from index tell Nepbot from which number to get proposal')
      .setRequired(false))
  .addIntegerOption(option =>
    option.setName('to')
      .setDescription('The to index tell Nepbot which position should stop to get proposal')
      .setRequired(false))
  .addStringOption(option =>
    option.setName('message_type')
      .setDescription('Displays the result in a private or public message.')
      .setRequired(false)
      .addChoices(
        { name: 'Private', value: 'private' },
        { name: 'Public', value: 'public' },
      ));

const execute = async interaction => {
  const address = interaction.options.get('contract_address').value;
  const userId = interaction.user.id;
  const userInfo = await userInfos.getUser({
    guild_id: interaction.guildId,
    user_id: userId,
  });
  // if the user doesn't connect to any near wallet, it will reply the following content.
  if (!userInfo.near_wallet_id) {
    await interaction.reply({
      content:'You are not connected to any Near wallet.',
      ephemeral: true,
    });
    // break hear;
    return;
  }
  logger.debug(`The address is ${address}`);
  let fromIndex = 0;
  let limit = 0;
  let activeProposals = [];
  let messageType = false;
  if (interaction.options.get('message_type')?.value != undefined) {
    messageType = interaction.options.get('message_type').value == 'private' ? true : false;
  }

  try {
    fromIndex = interaction.options.get('from').value;
    limit = interaction.options.get('to').value;
    if (limit < fromIndex) {
      await interaction.reply({
        content:`The argument TO: ${limit} is less than FROM: ${fromIndex}`,
        ephemeral: true,
      });
      return;
    }
    activeProposals = await astrodao_utils.listActiveProposals(address, fromIndex, limit - fromIndex);
  }
  catch (e) {
    logger.debug(e);
    const lastProposalId = await astrodao_utils.getLastProposalId(address);
    if (lastProposalId <= 25) {
      activeProposals = await astrodao_utils.listActiveProposals(address, 0, lastProposalId);
    }
    else {
      activeProposals = await astrodao_utils.listActiveProposals(address, lastProposalId - 25, 25);
    }
  }

  if (activeProposals.length == 0) {
    await interaction.reply({
      content:'There is no more active proposal.\n',
      ephemeral: true,
    });
    return;
  }
  const content = new MessageEmbed().setTitle(`AstroDao Contract Address:\n${address}`);
  for (const proposal of activeProposals) {
    try {
      content.addFields({ name: `Proposal Id: ${proposal.id}`, value: proposal.description.split('$$$')[0] });
    }
    catch (e) {
      logger.error(e);
      continue;
    }
  }

  try {
    await interaction.reply({
      content:'\n',
      ephemeral: messageType,
      embeds: [content],
    });
  }
  catch (e) {
    logger.error(e);
  }
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/checkwallet.js ---
const userInfos = require('../../pkg/models/object/user_infos');

const { SlashCommandBuilder } = require('@discordjs/builders');
const data = new SlashCommandBuilder()
  .setName('checkwallet')
  .setDescription('Show the NEAR wallet currently connected to your account.');

const execute = async interaction => {
  const userId = interaction.user.id;
  const _userInfos = await userInfos.getUsers({
    guild_id: interaction.guildId,
    user_id: userId,
  });
  let near_wallet_ids = '';
  for (const _userInfo of _userInfos) {
    near_wallet_ids += _userInfo.dataValues.near_wallet_id + '\n';
  }
  // if the user doesn't connect to any near wallet, it will reply the following content.
  if (!near_wallet_ids.trim()) {
    interaction.reply({
      content:'You are not connected to any Near wallet.',
      ephemeral: true,
    });
    // break hear;
    return;
  }
  interaction.reply({
    content:`${near_wallet_ids}`,
    ephemeral: true,
  });

};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/create_snapshot.js ---
const nearUtils = require('../../pkg/utils/near_utils');
const config = require('../../pkg/utils/config');
const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const logger = require('../../pkg/utils/logger');
const userInfos = require('../../pkg/models/object/user_infos');

const content = new MessageEmbed()
  .setColor('BLUE');

const button = new MessageButton().setStyle('LINK').setLabel('Create snapshot');

const action = new MessageActionRow().addComponents(button);

const data = new SlashCommandBuilder()
  .setName('create_snapshot')
  .setDescription('Create a snapshot based on currently block_height and your contract_address')
  .addStringOption(option =>
    option.setName('address')
      .setDescription('The Contract Address')
      .setRequired(true));

const execute = async interaction => {
  const contractAddress = interaction.options.get('address').value;
  const userId = interaction.user.id;
  if (interaction.member.guild.ownerId != userId) {
    interaction.reply({
      content:'Only the guild owner can create snapshot.',
      ephemeral: true,
    });
    // break hear;
    return;
  }
  const nonce = Date.now();
  const sign = await nearUtils.getSign({
    nonce: nonce,
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    contract_address: contractAddress,
  });
  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  button.setURL(`${config.wallet_auth_url}/snapshot/create/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&channel_id=${interaction.channelId}&contract_address=${contractAddress}&sign=${sign}`);
  content.setDescription(`Click the button below to create a snapshot.\n
	This link is only valid for 5 mins. If the link expires, please use the command again to get a new link.\n
  Please have a double check that you are going to create a snapshot for ${contractAddress}`);
  await interaction.reply({
    content:'\n',
    ephemeral: true,
    embeds: [content],
    components: [action],
  });
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/createnft.js ---
const nearUtils = require('../../pkg/utils/near_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const config = require('../../pkg/utils/config');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');

const content = new MessageEmbed()
  .setDescription(`Click the button below to enter the NFT setting page.\n
	This link is only valid for 5 mins. If the link expires, please use the command again to get a new link.`)
  .setColor('BLUE');

const button = new MessageButton().setStyle('LINK').setLabel('Create NFT Collection');

const action = new MessageActionRow().addComponents(button);

const data = new SlashCommandBuilder()
  .setName('createnft')
  .setDescription('Create a NFT collection or add collectibles to existing collections');

const execute = async interaction => {
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
  if (userId === ownerId) {
    const nonce = Date.now();
    const sign = await nearUtils.getSign({
      nonce: nonce,
      user_id: interaction.user.id,
      guild_id: interaction.guildId,
    });
    await userInfos.addUser({
      user_id: interaction.user.id,
      guild_id: interaction.guildId,
      nonce: nonce,
    });
    button.setURL(`${config.wallet_auth_url}/collection/console/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&sign=${sign}`);
    interaction.reply({
      content:'\n',
      embeds:[content],
      ephemeral:true,
      components:[action],
    });
  }
  else {
    interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('This command can only be used by server owner.').setColor('RED')],
      ephemeral:true,
    });
  }
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/ft_airdrop.js ---
const logger = require('../../pkg/utils/logger');
const airdropUtils = require('../../pkg/utils/airdrop_utils');
const nearUtils = require('../../pkg/utils/near_utils');
const contractUtils = require('../../pkg/utils/contract_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const config = require('../../pkg/utils/config');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');

const send = new MessageButton()
  .setLabel('Airdrop')
  .setStyle('LINK');

const action = new MessageActionRow()
  .addComponents(send);

const data = new SlashCommandBuilder()
  .setName('ft_airdrop')
  .setDescription('/ft_airdrop : Airdrop a specific fungible token (NEP-141) on NEAR.')
  .addRoleOption(option => option.setName('receiver_role').setDescription('which role the user can claim').setRequired(true))
  .addStringOption(option => option.setName('token_contract').setDescription('Input the token contract').setRequired(true))
  .addStringOption(option => option.setName('total_amount').setDescription('Input total amount').setRequired(true))
  .addStringOption(option => option.setName('amount_per_share').setDescription('every person can get').setRequired(true))
  .addIntegerOption(option => option.setName('duration').setDescription('x days').setRequired(true));

const execute = async interaction => {
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
  if (userId != ownerId) {
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('This command can only be used by server owner.').setColor('RED')],
      ephemeral:true,
    });
  }

  const roleId = interaction.options.get('receiver_role').value;
  const roleName = await interaction.guild.roles.fetch(roleId).then(e => e.name.split('@').at(-1));
  const tokenContract = interaction.options.get('token_contract').value;
  const totalAmount = interaction.options.get('total_amount').value;
  const amountPerShare = interaction.options.get('amount_per_share').value;
  const duration = interaction.options.get('duration').value;
  const endTime = await airdropUtils.getGMTTime(duration);
  let metadata = {
    symbol: ''
  }
  try {
    metadata = await contractUtils.getMetadata(tokenContract)
  } catch (e) {
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('Sorry, please input a valid token address.').setColor('RED')],
      ephemeral:true,
    });
  }

  const content = new MessageEmbed()
    .setDescription('**Confirm Creating This Airdrop**\nClick the button below to deposit the token and launch the airdrop.')
    .addFields(
      { name: 'Qualified Role', value: '@' + roleName },
      { name: 'Token Contract', value: tokenContract },
      { name: 'Total Reward Pool', value: `${totalAmount} ${metadata.symbol}` },
      { name: 'Claimable Reward Per User', value: amountPerShare },
      { name: 'Expires at', value: endTime + ' (GMT)'},
    );
  const nonce = Date.now();
  const sign = await nearUtils.getSign({
    nonce: nonce,
    user_id: userId,
    channel_id: interaction.channelId,
    guild_id: interaction.guildId,
    role_id: roleId,
    token_contract: tokenContract,
    total_amount: totalAmount,
    amount_per_share: amountPerShare,
    end_time: endTime,
  });

  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  send.setURL(`${config.wallet_auth_url}/ft/airdrop/?user_id=${userId}&channel_id=${interaction.channelId}&guild_id=${interaction.guildId}&role_id=${roleId}&token_contract=${tokenContract}&total_amount=${totalAmount}&amount_per_share=${amountPerShare}&end_time=${endTime}&sign=${sign}`);

  await interaction.reply({
    content:'\n',
    embeds:[content],
    components: [action],
    ephemeral:true,
  });
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/listcollections.js ---
const nearUtils = require('../../pkg/utils/near_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const config = require('../../pkg/utils/config');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const { getNFTMintableRoles, getCollectionsByGuild } = require('../../pkg/utils/contract_utils');

// const content = new MessageEmbed().setDescription('Click the button below to enter the NFT setting page').setColor('BLUE');

// const button = new MessageButton().setStyle('LINK').setLabel('Create NFT Collection');

// const action = new MessageActionRow().addComponents(button);

const data = new SlashCommandBuilder()
  .setName('listcollections')
  .setDescription('List existing NFT collections for this server.');

const execute = async interaction => {
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
	
  const collections = await getCollectionsByGuild(interaction.guildId);
  const collectionNames = [];
  if (collections.length > 0) {
    for (collection of collections) {
      collectionNames.push(collection.collection_id.split(':')[1].split('-guild-')[0].replaceAll('-', ' '));
    }
    const content = new MessageEmbed().setDescription(`Collections In This Server:\n${collectionNames.join('\n')}`);
    interaction.reply({
      content:'\n',
      embeds:[content],
      ephemeral:true,
    });
  }
  else {
    interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('No Collection').setColor('RED')],
      ephemeral:true,
    });
  }
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/mint.js ---
const nearUtils = require('../../pkg/utils/near_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const config = require('../../pkg/utils/config');

const { SlashCommandBuilder, SlashCommandStringOption } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const { getNFTMintableRoles, getCollectionsByGuild, getCollectionSeries } = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');

const content = new MessageEmbed()
  .setDescription(`Click the button below to mint NFT directly.\n
	This link is only valid for 5 mins. If the link expires, please use the command again to get a new link.`)
  .setColor('BLUE');

const button = new MessageButton().setStyle('LINK').setLabel('Mint NFT');

const action = new MessageActionRow().addComponents(button);

const data = new SlashCommandBuilder()
  .setName('mint')
  .setDescription('Mint an NFT from an NFT collection in this server.')
  // .addStringOption(option =>
  //   option.setName('collection')
  //     .setDescription('the collection you want to mint')
  //     .setRequired(true));

const execute = async interaction => {
  const nonce = Date.now();
  const signature = await nearUtils.getSign({
    nonce: nonce,
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
  });
  // Set the url
  button.setURL(`${config.wallet_auth_url}/collection/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&sign=${signature}`);
  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  // replay message to discord user
  await interaction.reply({ content: '\n', ephemeral:true, embeds:[content], components: [action] });
}

// const execute = async interaction => {

//   const { ownerId } = interaction.guild;
//   const userId = interaction.user.id;
//   const option = interaction.options.get('collection').value;

//   const collections = await getCollectionsByGuild(interaction.guildId);
//   const index = collections.findIndex(item => item.collection_id.split(':')[1].split('-guild-')[0].replaceAll('-', ' ') == option);
//   if (index == -1) {
//     interaction.reply({
//       content:'\n',
//       embeds:[new MessageEmbed().setDescription('Wrong collection name').setColor('RED')],
//       ephemeral:true,
//     });
//     return;
//   }

//   // check the mint_count_limit in contract
//   const collection = collections[index];
//   const collectionId = collections[index].collection_id;
//   const mintCountLimit = collections[index].mint_count_limit;

//   if (collection.series_count == 0) {
//     interaction.reply({
//       content:'\n',
//       embeds:[new MessageEmbed().setDescription('This is an empty collection').setColor('RED')],
//       ephemeral:true,
//     });
//     return;
//   }

//   const series = await getCollectionSeries(collectionId);
//   let left_count = 0;
//   for (s of series) {
//     left_count += s.copies - s.minted_count;
//   }
//   if (left_count == 0) {
//     interaction.reply({
//       content:'\n',
//       embeds:[new MessageEmbed().setDescription('Nothing left').setColor('RED')],
//       ephemeral:true,
//     });
//     return;
//   }

//   if (mintCountLimit != null) {
//     const user = await userInfos.getUser({
//       guild_id: interaction.guildId,
//       user_id: userId,
//     });
//     if (!user.near_wallet_id) {
//       interaction.reply({
//         content:'\n',
//         embeds:[new MessageEmbed().setDescription('Verify your Near wallet first').setColor('RED')],
//         ephemeral:true,
//       });
//       return;
//     }
//     const alreadyMintCount = await indexerUtils.getParasTokenPerOwnerCount(collectionId, user.near_wallet_id);
//     console.log(alreadyMintCount);
//     const restMintNum = parseInt(mintCountLimit) - alreadyMintCount;
//     if (restMintNum <= 0) {
//       interaction.reply({
//         content:'\n',
//         embeds:[new MessageEmbed().setDescription('Exceed minting limit of this collection').setColor('RED')],
//         ephemeral:true,
//       });
//       return;
//     }

//   }

//   let canMint = false;
//   const mintableRoles = collection.mintable_roles;
//   const member = await discordUtils.getMember(interaction.guildId, userId);

//   if (!mintableRoles) {
//     canMint = true;
//   }
//   else {
//     for (const role of mintableRoles) {
//       if (member._roles.includes(role)) {
//         canMint = true;
//         break;
//       }
//     }
//   }
//   if (canMint || ownerId == userId) {
//     const nonce = Date.now();
//     const sign = await nearUtils.getSign({
//       nonce: nonce,
//       user_id: interaction.user.id,
//       guild_id: interaction.guildId,
//       collection_id: collectionId,
//     });
//     await userInfos.addUser({
//       user_id: interaction.user.id,
//       guild_id: interaction.guildId,
//       nonce: nonce,
//     });
//     button.setURL(`${config.wallet_auth_url}/mint/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&collection_id=${collectionId}&sign=${sign}`);
//     interaction.reply({
//       content:'\n',
//       embeds:[content],
//       ephemeral:true,
//       components:[action],
//     });
//   }
//   else {
//     interaction.reply({
//       content:'\n',
//       embeds:[new MessageEmbed().setDescription('You don\'t have the permission to mint.').setColor('RED')],
//       ephemeral:true,
//     });
//   }
// };

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/paras_leaderboard.js ---
const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed } = require('discord.js');
const logger = require('../../pkg/utils/logger');
const parasUtils = require('../../pkg/utils/paras_api');
const table = require('text-table');

const data = new SlashCommandBuilder()
  .setName('paras_leaderboard')
  .setDescription('Tracking the leader board on paras OR input a account_id to track your rank')
  .addStringOption(option => option.setName('account_id').setDescription('Input account id in paras.').setRequired(false));

const execute = async interaction => {
  // https://api-v2-mainnet.paras.id/raffle/642a95b00e4aa1138038e24b/leaderboards?__skip=0&__limit=10&raffle_type=silver&account_id=eeedo.near
  const raffleId = await parasUtils.getRaffleId();
  if (raffleId == null || raffleId == undefined) {
    return await interaction.reply({
      content:'The leaderboard will be available on the next raffle registration period. Stay tuned to Paras’ social media channels for more info on the upcoming raffle! :blue_heart:',
      ephemeral: false,
    });
  }
  // const raffleId = "642a95b00e4aa1138038e24b"
  let accountId = '';
  try {
    accountId = interaction.options.get('account_id').value;
    const platinum = await parasUtils.getLeaderBoard(raffleId, 'platinum', accountId);
    const gold = await parasUtils.getLeaderBoard(raffleId, 'gold', accountId);
    const silver = await parasUtils.getLeaderBoard(raffleId, 'silver', accountId);
    if (platinum.rank != undefined) {
      await interaction.reply({
        content:'\n',
        embeds:[addFields(new MessageEmbed().setTitle('Platinum Member').setColor('DARK_GREY'), platinum)],
        ephemeral: true,
      });
    }
    else if (gold.rank != undefined) {
      await interaction.reply({
        content:'\n',
        embeds:[addFields(new MessageEmbed().setTitle('Gold Member').setColor('YELLOW'), gold)],
        ephemeral: true,
      });
    }
    else if (silver.rank != undefined) {
      await interaction.reply({
        content:'\n',
        embeds:[addFields(new MessageEmbed().setTitle('Silver Member').setColor('WHITE'), silver)],
        ephemeral: true,
      });
    }
    else {
      await interaction.reply({
        content:'You haven’t signed up for the raffle yet. You can check the raffle registration mechanism & period here: https://paras.id/loyalty.',
        ephemeral: true,
      });
    }
    return;
  }
  catch (e) {
    logger.debug('paras_leaderboard no accountId');
    logger.error(e);
  }

  const platinum = await parasUtils.getLeaderBoard(raffleId, 'platinum');
  if (platinum == null) {
    return await interaction.reply({
      content:'There is no raffle active this moment',
      ephemeral: true,
    });
  }
  await interaction.reply({
    content:`\`Platinum Members\n${generateTable(platinum)}\n\``,
    ephemeral: true,
  });

  const gold = await parasUtils.getLeaderBoard(raffleId, 'gold');
  await interaction.followUp({
    content:`\`Gold Members\n${generateTable(gold)}\n\``,
    ephemeral: true,
  });

  const silver = await parasUtils.getLeaderBoard(raffleId, 'silver');
  await interaction.followUp({
    content:`\`Silver Members\n${generateTable(silver)}\n\``,
    ephemeral: true,
  });
};

module.exports = {
  data,
  execute,
};

function generateTable(leaderBoard) {
  const tableData = [['TOP 10', 'Username', 'Locked Staking(LS)', 'Duration', 'Duration Point', 'Total Raffle Point']];
  for (let i = 1; i < leaderBoard.length + 1; i++) {
    let accountId = leaderBoard[i - 1].account_id;
    if (accountId.length >= 64) {
      accountId = accountId.substring(0, 8) + '...' + accountId.substring(accountId.length - 7);
    }
    tableData[i] = [i, accountId, leaderBoard[i - 1].locked_amount.toString() + ' ℗', Math.floor(leaderBoard[i - 1].locked_duration / (3600000 * 24)) + ' days', leaderBoard[i - 1].duration_points.toString(), leaderBoard[i - 1].total_points.toString()];
  }
  return table(tableData, { align: [ 'c', 'c', 'c', 'c', 'c', 'c'] });
}

function addFields(messageEmbed, accountInfo) {
  return messageEmbed.addFields(
    { name: 'Rank', value: accountInfo.rank.toString() },
    { name: 'Username', value: accountInfo.data.account_id, inline: true },
    { name: 'Raffle_type', value: accountInfo.data.raffle_type, inline: true },
    { name: 'Locked Staking(LS)', value: accountInfo.data.locked_amount.toString() + ' ℗', inline: true },
    { name: 'Duration', value: Math.floor(accountInfo.data.locked_duration / (3600000 * 24)) + ' days', inline: true },
    { name: 'Duration Point', value: accountInfo.data.duration_points.toString(), inline: true },
    { name: 'Total Raffle Point', value: accountInfo.data.total_points.toString(), inline: true },
  );
}
'''
'''--- service/commands/paras_staking.js ---
const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed } = require('discord.js');
const logger = require('../../pkg/utils/logger');
const parasUtils = require('../../pkg/utils/paras_api');
const timeUtils = require('../../pkg/utils/time_utils');

const data = new SlashCommandBuilder()
  .setName('paras_staking')
  .setDescription('Tracking your staking status on paras')
  .addStringOption(option => option.setName('account_id').setDescription('Input account id in paras.').setRequired(true));

const execute = async interaction => {

  const content = new MessageEmbed()
    .setTitle('Paras Staking')
    .setColor('BLURPLE');

  const accountId = interaction.options.get('account_id').value;
  try {
    const lockedInfo = await parasUtils.getUserLockedSeeds(accountId);
    if (lockedInfo == undefined) {
      return await interaction.reply({
        content:'Currently you don’t have any Paras staking',
        ephemeral: true,
      });
    }
    content.addFields(
      { name: 'Amount', value: parasUtils.prettyBalance(lockedInfo.balance) + ' ℗' },
      { name: 'Duration', value: Math.floor(lockedInfo.ended_at / (3600 * 24)) - Math.floor(lockedInfo.started_at / (3600 * 24)) + ' days' },
      { name: 'Start From', value: await timeUtils.getUTCTime(lockedInfo.started_at * 1000) },
      { name: 'End At', value: await timeUtils.getUTCTime(lockedInfo.ended_at * 1000) },
      { name: 'Count Down', value: Math.floor((lockedInfo.ended_at * 1000 - new Date().getTime()) / (3600000 * 24)) + ' days' },
    );
    return await interaction.reply({
      content:'\n',
      embeds:[content],
      ephemeral: true,
    });
  }
  catch (e) {
    logger.error(e);
  }
};

module.exports = {
  data,
  execute,
};
'''
'''--- service/commands/poll.js ---
const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed } = require('discord.js');
const logger = require('../../pkg/utils/logger');

const data = new SlashCommandBuilder()
  .setName('poll')
  .setDescription('Create a poll')
  .addStringOption(option =>
    option.setName('question')
      .setDescription('The question of this poll')
      .setRequired(true))
  .addStringOption(option =>
    option.setName('options')
      .setDescription(' Using \'+\' to be the separator')
      .setRequired(false));

const execute = async interaction => {
  const question = interaction.options.get('question').value;
  let options = undefined;
  try {
    options = interaction.options.get('options').value;
  }
  catch (e) {
    logger.debug('poll.options is null');
  }

  if (options === undefined) {
    const embed = new MessageEmbed().setTitle('📊 ' + question).setColor('#00D1CD');
    const message = await interaction.reply({ embeds: [embed], fetchReply: true });
    message.react('👍');
    message.react('👎');
  }
  else {
    const embed = new MessageEmbed().setTitle('📊 ' + question).setColor('#00D1CD');
    const alphabet = ['🇦', '🇧', '🇨', '🇩', '🇪', '🇫', '🇬', '🇭', '🇮', '🇯', '🇰', '🇱',
      '🇲', '🇳', '🇴', '🇵', '🇶', '🇷', '🇸', '🇹', '🇺', '🇻', '🇼', '🇽', '🇾', '🇿'];
    options = options.split('+');
    if (options.length > alphabet.length) {
      return await interaction('Please don\'t input more than 26 options.').then(sent => {
        setTimeout(() => {
          sent.delete();
        }, 2000);
      });
    }
    let description = '';
    for (let i = 0; i < options.length; i++) {
      description += `${alphabet[i]} ${options[i]} \n`;
    }
    embed.setDescription(description);
    const message = await interaction.reply({ embeds: [embed], fetchReply: true });
    for (let i = 0; i < options.length; i++) {
      message.react(alphabet[i]);
    }
  }

};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/set_twitter_rule.js ---
const config = require('../../pkg/utils/config');
const twitterRule = require('../../pkg/models/object/twitter_rules');
const logger = require('../../pkg/utils/logger');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');

const button = new MessageButton()
  .setCustomId('action.verify_twitter')
  .setLabel('Verify Twitter')
  .setStyle('PRIMARY');

const disconnect = new MessageButton()
  .setCustomId('action.disconnect_twitter')
  .setLabel('Disconnect Twitter')
  .setStyle('SECONDARY');

const action = new MessageActionRow()
  .addComponents(button, disconnect);

const data = new SlashCommandBuilder()
  .setName('set_twitter_rule')
  .setDescription('Set twitter rules for roles in this server.')
  .addRoleOption(option => option.setName('role').setDescription('which role the user can join').setRequired(true))
  .addStringOption(option => option.setName('follow_username').setDescription('Input the Username without @. Using \'+\' to septate different username, like a + b').setRequired(false))
  .addStringOption(option => option.setName('rt_tweet_link').setDescription('Using \'+\' to septate different link, like a + b').setRequired(false))
  .addStringOption(option => option.setName('like_tweet_link').setDescription('Using \'+\' to septate different link, like a + b').setRequired(false));
const execute = async interaction => {
  try {

  
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
  if (userId != ownerId) {
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('This command can only be used by server owner.').setColor('RED')],
      ephemeral:true,
    });
  }

  const content = new MessageEmbed()
    .setTitle('Twitter Verification')
    .setDescription(`Click the button below to get verified with your Twitter account. You'll be automatically assigned with the role if you meet the requirements.\n\n**Requirements:**`)
  const guildId = interaction.guildId;
  const roleId = interaction.options.get('role').value;
  const roleName = await interaction.guild.roles.fetch(roleId).then(e => e.name.split('@').at(-1));
  let followUserName = '';
  let rtTweetLink = '';
  let likeTweetLink = '';
  try {
    followUserName = interaction.options.get('follow_username').value;
    content.addFields({ name: config.fields.twitter_follow[0], value: followUserName.split('+').map(e => '@' + e.trim()).join(', ') });
  }
  catch (e) {
    logger.debug('no follow_username');
  }
  try {
    rtTweetLink = interaction.options.get('rt_tweet_link').value;
    content.addFields({ name: config.fields.twitter_retweet[0], value: rtTweetLink });
  }
  catch (e) {
    logger.debug('no rt_tweet_link');
  }
  try {
    likeTweetLink = interaction.options.get('like_tweet_link').value;
    content.addFields({ name: config.fields.like_tweet[0], value: likeTweetLink });
  }
  catch (e) {
    logger.debug('no like_tweet_link');
  }
  content.addFields({ name: config.fields.twitter_role[0], value: `@${roleName}` });

  await twitterRule.add({
    guild_id: guildId,
    user_id: userId,
    role_id: roleId,
    follow_user_name: followUserName,
    rt_tweet_link: rtTweetLink,
    like_tweet_link: likeTweetLink,
  });

  await interaction.reply({
    content:'\n',
    embeds:[content],
    components: [action],
  });
  } catch (e) {
    console.log(e)
  }
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/setrule.js ---
const nearUtils = require('../../pkg/utils/near_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const config = require('../../pkg/utils/config');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');

const content = new MessageEmbed()
  .setDescription(`Click the button below to enter the setrule page.\n
	This link is only valid for 5 mins. If the link expires, please use the command again to get a new link.`)
  .setColor('BLUE');

const button = new MessageButton().setStyle('LINK').setLabel('Set Rule');

const action = new MessageActionRow().addComponents(button);

const data = new SlashCommandBuilder()
  .setName('setrule')
  .setDescription('Set token-gated rules for roles in this server.');

const execute = async interaction => {
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
  if (userId === ownerId) {
    const nonce = Date.now();
    const sign = await nearUtils.getSign({
      nonce: nonce,
      user_id: interaction.user.id,
      guild_id: interaction.guildId,
    });
    await userInfos.addUser({
      user_id: interaction.user.id,
      guild_id: interaction.guildId,
      nonce: nonce,
    });
    button.setURL(`${config.wallet_auth_url}/role/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&sign=${sign}`);
    interaction.reply({
      content:'\n',
      embeds:[content],
      ephemeral:true,
      components:[action],
    });
  }
  else {
    interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('This command can only be used by server owner.').setColor('RED')],
      ephemeral:true,
    });
  }
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/commands/verify.js ---
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const { SlashCommandBuilder } = require('@discordjs/builders');
const config = require('../../pkg/utils/config');
const nearUtils = require('../../pkg/utils/near_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const logger = require('../../pkg/utils/logger');
const discordUtils = require('../../pkg/utils/discord_utils');

const embed = new MessageEmbed()
  .setColor('#0099ff')
  .setTitle('Verify your on-chain assets')
  .setDescription(`Click the button below to complete the near wallet authorization operation.\n
	This link is only valid for 5 mins. If the link expires, please use the command again to get a new link.`);

const button = new MessageButton()
  .setLabel('Connect Near Wallet')
  .setStyle('LINK');

const action = new MessageActionRow()
  .addComponents(button);

const data = new SlashCommandBuilder()
  .setName('verify')
  .setDescription('Connect your NEAR wallet to verify your on-chain assets on Near protocol.');

const execute = async interaction => {
  const nonce = Date.now();
  const signature = await nearUtils.getSign({
    nonce: nonce,
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
  });
  // Set the url
  button.setURL(`${config.wallet_auth_url}/verify/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&sign=${signature}`);

  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  // replay message to discord user
  await interaction.reply({ content: '\n', ephemeral:true, embeds:[embed], components: [action] });
  discordUtils.setInteraction(interaction);
};

module.exports = {
  data,
  execute,
};
'''
'''--- service/commands/vote.js ---
const astrodaoUtils = require('../../pkg/utils/astrodao_utils');

const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const logger = require('../../pkg/utils/logger');

const data = new SlashCommandBuilder()
  .setName('vote')
  .setDescription('Vote for a DAO proposal with DAO contract and proposal ID.')
  .addStringOption(option =>
    option.setName('contract_address')
      .setDescription('The Astrodao Contract Address')
      .setRequired(true))
  .addIntegerOption(option =>
    option.setName('proposal_id')
      .setDescription('The proposal id')
      .setRequired(true))
  .addStringOption(option =>
    option.setName('message_type')
      .setDescription('Displays the result in a private or public message.')
      .setRequired(false)
      .addChoices(
        { name: 'Private', value: 'private' },
        { name: 'Public', value: 'public' },
      ));

const execute = async interaction => {
  const address = interaction.options.get('contract_address').value;
  const proposalId = interaction.options.get('proposal_id').value;
  let messageType = false;
  if (interaction.options.get('message_type')?.value != undefined) {
    messageType = interaction.options.get('message_type').value == 'private' ? true : false;
  }

  const proposal = await astrodaoUtils.getProposal(address, proposalId);
  const afterProposal = await astrodaoUtils.formatProposal(proposal);

  const approve = new MessageButton()
    .setCustomId('action.for')
    .setStyle('SECONDARY')
    .setLabel('👍 For');

  const against = new MessageButton()
    .setCustomId('action.against')
    .setStyle('SECONDARY')
    .setLabel('👎 Against');

  const content = new MessageEmbed();

  const action = new MessageActionRow()
    .addComponents(approve, against);
  // Generate sign and main info for the both of the button
  content.addFields({ name: 'Contract Address', value: address });
  for (const field of afterProposal.embeds) {
    content.addFields(field);
  }
  await interaction.reply({
    content:'\n',
    ephemeral: messageType,
    embeds: [content],
    components: [action],
  });
};

module.exports = {
  data,
  execute,
};

'''
'''--- service/controllers/block_chain.js ---
const logger = require('../../pkg/utils/logger');
const Resp = require('../../pkg/models/object/response');
const nearUtils = require('../../pkg/utils/near_utils');
const userUtils = require('../../pkg/utils/user_utils');
const discordUtils = require('../../pkg/utils/discord_utils');

/* POST method income structure:
	{
		args: {xxx}      //maybe another signature here, used for link verification or operate verification
		account_id: String   //near account
        sign: String    //account id verification, args signature signed by this account
	}
*/

// api/getOwnerSign
const getOwnerSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  logger.info(`revice request by access 'api/getOwnerSign': ${JSON.stringify(req)}`);
  // verify user account
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/get-sign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/get-sign',
      success: false,
    });
    return;
  }

  if (!await nearUtils.verifyOperationSign(args, req.account_id)) {
    logger.error('fn verifyOperationSign failed in api/get-sign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyOperationSign failed in api/get-sign',
      success: false,
    });
    return;
  }

  const guild = await discordUtils.getGuild(args.guild_id);
  if (args.user_id != guild.ownerId) {
    logger.error('user_id != guild.ownerId');
    ctx.body = new Resp({
      code: 500,
      message: 'user_id != guild.ownerId',
      success: false,
    });
    return;
  }

  const timestamp = Date.now() + '000000';
  const sign = await nearUtils.getSign(req.account_id + timestamp);
  ctx.body = new Resp({ 
    data: {
      timestamp: timestamp,
      sign: sign,
    },
  });
};
// api/operate-sign
const getOperationSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/getOperationSign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getOperationSign',
      success: false,
    });
    return;
  }
  const nonce = await userUtils.verifyUserId({ user_id: args.user_id, guild_id: args.guild_id }, args.sign);
  if (!nonce) {
    if (args.operationSign && await nearUtils.verifyOperationSign({
      user_id: args.user_id,
      guild_id: args.guild_id,
      sign: args.operationSign,
    }, req.account_id)) {
      ctx.body = new Resp({ data: args.operationSign });
      return;
    }
    ctx.body = new Resp({
      code: 500,
      message: 'nonce expired',
      success: false,
    });
    return;
  }
  const sign = await nearUtils.getSign(nonce + req.account_id);
  ctx.body = new Resp({ data: sign });
};

const getMintSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/getMintSign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getMintSign',
      success: false,
    });
    return;
  }

  if (!await nearUtils.verifyOperationSign(args, req.account_id)) {
    logger.error('fn verifyOperationSign failed in api/get-sign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyOperationSign failed in api/get-sign',
      success: false,
    });
    return;
  }

  const timestamp = Date.now() + '000000';
  const sign = await nearUtils.getSign(req.account_id + timestamp + args.collection_id);
  ctx.body = new Resp({ data: {
    sign,
    timestamp,
  },
  });
};

const getSnapshotSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/getSnapshotSign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getSnapshotSign',
      success: false,
    });
    return;
  }

  const nonce = await userUtils.verifyUserId({ user_id: args.user_id, guild_id: args.guild_id, contract_address: args.contract_address }, args.sign);
  if (!nonce) {
    ctx.body = new Resp({
      code: 500,
      message: 'nonce expired',
      success: false,
    });
    return;
  }

  const timestamp = Date.now() + '000000';
  const sign = await nearUtils.getSign(req.account_id + timestamp + args.contract_address);
  ctx.body = new Resp({ data: {
    sign,
    timestamp,
  },
  });
};

const getVoteSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/getVoteSign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getVoteSign',
      success: false,
    });
    return;
  }

  const nonce = await userUtils.verifyUserId({ user_id: args.user_id, guild_id: args.guild_id, contract_address: args.contract_address, proposal_id: args.proposal_id, action: args.action }, args.sign);
  if (!nonce) {
    ctx.body = new Resp({
      code: 500,
      message: 'nonce expired',
      success: false,
    });
    return;
  }

  const timestamp = Date.now() + '000000';
  const sign = await nearUtils.getSign(req.account_id + timestamp + args.contract_address + args.proposal_id + args.action);
  ctx.body = new Resp({ data: {
    sign,
    timestamp,
  },
  });
};

const getAirdropFTSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/getAirdropFTSign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getAirdropFTSign',
      success: false,
    });
    return;
  }

  let nonce;
  if (args.hash) {
    nonce = await userUtils.verifyUserId(
      { user_id: args.user_id, guild_id: args.guild_id, hash: args.hash },
      args.sign,
    );
  }
  else {
    nonce = await userUtils.verifyUserId(
      { user_id: args.user_id, guild_id: args.guild_id, channel_id: args.channel_id, role_id: args.role_id, token_contract: args.token_contract, total_amount: args.total_amount, amount_per_share: args.amount_per_share, end_time: args.end_time },
      args.sign,
    );
  }

  if (!nonce) {
    ctx.body = new Resp({
      code: 500,
      message: 'nonce expired',
      success: false,
    });
    return;
  }

  const timestamp = Date.now() + '000000';
  let sign;
  if (args.hash) {
    sign = await nearUtils.getSign(args.hash + args.user_id + timestamp);
  }
  else {
    sign = await nearUtils.getSign(req.account_id + timestamp + args.role_id + args.token_contract + args.total_amount + args.amount_per_share + args.end_time);
  }
  ctx.body = new Resp({ data: {
    sign,
    timestamp,
  },
  });
};

const getAirdropNFTSign = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/getAirdropNFTSign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getAirdropNFTSign',
      success: false,
    });
    return;
  }
  let nonce;
  if (args.hash) {
    nonce = await userUtils.verifyUserId(
      { user_id: args.user_id, guild_id: args.guild_id, hash: args.hash },
      args.sign,
    );
  }
  else {
    nonce = await userUtils.verifyUserId(
      { user_id: args.user_id, guild_id: args.guild_id, channel_id: args.channel_id, contract_address: args.contract_address, role_id: args.role_id, token_id: args.token_id, end_time: args.end_time },
      args.sign,
    );
  }

  if (!nonce) {
    ctx.body = new Resp({
      code: 500,
      message: 'nonce expired',
      success: false,
    });
    return;
  }

  const timestamp = Date.now() + '000000';
  let sign;
  if (args.hash) {
    sign = await nearUtils.getSign(args.hash + args.user_id + timestamp);
  }
  else {
    sign = await nearUtils.getSign(req.account_id + timestamp + args.contract_address + args.role_id + args.token_id + args.end_time);
  }
  ctx.body = new Resp({ data: {
    sign,
    timestamp,
  },
  });
};

module.exports = {
  'POST /api/getOwnerSign': getOwnerSign,
  'POST /api/getOperationSign': getOperationSign,
  'POST /api/getMintSign': getMintSign,
  'POST /api/getSnapshotSign': getSnapshotSign,
  'POST /api/getVoteSign': getVoteSign,
  'POST /api/getAirdropNFTSign': getAirdropNFTSign,
  'POST /api/getAirdropFTSign': getAirdropFTSign,
};
'''
'''--- service/controllers/discord_api.js ---
const Resp = require('../../pkg/models/object/response');
const discordUtils = require('../../pkg/utils/discord_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const userUtils = require('../../pkg/utils/user_utils');
const snapshotUtils = require('../../pkg/utils/snapshot_utils');
const contractUtils = require('../../pkg/utils/contract_utils');
const logger = require('../../pkg/utils/logger');
const config = require('../../pkg/utils/config');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');

const getRole = async (ctx, next) => {
  const guildId = ctx.params.guildId;
  const roles = await discordUtils.getRoles(guildId);
  ctx.body = new Resp({ data: roles });
};

const getServer = async (ctx, next) => {
  const guildId = ctx.params.guildId;
  const serverList = await discordUtils.getGuild(guildId);
  ctx.body = new Resp({ data: serverList });
};

const getUser = async (ctx, next) => {
  const guildId = ctx.params.guildId;
  const userId = ctx.params.userId;
  const sign = ctx.params.sign;
  if (!await userUtils.verifyUserSign({ user_id: userId, guild_id: guildId }, sign)) {
    logger.error('fn verifyUserId failed in api/setInfo');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyUserId failed in api/getOwnerSign',
      success: false,
    });
    return;
  }
  const member = await discordUtils.getMember(guildId, userId);
  ctx.body = new Resp({ data: member });
};

const getConnectedAccount = async (ctx, next) => {
  const guildId = ctx.params.guildId;
  const userId = ctx.params.userId;
  const userInfo = await userInfos.getUser({
    guild_id: guildId,
    user_id: userId,
  });
  ctx.body = new Resp({ data: userInfo.near_wallet_id });
};

/**
 * 
 * @param {*} ctx.request.body {
    "guild_id":"966966468774350948",
    "channel_id":"966966468774350951",
    "role_id":"1014164987121512448",
    "token_id":"test",
    "total_amount":"100",
    "amount_per_share":"10",
    "end_time":"2022-09-14T13:02:02.972Z"
}
 * @param {*} next 
 */

const sendFTAirdropMsg = async (ctx, next) => {
  const req = ctx.request.body;
  logger.info(`receive request from /api/airdrop/sendftmsg ${JSON.stringify(req)}`);
  try {
    const guild = await discordUtils.getGuild(req.guild_id);
    const channel = await discordUtils.getChannel(req.guild_id, req.channel_id);
    const roleName = await guild.roles.fetch(req.role_id).then(e => e.name.split('@').at(-1));
    const metadata = await contractUtils.getMetadata(req.token_contract)
    const content = new MessageEmbed()
      .setDescription('**Claim Token Airdrop**\nClick the button below to claim this airdrop')
      .addFields(
        { name: 'Qualified Role', value: '@' + roleName },
        { name: 'Token Contract', value: req.token_contract },
        { name: 'Total Reward Pool', value: `${req.total_amount} ${metadata.symbol}` },
        { name: 'Claimable Reward Per User', value: req.amount_per_share },
        { name: 'Expires at', value: req.end_time + ' (GMT)'},
        { name: config.fields.airdrop_hash[0], value: req.hash },
      );
    const claim = new MessageButton()
      .setCustomId('action.claim_ft')
      .setLabel('Claim')
      .setStyle('PRIMARY');
    const component = new MessageActionRow()
      .addComponents(claim);
    await channel.send({ content: '\n', ephemeral:true, embeds:[content], components: [component] });

    const settingChannel = await guild.channels.fetch().then(e => e.find(r => r.name == 'nepbot-settings'));
    const redeem = new MessageButton()
      .setCustomId('action.redeem_ft')
      .setLabel('Redeem FT')
      .setStyle('PRIMARY');
    const redeemComponent = new MessageActionRow()
      .addComponents(redeem);
    await settingChannel.send({ content: '\n', ephemeral:true, embeds:[content.setDescription('**NEP141 Airdrop**\nClick the button below to redeem the Airdrop')], components: [redeemComponent] });
    ctx.body = new Resp({});
  }
  catch (e) {
    console.log(e)
    logger.error(e);
    ctx.body = new Resp({ code: 500, message: 'error sendFTAirdropMsg', success: false });
  }
};

/**
 * 
 * @param {*} ctx.request.body {
    "guild_id":"966966468774350948",
    "channel_id":"966966468774350951",
    "role_id":"1004475262097952848",
    "contract_address":"test",
    "token_id":"test",
    "end_time":"2022-09-18T11:30:57.366Z"
}
 * @param {*} next 
 */
const sendNFTAirdropMsg = async (ctx, next) => {
  const req = ctx.request.body;
  logger.info(`receive request from /api/airdrop/sendnftmsg ${JSON.stringify(req)}`);
  try {
    const guild = await discordUtils.getGuild(req.guild_id);
    const channel = await discordUtils.getChannel(req.guild_id, req.channel_id);
    const roleName = await guild.roles.fetch(req.role_id).then(e => e.name.split('@').at(-1));
    const content = new MessageEmbed()
      .addFields(
        { name: 'Qualified Role', value: '@' + roleName },
        { name: 'Contract Address', value: req.contract_address },
        { name: 'Token_id', value: req.token_id },
        { name: 'Expires at', value: req.end_time + ' (GMT)' },
        { name: config.fields.airdrop_hash[0], value: req.hash },
      );
    const claim = new MessageButton()
      .setCustomId('action.claim_nft')
      .setLabel('Claim NFT')
      .setStyle('PRIMARY');
    const claimComponent = new MessageActionRow()
      .addComponents(claim);
    await channel.send({ content: '\n', ephemeral:true, embeds:[content.setDescription('Claim NFT: Used for user to claim the NFT')], components: [claimComponent] });

    const settingChannel = await guild.channels.fetch().then(e => e.find(r => r.name == 'nepbot-settings'));
    const redeem = new MessageButton()
      .setCustomId('action.redeem_nft')
      .setLabel('Redeem NFT')
      .setStyle('PRIMARY');
    const redeemComponent = new MessageActionRow()
      .addComponents(redeem);
    await settingChannel.send({ content: '\n', ephemeral:true, embeds:[content.setDescription('Redeem NFT: Used for user to redeem the NFT')], components: [redeemComponent] });
    ctx.body = new Resp({});
  }
  catch (e) {
    logger.error(e);
    ctx.body = new Resp({ code: 500, message: 'error sendNFTAirdropMsg', success: false });
  }
};

const sendSnapshotMsg = async (ctx, next) => {
  const req = ctx.request.body;
  logger.info(`receive request from /api/snapshot/sendmsg ${JSON.stringify(req)}`);
  try {
    const channel = await discordUtils.getChannel(req.guild_id, req.channel_id);
    const snapshotInfo = await snapshotUtils.getSnapshot(req.hash);
    const content = new MessageEmbed()
      .addFields(
        { name: 'Hash', value: snapshotInfo.hash },
        { name: 'Contract Address', value: snapshotInfo.contract_address },
        { name: 'Block Height', value: snapshotInfo.block_height.toString() },
      );
    await channel.send({ content: '\n', ephemeral:false, embeds:[content.setDescription('Create snapshot success')] });

    ctx.body = new Resp({});
  }
  catch (e) {
    logger.error(e);
    ctx.body = new Resp({ code: 500, message: 'error send snapshot msg', success: false });
  }
};

const getTotalServerCount = async (ctx, next) => {
  const count = await discordUtils.getGuildCount()
  ctx.body = new Resp({ data: count });
}

const getTotalVerifiedCount = async (ctx, next) => {
  const count = await userInfos.getUserCount({
    near_wallet_id: {$ne: null}
  })
  ctx.body = new Resp({ data: count });
}

module.exports = {
  'GET /api/getRole/:guildId': getRole,
  'GET /api/getServer/:guildId': getServer,
  'GET /api/getUser/:guildId/:userId/:sign': getUser,
  'GET /api/getConnectedAccount/:guildId/:userId': getConnectedAccount,
  'GET /api/getTotalServerCount': getTotalServerCount,
  'GET /api/getTotalVerifiedCount': getTotalVerifiedCount,
  'POST /api/airdrop/sendFTMsg': sendFTAirdropMsg,
  'POST /api/airdrop/sendNFTMsg': sendNFTAirdropMsg,
  'POST /api/snapshot/sendMsg': sendSnapshotMsg,
};
'''
'''--- service/controllers/indexer_api.js ---
const logger = require('../../pkg/utils/logger');
const Resp = require('../../pkg/models/object/response');
const indexer_utils = require('../../pkg/utils/indexer_utils');

/* POST method income structrue:
	{
		args: {xxx}      //maybe another signature here, used for link verifaction or operate verification
		account_id: String   //near account
        sign: String    //account id verification, args signature signed by this account
	}
*/

/**
 * based on the request return txn
 * @api /api/getTxByGuild
 * @method Get
 * @param guild_id
 * @example { "guild_id":"940255224256409611" }
 * @returns txn
 */
const getTxnByGuild = async (ctx, next) => {
	const guildId = ctx.params.guildId;
	logger.info(`revice request by access 'api/getTxByGuild': ${guildId}`);
	ctx.body = new Resp({
		data: await indexer_utils.getTxn(guildId),
	});
};

module.exports = {
	'GET /api/getTxByGuild/:guildId': getTxnByGuild,
};
'''
'''--- service/controllers/paras.js ---
const logger = require('../../pkg/utils/logger');
const config = require('../../pkg/utils/config');
const Resp = require('../../pkg/models/object/response');
const nearUtils = require('../../pkg/utils/near_utils');

const multiparty = require('multiparty');
const fs = require('fs');
const { createCollection } = require('../../pkg/utils/paras_api');
const FormData = require('form-data');

const createParasCollection = async (ctx, next) => {

  const form = new multiparty.Form();
  const { req, files } = await new Promise((resolve, reject) => {
    form.parse(ctx.req, function(err, fields, files) {
      resolve({ req: JSON.parse(fields.args[0]), files: files.files });
    });
  });

  const args = req.args;
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/setInfo');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getOwnerSign',
      success: false,
    });
    return;
  }

  if (!await nearUtils.verifyOperationSign(args, req.account_id)) {
    logger.error('fn verifyOperationSign failed in api/get-sign');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyOperationSign failed in api/get-sign',
      success: false,
    });
    return;
  }

  const formData = new FormData();
  Object.keys(args.args).forEach((key) => {
    formData.append(key, args.args[key]);
  });
  for (const file of files) {
    const fileObj = fs.createReadStream(file.path);
    formData.append('files', fileObj);
  }

  const res = await createCollection(formData, await nearUtils.genParasAuthToken());
  ctx.body = res;
};

const pingParasAPI = async (ctx, next) => {
  const data = await fetch(`${config.paras.api}/activities`);
  if (data) {
    ctx.body = new Resp({ data:200 });
    return;
  }
  ctx.body = new Resp({ data:500 });
};

module.exports = {
  'POST /api/createParasCollection': createParasCollection,
  'GET /api/pingParasApi': pingParasAPI,
};
'''
'''--- service/controllers/twitter.js ---
const Resp = require('../../pkg/models/object/response');
const logger = require('../../pkg/utils/logger');
const twitterClient = require('../../service/twitter_app');
const config = require('../../pkg/utils/config');
const oauthCache = require('../../pkg/models/object/oauth_cache');
const twitterUsers = require('../../pkg/models/object/twitter_users');
const twitterUtils = require('../../pkg/utils/twitter_utils');
const timeUtils = require('../../pkg/utils/time_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const twitterRulesMsg = require('../../pkg/models/object/twitter_rules_msg');

const callback = async (ctx, next) => {
  const callbackUrl = config.twitter.callback_url;
  // Extract state and code from query string
  const req = ctx.request.body;
  logger.info(`receive request by access 'api/twitter/callback': ${JSON.stringify(req)}`);
  const state = req.state;
  const code = req.code;
  // Get the saved codeVerifier from session
  const codeVerifier = await oauthCache.get({ state: state })
    .then(e => e.code_verifier)
    .catch(() => ctx.body = new Resp({ code: 500 }));
  if (!codeVerifier || !state || !code) {
    await oauthCache.delete({ state: state });
    return ctx.body = new Resp({ code: 500 });
  }

  await twitterClient.loginWithOAuth2({ code, codeVerifier, redirectUri: callbackUrl })
    .then(async ({ client: loggedClient, accessToken, refreshToken, expiresIn }) => {
    // {loggedClient} is an authenticated client in behalf of some user
    // Store {accessToken} somewhere, it will be valid until {expiresIn} is hit.
    // If you want to refresh your token later, store {refreshToken} (it is present if 'offline.access' has been given as scope)
      const { data: userObject } = await loggedClient.v2.me();
      const expiredAt = await timeUtils.getExpiredTimeBySecond(expiresIn);
      const params = { access_token: accessToken, refresh_token: refreshToken, expired_at: expiredAt, twitter_id: userObject.id, twitter_username: userObject.username };
      const condition = { state: state };
      await twitterUsers.update(params, condition);
      await oauthCache.delete({ state: state });
      const ruleMsg = await twitterRulesMsg.get({ twitter_state: state });
      const dcMsg = await discordUtils.getMessage(ruleMsg.guild_id, ruleMsg.channel_id, ruleMsg.message_id);
      const result = await twitterUtils.verifyRuleFromDB(loggedClient, ruleMsg, dcMsg);
      await twitterRulesMsg.delete({ twitter_state: state });
      return ctx.body = new Resp({ data: result });
    })
    .catch(() => ctx.body = new Resp({ code: 500 }));
};

module.exports = {
  'POST /api/twitter/callback': callback,
};

// const callback = async (ctx, next) => {
//   const callbackUrl = config.twitter.callback_url;
//   // Extract state and code from query string
//   const { state, code } = ctx.query;
//   logger.info(`receive request by access 'api/twitter/callback': ${JSON.stringify(ctx.query)}`);
//   // const state = req.state;
//   // const code = req.code;
//   console.log(state, code);
//   // Get the saved codeVerifier from session
//   const codeVerifier = await oauthCache.get({ state: state })
//     .then(e => e.code_verifier)
//     .catch(() => ctx.statue = 500);
//   if (!codeVerifier || !state || !code) {
//     return ctx.statue = 500;
//   }

//   await twitterClient.loginWithOAuth2({ code, codeVerifier, redirectUri: callbackUrl })
//     .then(async ({ client: loggedClient, accessToken, refreshToken, expiresIn }) => {
//     // {loggedClient} is an authenticated client in behalf of some user
//     // Store {accessToken} somewhere, it will be valid until {expiresIn} is hit.
//     // If you want to refresh your token later, store {refreshToken} (it is present if 'offline.access' has been given as scope)
//       const { data: userObject } = await loggedClient.v2.me();
//       const expiredAt = await timeUtils.getExpiredTimeBySecond(expiresIn);
//       const params = { access_token: accessToken, refresh_token: refreshToken, expired_at: expiredAt, twitter_id: userObject.id, twitter_username: userObject.username };
//       const condition = { state: state };
//       await twitterUsers.update(params, condition);
//       await oauthCache.delete({ state: state });
//       return ctx.statue = 200;
//     })
//     .catch(() => ctx.statue = 500);
// };

// module.exports = {
//   'GET /api/twitter/callback': callback,
// };
'''
'''--- service/controllers/user.js ---
const logger = require('../../pkg/utils/logger');
const Resp = require('../../pkg/models/object/response');
const nearUtils = require('../../pkg/utils/near_utils');
const userUtils = require('../../pkg/utils/user_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const contractUtils = require('../../pkg/utils/contract_utils');
const timeUtils = require('../../pkg/utils/time_utils');
const userDisconnects = require('../../pkg/models/object/user_disconnects');
const schedule = require('node-schedule');
const { MessageEmbed } = require('discord.js');
const { user } = require('../discord_bot');
const config = require('../../pkg/utils/config');

const embed = new MessageEmbed()
  .setColor('#0099ff')
  .setTitle('Verify success')
  .setDescription('');

const setInfo = async (ctx, next) => {
  const req = ctx.request.body;
  const args = req.args;
  logger.info(`revice request by access 'api/setInfo': ${JSON.stringify(req)}`);
  // verify user account
  if (!await nearUtils.verifyAccountOwner(req.account_id, args, req.sign)) {
    logger.error('fn verifyAccountOwner failed in api/setInfo');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyAccountOwner failed in api/getOwnerSign',
      success: false,
    });
    return;
  }
  // verify user id
  if (!await userUtils.verifyUserId({ user_id: args.user_id, guild_id: args.guild_id }, args.sign)) {
    logger.error('fn verifyUserId failed in api/setInfo');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyUserId failed in api/getOwnerSign',
      success: false,
    });
    return;
  }

  await userUtils.setUser(args, req.account_id);

  // const interaction = discordUtils.getInteraction(args.user_id, args.guild_id);
  // if (interaction) {
  //   await interaction.editReply({ content: '\n', ephemeral:true, embeds:[embed], components: [] });
  // }

  ctx.body = new Resp({});
};

const disconnectAccount = async (ctx, next) => {
  const EXPIRED_DAY = 1; // days
  const req = ctx.request.body;
  const args = req.args;
  logger.info(`revice request by access 'api/disconnectAccount': ${JSON.stringify(args)}`);
  

  // verify user id
  if (!await userUtils.verifyUserId({ user_id: args.user_id, guild_id: args.guild_id }, args.sign)) {
    logger.error('fn verifyUserId failed in api/setInfo');
    ctx.body = new Resp({
      code: 500,
      message: 'fn verifyUserId failed in api/getOwnerSign',
      success: false,
    });
    return;
  }

  

  /**
   * when user disconnect, the data in database will save @EXPIRED_DAY days, the following code will create a schedule job to delete data after that days
   */
  try {
    // remove all role for the user
    userUtils.deleteAllRole(args.guild_id, args.user_id);

    const expiredAt = await timeUtils.getExpiredTimeByDay(EXPIRED_DAY);
    await userDisconnects.add({
      guild_id: args.guild_id,
      user_id: args.user_id,
      expired_at: expiredAt,
    });
    await userInfos.updateUser({
      guild_id: args.guild_id,
      user_id: args.user_id,
      near_wallet_id: null,
    });
    const jobName = args.user_id + '-' + args.guild_id;
    const job = schedule.scheduleJob(jobName, expiredAt, function() {
      userUtils.deleteData(args.user_id, args.guild_id);
    });
    logger.info(`create new user disconnect schedule job, name: ${job.name} run at ${expiredAt}`);
  }
  catch (e) {
    logger.error(e);
  }

  const nonce = Date.now();
  const signature = await nearUtils.getSign({
    nonce: nonce,
    user_id: args.user_id,
    guild_id: args.guild_id,
  });
  await userInfos.addUser({
    user_id: args.user_id,
    guild_id: args.guild_id,
    nonce: nonce,
  });
  ctx.body = new Resp({
    data: signature
  });
};

module.exports = {
  'POST /api/setInfo': setInfo,
  'POST /api/disconnectAccount': disconnectAccount,
};
'''
'''--- service/discord_actions/guildCreate/nepbot-join.js ---
const config = require('../../../pkg/utils/config');
const { MessageEmbed, MessageActionRow, MessageButton, Permissions } = require('discord.js');
const logger = require('../../../pkg/utils/logger');

const verifyNearEmbed = new MessageEmbed()
  .setColor('#0099ff')
  .setTitle('Verify your on-chain assets')
  .setDescription(`1. Click the button below.\n
  2. Click on "Verify".\n
  3. Confirm your Discord account and Server, and choose a Near wallet to verify.\n
  4. Connect to your wallet with limited permissions, and the page will be redirected to Discord.\n
  5. Successfully verified!\n 
  *This is a read-only connection. Do not share your private keys. We will never ask for your seed phrase. We will never DM you.*`);

const verifyNearButton = new MessageButton()
  .setCustomId('command.verify')
  .setLabel('Verify')
  .setStyle('SECONDARY');

const verifyNearAction = new MessageActionRow()
  .addComponents(verifyNearButton);

const execute = async guild => {
  try {
    const channelName = 'nepbot-join';

    const guildChannel = guild.channels.cache.find(channel =>
      channel.name == channelName,
    );

    if (guildChannel) {
      await guildChannel.permissionOverwrites.upsert(config.bot_appid, {
        allow: [Permissions.FLAGS.VIEW_CHANNEL],
      });
      const messages = await guildChannel.messages.fetch().then(msg => msg.filter(m => m.author.id === config.bot_appid));
      for (const _value of messages.values()) {
        _value.delete();
      }
      await guildChannel.send({ content: '\n', ephemeral:true, embeds:[verifyNearEmbed], components: [verifyNearAction] });
      return;
    }

    const channel = await guild.channels.create(channelName,
      { permissionOverwrites: [
        {
          id: guild.roles.everyone,
          allow: [Permissions.FLAGS.VIEW_CHANNEL],
          deny: [Permissions.FLAGS.SEND_MESSAGES],
        },
        {
          id: config.bot_appid,
          allow: [Permissions.FLAGS.VIEW_CHANNEL],
        },
      ] });
    await channel.send({ content: '\n', ephemeral:true, embeds:[verifyNearEmbed], components: [verifyNearAction] });
  }
  catch (e) {
    logger.error(e);
  }
};
module.exports = {
  execute,
};
'''
'''--- service/discord_actions/guildCreate/nepbot-settings.js ---
const config = require('../../../pkg/utils/config');
const { MessageEmbed, MessageActionRow, MessageButton, Permissions } = require('discord.js');
const logger = require('../../../pkg/utils/logger');
const setruleEmbed = new MessageEmbed()
  .setTitle('Set Rule For Roles')
  .setDescription('Click the button below to generate a link to the setrule page.')
  .setColor('PURPLE');

const setruleButton = new MessageButton()
  .setCustomId('command.setrule')
  .setLabel('Set Rule')
  .setStyle('SECONDARY');

const setruleAction = new MessageActionRow()
  .addComponents(setruleButton);

const createnftEmbed = new MessageEmbed()
  .setTitle('Manage NFT Collection')
  .setDescription('Click the button below to generate a link to the NFT collection page.')
  .setColor('PURPLE');

const createnftButton = new MessageButton()
  .setCustomId('command.createnft')
  .setLabel('Create NFT Collection')
  .setStyle('SECONDARY');

const createnftAction = new MessageActionRow()
  .addComponents(createnftButton);

const execute = async guild => {
  try {
  // create server owner channel
    const channelName = 'nepbot-settings';

    const guildChannel = guild.channels.cache.find(channel =>
      channel.name == channelName,
    );

    if (guildChannel) {
      await guildChannel.permissionOverwrites.upsert(config.bot_appid, {
        allow: [Permissions.FLAGS.ADMINISTRATOR],
      });
      const messages = await guildChannel.messages.fetch().then(msg => msg.filter(m => m.author.id === config.bot_appid));
      for (const _value of messages.values()) {
        _value.delete();
      }
      await guildChannel.send({ content: '\n', ephemeral:true, embeds:[setruleEmbed], components: [setruleAction] });
      await guildChannel.send({ content: '\n', ephemeral:true, embeds:[createnftEmbed], components: [createnftAction] });
      return;
    }

    const channel = await guild.channels.create(channelName,
      { permissionOverwrites: [
        {
          id: guild.roles.everyone,
          deny: [Permissions.FLAGS.VIEW_CHANNEL],
        },
        {
          id: config.bot_appid,
          allow: [Permissions.FLAGS.ADMINISTRATOR],
        },
      ] });
    await channel.send({ content: '\n', ephemeral:true, embeds:[setruleEmbed], components: [setruleAction] });
    await channel.send({ content: '\n', ephemeral:true, embeds:[createnftEmbed], components: [createnftAction] });
  }
  catch (e) {
    logger.error(e);
  }
};
module.exports = {
  execute,
};
'''
'''--- service/discord_actions/interactionCreate/against.js ---
const userInfos = require('../../../pkg/models/object/user_infos');
const astrodao_utils = require('../../../pkg/utils/astrodao_utils');
const config = require('../../../pkg/utils/config');
const nearUtils = require('../../../pkg/utils/near_utils');

const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const fields = interaction.message.embeds[0].fields;
  let contractAddress, proposalId;
  for (const field of fields) {
    if (config.fields.contract_address.findIndex(item => item == field.name) > -1) {
      contractAddress = field.value;
    }
    else if (config.fields.proposal_id.findIndex(item => item ==field.name) > -1) {
      proposalId = parseInt(field.value);
    }
  }
  const userId = interaction.user.id;
  const userInfo = await userInfos.getUser({
    guild_id: interaction.guildId,
    user_id: userId,
  });
  // if the user doesn't connect to any near wallet, it will reply the following content.
  if (!userInfo.near_wallet_id) {
    await interaction.reply({
      content:'You are not connected to any Near wallet.',
      ephemeral: true,
    });
    // break hear;
    return;
  }

  const vote = new MessageButton()
    .setStyle('LINK')
    .setLabel('vote');

  const content = new MessageEmbed();

  const action = new MessageActionRow()
    .addComponents(vote);

  // If the user already voted to with the proposal
  const policy = await astrodao_utils.getAstrodaoPolicy(contractAddress);
  const proposal = await astrodao_utils.getProposal(contractAddress, proposalId);
  const isAlreadyVote = await astrodao_utils.isAlreadyVote(proposal, userInfo.near_wallet_id);
  if (isAlreadyVote) {
    logger.info(`already voted. contract_address: ${contractAddress}, proposal_id: ${proposalId}, user_wallet: ${userInfo.near_wallet_id}`);
    content.setTitle('You already voted this proposal\n');
    await interaction.reply({
      content:'\n',
      ephemeral: true,
      embeds: [content],
    });
    return;
  }

  // Check the user whether have permission to vote.
  const afterProposal = await astrodao_utils.formatProposal(proposal);
  logger.debug(`afterProposal: ${JSON.stringify(afterProposal)}`);
  logger.debug(`policy: ${JSON.stringify(policy)}`);
  logger.debug(`near_wallet_id: ${userInfo.near_wallet_id}`);
  const checkPermission = await astrodao_utils.checkPermissions(policy, afterProposal, userInfo.near_wallet_id);
  logger.debug(`checkPermission: ${checkPermission}`);
  if (!checkPermission) {
    logger.info(`don't have permission. contract_address: ${contractAddress}, proposal_id: ${proposalId}, user_wallet: ${userInfo.near_wallet_id}`);
    content.setTitle('You don\'t have permission to vote this proposal\n');
    await interaction.reply({
      content:'\n',
      ephemeral: true,
      embeds: [content],
    });
    return;
  }
  // Generate sign and main info for the both of the button
  const nonce = Date.now();
  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  content.setDescription(`Confirm your vote **against** Proposal ${proposalId}`);

  const againstSign = await nearUtils.getSign({
    nonce: nonce,
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    proposal_id: proposalId,
    contract_addr: contractAddress,
    action: 'VoteReject',
  });
  const againstUrl = `${config.wallet_auth_url}/vote/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&proposal_id=${proposalId}&contract_address=${contractAddress}&action=VoteReject&sign=${againstSign}`;
  vote.setURL(againstUrl);
  logger.info(`${interaction.user.tag} in #${interaction.channel.name} generate an against button & url\n ${againstUrl}`);
  await interaction.reply({
    content:'\n',
    ephemeral: true,
    embeds: [content],
    components: [action],
  });
};

module.exports = {
  execute,
};

'''
'''--- service/discord_actions/interactionCreate/claim_ft.js ---
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const config = require('../../../pkg/utils/config');
const nearUtils = require('../../../pkg/utils/near_utils');
const airdropUtils = require('../../../pkg/utils/airdrop_utils');
const discordUtils = require('../../../pkg/utils/discord_utils');
const userInfos = require('../../../pkg/models/object/user_infos');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const button = new MessageButton()
    .setLabel('Claim')
    .setStyle('LINK');

  const action = new MessageActionRow()
    .addComponents(button);

  const userId = interaction.user.id;

  const embedMsg = await airdropUtils.formatFTEmbedMsg(interaction);
  const hash = embedMsg.hash
  const campaign = await airdropUtils.getCampaign(hash)

  if (!campaign) {
    return interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed()
        .setDescription('Campaign not found.')],
      ephemeral:true,
    });
  }

  if (await airdropUtils.checkIsClaimed(userId, hash)) {
    return interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed()
        .setDescription('You already claimed this FT.')],
      ephemeral:true,
    });
  }

  let is_in_role = false
  for (let roleId of campaign.role_ids) {
    if (roleId == interaction.guildId) {
      is_in_role = true
      break
    }
    if (await discordUtils.isMemberIncludeRole(interaction.guildId, userId, roleId)) {
      is_in_role = true
      break
    }
  }

  if (!is_in_role) {
    return interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed()
        .setDescription(`You are not in this role`).setColor('RED')],
      ephemeral:true,
    });
  }
  

  const nonce = Date.now();
  const sign = await nearUtils.getSign({
    nonce: nonce,
    user_id: userId,
    guild_id: interaction.guildId,
    hash: embedMsg.hash,
  });

  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  button.setURL(`${config.wallet_auth_url}/ft/claim/?user_id=${userId}&guild_id=${interaction.guildId}&hash=${embedMsg.hash}&sign=${sign}`);

  interaction.reply({
    content:'\n',
    embeds:[new MessageEmbed()
      .setDescription('Please use the button below to claim your token.').setColor('GREEN')],
    ephemeral:true,
    components:[action],
  });
};

module.exports = {
  execute,
};
'''
'''--- service/discord_actions/interactionCreate/claim_nft.js ---
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const config = require('../../../pkg/utils/config');
const nearUtils = require('../../../pkg/utils/near_utils');
const airdropUtils = require('../../../pkg/utils/airdrop_utils');
const discordUtils = require('../../../pkg/utils/discord_utils');
const userInfos = require('../../../pkg/models/object/user_infos');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const button = new MessageButton()
    .setLabel('Claim NFT')
    .setStyle('LINK');

  const action = new MessageActionRow()
    .addComponents(button);
  const userId = interaction.user.id;

  

  const embedMsg = await airdropUtils.formatNFTEmbedMsg(interaction);
  const hash = embedMsg.hash
  const campaign = await airdropUtils.getCampaign(hash)

  if (!campaign) {
    return interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed()
        .setDescription('Campaign not found.')],
      ephemeral:true,
    });
  }

  if (await airdropUtils.checkIsClaimed(userId, embedMsg.hash)) {
    return interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed()
        .setDescription('You already claimed this NFT.')],
      ephemeral:true,
    });
  }

  let is_in_role = false
  for (let role_id of campaign.role_ids) {
    if (roleId == interaction.guildId) {
      is_in_role = true
      break
    }
    if (await discordUtils.isMemberIncludeRole(interaction.guildId, userId, role_id)) {
      is_in_role = true
      break
    }
  }

  if (!is_in_role) {
    return interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed()
        .setDescription(`You are not in this role`).setColor('RED')],
      ephemeral:true,
    });
  }

  const nonce = Date.now();
  const sign = await nearUtils.getSign({
    nonce: nonce,
    user_id: userId,
    guild_id: interaction.guildId,
    hash: embedMsg.hash,
  });

  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  button.setURL(`${config.wallet_auth_url}/nftclaim/?user_id=${userId}&guild_id=${interaction.guildId}&hash=${embedMsg.hash}&sign=${sign}`);

  interaction.reply({
    content:'\n',
    embeds:[new MessageEmbed()
      .setDescription('Please use the button below to claim your NFT.').setColor('GREEN')],
    ephemeral:true,
    components:[action],
  });
};

module.exports = {
  execute,
};
'''
'''--- service/discord_actions/interactionCreate/disconnect_twitter.js ---
const { MessageEmbed } = require('discord.js');
const twitterUsers = require('../../../pkg/models/object/twitter_users');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const twitterUser = await twitterUsers.delete({ user_id: interaction.user.id });
  if (twitterUser) {
    logger.info(`user ${interaction.user.username} disconnect with twitter in ${interaction.guild.name}`);
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('🔌 Disconnect Twitter Success.').setColor('GREEN')],
      ephemeral:true,
    });
  }
  else {
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('You are not connect to any twitter account').setColor('RED')],
      ephemeral:true,
    });
  }
};

module.exports = {
  execute,
};
'''
'''--- service/discord_actions/interactionCreate/for.js ---
const userInfos = require('../../../pkg/models/object/user_infos');
const astrodao_utils = require('../../../pkg/utils/astrodao_utils');
const config = require('../../../pkg/utils/config');
const nearUtils = require('../../../pkg/utils/near_utils');

const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const fields = interaction.message.embeds[0].fields;
  let contractAddress, proposalId;
  for (const field of fields) {
    if (config.fields.contract_address.findIndex(item => item == field.name) > -1) {
      contractAddress = field.value;
    }
    else if (config.fields.proposal_id.findIndex(item => item == field.name) > -1) {
      proposalId = parseInt(field.value);
    }
  }
  const userId = interaction.user.id;
  const userInfo = await userInfos.getUser({
    guild_id: interaction.guildId,
    user_id: userId,
  });
  // if the user doesn't connect to any near wallet, it will reply the following content.
  if (!userInfo.near_wallet_id) {
    await interaction.reply({
      content:'You are not connected to any Near wallet.',
      ephemeral: true,
    });
    // break hear;
    return;
  }

  const vote = new MessageButton()
    .setStyle('LINK')
    .setLabel('👍 For');

  const content = new MessageEmbed();

  const action = new MessageActionRow()
    .addComponents(vote);

  // If the user already voted to with the proposal
  const policy = await astrodao_utils.getAstrodaoPolicy(contractAddress);
  const proposal = await astrodao_utils.getProposal(contractAddress, proposalId);
  const isAlreadyVote = await astrodao_utils.isAlreadyVote(proposal, userInfo.near_wallet_id);
  if (isAlreadyVote) {
    logger.info(`already voted. contract_address: ${contractAddress}, proposal_id: ${proposalId}, user_wallet: ${userInfo.near_wallet_id}`);
    content.setTitle('You already voted this proposal\n');
    await interaction.reply({
      content:'\n',
      ephemeral: true,
      embeds: [content],
    });
    return;
  }

  // Check the user whether have permission to vote.
  const afterProposal = await astrodao_utils.formatProposal(proposal);
  logger.debug(`afterProposal: ${JSON.stringify(afterProposal)}`);
  logger.debug(`policy: ${JSON.stringify(policy)}`);
  logger.debug(`near_wallet_id: ${userInfo.near_wallet_id}`);
  const checkPermission = await astrodao_utils.checkPermissions(policy, afterProposal, userInfo.near_wallet_id);
  logger.debug(`checkPermission: ${checkPermission}`);
  if (!checkPermission) {
    logger.info(`don't have permission. contract_address: ${contractAddress}, proposal_id: ${proposalId}, user_wallet: ${userInfo.near_wallet_id}`);
    content.setTitle('You don\'t have permission to vote this proposal\n');
    await interaction.reply({
      content:'\n',
      ephemeral: true,
      embeds: [content],
    });
    return;
  }
  // Generate sign and main info for the both of the button
  const nonce = Date.now();
  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  const approveSign = await nearUtils.getSign({
    nonce: nonce,
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    proposal_id: proposalId,
    contract_addr: contractAddress,
    action: 'VoteApprove',
  });
  content.setDescription(`Confirm your vote **for** Proposal ${proposalId}`);
  const approveUrl = `${config.wallet_auth_url}/vote/?user_id=${interaction.user.id}&guild_id=${interaction.guildId}&proposal_id=${proposalId}&contract_address=${contractAddress}&action=VoteApprove&sign=${approveSign}`;
  vote.setURL(approveUrl);
  logger.info(`${interaction.user.tag} in #${interaction.channel.name} generate an approve button & url\n ${approveUrl}`);

  await interaction.reply({
    content:'\n',
    ephemeral: true,
    embeds: [content],
    components: [action],
  });
};

module.exports = {
  execute,
};

'''
'''--- service/discord_actions/interactionCreate/redeem_ft.js ---
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const config = require('../../../pkg/utils/config');
const nearUtils = require('../../../pkg/utils/near_utils');
const airdropUtils = require('../../../pkg/utils/airdrop_utils');
const userInfos = require('../../../pkg/models/object/user_infos');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const button = new MessageButton()
    .setLabel('Redeem')
    .setStyle('LINK');

  const action = new MessageActionRow()
    .addComponents(button);
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
  if (userId != ownerId) {
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('This command can only be used by server owner.').setColor('RED')],
      ephemeral:true,
    });
  }

  const embedMsg = await airdropUtils.formatFTEmbedMsg(interaction);

  const nonce = Date.now();
  const sign = await nearUtils.getSign({
    nonce: nonce,
    user_id: userId,
    guild_id: interaction.guildId,
    hash: embedMsg.hash,
  });

  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });
  button.setURL(`${config.wallet_auth_url}/ft/redeem/?user_id=${userId}&guild_id=${interaction.guildId}&hash=${embedMsg.hash}&sign=${sign}`);

  interaction.reply({
    content:'\n',
    embeds:[new MessageEmbed()
      .setDescription('Please use the button below to redeem your token.')],
    ephemeral:true,
    components:[action],
  });
};

module.exports = {
  execute,
};
'''
'''--- service/discord_actions/interactionCreate/redeem_nft.js ---
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const config = require('../../../pkg/utils/config');
const nearUtils = require('../../../pkg/utils/near_utils');
const airdropUtils = require('../../../pkg/utils/airdrop_utils');
const userInfos = require('../../../pkg/models/object/user_infos');
const logger = require('../../../pkg/utils/logger');

const execute = async interaction => {
  const button = new MessageButton()
    .setLabel('Redeem NFT')
    .setStyle('LINK');

  const action = new MessageActionRow()
    .addComponents(button);
  const { ownerId } = interaction.guild;
  const userId = interaction.user.id;
  if (userId != ownerId) {
    return await interaction.reply({
      content:'\n',
      embeds:[new MessageEmbed().setDescription('This command can only be used by server owner.').setColor('RED')],
      ephemeral:true,
    });
  }
  const embedMsg = await airdropUtils.formatNFTEmbedMsg(interaction);

  const nonce = Date.now();
  const sign = await nearUtils.getSign({
    nonce: nonce,
    user_id: userId,
    guild_id: interaction.guildId,
    hash: embedMsg.hash,
  });

  await userInfos.addUser({
    user_id: interaction.user.id,
    guild_id: interaction.guildId,
    nonce: nonce,
  });

  button.setURL(`${config.wallet_auth_url}/nftredeem/?user_id=${userId}&guild_id=${interaction.guildId}&hash=${embedMsg.hash}&sign=${sign}`);

  interaction.reply({
    content:'\n',
    embeds:[new MessageEmbed()
      .setDescription('Please use the button below to redeem Nepbot permission.')],
    ephemeral:true,
    components:[action],
  });
};

module.exports = {
  execute,
};
'''
'''--- service/discord_actions/interactionCreate/verify_twitter.js ---
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const discordUtils = require('../../../pkg/utils/discord_utils');
const twitterUtils = require('../../../pkg/utils/twitter_utils');
const twitterUsers = require('../../../pkg/models/object/twitter_users');
const logger = require('../../../pkg/utils/logger');

const button = new MessageButton()
  .setLabel('Connect Twitter')
  .setStyle('LINK');

const action = new MessageActionRow()
  .addComponents(button);

const execute = async interaction => {
  const twitterUser = await twitterUsers.get({ user_id: interaction.user.id });
  let userClient;
  try {
    if (twitterUser && twitterUser.access_token) {
      userClient = await twitterUtils.getClient(interaction.user.id);
      await interaction.reply({
        content: '\n',
        embeds:[new MessageEmbed()
          .setDescription(`🟢Twitter Connected
          Nepbot is checking whether you are eligible for the rule. It usually will take a few seconds.
          The role will be assigned to you if you satisfy the requirement.`)],
        ephemeral:true });

      const embed = new MessageEmbed();
      const results = await twitterUtils.verifyRuleFromInteraction(userClient, interaction);
      results.forEach(r => embed.addFields(r));
      await interaction.followUp({
        content: '\n',
        embeds:[embed],
        ephemeral:true,
      });
      return;
    }
    button.setURL(await twitterUtils.generateOAuthLink(interaction));
    // replay message to discord user
    await interaction.reply({ content: '\n',
      ephemeral:true,
      embeds:[new MessageEmbed()
        .setColor('#0099ff')
        .setTitle('Connect Twitter Account')
        .setDescription(`🔴 Twitter Not Connected\n
      You haven't connected to your twitter account.\n
      Click the button below to connect. You'll be directed to twitter to authorize Nepbot.\n
      Once finished, Nepbot will automatically verify if you meet the requirements and assign the role accordingly.`)],
      components: [action],
    });
  }
  catch (e) {
    logger.error(e);
    await twitterUsers.delete({ user_id: interaction.user.id }).then(logger.info(`delete twitter_user in verify_twitter ${JSON.stringify(twitterUser)}`));
    button.setURL(await twitterUtils.generateOAuthLink(interaction));
    // replay message to discord user
    await interaction.reply({ content: '\n', ephemeral:true, embeds:[new MessageEmbed()
      .setDescription('Because of the Twitter API problem, Nepbot can\'t get the Twitter client.\n Please use the button blow to reverify your twitter.')], components: [action] });
  }
};

module.exports = {
  execute,
};
'''
'''--- service/discord_bot.js ---
// get the app root path
const appRoot = require('app-root-path');
const config = require('../pkg/utils/config');
const commands_dir = `${ appRoot }/service/commands`;
const events_dir = `${ appRoot }/service/events`;
// require logger
const logger = require('../pkg/utils/logger');

const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');

const fs = require('node:fs');
// Require the necessary discord.js classes
const { Client, Intents, Collection } = require('discord.js');
const intents = [ Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MEMBERS] //Intents.FLAGS.GUILD_PRESENCES];
// Create a new client instance
const client = new Client({ intents: intents });

// commands
client.commands = new Collection();
const commandFiles = fs.readdirSync(commands_dir).filter(file => file.endsWith('.js'));
const commands = [];

for (const file of commandFiles) {
  const command = require(`${commands_dir}/${file}`);
  // Set a new item in the Collection
  // With the key as the command name and the value as the exported module
  client.commands.set(command.data.name, command);
  commands.push(command.data.toJSON());
}

const rest = new REST({ version: '9' }).setToken(config.bot_token);

rest.put(Routes.applicationCommands(config.bot_appid), { body: commands })
  .then(() => logger.info('Successfully registered application commands.'))
  .catch(logger.error);

client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand()) return;

  const command = client.commands.get(interaction.commandName);

  if (!command) return;

  try {
    await command.execute(interaction);
  }
  catch (error) {
    logger.error(error);
    await interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true });
  }
});

// events
const eventFiles = fs.readdirSync(events_dir).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
  const event = require(`${events_dir}/${file}`);
  if (event.once) {
    client.once(event.name, (...args) => event.execute(...args));
  }
  else {
    client.on(event.name, (...args) => event.execute(...args));
  }
}
client.login(config.bot_token);
// Login to Discord with your client's token
module.exports = client;
'''
'''--- service/events/guildCreate.js ---
// get the app root path
const appRoot = require('app-root-path');
const actions_dir = `${ appRoot }/service/discord_actions/guildCreate`;
// require logger
const logger = require('../../pkg/utils/logger');

const fs = require('node:fs');
// actions
const actionFiles = fs.readdirSync(actions_dir).filter(file => file.endsWith('.js'));

const guildDeletes = require('../../pkg/models/object/guild_deletes');
const schedule = require('node-schedule');

const execute = async guild => {

  for (const file of actionFiles) {
    const action = require(`${actions_dir}/${file}`);
    await action.execute(guild).then(logger.info(`execute the actions in ${actions_dir}/${file}`)).catch(e => logger.error(e));
  }

  /**
   * find the table guild_deletes have the data need to be delete and cancel the job in schedule.
   */
  try {
    if (await guildDeletes.get({ guild_id: guild.id })) {
      await guildDeletes.delete({
        guild_id: guild.id,
      });
      const job = schedule.scheduledJobs[guild.id];
      job.cancel();
      logger.info(`the guild: ${guild.id} reinvite nepbot, so cancel the job: ${job.name}`);
    }
  }
  catch (e) {
    logger.error(e);
  }
};

module.exports = {
  name: 'guildCreate',
  execute,
};

'''
'''--- service/events/guildDelete.js ---
const logger = require('../../pkg/utils/logger');
const guildDeletes = require('../../pkg/models/object/guild_deletes');
const userInfos = require('../../pkg/models/object/user_infos');
const timeUtils = require('../../pkg/utils/time_utils');
const schedule = require('node-schedule');

const EXPIRED_DAY = 15; // days

const execute = async guild => {
  /**
   * when bot got kick or ban, the data in database will save @EXPIRED_DAY days, the following code will create a schedule job to delete data after that days
   */
  try {
    if (await guildDeletes.get({ guild_id: guild.id })) {
      await guildDeletes.delete({
        guild_id: guild.id,
      });
      const job = schedule.scheduledJobs[guild.id];
      job.cancel();
      logger.info('guildDelete event triggered, find duplicate in guildDeletes table.');
      logger.info(`remove ${guild.id} data in guildDeletes & cancel the job: ${job.name}`);
    }

    const expiredAt = await timeUtils.getExpiredTimeByDay(EXPIRED_DAY);
    await guildDeletes.add({
      guild_id: guild.id,
      expired_at: expiredAt,
    });
    const job = schedule.scheduleJob(guild.id, expiredAt, function() {
      deleteData(guild.id);
    });
    logger.info(`create new guild deletes schedule job, name: ${job.name} run at ${expiredAt}`);
  }
  catch (e) {
    logger.error(e);
  }
};

function deleteData(guildId) {
  userInfos.deleteUser({
    guild_id: guildId,
  }).then(logger.info(`delete all data in user_infos, guild_id: ${guildId} `));
  guildDeletes.delete({
    guild_id: guildId,
  }).then(logger.info(`delete data in guild_deletes, guild_id: ${guildId}`));
}

module.exports = {
  name: 'guildDelete',
  execute,
  deleteData,
};
'''
'''--- service/events/guildMemberAdd.js ---
const logger = require('../../pkg/utils/logger');

const execute = async member => {
  logger.info(`New member joined id: ${member.id}, guild: ${member.guild.id} `);
};

module.exports = {
  name: 'guildMemberAdd',
  execute,
};
'''
'''--- service/events/guildMemberRemove.js ---
const logger = require('../../pkg/utils/logger');
const userInfos = require('../../pkg/models/object/user_infos');
const twitterUsers = require('../../pkg/models/object/twitter_users');

const execute = async member => {
  try {
    const userInfo = await userInfos.getUser({
      guild_id: { $ne: member.guild.id },
      user_id: member.id,
    });
    if (!userInfo) {
      await twitterUsers.delete({ user_id: member.id });
    }
    await userInfos.deleteUser({ user_id: member.id, guild_id: member.guild.id }).then(logger.info(`member remove in database&guild id: ${member.id}, guild: ${member.guild.id}`));
  }
  catch (e) {
    logger.error(e);
  }
};

module.exports = {
  name: 'guildMemberRemove',
  execute,
};
'''
'''--- service/events/interactionCreate.js ---
// get the app root path
const appRoot = require('app-root-path');
const commands = `${ appRoot }/service/commands`;
const actions = `${ appRoot }/service/discord_actions/interactionCreate`;
const logger = require('../../pkg/utils/logger');

const execute = async interaction => {
  if (interaction.isButton()) {
    const buttonInfo = interaction.customId.split('.');
    /**
		 * The buttonInfo on above which reference to the customId in discord_actions dir when setting button start with command, it will run the command in the commands dir.
		 * It is important that don't forget to verify the customId in discord_actions same with the file in commands dir.
		 * Like command.verify, it means this action is a command and already write in the commands dir named verify.js
		 */
    if (buttonInfo[0] === 'command') {
      const commandFile = require(`${ commands }/${ buttonInfo[1] }.js`);
      commandFile.execute(interaction);
    }
    /**
		* If there is a action that is not a command, then you can add this action in the discord_actions/interactionCreate.
		* Please don't forget to set the customId start with "action" and use a "." to sepreate the action when set a button.
		* Like action.name, it means this action is not a command and it can't find in the command file, so you should creat this action in discord_actions/interactionCreate.
		*/
    else if (buttonInfo[0] === 'action') {
      const actionFile = require(`${ actions }/${ buttonInfo[1] }.js`);
      actionFile.execute(interaction);
    }
    logger.info(`${interaction.user.tag} in #${interaction.channel.name} triggered an button interaction with ${buttonInfo[0]}.${ buttonInfo[1] }`);
    return;
  }
  else if (interaction.isSelectMenu()) {
    /**
     * same concept with button
     */
    const selectMenuInfo = interaction.customId.split('.');
    if (selectMenuInfo[0] === 'action') {
      const actionFile = require(`${ actions }/${ selectMenuInfo[1] }.js`);
      actionFile.execute(interaction);
    }
    logger.info(`${interaction.user.tag} in #${interaction.channel.name} triggered an select menu interaction with ${selectMenuInfo[0]}.${ selectMenuInfo[1] }`);
    return;
  }
  logger.info(`${interaction.user.tag} in #${interaction.channel.name} triggered an interaction.`);
};

module.exports = {
  name: 'interactionCreate',
  execute,
};
'''
'''--- service/events/ready.js ---
const logger = require('../../pkg/utils/logger');
module.exports = {
  name: 'ready',
  once: true,
  execute(client) {
    logger.info(`Ready! Logged in as ${client.user.tag}`);
  },
};
'''
'''--- service/schedule_task.js ---
const logger = require('../pkg/utils/logger');
const config = require('../pkg/utils/config');
const schedule = require('node-schedule');
const guildDelete = require('../service/events/guildDelete');
const guildDeletes = require('../pkg/models/object/guild_deletes');
const userDisconnects = require('../pkg/models/object/user_disconnects');
const userUtils = require('../pkg/utils/user_utils');
// Task
const balanceTask = require('./schedule_tasks/balance_task');
const ntfTask = require('./schedule_tasks/nft_task');
const octTask = require('./schedule_tasks/oct_task');
const oct2Task = require('./schedule_tasks/oct_2_task')
const parasTask = require('./schedule_tasks/paras_task');
const tokenTask = require('./schedule_tasks/token_task');
const updateGuildTask = require('./schedule_tasks/update_guild_task');
const astrodaoTask = require('./schedule_tasks/astrodao_task');
const { provider } = require('../pkg/utils/near_utils');
const twitterTask = require('./schedule_tasks/twitter_task');
const { startStream } = require('../pkg/utils/block_stream');
const parasLoyaltyTask = require('./schedule_tasks/paras_loyalty_task');
const redis = require("../pkg/utils/redis")

let showLog = false

async function resolveShard(shard) {
  try {
    let promises = []
    for (let receiptItem of shard.receipt_execution_outcomes) {
      const receipt = receiptItem.receipt
      let receiptId = receipt.receipt_id
      let tx = redis.getTxByReceipt(receiptId)
      if (!tx) {
          console.log("tx not found for ", receiptId)
          continue
      }
      let outcome = receiptItem.execution_outcome
      tx.outcome.execution_outcome.outcome.receipt_ids = tx.outcome.execution_outcome.outcome.receipt_ids.filter(receiptId => receiptId != receipt.receipt_id).concat(outcome.outcome.receipt_ids)
      if (tx.outcome.execution_outcome.outcome.receipt_ids.length <= 0) {
          redis.delTx(tx)
      } else {
          redis.setTx(tx)
      }
    }

    promises.push(updateGuildTask(shard.chunk.receipts));
    promises.push(tokenTask(shard.chunk.receipts));
    promises.push(balanceTask(shard.chunk.receipts));
    promises.push(octTask(shard.chunk.receipts));
    promises.push(oct2Task(shard.chunk.receipts));
    promises.push(ntfTask(shard.chunk.receipts, shard.receipt_execution_outcomes));
    promises.push(parasTask(shard.chunk.receipts, shard.receipt_execution_outcomes));
    promises.push(astrodaoTask(shard.chunk.receipts));
    await Promise.all(promises);
  } catch (e) {
      console.log(e)
  }
}

function resolveTxs(transactions, blockHeight) {
  for (const tx of transactions) {
      tx.blockHeight = blockHeight
      redis.setTx(tx)
  }
}

const resolveNewBlock = async (fromBlockHeight) => {
  const lakeConfig = {
    ...config.near_lake_config,
    startBlockHeight: fromBlockHeight,
    endBlockHeight: 0
  }

  await startStream(lakeConfig, handleStreamerMessage);
};

async function handleStreamerMessage(streamerMessage) {
  if (showLog) {
    console.log(`fetched block height: ${streamerMessage.block.header.height}`);
  }

  const promises = [];
  for (const shard of streamerMessage.shards) {
      if (shard.chunk && shard.receipt_execution_outcomes) {
          resolveTxs(shard.chunk.transactions, streamerMessage.block.header.height)
          promises.push(resolveShard(shard, streamerMessage.block));
      }

  }
  await Promise.allSettled(promises);
}

module.exports.scheduleTask = async function(fromBlockHeight = 0) {

  if (fromBlockHeight > 0) {
    showLog = true
    resolveNewBlock(fromBlockHeight);
  }
  else {
    schedule.scheduleJob('*/1 * * * * *', function() {
      twitterTask.refreshToken();
    });
    schedule.scheduleJob('*/5 * * * * *', function() {
      parasLoyaltyTask.checkLevel();
      parasLoyaltyTask.checkStaking();
    });
    let unresolvedBlockHeight = await redis.init()
    const newestBlock = await provider.block({ finality: 'optimistic' });
    if (unresolvedBlockHeight != 0) {
      unresolvedBlockHeight = Math.min(newestBlock.header.height, unresolvedBlockHeight)
    } else {
      unresolvedBlockHeight = newestBlock.header.height
    }
    resolveNewBlock(unresolvedBlockHeight);
  }
};

/**
 * when start the nepbot, this function will get data from guild_deletes, and then create schedule jobs for each guild in database.
 */
exports.guildDeleteTask = async function() {
  const listGDs = await guildDeletes.list();
  if (listGDs) {
    for (const gd of listGDs) {
      const job = schedule.scheduleJob(gd.guild_id, gd.expired_at, function() {
        guildDelete.deleteData(gd.guild_id);
      });
      logger.info(`create new guild deletes schedule job, name: ${job.name} run at ${gd.expired_at}`);
    }
  }
};

/**
 * when start the nepbot, this function will get data from user_disconnect, and then create schedule jobs for each user in database.
 */
exports.userDisconnectTask = async function() {
  const listUDs = await userDisconnects.list();
  if (listUDs) {
    for (const ud of listUDs) {
      const jobName = ud.user_id + '-' + ud.guild_id;
      const job = schedule.scheduleJob(jobName, ud.expired_at, function() {
        userUtils.deleteData(ud.user_id, ud.guild_id);
      });
      logger.info(`create new user disconnect schedule job, name: ${job.name} run at ${ud.expired_at}`);
    }
  }
};
'''
'''--- service/schedule_tasks/astrodao_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');

const astrodao_task = async function(receipts) {
  const allFieldList = await userFields.getUserFields({
    key: 'astrodao_id',
  });
  const allDaoList = [];
  for (const field of allFieldList) {
    allDaoList.push(field.value);
  }
  const actions = await contractUtils.filterAstroDaoMemberActions(allDaoList, receipts);
  for (const action of actions) {
    const mapAstrodaoDiscord = await assembleMap(action);
    /**
     * mapAstrodaoDiscord =
     *{
     *  dao_id: 'jacktest.sputnikv2.testnet',
     *  member_id: 'jacktest2.testnet',
     *  role: 'community',
     *  action: 'remove' or 'add',
     *  contract_infos: [
     *    {
     *      guild_id: '966966468774350948',
     *      roles: [
     *        {"role_id":"1003208013684940833","role":"community"},
     *        {"role_id":"1003208013684940833","role":"council"},
     *        {"role_id":"1004439142899396638","role":"community"}]
     *    }
     *  ]
     *}
     */
    for (const _conInfos of mapAstrodaoDiscord.contract_infos) {
      // check the user whether verified
      const userInfo = await getMemberInDatabase(_conInfos.guild_id, mapAstrodaoDiscord.member_id);
      if (userInfo == null) {
        logger.debug(`the ${ mapAstrodaoDiscord.member_id } haven't join this guild ${ _conInfos.guild_id }`);
        continue;
      }
      // get member in discord guild
      const memberInGuild = await discordUtils.getMemberInGuild(_conInfos.guild_id, userInfo.user_id);
      // check the user whether in other group on Astrodao
      for (const role of _conInfos.roles) {
        try {
          // if the action is remove
          if (mapAstrodaoDiscord.action == 'remove' && memberInGuild.roles.cache.some(r => r.id === role.role_id)) {
            await memberInGuild.roles.remove(role.role_id).then(logger.info(`${memberInGuild.user.username} remove role_id ${role} in astrodao_task`)).catch(e => logger.error(e));
          }
          // if the action is add
          else if (mapAstrodaoDiscord.action == 'add' && !memberInGuild.roles.cache.some(r => r.id === role.role_id)) {
            await memberInGuild.roles.add(role.role_id).then(logger.info(`${memberInGuild.user.username} add role_id ${role} in astrodao_task`)).catch(e => logger.error(e));
          }
        }
        catch (e) {
          continue;
        }
      }
    }
  }
};

async function assembleMap(action) {
  // action = {dao_id: "xxxxxxxxx.sputnikv2.testnet", kind: {RemoveMemberFromRole: { member_id: 'member_id', role: 'council' }}}
  const result = {};
  result.dao_id = action.dao_id;
  if ('RemoveMemberFromRole' in action.kind) {
    result.member_id = action.kind.RemoveMemberFromRole.member_id;
    result.action = 'remove';
    result.role = action.kind.RemoveMemberFromRole.role;
  }
  else if ('AddMemberToRole' in action.kind) {
    result.member_id = action.kind.AddMemberToRole.member_id;
    result.action = 'add';
    result.role = action.kind.AddMemberToRole.role;
  }
  result.contract_infos = [];
  const rules = await contractUtils.getRulesByField('astrodao_id', action.dao_id);
  for (const rule of rules) {
    const data = { guild_id:rule.guild_id, roles:[ { role_id: rule.role_id, role: rule.fields.astrodao_role } ] };
    const index = result.contract_infos.findIndex(guild => guild.guild_id == rule.guild_id);
    if (index > -1) {
      result.contract_infos[index].roles.push({ role_id: rule.role_id, role: rule.fields.astrodao_role });
      continue;
    }
    result.contract_infos.push(data);
  }
  logger.debug(JSON.stringify(result));
  return result;
}

async function getMemberInDatabase(guildId, nearWalletId) {
  const userInfo = userInfos.getUser({
    guild_id: guildId,
    near_wallet_id: nearWalletId,
  });
  return userInfo;
}
module.exports = astrodao_task;
'''
'''--- service/schedule_tasks/balance_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');
const BN = require('bn.js');

const balance_task = async function(receipts) {
  const _userFields = await userFields.getUserFields({
    key: 'near',
  });
  let _accountIds = [];
  _userFields.forEach(item => _accountIds.push(item.near_wallet_id));
  const _actions = await contractUtils.filterTransferActions(_accountIds, receipts);
  _accountIds = [];
  for (const action of _actions) {
    _accountIds.push(action.account_id);
  }
  // logger.debug(`accountIds: ${_accountIds}`);
  const rolesByField = await contractUtils.getRulesByField('near', 'balance');
  const guild_ids = [];
  const guildMap = {};
  rolesByField.forEach(item => {
    guild_ids.push(item.guild_id);
    if (!guildMap[item.guild_id]) {
      guildMap[item.guild_id] = [];
    }
    guildMap[item.guild_id].push(item);
  });

  const _userInfos = await userInfos.getUsers({
    guild_id: guild_ids,
    near_wallet_id: _accountIds,
  });
  for (const _userInfo of _userInfos) {
    const member = await discordUtils.getMember(_userInfo.guild_id, _userInfo.user_id);
    const roles = [];
    const delRoles = [];
    for (const rule of guildMap[_userInfo.guild_id]) {
      const balance = await contractUtils.getNearBalanceOf(_userInfo.near_wallet_id);
      const stakingBalance = await contractUtils.getStakingBalance(_userInfo.near_wallet_id);
      const totalBalance = new BN(balance).add(new BN(stakingBalance));
      if (!member._roles.includes(rule.role_id) && totalBalance.cmp(new BN(rule.fields.balance)) != -1) {
        roles.push(rule.role_id);
      }
      if (member._roles.includes(rule.role_id) && totalBalance.cmp(new BN(rule.fields.balance)) == -1) {
        delRoles.push(rule.role_id);
      }
    }
    for (const role of roles) {
      try {
        await member.roles.add(role).then(logger.info(`${member.user.username} add role_id ${role} in balance_task`));
      }
      catch (e) {
        continue;
      }
    }

    for (const role of delRoles) {
      try {
        await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role} in balance_task`));
      }
      catch (e) {
        continue;
      }
    }
  }
};

module.exports = balance_task;
'''
'''--- service/schedule_tasks/nft_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');
const BN = require('bn.js');

const nft_task = async function(receipts, receiptOutcomes) {
  const allFieldList = await userFields.getUserFields({
    key: 'nft_contract_id',
  });
  const allContractList = [];
  for (const field of allFieldList) {
    allContractList.push(field.value);
  }
  const actions = await contractUtils.filterNftActions(allContractList, receipts, receiptOutcomes);
  const accountIdList = [];
  const contractList = [];
  for (const action of actions) {
    accountIdList.push(action.sender_id);
    accountIdList.push(action.receiver_id);
    contractList.push(action.contract_id);
  }

  const userTokens = await userFields.getUserFields({
    key: 'nft_contract_id',
    near_wallet_id: accountIdList,
    value: contractList,
  });
  for (const userToken of userTokens) {
    const rolesByField = await contractUtils.getRulesByField('nft_contract_id', userToken.value);
    const guild_ids = [];
    rolesByField.forEach(item => {
      guild_ids.push(item.guild_id);
    });
    const _userInfos = await userInfos.getUsers({
      guild_id: guild_ids,
      near_wallet_id: userToken.near_wallet_id,
    });
    const newAmount = await contractUtils.getNftCountOf(userToken.value, userToken.near_wallet_id);

    for (const _userInfo of _userInfos) {
      const member = await discordUtils.getMember(_userInfo.guild_id, _userInfo.user_id);
      const guildRoles = rolesByField.filter(role => role.guild_id == _userInfo.guild_id);

      const roles = [];
      const delRoles = [];
      for (const { fields, role_id, key_field } of guildRoles) {
        if (key_field[0] != 'nft_contract_id' && key_field[1] != userToken.value) {
          continue;
        }
        if (!member._roles.includes(role_id) && new BN(newAmount).cmp(new BN(fields.token_amount)) != -1) {
          roles.push(role_id);
        }
        if (member._roles.includes(role_id) && new BN(newAmount).cmp(new BN(fields.token_amount)) == -1) {
          delRoles.push(role_id);
        }
      }

      for (const role of roles) {
        try {
          await member.roles.add(role).then(logger.info(`${member.user.username} add role_id ${role} in nft_task`));
        }
        catch (e) {
          continue;
        }
      }

      for (const role of delRoles) {
        try {
          await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role} in nft_task`));
        }
        catch (e) {
          continue;
        }

      }
    }
  }
};

module.exports = nft_task;
'''
'''--- service/schedule_tasks/oct_2_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');
const oct_task = async function(receipts) {
  const actions = contractUtils.filterOct2Actions(receipts);
  const accountIdList = [];
  for (const action of actions) {
    accountIdList.push(action.signer_id);
  }
  const _userFields = await userFields.getUserFields({
    key: 'appchain_id',
    near_wallet_id: {
      $in: accountIdList,
    },
  });
  

  for (const _userField of _userFields) {
    const octRole = await contractUtils.getOct2Role(_userField.near_wallet_id);
    const rolesByField = await contractUtils.getRulesByField('appchain_id', _userField.value);
    const guild_ids = [];
    rolesByField.forEach(item => {
      guild_ids.push(item.guild_id);
    });

    const _userInfos = await userInfos.getUsers({
      guild_id: guild_ids,
      near_wallet_id: _userField.near_wallet_id,
    });
    for (const _userInfo of _userInfos) {
      const member = await discordUtils.getMember(_userInfo.guild_id, _userInfo.user_id);
      const guildRoles = rolesByField.filter(role => role.guild_id == _userInfo.guild_id);

      const roles = [];
      const delRoles = [];
      for (const { fields, role_id, key_field } of guildRoles) {
        if (key_field[0] != 'appchain_id') {
          continue;
        }
        if (!member._roles.includes(role_id) && octRole == fields.oct_role) {
          roles.push(role_id);
        }

        if (member._roles.includes(role_id) && octRole != fields.oct_role) {
          delRoles.push(role_id);
        }
      }
      for (const role of roles) {
        try {
          await member.roles.add(role).then(logger.info(`${member.user.username} add role_id ${role} in oct_task`));
        }
        catch (e) {
          continue;
        }
      }

      for (const role of delRoles) {
        try {
          await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role} in oct_task`));
        }
        catch (e) {
          continue;
        }

      }
    }
  }
};

module.exports = oct_task;
'''
'''--- service/schedule_tasks/oct_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');
const oct_task = async function(receipts) {
  const actions = contractUtils.filterOctActions(receipts);
  const accountIdList = [];
  const appchainIdList = [];
  for (const action of actions) {
    appchainIdList.push(action.appchain_id);
    accountIdList.push(action.signer_id);
  }

  const _userFields = await userFields.getUserFields({
    key: 'appchain_id',
    near_wallet_id: {
      $in: accountIdList,
    },
    value: appchainIdList,
  });

  for (const _userField of _userFields) {
    const octRole = await contractUtils.getOctAppchainRole(_userField.value, _userField.near_wallet_id);
    const rolesByField = await contractUtils.getRulesByField('appchain_id', _userField.value);
    const guild_ids = [];
    rolesByField.forEach(item => {
      guild_ids.push(item.guild_id);
    });

    const _userInfos = await userInfos.getUsers({
      guild_id: guild_ids,
      near_wallet_id: _userField.near_wallet_id,
    });
    for (const _userInfo of _userInfos) {
      const member = await discordUtils.getMember(_userInfo.guild_id, _userInfo.user_id);
      const guildRoles = rolesByField.filter(role => role.guild_id == _userInfo.guild_id);

      const roles = [];
      const delRoles = [];
      for (const { fields, role_id, key_field } of guildRoles) {
        if (key_field[0] != 'appchain_id' || key_field[1] != _userField.value) {
          continue;
        }
        if (!member._roles.includes(role_id) && octRole == fields.oct_role) {
          roles.push(role_id);
        }

        if (member._roles.includes(role_id) && octRole != fields.oct_role) {
          delRoles.push(role_id);
        }
      }
      for (const role of roles) {
        try {
          await member.roles.add(role).then(logger.info(`${member.user.username} add role_id ${role} in oct_task`));
        }
        catch (e) {
          continue;
        }
      }

      for (const role of delRoles) {
        try {
          await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role} in oct_task`));
        }
        catch (e) {
          continue;
        }

      }
    }
  }
};

module.exports = oct_task;
'''
'''--- service/schedule_tasks/paras_loyalty_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const logger = require('../../pkg/utils/logger');
const userInfos = require('../../pkg/models/object/user_infos');
const discordUtils = require('../../pkg/utils/discord_utils');
const userUtils = require('../../pkg/utils/user_utils');

exports.checkLevel = async () => {
  // logger.debug(`accountIds: ${_accountIds}`);
  const rules = await contractUtils.getRulesByField('gating_rule', 'Loyalty Level');
  for (const rule of rules) {
    const listUserInfos = await userInfos.getUsers({
      guild_id: rule.guild_id,
      near_wallet_id:  { $ne: null },
    });
    for (const userInfo of listUserInfos) {
      try {
        const member = await discordUtils.getMember(userInfo.guild_id, userInfo.user_id);
        const isMemberSatisfyRule = await userUtils.isMemberSatisfyRule(userInfo.near_wallet_id, rule);
        const isMemberIncludeRole = await discordUtils.isMemberIncludeRole(rule.guild_id, userInfo.user_id, rule.role_id);
        if (isMemberSatisfyRule && !isMemberIncludeRole) {
          await member.roles.add(rule.role_id).then(logger.info(`${member.user.username} add role_id ${rule.role_id} in paras_loyalty_task.checkLevel`));
        }
        else if (!isMemberSatisfyRule && isMemberIncludeRole) {
          const rulesInGuild = await contractUtils.getRules(rule.guild_id).then(r => r.filter(e => e.role_id === rule.role_id));
          for (const ruleInGuild of rulesInGuild) {
            const isMemberSatisfyOtherRule = await userUtils.isMemberSatisfyRule(userInfo.near_wallet_id, ruleInGuild);
            if (isMemberSatisfyOtherRule) {
              return;
            }
          }
          logger.debug(`unsatisfying the ${rule.fields.loyalty_level} rule walletId: ${userInfo.near_wallet_id}`);
          await member.roles.remove(rule.role_id).then(logger.info(`${member.user.username} remove role_id ${rule.role_id} in paras_loyalty_task.checkLevel`));
        }
      }
      catch (e) {
        //logger.error(e);
      }
    }
  }
};

exports.checkStaking = async () => {
  // logger.debug(`accountIds: ${_accountIds}`);
  const rules = await contractUtils.getRulesByField('gating_rule', 'Paras Staking');
  for (const rule of rules) {
    const listUserInfos = await userInfos.getUsers({
      guild_id: rule.guild_id,
      near_wallet_id:  { $ne: null },
    });
    for (const userInfo of listUserInfos) {
      try {
        const member = await discordUtils.getMember(userInfo.guild_id, userInfo.user_id);
        const isMemberSatisfyRule = await userUtils.isMemberSatisfyRule(userInfo.near_wallet_id, rule);
        const isMemberIncludeRole = await discordUtils.isMemberIncludeRole(rule.guild_id, userInfo.user_id, rule.role_id);
        if (isMemberSatisfyRule && !isMemberIncludeRole) {
          await member.roles.add(rule.role_id).then(logger.info(`${member.user.username} add role_id ${rule.role_id} in paras_loyalty_task.checkStaking`));
        }
        else if (!isMemberSatisfyRule && isMemberIncludeRole) {
          const rulesInGuild = await contractUtils.getRules(rule.guild_id).then(r => r.filter(e => e.role_id === rule.role_id));
          for (const ruleInGuild of rulesInGuild) {
            const isMemberSatisfyOtherRule = await userUtils.isMemberSatisfyRule(userInfo.near_wallet_id, ruleInGuild);
            if (isMemberSatisfyOtherRule) {
              return;
            }
          }
          logger.debug(`unsatisfying the {paras_staking} rule walletId: ${userInfo.near_wallet_id}`);
          await member.roles.remove(rule.role_id).then(logger.info(`${member.user.username} remove role_id ${rule.role_id} in paras_loyalty_task.checkStaking`));
        }
      }
      catch (e) {
        //logger.error(e);
      }
    }
  }
};

'''
'''--- service/schedule_tasks/paras_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const parasUtils = require('../../pkg/utils/paras_api');
const config = require('../../pkg/utils/config');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');
const BN = require('bn.js');

const delayTask = async function(accountIdList, collectionList) {
  const userTokens = await userFields.getUserFields({
    key: config.paras.nft_contract,
    near_wallet_id: accountIdList,
    value: collectionList,
  });
  for (const userToken of userTokens) {
    const rolesByField = await contractUtils.getRulesByField(config.paras.nft_contract, userToken.value);
    const guild_ids = [];
    rolesByField.forEach(item => {
      guild_ids.push(item.guild_id);
    });
    const _userInfos = await userInfos.getUsers({
      guild_id: guild_ids,
      near_wallet_id: userToken.near_wallet_id,
    });

    for (const _userInfo of _userInfos) {
      const member = await discordUtils.getMember(_userInfo.guild_id, _userInfo.user_id);
      const guildRoles = rolesByField.filter(role => role.guild_id == _userInfo.guild_id);

      const roles = [];
      const delRoles = [];

      for (const { fields, role_id, key_field } of guildRoles) {
        if (key_field[0] != config.paras.nft_contract || key_field[1] != userToken.value) {
          continue;
        }
        const newAmount = await parasUtils.getTokenPerOwnerCount(userToken.value, userToken.near_wallet_id, fields.token_amount);
        if (!member._roles.includes(role_id) && new BN(newAmount).cmp(new BN(fields.token_amount)) != -1) {
          roles.push(role_id);
        }
        if (member._roles.includes(role_id) && new BN(newAmount).cmp(new BN(fields.token_amount)) == -1) {
          delRoles.push(role_id);
        }
      }
      for (const role of roles) {
        try {
          await member.roles.add(role).then(logger.info(`${member.user.username} add role_id ${role} in delayTask`));
        }
        catch (e) {
          continue;
        }
      }

      for (const role of delRoles) {
        try {
          await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role} in delayTask`));
        }
        catch (e) {
          continue;
        }

      }

    }
  }
};

const paras_task = async function(receipts, receiptOutcomes) {
  const actions = await contractUtils.filterParasActions(receipts, receiptOutcomes);
  const accountIdList = [];
  const collectionList = [];
  for (const action of actions) {
    accountIdList.push(action.sender_id);
    accountIdList.push(action.receiver_id);
    const fractions = action.token_id.split(':');
    const tokenSeries = await parasUtils.getTokenSeries(fractions[0]);
    if (tokenSeries.metadata.collection_id) {
      collectionList.push(tokenSeries.metadata.collection_id);
    }
  }

  await delayTask(accountIdList, collectionList);

  // setTimeout(() => delayTask(accountIdList, collectionList), 1000 * 60)
};

module.exports = paras_task;
'''
'''--- service/schedule_tasks/token_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const nearUtils = require('../../pkg/utils/near_utils');
const parasUtils = require('../../pkg/utils/paras_api');
const logger = require('../../pkg/utils/logger');
const userInfos = require('../../pkg/models/object/user_infos');
const userFields = require('../../pkg/models/object/user_fields');
const config = require('../../pkg/utils/config');
const BN = require('bn.js');
const token_task = async function(receipts) {
  const allFieldList = await userFields.getUserFields({
    key: 'token_id',
  });
  const allTokenList = [];
  for (const field of allFieldList) {
    allTokenList.push(field.value);
  }
  const actions = await contractUtils.filterTokenActions(allTokenList, receipts);
  const accountIdList = [];
  const tokenList = [];
  for (const action of actions) {
    accountIdList.push(action.sender_id);
    accountIdList.push(action.receiver_id);
    tokenList.push(action.token_id);
  }

  const userTokens = await userFields.getUserFields({
    key: 'token_id',
    near_wallet_id: accountIdList,
    value: tokenList,
  });
  for (const userToken of userTokens) {
    let stakedParas = new BN('0');
    if (userToken.value === config.paras.token_contract) {
      stakedParas = await contractUtils.getStakedParas(userToken.near_wallet_id);
    }
    const newAmount = await contractUtils.getBalanceOf(userToken.value, userToken.near_wallet_id);
    const total = new BN(newAmount).add(stakedParas);
    const rolesByField = await contractUtils.getRulesByField('token_id', userToken.value);
    const guild_ids = [];
    rolesByField.forEach(item => {
      guild_ids.push(item.guild_id);
    });
    const _userInfos = await userInfos.getUsers({
      guild_id: guild_ids,
      near_wallet_id: userToken.near_wallet_id,
    });
    for (const _userInfo of _userInfos) {
      const member = await discordUtils.getMember(_userInfo.guild_id, _userInfo.user_id);
      const guildRoles = rolesByField.filter(role => role.guild_id == _userInfo.guild_id);

      const roles = [];
      const delRoles = [];
      let level = false;
      for (const { fields, role_id, key_field } of guildRoles) {
        if (key_field[0] != 'token_id' || key_field[1] != userToken.value) {
          continue;
        }
        if (userToken.value === config.paras.token_contract && key_field[2] != undefined) {
          const userLevel = await parasUtils.getUserInfo(userToken.near_wallet_id).then(e => e.level);
          level = await parasUtils.checkUserLevel(userLevel, key_field[2]);
        }
        if (!member._roles.includes(role_id) && total.cmp(new BN(fields.token_amount)) != -1 && level) {
          roles.push(role_id);
        }
        if (member._roles.includes(role_id) && total.cmp(new BN(fields.token_amount)) == -1 && !level) {
          delRoles.push(role_id);
        }
      }

      for (const role of roles) {
        try {
          await member.roles.add(role).then(logger.info(`${member.user.username} add role_id ${role} in token_task`));
        }
        catch (e) {
          continue;
        }
      }

      for (const role of delRoles) {
        try {
          await member.roles.remove(role).then(logger.info(`${member.user.username} remove role_id ${role} in token_task`));
        }
        catch (e) {
          continue;
        }

      }
    }
  }
};

module.exports = token_task;
'''
'''--- service/schedule_tasks/twitter_task.js ---
const twitterUsers = require('../../pkg/models/object/twitter_users');
const twitterClient = require('../../service/twitter_app');
const twitterUtils = require('../../pkg/utils/twitter_utils');
const userInfos = require('../../pkg/models/object/user_infos');
const logger = require('../../pkg/utils/logger');
const timeUtils = require('../../pkg/utils/time_utils');
exports.refreshToken = async () => {
  const currentlyTime = new Date().toISOString();
  const listTwitterUsers = await twitterUsers.list({
    expired_at: { $lte: currentlyTime },
  });
  for (const twitterUser of listTwitterUsers) {
    try {
      if (!await userInfos.getUser({ user_id: twitterUser.user_id })) {
        await twitterUsers.delete({ user_id: twitterUser.user_id });
        continue;
      }
      const { client: refreshedClient, accessToken, refreshToken: newRefreshToken } = await twitterClient.refreshOAuth2Token(twitterUser.refresh_token);
      const params = { access_token: accessToken, refresh_token: newRefreshToken, expired_at: await timeUtils.getExpiredTimeBySecond(7200) };
      const condition = { user_id: twitterUser.user_id };
      await twitterUsers.update(params, condition);
      logger.info(`${twitterUser.twitter_username} refresh token in twitter_task`);
    }
    catch (e) {
      logger.error(e);
      await twitterUsers.delete({ user_id: twitterUser.user_id }).then(logger.info(`delete twitter user in refresh_token_task ${JSON.stringify(twitterUser)}`));
    }
  }
};

// this.refreshToken();
'''
'''--- service/schedule_tasks/update_guild_task.js ---
const contractUtils = require('../../pkg/utils/contract_utils');
const discordUtils = require('../../pkg/utils/discord_utils');
const logger = require('../../pkg/utils/logger');
const userFields = require('../../pkg/models/object/user_fields');
const userInfos = require('../../pkg/models/object/user_infos');
const userUtils = require('../../pkg/utils/user_utils');
const update_guild_task = async (receipts) => {
  // the actions may include more than one transaction, so it should use for to get each one.
  const actions = await contractUtils.filterRoleActions(receipts);
  let ruleFromAction;
  let guildId;
  let usersInDB;
  let historyRules;
  for (const action of actions) {
    logger.debug(`received action in update_guild_task ${JSON.stringify(action)}`);
    /**
     * An action can refer https://explorer.mainnet.near.org/transactions/7NxiCwL8i11cG9TpmqnyqX1iuuM2dJK4mGRAQdPqxRES
     */
    ruleFromAction = action.roles[0];
    logger.debug(`ruleFromAction: ${JSON.stringify(ruleFromAction)}`);
    guildId = ruleFromAction.guild_id;
    usersInDB = await getUserFromDB(guildId);
    // get all rules that related to the role_id -> ruleFromAction.role_id
    if (action.method_name == 'set_roles') {
      for (const user of usersInDB) {
        try {
          if (!await discordUtils.isMemberIncludeRole(user.guild_id, user.user_id, ruleFromAction.role_id) && await userUtils.isMemberSatisfyRule(user.near_wallet_id, ruleFromAction)) {
            logger.debug(`the user is not in role ${ruleFromAction.role_id} & satisfy the rule ${JSON.stringify(ruleFromAction)} in set_roles`);
            const guildMember = await discordUtils.getMember(user.guild_id, user.user_id);
            await guildMember.roles.add(ruleFromAction.role_id).then(logger.info(`${guildMember.user.username} add role_id ${ruleFromAction.role_id} in update_guild_task`)).catch(e => logger.error(e));
            logger.debug(`${user.user_id} add role & addUserFields`);
          }
        }
        catch (e) {
          console.log(e)
          logger.error(e);
          continue;
        }
        await userFields.addUserField ({
          near_wallet_id: user.near_wallet_id,
          key: ruleFromAction.key_field[0],
          value: ruleFromAction.key_field[1],
        });
      }
    }

    else if (action.method_name == 'del_roles') {
      // get historyRules based on the ruleFromAction.role_id
      historyRules = await contractUtils.getRules(guildId).then(e => e.filter(d => d.role_id == ruleFromAction.role_id));
      // get user in role based on the guildId, ruleFromAction.role_id
      const listUserInRole = await discordUtils.getMembersInRole(guildId, ruleFromAction.role_id).then(m => m.map(user => user.id));
      const listUserInfos = await userInfos.getUsers({
        guild_id: guildId,
        user_id: listUserInRole,
      });
      for (const user of listUserInfos) {
        if (await discordUtils.isMemberIncludeRole(user.guild_id, user.user_id, ruleFromAction.role_id) && await userUtils.isMemberSatisfyRule(user.near_wallet_id, ruleFromAction)) {
          logger.debug(`the user is in role ${ruleFromAction.role_id} & satisfy the deleted rule ${JSON.stringify(ruleFromAction)} in del_roles`);
          let isDelRole = true;
          for (const rule of historyRules) {
            logger.debug(`rule: ${JSON.stringify(rule)}`);
            try {
              if (await userUtils.isMemberSatisfyRule(user.near_wallet_id, rule)) {
                logger.debug(`satisfy other rule ${JSON.stringify(ruleFromAction)} in del_roles`);
                isDelRole = false;
              }
            }
            catch (e) {
              logger.error(e);
              continue;
            }

          }
          if (isDelRole) {
            try {
              const guildMember = await discordUtils.getMember(user.guild_id, user.user_id);
              await guildMember.roles.remove(ruleFromAction.role_id).then(logger.info(`${guildMember.user.username} remove role_id ${ruleFromAction.role_id} in update_guild_task`)).catch(e => logger.error(e));
              logger.debug(`${user.user_id} remove role & deleteUserFields are finished`);
            }
            catch (e) {
              logger.error(e);
              continue;
            }
          }
        }
      }
    }

  }
};

/**
 * get all users from db exclude that the near_wallet_id is not null
 * @param {string} guildId
 * @returns users
 */
const getUserFromDB = async function(guildId) {
  return await userInfos.getUsers({
    guild_id: guildId,
    near_wallet_id: { $ne: null },
  });
};
// const reipte = '[{"method_name":"del_roles","roles":[{"guild_id":"923197936068861953","role_id":"1008008561617535026","key_field":["near","balance"],"fields":{"balance":"30000000000000000000000000"}}]}]';

module.exports = update_guild_task;
'''
'''--- service/twitter_app.js ---
const config = require('../pkg/utils/config');
const { TwitterApi } = require('twitter-api-v2');

// Instantiate with desired auth type (here's Bearer v2 auth)
const twitterClient = new TwitterApi({ clientId: config.client_id, clientSecret: config.client_secret });

module.exports = twitterClient;

'''