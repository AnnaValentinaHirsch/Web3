*GitHub Repository "ikataev/spinfi"*

'''--- index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Spinfi</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

'''
'''--- package.json ---
{
  "name": "spinfi",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^7.1.0",
    "@near-wallet-selector/modal-ui": "^7.1.0",
    "@near-wallet-selector/my-near-wallet": "^7.1.0",
    "@near-wallet-selector/near-wallet": "^7.1.0",
    "@reduxjs/toolkit": "^1.9.0",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^8.0.5",
    "react-scripts": "^5.0.1"
  },
  "devDependencies": {
    "@redux-devtools/core": "^3.13.1",
    "@types/react": "^18.0.22",
    "@types/react-dom": "^18.0.7",
    "@vitejs/plugin-react": "^2.2.0",
    "typescript": "^4.6.4",
    "vite": "^3.2.0"
  }
}

'''
'''--- readme.md ---
# Spinfi

## Build and run

Install dependencies and build project:

> npm install

Start webpack dev server and open in browser:

> npm run dev
'''
'''--- src/near/NearAPI.ts ---
import * as nearAPI from 'near-api-js'
import {connect, Contract, Near, WalletConnection} from 'near-api-js'

export class NearAPI {
    private nearConnection?: Near
    private walletConnection?: WalletConnection
    private contract?: Contract

    constructor(private contractId: string, private networkId = 'testnet') {
    }

    async connect() {
        const {keyStores} = nearAPI
        const myKeyStore = new keyStores.BrowserLocalStorageKeyStore()

        const connectionConfig = {
            networkId: this.networkId,
            keyStore: myKeyStore, // first create a key store
            nodeUrl: 'https://rpc.testnet.near.org',
            walletUrl: 'https://wallet.testnet.near.org',
            helperUrl: 'https://helper.testnet.near.org',
            explorerUrl: 'https://explorer.testnet.near.org',
            headers: {}
        }

        this.nearConnection = await connect(connectionConfig)
        this.walletConnection = new WalletConnection(this.nearConnection, null)

        const isSignedIn = this.walletConnection.isSignedIn()

        let accountId = undefined
        let accountBalance = undefined
        let markets = undefined

        if (isSignedIn) {
            const accountId = this.walletConnection.getAccountId()
            const account = await this.nearConnection.account(accountId)

            accountBalance = (await account.getAccountBalance()).available

            this.contract = new Contract(account, this.contractId, {
                viewMethods: ['markets', 'view_market'],
                changeMethods: []
            })

            // @ts-ignore
            markets = await this.contract.markets({}) as Array<{ id: string }>
        }

        return {
            isSignedIn,
            accountId,
            accountBalance,
            markets
        }
    }

    async signIn() {
        await this.walletConnection?.requestSignIn()
    }

    async signOut() {
        await this.walletConnection?.signOut()
    }

    async loadMarket(marketId: number) {
        // @ts-ignore
        return await this.contract.view_market({
            market_id: marketId
        })
    }

}
'''
'''--- src/near/types.ts ---
export type MarketOrder = {
    price: number
    quantity: number
}

export type MarketView = {
    ask_orders: MarketOrder[]
    bid_orders: MarketOrder[]
}
'''
'''--- src/near/utils.ts ---
import {utils} from 'near-api-js'

export const formatAmount = (amount: any) => {
    let formatted = amount.toLocaleString('fullwide', {useGrouping: false})
    formatted = utils.format.formatNearAmount(formatted)

    //I'm not sure about , in formated value. Well, if it exists, return as is
    if (formatted.includes(',')) {
        return formatted
    }

    return Math.floor(formatted * 100) / 100
}
'''
'''--- src/store/near/nearSlice.ts ---
import {createSlice, PayloadAction} from '@reduxjs/toolkit'
import {RootState} from '../store'

type NearType = {
    state: 'idle' | 'connected' | 'disconnected'
    isSignedIn: boolean
    accountId?: string
    accountBalance?: string

    //it's not an actual object, but we need only id
    markets?: any[]
}

const initialState: NearType = {
    state: 'idle',
    isSignedIn: false,
}

const nearSlice = createSlice({
    name: 'near',
    initialState,
    reducers: {
        connected: (state, action: PayloadAction<{
            isSignedIn: boolean,
            accountId?: string,
            accountBalance?: string
            markets?: any[]
        }>) => {
            const {isSignedIn, accountId, accountBalance, markets} = action.payload

            state.state = 'connected'
            state.isSignedIn = isSignedIn
            state.accountId = accountId
            state.accountBalance = accountBalance
            state.markets = markets
        },

        logout: state => ({
            state: 'disconnected',
            isSignedIn: false
        }),
    }
})

export const selectState = (state: RootState) => state.near.state
export const selectIsSignedIn = (state: RootState) => state.near.isSignedIn
export const selectAccountId = (state: RootState) => state.near.accountId
export const selectAccountBalance = (state: RootState) => state.near.accountBalance
export const selectMarkets = (state: RootState) => state.near.markets

export const {connected, logout} = nearSlice.actions
export const nearReducer = nearSlice.reducer
'''
'''--- src/store/store.ts ---
import {configureStore} from '@reduxjs/toolkit'
import {nearReducer} from './near/nearSlice'
import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'

export const store = configureStore({
    reducer: {
        near: nearReducer
    }
})

export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch

export const useAppDispatch: () => AppDispatch = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
'''
'''--- src/vite-env.d.ts ---
/// <reference types="vite/client" />

interface Window {
    Buffer?: unknown
}
'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

'''
'''--- tsconfig.node.json ---
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}

'''
'''--- vite.config.ts ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    "global": {},
    'process.env': {}
  },
})

'''