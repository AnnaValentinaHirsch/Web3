*GitHub Repository "near-examples/crossword-tutorial-chapter-3"*

'''--- README.md ---
Chapter 3 of the NEAR crossword tutorial
==================

How to play with this contract
===============================
1. Clone the repo.

```
git clone https://github.com/near-examples/crossword-tutorial-chapter-3
cd crossword-tutorial-chapter-3
```

2. Next, make sure you have NEAR CLI by running:

  ```
  near --version
  ```

  If you need to install `near-cli`:

  ```
  npm install near-cli -g
  ```

3. Build the smart contract

```
cd contract
./build.sh
```

4. Run `near dev-deploy` to deploy the contract to `testnet`.
5. Create a crossword, let's say that the answer to your crossword is "many clever words"
6. Answer for your crossword from now on will be a seed phrase! Let's generate key pair out of it.

   ```bash
   near generate-key randomAccountId.testnet --seedPhrase='many clever words'
   ```

   Now this key pair will be store on your machine under `~/.near-credentials/testnet/randomAccountId.json`

7. We should add your puzzle to our contract. To do that run
   
   ```bash
   near call <contract-account-id> new_puzzle '{"answer_pk":"<generated-pk>"}' --accountId=<signer-acc-id> --deposit=10
   ```
   Where:
      - `contract-account-id` - Account on which contract is stored. If you have used `near dev-deploy` in the first step it was autogenerated for you. It should look like `dev-<random-numbers>`.
      - `generate-pk` - Public key from JSON generated in the step #4
      - `accountId` - your existing testnet accountId (you can create one at https://wallet.testnet.near.org/)
      - `deposit` - reword for the person who will solve this puzzle
   
   After this call your puzzle will be added to the NEAR Crossword contract. Share your Crossword with friends, the person who will be able to solve it will be able to generate the same key pair and get the reward. Let's do that in the following steps.

8. Pretend that we have solved the puzzle and generated the very same key pair. This time it should be stored at `~/.near-credentials/testnet/<contract-id>.json`. We are using `<contract-id>` here because in the next step we will need to sign the transaction with this acc.

Attention! If you are using the same machine, your old key pair from `<dev-acc>` will be overwritten! Save it in some other place if you need it. Keys are stored in `~/.near-credentials/testnet/` folder.

To generate the new key:
```bash
near generate-key <crossword-contract-id> --seedPhrase='many clever words'
```

Also, we need to have another key that will be used later to get the reward. Let's generate it.

```bash
near generate-key keyToGetTheReward.testnet
```

7. Let's call `submit_solution` function to solve this puzzle.

```bash
near call <contract-id> submit_solution '{"solver_pk":"<PK from keyToGetTheReward.testnet>"}' --accountId=<contract-id>
```

Puzzle solved! Let's get our reward!

8. To get the reward we need to call the `claim_reward` function with the function call key that we have added in the previous step. Before that call we should prepare the keys:

```bash
cp ~/.near-credentials/testnet/keyToGetTheReward.testnet.json ~/.near-credentials/testnet/<contract-id>.json
```

And now we can claim our reward:

```bash
near call <contract-id> claim_reward '{"receiver_acc_id":"serhii.testnet", "crossword_pk":"<PK from randomAccountId account>", "memo":"Victory!"}' --accountId=<contract-id>
```

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `crossword.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `crossword.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account crossword.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'crossword.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org
  [Node.js]: https://nodejs.org/en/download/package-manager
  [jest]: https://jestjs.io
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org
  [near-cli]: https://docs.near.org/tools/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "crossword-tutorial-chapter-3"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>", "Mike Purvis <mike@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
bs58 = "0.4"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
Crossword Smart Contract
==================

A [smart contract] written in [Rust] that demonstrates a crossword puzzle on the NEAR blockchain.

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./build.sh` script.
2. Tests: You can run smart contract tests with the `./test.sh` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/develop/welcome
  [Rust]: https://www.rust-lang.org/
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/
'''
'''--- contract/src/lib.rs ---
use near_sdk::collections::{LookupMap, UnorderedSet};
use near_sdk::json_types::Base64VecU8;
use near_sdk::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    ext_contract, log,
    serde::{Deserialize, Serialize},
    Balance, PanicOnDefault, Promise, PromiseResult,
};
use near_sdk::{env, near_bindgen, AccountId, PublicKey};
use near_sdk::{serde_json, Gas};
use std::convert::TryFrom;

// 5 Ⓝ in yoctoNEAR
const PRIZE_AMOUNT: u128 = 5_000_000_000_000_000_000_000_000;
// TODO: tune these
const GAS_FOR_ACCOUNT_CREATION: Gas = Gas(150_000_000_000_000);
const GAS_FOR_ACCOUNT_CALLBACK: Gas = Gas(110_000_000_000_000);

/// Used to call the linkdrop contract deployed to the top-level account
///   (like "testnet")
#[ext_contract(ext_linkdrop)]
pub trait ExtLinkDropCrossContract {
    fn create_account(&mut self, new_account_id: AccountId, new_public_key: PublicKey) -> Promise;
}

/// Define the callbacks in this smart contract:
///   1. See how the Transfer Action went when the user has an account
///   2. See how the "create_account" went when the user wishes to create an account
///      (Returns true if the account was created successfully
pub trait AfterClaim {
    fn callback_after_transfer(
        &mut self,
        crossword_pk: PublicKey,
        account_id: String,
        memo: String,
        signer_pk: PublicKey,
    ) -> bool;
    fn callback_after_create_account(
        &mut self,
        crossword_pk: PublicKey,
        account_id: String,
        memo: String,
        signer_pk: PublicKey,
    ) -> bool;
}

#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub enum AnswerDirection {
    Across,
    Down,
}

/// The origin (0,0) starts at the top left side of the square
#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct CoordinatePair {
    x: u8,
    y: u8,
}

// {"num": 1, "start": {"x": 19, "y": 31}, "direction": "Across", "length": 8, "clue": "not far but"}
// We'll have the clue stored on-chain for now for simplicity.
#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Answer {
    num: u8,
    start: CoordinatePair,
    direction: AnswerDirection,
    length: u8,
    clue: String,
}

#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub enum PuzzleStatus {
    Unsolved,
    Solved { solver_pk: PublicKey },
    Claimed { memo: String },
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct UnsolvedPuzzles {
    puzzles: Vec<JsonPuzzle>,
    creator_account: AccountId,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonPuzzle {
    /// The human-readable public key that's the solution from the seed phrase
    solution_public_key: String,
    status: PuzzleStatus,
    reward: Balance,
    creator: AccountId,
    dimensions: CoordinatePair,
    answer: Vec<Answer>,
}

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct Puzzle {
    status: PuzzleStatus,
    reward: Balance,
    creator: AccountId,
    /// Use the CoordinatePair assuming the origin is (0, 0) in the top left side of the puzzle.
    dimensions: CoordinatePair,
    answer: Vec<Answer>,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NewPuzzleArgs {
    answer_pk: PublicKey,
    dimensions: CoordinatePair,
    answers: Vec<Answer>,
}

/// Regarding PanicOnDefault:
/// When you want to have a "new" function initialize a smart contract,
/// you'll likely want to follow this pattern of having a default implementation that panics,
/// directing the user to call the initialization method. (The one with the #[init] macro)
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Crossword {
    owner_id: AccountId,
    puzzles: LookupMap<PublicKey, Puzzle>,
    unsolved_puzzles: UnorderedSet<PublicKey>,
    /// When a user solves the puzzle and goes to claim the reward, they might need to create an account. This is the account that likely contains the "linkdrop" smart contract. https://github.com/near/near-linkdrop
    creator_account: AccountId,
}

#[near_bindgen]
impl Crossword {
    #[init]
    pub fn new(owner_id: AccountId, creator_account: AccountId) -> Self {
        Self {
            owner_id,
            puzzles: LookupMap::new(b"c"),
            unsolved_puzzles: UnorderedSet::new(b"u"),
            creator_account,
        }
    }

    pub fn submit_solution(&mut self, solver_pk: PublicKey) {
        let answer_pk = env::signer_account_pk();
        // check to see if the answer_pk from signer is in the puzzles
        let mut puzzle = self
            .puzzles
            .get(&answer_pk)
            .expect("ERR_NOT_CORRECT_ANSWER");

        // Check if the puzzle is already solved. If it's unsolved, make batch action of
        // removing that public key and adding the user's public key
        puzzle.status = match puzzle.status {
            PuzzleStatus::Unsolved => PuzzleStatus::Solved {
                solver_pk: solver_pk.clone().into(),
            },
            _ => {
                env::panic_str("ERR_PUZZLE_SOLVED");
            }
        };

        // Reinsert the puzzle back in after we modified the status:
        self.puzzles.insert(&answer_pk, &puzzle);
        // Remove from the list of unsolved ones
        self.unsolved_puzzles.remove(&answer_pk);

        log!(
            "Puzzle with pk {:?} solved, solver pk: {}",
            answer_pk,
            String::from(&solver_pk)
        );

        // Add new function call access key able to call claim_reward and claim_reward_new_account
        Promise::new(env::current_account_id()).add_access_key(
            solver_pk.into(),
            250000000000000000000000,
            env::current_account_id(),
            "claim_reward,claim_reward_new_account".to_string(),
        );

        // Delete old function call key
        Promise::new(env::current_account_id()).delete_key(answer_pk);
    }

    pub fn claim_reward_new_account(
        &mut self,
        crossword_pk: PublicKey,
        new_acc_id: String,
        new_pk: PublicKey,
        memo: String,
    ) -> Promise {
        let signer_pk = env::signer_account_pk();
        let puzzle = self
            .puzzles
            .get(&crossword_pk)
            .expect("That puzzle doesn't exist");

        // Check that puzzle is solved and the signer has the right public key
        match puzzle.status {
            PuzzleStatus::Solved {
                solver_pk: puzzle_pk,
            } => {
                // Check to see if signer_pk matches
                assert_eq!(signer_pk, puzzle_pk, "You're not the person who can claim this, or else you need to use your function-call access key, friend.");
            }
            _ => {
                env::panic_str("puzzle should have `Solved` status to be claimed");
            }
        };

        // Ensure there's enough balance to pay this out
        let reward_amount = puzzle.reward;
        assert!(
            env::account_balance() >= reward_amount,
            "The smart contract does not have enough balance to pay this out. :/"
        );

        ext_linkdrop::ext(AccountId::from(self.creator_account.clone()))
            .with_attached_deposit(reward_amount)
            .with_static_gas(GAS_FOR_ACCOUNT_CREATION) // This amount of gas will be split
            .create_account(new_acc_id.parse().unwrap(), new_pk)
            .then(
                // Chain a promise callback to ourselves
                Self::ext(env::current_account_id())
                    .with_static_gas(GAS_FOR_ACCOUNT_CALLBACK)
                    .callback_after_create_account(
                        crossword_pk,
                        new_acc_id,
                        memo,
                        env::signer_account_pk(),
                    ),
            )
    }

    pub fn claim_reward(
        &mut self,
        crossword_pk: PublicKey,
        receiver_acc_id: String,
        memo: String,
    ) -> Promise {
        let signer_pk = env::signer_account_pk();
        // Check to see if the crossword_pk is in the puzzle's keys
        let puzzle = self
            .puzzles
            .get(&crossword_pk)
            .expect("That puzzle doesn't exist");

        // Check that puzzle is solved and the signer has the right public key
        match puzzle.status {
            PuzzleStatus::Solved {
                solver_pk: puzzle_pk,
            } => {
                // Check to see if signer_pk matches
                assert_eq!(signer_pk, puzzle_pk, "You're not the person who can claim this, or else you need to use your function-call access key, friend.");
            }
            _ => {
                env::panic_str("puzzle should have `Solved` status to be claimed");
            }
        };

        // Ensure there's enough balance to pay this out
        let reward_amount = puzzle.reward;
        assert!(
            env::account_balance() >= reward_amount,
            "The smart contract does not have enough balance to pay this out. :/"
        );

        Promise::new(receiver_acc_id.parse().unwrap())
            .transfer(reward_amount)
            .then(
                Self::ext(env::current_account_id())
                    .with_static_gas(GAS_FOR_ACCOUNT_CALLBACK)
                    .callback_after_transfer(
                        crossword_pk,
                        receiver_acc_id,
                        memo,
                        env::signer_account_pk(),
                    ),
            )
    }

    /// Puzzle creator provides:
    /// `answer_pk` - a public key generated from crossword answer (seed phrase)
    /// `dimensions` - the shape of the puzzle, lengthwise (`x`) and high (`y`) (Soon to be deprecated)
    /// `answers` - the answers for this puzzle
    /// Call with NEAR CLI like so:
    /// `near call $NEAR_ACCT new_puzzle '{"answer_pk": "ed25519:psA2GvARwAbsAZXPs6c6mLLZppK1j1YcspGY2gqq72a", "dimensions": {"x": 19, "y": 13}, "answers": [{"num": 1, "start": {"x": 19, "y": 31}, "direction": "Across", "length": 8}]}' --accountId $NEAR_ACCT`
    pub fn new_puzzle(&mut self, args: Base64VecU8) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Only the owner may call this method"
        );
        // We'll turn the base64 vector of bytes into our argument object
        let puzzle_args: NewPuzzleArgs = serde_json::from_slice(&args.0.as_slice()).unwrap();

        let creator = env::predecessor_account_id();
        let answer_pk = PublicKey::from(puzzle_args.answer_pk);
        let existing = self.puzzles.insert(
            &answer_pk,
            &Puzzle {
                status: PuzzleStatus::Unsolved,
                reward: PRIZE_AMOUNT,
                creator,
                dimensions: puzzle_args.dimensions,
                answer: puzzle_args.answers,
            },
        );

        assert!(existing.is_none(), "Puzzle with that key already exists");
        self.unsolved_puzzles.insert(&answer_pk);

        Promise::new(env::current_account_id()).add_access_key(
            answer_pk,
            250000000000000000000000,
            env::current_account_id(),
            "submit_solution".to_string(),
        );
    }

    pub fn get_unsolved_puzzles(&self) -> UnsolvedPuzzles {
        let public_keys = self.unsolved_puzzles.to_vec();
        let mut all_unsolved_puzzles = vec![];
        for pk in public_keys {
            let puzzle = self
                .puzzles
                .get(&pk)
                .unwrap_or_else(|| env::panic_str("ERR_LOADING_PUZZLE"));
            let json_puzzle = JsonPuzzle {
                solution_public_key: get_decoded_pk(pk),
                status: puzzle.status,
                reward: puzzle.reward,
                creator: puzzle.creator,
                dimensions: puzzle.dimensions,
                answer: puzzle.answer,
            };
            all_unsolved_puzzles.push(json_puzzle)
        }
        UnsolvedPuzzles {
            puzzles: all_unsolved_puzzles,
            creator_account: self.creator_account.clone(),
        }
    }
}

/// Private functions (cannot be called from the outside by a transaction)
#[near_bindgen]
impl Crossword {
    /// Update the status of the puzzle and store the memo
    fn finalize_puzzle(
        &mut self,
        crossword_pk: PublicKey,
        account_id: String,
        memo: String,
        signer_pk: PublicKey,
    ) {
        let mut puzzle = self
            .puzzles
            .get(&crossword_pk)
            .expect("Error loading puzzle when finalizing.");

        puzzle.status = PuzzleStatus::Claimed { memo: memo.clone() };
        // Reinsert the puzzle back in after we modified the status
        self.puzzles.insert(&crossword_pk, &puzzle);

        log!(
            "Puzzle with pk: {:?} claimed, new account created: {}, memo: {}, reward claimed: {}",
            crossword_pk,
            account_id,
            memo,
            puzzle.reward
        );

        // Delete function-call access key
        Promise::new(env::current_account_id()).delete_key(signer_pk);
    }
}

#[near_bindgen]
impl AfterClaim for Crossword {
    #[private]
    fn callback_after_transfer(
        &mut self,
        crossword_pk: PublicKey,
        account_id: String,
        memo: String,
        signer_pk: PublicKey,
    ) -> bool {
        assert_eq!(
            env::promise_results_count(),
            1,
            "Expected 1 promise result."
        );
        match env::promise_result(0) {
            PromiseResult::NotReady => {
                unreachable!()
            }
            PromiseResult::Successful(_) => {
                // New account created and reward transferred successfully.
                self.finalize_puzzle(crossword_pk, account_id, memo, signer_pk);
                true
            }
            PromiseResult::Failed => {
                // Weren't able to create the new account,
                //   reward money has been returned to this contract.
                false
            }
        }
    }

    #[private]
    fn callback_after_create_account(
        &mut self,
        crossword_pk: PublicKey,
        account_id: String,
        memo: String,
        signer_pk: PublicKey,
    ) -> bool {
        assert_eq!(
            env::promise_results_count(),
            1,
            "Expected 1 promise result."
        );
        match env::promise_result(0) {
            PromiseResult::NotReady => {
                unreachable!()
            }
            PromiseResult::Successful(creation_result) => {
                let creation_succeeded: bool = serde_json::from_slice(&creation_result)
                    .expect("Could not turn result from account creation into boolean.");
                if creation_succeeded {
                    // New account created and reward transferred successfully.
                    self.finalize_puzzle(crossword_pk, account_id, memo, signer_pk);
                    true
                } else {
                    // Something went wrong trying to create the new account.
                    false
                }
            }
            PromiseResult::Failed => {
                // Problem with the creation transaction, reward money has been returned to this contract.
                false
            }
        }
    }
}

fn get_decoded_pk(pk: PublicKey) -> String {
    String::try_from(&pk).unwrap()
}

'''
'''--- contract/test.sh ---
#!/bin/bash

cargo test -- --nocapture

'''
'''--- contract/testnet-chapter-3-args.sh ---
#!/bin/bash

./build.sh

export NEAR_ACCT=xword.demo.testnet
export PARENT_ACCT=demo.testnet
near delete $NEAR_ACCT $PARENT_ACCT
sleep 6 # These sleep calls will be removed very soon when the RPC as a service launches
near create-account $NEAR_ACCT --masterAccount $PARENT_ACCT
sleep 6
near deploy $NEAR_ACCT --wasmFile res/crossword_tutorial_chapter_3.wasm --initFunction new --initArgs '{"owner_id": "'$NEAR_ACCT'", "creator_account": "linkdrop.demo.testnet"}'
sleep 6
near call $NEAR_ACCT new_puzzle '{
  "args": "ewogICJhbnN3ZXJfcGsiOiAiZWQyNTUxOTo3UGtLUG1WVVhjdXBBNW9VOGQ2VGJneU13ekZlOHRQVjZlVjFLR3dnbzl4ZyIsCiAgImRpbWVuc2lvbnMiOiB7CiAgICJ4IjogMTEsCiAgICJ5IjogMTAKICB9LAogICJhbnN3ZXJzIjogWwogICB7CiAgICAgIm51bSI6IDEsCiAgICAgInN0YXJ0IjogewogICAgICAgIngiOiAwLAogICAgICAgInkiOiAxCiAgICAgfSwKICAgICAiZGlyZWN0aW9uIjogIkFjcm9zcyIsCiAgICAgImxlbmd0aCI6IDEyLAogICAgICJjbHVlIjogIk5FQVIgdHJhbnNhY3Rpb25zIGFyZSBtb3JlIF9fX19fXyBpbnN0ZWFkIG9mIGF0b21pYy4iCiAgIH0sCiAgIHsKICAgICAibnVtIjogMiwKICAgICAic3RhcnQiOiB7CiAgICAgICAieCI6IDYsCiAgICAgICAieSI6IDAKICAgICB9LAogICAgICJkaXJlY3Rpb24iOiAiRG93biIsCiAgICAgImxlbmd0aCI6IDcsCiAgICAgImNsdWUiOiAiSW4gYSBzbWFydCBjb250cmFjdCwgd2hlbiBwZXJmb3JtaW5nIGFuIEFjdGlvbiwgeW91IHVzZSB0aGlzIGluIFJ1c3QuIgogICB9LAogICB7CiAgICAgIm51bSI6IDMsCiAgICAgInN0YXJ0IjogewogICAgICAgIngiOiA5LAogICAgICAgInkiOiAwCiAgICAgfSwKICAgICAiZGlyZWN0aW9uIjogIkRvd24iLAogICAgICJsZW5ndGgiOiA2LAogICAgICJjbHVlIjogIkluIGRvY3MucnMgd2hlbiB5b3Ugc2VhcmNoIGZvciB0aGUgbmVhci1zZGsgY3JhdGUsIHRoZXNlIGl0ZW1zIGEgY29uc2lkZXJlZCBhIHdoYXQ6IGNvbGxlY3Rpb25zLCBlbnYsIGpzb25fdHlwZXMuIgogICB9LAogICB7CiAgICAgIm51bSI6IDQsCiAgICAgInN0YXJ0IjogewogICAgICAgIngiOiAxLAogICAgICAgInkiOiAxCiAgICAgfSwKICAgICAiZGlyZWN0aW9uIjogIkRvd24iLAogICAgICJsZW5ndGgiOiAxMCwKICAgICAiY2x1ZSI6ICJBIHNlcmllcyBvZiB3b3JkcyB0aGF0IGNhbiBkZXRlcm1pbmlzdGljYWxseSBnZW5lcmF0ZSBhIHByaXZhdGUga2V5LiIKICAgfSwKICAgewogICAgICJudW0iOiA1LAogICAgICJzdGFydCI6IHsKICAgICAgICJ4IjogMSwKICAgICAgICJ5IjogMwogICAgIH0sCiAgICAgImRpcmVjdGlvbiI6ICJBY3Jvc3MiLAogICAgICJsZW5ndGgiOiAzLAogICAgICJjbHVlIjogIldoZW4gZG9pbmcgaGlnaC1sZXZlbCBjcm9zcy1jb250cmFjdCBjYWxscywgd2UgaW1wb3J0IHRoaXMgdGhhdCBlbmRzIGluIF9jb250cmFjdC4gV2hlbiBjYWxsaW5nIG91cnNlbHZlcyBpbiBhIGNhbGxiYWNrLCBpdCBpcyBjb252ZW50aW9uIHRvIGNhbGwgaXQgVEhJU19zZWxmLiIKICAgfSwKICAgewogICAgICJudW0iOiA2LAogICAgICJzdGFydCI6IHsKICAgICAgICJ4IjogMCwKICAgICAgICJ5IjogOAogICAgIH0sCiAgICAgImRpcmVjdGlvbiI6ICJBY3Jvc3MiLAogICAgICJsZW5ndGgiOiA4LAogICAgICJjbHVlIjogIlVzZSB0aGlzIHRvIGRldGVybWluZSB0aGUgZXhlY3V0aW9uIG91dGNvbWUgb2YgYSBjcm9zcy1jb250cmFjdCBjYWxsIG9yIEFjdGlvbi4iCiAgIH0sCiAgIHsKICAgICAibnVtIjogNywKICAgICAic3RhcnQiOiB7CiAgICAgICAieCI6IDQsCiAgICAgICAieSI6IDYKICAgICB9LAogICAgICJkaXJlY3Rpb24iOiAiQWNyb3NzIiwKICAgICAibGVuZ3RoIjogNCwKICAgICAiY2x1ZSI6ICJZb3UgY2hhaW4gdGhpcyBzeW50YXggb250byBhIHByb21pc2UgaW4gb3JkZXIgdG8gc2NoZWR1bGUgYSBjYWxsYmFjayBhZnRlcndhcmQuIgogICB9CiAgXQp9"
}' --accountId $NEAR_ACCT

'''
'''--- contract/testnet.sh ---
#!/bin/bash

./build.sh

export NEAR_ACCT=xword.demo.testnet
near delete $NEAR_ACCT demo.testnet
near create-account $NEAR_ACCT --masterAccount demo.testnet
near deploy $NEAR_ACCT --wasmFile /Users/mike/near/near-crossword/contract/res/crossword.wasm --initFunction new --initArgs '{"creator_account": "linkdrop.demo.testnet"}'
echo "Keys before:"
near keys $NEAR_ACCT
near call $NEAR_ACCT new_puzzle '{
  "answer_pk": "ed25519:CpqWpFLps6zNNXSwn9ZYgvTgSVQ598fn1kWXgjcA2uLp",
  "dimensions": {
   "x": 19,
   "y": 13
  },
  "answers": [
   {
     "num": 1,
     "start": {
       "x": 1,
       "y": 2
     },
     "direction": "Across",
     "length": 8,
     "clue": "NEAR recently enabled this. We now have 4 of something on mainnet."
   },
   {
     "num": 1,
     "start": {
       "x": 1,
       "y": 2
     },
     "direction": "Down",
     "length": 10,
     "clue": "aloha.mike.near is called a ___ of mike.near"
   },
   {
     "num": 2,
     "start": {
       "x": 0,
       "y": 7
     },
     "direction": "Across",
     "length": 9,
     "clue": "You NEAR account can have full and function-call versions of this."
   },
   {
     "num": 3,
     "start": {
       "x": 7,
       "y": 4
     },
     "direction": "Down",
     "length": 7,
     "clue": "Since data on-chain is hard to read, some folks will set up this, which helps organize the info."
   },
   {
     "num": 4,
     "start": {
       "x": 5,
       "y": 5
     },
     "direction": "Across",
     "length": 11,
     "clue": "A special type of token used for DeFi, subscriptions, and art."
   },
   {
     "num": 5,
     "start": {
       "x": 7,
       "y": 10
     },
     "direction": "Across",
     "length": 3,
     "clue": "Remote Procedure Call"
   },
   {
     "num": 6,
     "start": {
       "x": 14,
       "y": 1
     },
     "direction": "Down",
     "length": 10,
     "clue": "One method of running smart contract tests capable of testing cross-contract calls."
   },
   {
     "num": 7,
     "start": {
       "x": 12,
       "y": 2
     },
     "direction": "Across",
     "length": 4,
     "clue": "Use this Rust macro over the initialization function."
   },
   {
     "num": 8,
     "start": {
       "x": 11,
       "y": 8
     },
     "direction": "Across",
     "length": 4,
     "clue": "Decentralized finance is known as"
   },
   {
     "num": 8,
     "start": {
       "x": 11,
       "y": 8
     },
     "direction": "Down",
     "length": 3,
     "clue": "A collective of people sharing activity, voting, spending, etc."
   }
  ]
}' --accountId mike.testnet --deposit 10

#echo "Keys after"
#near keys $NEAR_ACCT
#near view $NEAR_ACCT get_unsolved_puzzles
#near view $NEAR_ACCT debug_get_puzzle '{"pk": "ed25519:CpqWpFLps6zNNXSwn9ZYgvTgSVQ598fn1kWXgjcA2uLp"}'
'''
'''--- package.json ---
{
  "name": "near-crossword",
  "version": "0.1.0",
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "env-cmd": "^10.1.0",
    "framer-motion": "^5.2.1",
    "near-api-js": "^0.42.0",
    "near-cli": "^2.1.1",
    "near-seed-phrase": "github:near/near-seed-phrase",
    "react": "^16.13.1",
    "react-crossword": "mikedotexe/react-crossword#with-dist",
    "react-dom": "^16.13.1",
    "react-fullpage-custom-loader": "^0.1.6",
    "react-scripts": "4.0.3",
    "styled-components": "^5.3.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "parcel src/index.html",
    "build:contract": "cd contract && cargo build --target wasm32-unknown-unknown --release",
    "build:web": "parcel build ./src/index.html --public-url ./ --no-minify",
    "dev": "npm run dev-deploy && env-cmd -f ./neardev/dev-account.env && npm start",
    "dev-deploy": "near dev-deploy contract/res/crossword.wasm",
    "postdev-deploy": "env-cmd -f ./neardev/dev-account.env node new-puzzle.js",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "parcel-bundler": "^1.12.5"
  }
}

'''
'''--- src/App.css ---
#page {
    padding: 2em;
}

h1 {
    margin-bottom: 1em;
}

#crossword-wrapper .clue.correct::before {
    content: "✓";
    display: inline-block;
    text-decoration: none;
    color: rgb(100, 200, 100);
    margin-right: 0.25em;
}

#crossword-wrapper {
    margin-top: 2em;
}

#messages {
    background-color: rgb(230, 230, 230);
    margin: 1em 0;
    padding: 1em;
}

@font-face {
    font-family: 'Inter';
    src:  url('./fonts/static/Inter-Regular.ttf') format('ttf'),
    url('./fonts/static/Inter-Medium.ttf') format('ttf');
}

body {
    margin: 0;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

span.important {
    font-size: 1.9rem;
    color: #FF585D;
}

.claim-inputs {
    margin-top: 30px
}

.claim-inputs label {
    font-size: 1.3em;
}

/*#claim-memo, #claim-account-id, .btn {*/
/*    border-radius: 5px;*/
/*    border: .1em solid #000;*/
/*    padding: .5em 1em;*/
/*    font-size: 1.66em;*/
/*    margin: .5em;*/
/*}*/

/*.claim-inputs .btn {*/
/*    margin: .5em;*/
/*}*/

#page h1, #page.no-puzzles {
    text-align: center;
}

#page.claim {
    margin: 0 auto;
    width: 576px;
}

#claim-status {
    background-color: #ff585d;
    border-radius: 6px;
}

#claim-status.hide {
    display: none;
}

#claim-status.show {
    display: block;
}

#claim-status p {
    padding: 1.5em;
    font-size: 1.1em;
    font-weight: bold;
    color: #ffffff;
}

#seed-phrase-wrapper {
    display: none;
    background-color: #FAF8D1;
    border-radius: 6px;
}

#seed-phrase-wrapper.hide {
    display: none;
}

#seed-phrase-wrapper.show {
    display: block;
}

#seed-phrase-wrapper h3 {
    padding: .5em .5em 0;
}

#seed-phrase-wrapper p {
    padding: .5em;
    font-size: 1.3em;
}

#seed-phrase-wrapper #seed-phrase {
    font-size: 1.7em;
    color: #ff585d;
}

.grid-flow-row {
    grid-auto-flow: row;
}

.grid-flow-col {
    grid-auto-flow: column;
}

.grid-flow-row-dense {
    grid-auto-flow: row dense;
}

.grid-flow-col-dense {
    grid-auto-flow: column dense;
}

.main-area .grid.success-links {
    display: grid;
    max-width: 100%;
    margin-top: 50px;
}

.success-links > div {
    display: flex;
    flex-direction: column;
}

.success-links .success-links-center {
    margin: 0 auto;
}

.success-links .success-link-border-right {
    border-right: 1px solid #ccc;
}

.no-puzzles .btn {
    height: 75px;
}
'''
'''--- src/App.js ---
import './App.css';
import React, {useCallback, useState} from 'react';
import {parseSolutionSeedPhrase, b64toUtf8} from './utils';
import {parseSeedPhrase} from 'near-seed-phrase';
import * as nearAPI from "near-api-js";
import {createGridData, loadGuesses} from "react-crossword/dist/es/util";
import SimpleDark from './loader';
import CrosswordPage from "./components/CrosswordPage";
import NoCrosswordsPage from "./components/NoCrosswordsPage";
import WonPage from "./components/WonPage";
import SuccessPage from "./components/SuccessPage";

const logo = require('./img/logo_v2.png');

const App = ({nearConfig, data }) => {
    const [solvedPuzzle, setSolvedPuzzle] = useState(localStorage.getItem('playerSolvedPuzzle') || null);
    const playerKeyPair = JSON.parse(localStorage.getItem('playerKeyPair'));
    const crosswordSolutionPublicKey = localStorage.getItem('crosswordSolutionPublicKey');
    const [showLoader, setShowLoader] = useState(false);
    const [needsNewAccount, setNeedsNewAccount] = useState(false);
    const [claimError, setClaimError] = useState('');

    async function claimPrize(e) {
        e.preventDefault();
        const winner_account_id = document.getElementById('claim-account-id').value.toLowerCase();
        const memo = document.getElementById('claim-memo').value;
        const keyStore = new nearAPI.keyStores.InMemoryKeyStore();
        const keyPair = nearAPI.utils.key_pair.KeyPair.fromString(playerKeyPair.secretKey);
        await keyStore.setKey(nearConfig.networkId, nearConfig.contractName, keyPair);
        nearConfig.keyStore = keyStore;
        const near = await nearAPI.connect(nearConfig);
        const crosswordAccount = await near.account(nearConfig.contractName);

        let transaction;
        try {
            setShowLoader(true);

            // Call a different method depending on if the user wants to create an account or not
            if (needsNewAccount) {
                // There's a public key stored in local storage.
                // This was created when the user first opened the crossword puzzle.
                // They'll need to have written down their seed phrase
                // We pass the public key into the `new_pk` parameter

                transaction = await crosswordAccount.functionCall(
                    {
                        contractId     : nearConfig.contractName,
                        methodName     : 'claim_reward_new_account',
                        args           : {
                            crossword_pk: solvedPuzzle,
                            new_acc_id  : winner_account_id,
                            new_pk      : playerKeyPair.publicKey,
                            memo
                        },
                        gas            : '300000000000000', // You may omit this for default gas
                        attachedDeposit: 0  // You may also omit this for no deposit
                    }
                );
            } else {
                transaction = await crosswordAccount.functionCall(
                    {
                        contractId     : nearConfig.contractName,
                        methodName     : 'claim_reward',
                        args           : {
                            crossword_pk   : solvedPuzzle,
                            receiver_acc_id: winner_account_id,
                            memo
                        },
                        gas            : '300000000000000', // You may omit this for default gas
                        attachedDeposit: 0  // You may also omit this for no deposit
                    }
                );
                console.log('transaction: ', transaction)
            }
        } catch (e) {
            console.error('Unexpected error when claiming', e);
            if (e.message.includes('Can not sign transactions for account')) {
                // Someone has submitted the solution before the player!
                console.log("Oof, that's rough, someone already solved this.")
            }
        } finally {
            setShowLoader(false);
            // See if the transaction succeeded during transfer
            // or succeeded when creating a new account.
            // If unsuccessful, let the user try again.
            if (!transaction) {
                setClaimError("Couldn't transfer reward to that account, please try another account name or create a new one.");
            } else {
                console.log('Transaction status:', transaction.status);
                const tx_succeeded = transaction.status.hasOwnProperty('SuccessValue');
                if (tx_succeeded) {
                    let tx_success_value = b64toUtf8(transaction.status.SuccessValue);
                    if (needsNewAccount) {
                        // Look for base64-encoded "false"
                        if (tx_success_value === 'true') {
                            // This tells the React app that it's solved and claimed
                            setSolvedPuzzle(false);
                            setClaimError('');

                            // Clean up and get ready for next puzzle
                            localStorage.removeItem('playerSolvedPuzzle');
                            localStorage.removeItem('guesses');
                        } else {
                            setClaimError('Could not create that account, please try another account name.');
                        }
                    } else {
                        if (tx_success_value === 'true') {
                            // This tells the React app that it's solved and claimed
                            setSolvedPuzzle(false);
                            setClaimError('');
                            // Clean up and get ready for next puzzle
                            localStorage.removeItem('playerSolvedPuzzle');
                            localStorage.removeItem('guesses');
                        } else {
                            setClaimError("Couldn't transfer reward to that account, please try another account name or create a new one.");
                        }
                    }
                } else {
                    // Transaction failed
                    setClaimError(`Error with transaction: ${transaction.status.Failure}`);
                    console.log('Error with transaction', transaction.status.Failure);
                }

                if (transaction.hasOwnProperty('transaction') &&
                    transaction.transaction.hasOwnProperty('hash')) {
                    console.log('Transaction hash:', transaction.transaction.hash);
                }
            }
        }
    }

    const onCrosswordComplete = useCallback(
        async (completeCount) => {
            if (completeCount !== false) {
                let gridData = createGridData(data).gridData;
                loadGuesses(gridData, 'guesses');
                await checkSolution(gridData);
            }
        },
        []
    );

    // This function is called when all entries are filled
    async function checkSolution(gridData) {
        let seedPhrase = parseSolutionSeedPhrase(data, gridData);
        const {secretKey, publicKey} = parseSeedPhrase(seedPhrase);
        // Compare crossword solution's public key with the known public key for this puzzle
        // (It was given to us when we first fetched the puzzle in index.js)
        if (publicKey === crosswordSolutionPublicKey) {
            console.log("You're correct!");
            // Send transaction TO the crossword puzzle smart contract FROM the crossword puzzle account.
            // Learn more about access keys here: https://docs.near.org/docs/concepts/account#access-keys
            const keyStore = new nearAPI.keyStores.InMemoryKeyStore();
            const keyPair = nearAPI.utils.key_pair.KeyPair.fromString(secretKey);
            await keyStore.setKey(nearConfig.networkId, nearConfig.contractName, keyPair);
            nearConfig.keyStore = keyStore;
            const near = await nearAPI.connect(nearConfig);
            const crosswordAccount = await near.account(nearConfig.contractName);

            let playerPublicKey = playerKeyPair.publicKey;
            console.log('Unique public key for you as the player: ', playerPublicKey);

            let transaction;
            try {
                setShowLoader(true);
                transaction = await crosswordAccount.functionCall(
                    {
                        contractId     : nearConfig.contractName,
                        methodName     : 'submit_solution',
                        args           : {
                            solver_pk: playerPublicKey,
                        },
                        gas            : '300000000000000', // You may omit this for default gas
                        attachedDeposit: 0  // You may also omit this for no deposit
                    }
                );
                localStorage.setItem('playerSolvedPuzzle', crosswordSolutionPublicKey);
                setSolvedPuzzle(crosswordSolutionPublicKey);
            } catch (e) {
                if (e.message.contains('Can not sign transactions for account')) {
                    // Someone has submitted the solution before the player!
                    console.log("Oof, that's rough, someone already solved this.")
                }
            } finally {
                setShowLoader(false);
                console.log('Transaction status:', transaction.status);
                console.log('Transaction hash:', transaction.transaction.hash);
            }
        } else {
            console.log("That's not the correct solution. :/");
        }
    }

    let claimStatusClasses = 'hide';
    if (claimError !== '') {
        claimStatusClasses = 'show';
    }

    // There are four different "pages"
    // 1. The "loading screen" when transactions are hitting the blockchain
    // 2. The crossword puzzle interface, shown when there's a crossword puzzle to solve
    // 3. The crossword puzzle has been solved, and the reward needs to be claimed
    // 4. There are no crossword puzzles to solve and this user has claimed any they won
    if (showLoader) {
        return (
          <div className="wrapper">
              <header className="site-header">
                  <div className="site-logo">
                      <a href="#">
                          <img src={logo} width="271" alt="Near Crossword Puzzle"/>
                      </a>
                  </div>
              </header>
              <main className="main-area">
                  <SimpleDark />
              </main>
          </div>
        )
    } else if (data && solvedPuzzle === null) {
        return (
          <div className="wrapper">
              <header className="site-header">
                  <div className="site-logo">
                      <a href="#">
                          <img src={logo} width="271" alt="Near Crossword Puzzle"/>
                      </a>
                  </div>
              </header>
              <main className="main-area">
                  <CrosswordPage
                    data={data}
                    setSolvedPuzzle={setSolvedPuzzle}
                    onCrosswordComplete={onCrosswordComplete}
                  />
              </main>
          </div>
        )
    } else if (solvedPuzzle) {
        return (
          <div className="wrapper">
              <header className="site-header">
                  <div className="site-logo">
                      <a href="#">
                          <img src={logo} width="271" alt="Near Crossword Puzzle"/>
                      </a>
                  </div>
              </header>
              <main className="main-area">
                  <WonPage
                    claimStatusClasses={claimStatusClasses}
                    claimError={claimError}
                    needsNewAccount={needsNewAccount}
                    setNeedsNewAccount={setNeedsNewAccount}
                    claimPrize={claimPrize}
                    playerKeyPair={playerKeyPair}
                    nearConfig={nearConfig}
                  />
              </main>
          </div>
        )
    } else if (solvedPuzzle === false && claimError === '') {
        return (
            <div className="wrapper">
                <header className="site-header">
                    <div className="site-logo">
                        <a href="#">
                            <img src={logo} width="271" alt="Near Crossword Puzzle"/>
                        </a>
                    </div>
                </header>
                <main className="main-area">
                    <SuccessPage/>
                </main>
            </div>
        )
    } else if (!data && !solvedPuzzle) {
        return (
            <div className="wrapper">
                <header className="site-header">
                    <div className="site-logo">
                        <a href="#">
                            <img src={logo} width="271" alt="Near Crossword Puzzle"/>
                        </a>
                    </div>
                </header>
                <main className="main-area">
                    <NoCrosswordsPage/>
                </main>
            </div>
        )
    } else {
        return (<div>email me, something weird happened. mike@near.org</div>)
    }
}

export default App;

'''
'''--- src/components/CrosswordPage.js ---
import {ThemeProvider} from "styled-components";
import Crossword from "react-crossword";
import React from 'react';

const CrosswordPage = ({data, onCrosswordComplete}) => {
    return (

        <div className="content">
            <div style={{ width: '100vw' }}>
                <ThemeProvider
                    theme={{
                        columnBreakpoint   : '9999px',
                        gridBackground     : '#fff',
                        cellBackground     : '#D5D5D5',
                        cellBorder         : '#D5D5D5',
                        textColor          : '#000000',
                        numberColor        : '#000000',
                        focusBackground    : 'rgba(170, 208, 85, 0.5)',
                        highlightBackground: 'rgba(255, 200, 96, 0.5)',
                    }}
                >
                    <Crossword data={data} onCrosswordComplete={onCrosswordComplete}/>
                </ThemeProvider>

            </div>
        </div>

    );
}

export default CrosswordPage;

'''
'''--- src/components/NoCrosswordsPage.js ---
import React from 'react';

const NoCrosswordsPage = () => {
    return (
        <div className="container no-puzzles">
            <div className="title">All puzzles have been solved</div>
            <div className="error-msg">Sorry friend, no crossword puzzles available at this time.<br/>In the meantime, check out the links below. :)
            </div>
            <div className="content"><a href="https://examples.near.org?from=crossword" className="btn" target="_blank">NEAR Examples<br/>(for developers)</a></div>
            <div className="content"><a href="https://awesomenear.com?from=crossword" className="btn" target="_blank">Awesome NEAR projects.<br/>(DeFi, NFTs, games, comics…)</a></div>
        </div>
    )
}
export default NoCrosswordsPage;

'''
'''--- src/components/SuccessPage.js ---
import React from "react";
const rainbowBridge = require('../img/rainbow-bridge.gif');

const SuccessPage = () => {
    return (
        <div className="container">
            <div className="title">Reward was claimed!</div>
            <div className="error-msg">
              <p>Transaction with reward was successfully sent.</p>
              <p>Check out what you can do with your prize money below.</p>
            </div>
            <hr />
            <div className="grid success-links grid-flow-col">
              <div className="success-link-border-right"><p>Try DeFi on NEAR:</p><div>
                <a href="https://ref.finance?from=crossword" target="_blank"><svg width="180" height="34" viewBox="0 0 112 22" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M28.021 6.05452H31.5051C32.726 6.05452 33.9151 6.13784 34.8558 6.64781C35.387 6.92093 35.8302 7.33857 36.1342 7.85253C36.4381 8.36649 36.5905 8.95585 36.5737 9.55261C36.5737 11.1692 35.5996 12.4224 33.9151 12.8357L37.5143 18.002H35.0543L31.7186 13.0674H30.1175V18.002H28.021V6.05452ZM31.7853 11.4491C32.7426 11.4491 33.3864 11.3175 33.8651 10.9708C34.0759 10.8013 34.2414 10.5823 34.3471 10.3334C34.4528 10.0845 34.4953 9.81335 34.4709 9.54406C34.4465 9.27478 34.3559 9.01569 34.2071 8.78983C34.0584 8.56396 33.8561 8.37831 33.6183 8.24937C33.0895 7.96772 32.4291 7.91606 31.3884 7.91606H30.1175V11.4491H31.7853ZM39.8259 14.4856C40.0744 15.8388 41.1469 16.5305 42.5178 16.5305C43.5175 16.5119 44.4867 16.1834 45.2914 15.5905V17.4237C44.5326 17.902 43.3768 18.182 42.3193 18.182C39.7109 18.182 37.7962 16.5005 37.7962 13.959C37.7962 11.3858 39.7275 9.7026 41.9391 9.7026C43.9538 9.7026 45.7384 11.0725 45.7384 13.679C45.7399 13.9492 45.7232 14.2193 45.6884 14.4873L39.8259 14.4856ZM39.8259 13.099H43.8721C43.7237 11.8791 42.8314 11.3175 41.9241 11.3175C41.0168 11.3175 40.0744 11.8791 39.8259 13.099ZM48.0817 11.5825H46.8609V9.88259H48.0817V8.49602C48.0817 7.40776 48.2802 6.49615 48.8756 5.92286C49.4193 5.39456 50.2282 5.21291 50.9721 5.21291C51.4148 5.20679 51.8555 5.2738 52.2763 5.41123V7.09445C51.9085 7.00526 51.5322 6.95554 51.1539 6.94612C50.2616 6.94612 50.0798 7.53941 50.0798 8.31436V9.88259H52.0578V11.5825H50.0798V18.002H48.0784L48.0817 11.5825Z" fill="black"></path><path d="M54.8349 16.0039C55.0503 16.0039 55.2609 16.0677 55.44 16.1873C55.6191 16.3069 55.7587 16.4768 55.8411 16.6757C55.9236 16.8745 55.9451 17.0934 55.9031 17.3045C55.8611 17.5156 55.7574 17.7095 55.6051 17.8617C55.4527 18.0139 55.2587 18.1175 55.0474 18.1595C54.8362 18.2015 54.6172 18.1799 54.4182 18.0976C54.2192 18.0152 54.0491 17.8757 53.9294 17.6968C53.8097 17.5178 53.7458 17.3074 53.7458 17.0921C53.7485 16.8043 53.864 16.529 54.0677 16.3255C54.2714 16.122 54.5469 16.0065 54.8349 16.0039ZM59.3298 11.2192H58.0422V9.88598H59.3298V8.33442C59.3298 7.2795 59.4782 6.45456 60.0569 5.89293C60.5673 5.39296 61.2611 5.21631 61.9549 5.21631C62.3679 5.21904 62.7788 5.27505 63.1775 5.38296V6.7162C62.7986 6.62591 62.4111 6.57619 62.0216 6.56788C60.9976 6.56788 60.8158 7.26117 60.8158 8.11944V9.88265H62.8989V11.2159H60.8158V17.9971H59.3298V11.2192ZM65.334 6.05292C65.5398 6.05292 65.741 6.11391 65.9122 6.22818C66.0833 6.34244 66.2167 6.50486 66.2955 6.69488C66.3743 6.8849 66.3949 7.094 66.3547 7.29572C66.3145 7.49745 66.2154 7.68275 66.0699 7.82818C65.9243 7.97362 65.7389 8.07266 65.537 8.11279C65.3351 8.15292 65.1259 8.13232 64.9357 8.05361C64.7455 7.9749 64.583 7.84161 64.4686 7.6706C64.3543 7.49958 64.2932 7.29852 64.2932 7.09284C64.2928 6.95567 64.3196 6.81977 64.3722 6.69305C64.4248 6.56634 64.5021 6.45133 64.5995 6.35472C64.697 6.25811 64.8127 6.18183 64.9399 6.1303C65.0672 6.07877 65.2034 6.05304 65.3406 6.05458L65.334 6.05292ZM64.5901 9.88598H66.0762V18.0038H64.5901V9.88598ZM68.6913 9.88265H70.1774V10.9059L70.2107 10.9209C70.9566 10.1548 71.9765 9.71597 73.046 9.701C73.9367 9.701 74.6972 10.0143 75.2142 10.5909C75.6595 11.1026 75.8914 11.7309 75.8914 12.9841V18.0004H74.407V13.2641C74.407 12.4225 74.2902 11.9308 74.0267 11.6142C73.6932 11.2192 73.1678 11.0859 72.7225 11.0859C71.7968 11.0859 70.7578 11.6642 70.179 12.4391V18.0004H68.693L68.6913 9.88265ZM78.6316 17.6038C78.3549 17.3946 78.1325 17.1221 77.983 16.8092C77.8335 16.4963 77.7614 16.1521 77.7727 15.8056C77.7624 15.4104 77.8561 15.0195 78.0447 14.6721C78.2332 14.3246 78.5098 14.0327 78.8468 13.8257C79.4572 13.4291 80.2828 13.2807 81.125 13.2807C81.7093 13.2811 82.2913 13.3533 82.8579 13.4957V12.8191C82.8579 12.2258 82.7095 11.7792 82.3959 11.4859C82.0824 11.1926 81.587 11.0409 80.8949 11.0409C79.9992 11.0405 79.1263 11.3234 78.4015 11.8492V10.3976C79.2223 9.91958 80.1602 9.6795 81.11 9.70433C82.1007 9.70433 82.9597 9.91931 83.5367 10.4459C84.0154 10.8759 84.3456 11.5692 84.3456 12.5741V16.0239C84.3456 16.5239 84.5274 16.8805 84.9744 16.8805C85.1405 16.8778 85.3039 16.8385 85.4531 16.7655V18.0038C85.2003 18.1032 84.9308 18.1535 84.6592 18.1521C84.3443 18.1656 84.0318 18.0928 83.7555 17.9415C83.4791 17.7902 83.2494 17.5662 83.0914 17.2938H83.0581C82.5961 17.7221 81.6554 18.1837 80.5563 18.1837C79.8695 18.1987 79.1956 17.9957 78.6316 17.6038ZM82.8579 16.1522V14.634C82.3414 14.4935 81.8087 14.4212 81.2735 14.419C80.2728 14.419 79.2721 14.7156 79.2721 15.6739C79.2721 16.4655 79.9492 16.8605 80.8248 16.8605C81.5615 16.8514 82.2752 16.6028 82.8579 16.1522ZM86.9541 9.88265H88.4402V10.9059L88.4719 10.9209C89.2177 10.1548 90.2376 9.71597 91.3072 9.701C92.1995 9.701 92.9583 10.0143 93.4754 10.5909C93.9207 11.1026 94.1525 11.7309 94.1525 12.9841V18.0004H92.6665V13.2641C92.6665 12.4225 92.5514 11.9308 92.2862 11.6142C91.9526 11.2192 91.4273 11.0859 90.9819 11.0859C90.058 11.0859 89.0172 11.6642 88.4402 12.4391V18.0004H86.9541V9.88265ZM102.854 17.6204C102.101 17.9995 101.268 18.1915 100.425 18.1804C97.8484 18.1804 96.0171 16.3989 96.0171 13.9907C96.0171 11.4909 97.9985 9.701 100.52 9.701C101.282 9.6988 102.034 9.87397 102.717 10.2126V11.7492C102.043 11.3113 101.259 11.0716 100.455 11.0576C98.6873 11.0576 97.5149 12.3608 97.5149 13.994C97.5149 15.6606 98.7541 16.8272 100.504 16.8272C101.352 16.8338 102.178 16.5544 102.849 16.0339L102.854 17.6204ZM105.744 14.3707C105.957 15.9706 107.147 16.8455 108.746 16.8455C109.766 16.8303 110.753 16.4788 111.553 15.8456V17.4155C110.828 17.8771 109.705 18.1737 108.648 18.1737C106.146 18.1737 104.256 16.4922 104.256 13.934C104.256 11.3759 106.121 9.69433 108.301 9.69433C110.282 9.69433 112 11.0792 112 13.6207C112.002 13.8694 111.985 14.1178 111.95 14.364L105.744 14.3707ZM105.776 13.2041H110.564C110.432 11.5859 109.243 11.0376 108.269 11.0376C107.197 11.0376 106.041 11.6975 105.776 13.1991V13.2041Z" fill="#00C08B"></path><path d="M14.0556 14.0561V22H22L14.0556 14.0561ZM7.18056 7.18156L10.2972 10.2965L13.4444 7.14948V1.37641H7.18056V7.18156ZM7.18056 9.98942V21.9985H13.4444V9.9604L10.2972 13.1074L7.18056 9.98942ZM14.4375 1.37488H14.0556V6.53841L18.0461 2.54355C16.9962 1.78413 15.7333 1.37566 14.4375 1.37641V1.37488ZM0 12.4047V22H6.56944V9.37988L4.79722 7.60778L0 12.4047ZM0 9.59529L4.79722 4.79839L6.56944 6.57202V1.37793H0V9.59529ZM20.625 7.56348C20.6267 6.26503 20.2176 4.99932 19.4562 3.94748L14.0556 9.34933V13.7506H14.4375C15.2502 13.7506 16.0549 13.5905 16.8057 13.2794C17.5565 12.9684 18.2387 12.5125 18.8133 11.9379C19.3878 11.3632 19.8436 10.6809 20.1544 9.93011C20.4653 9.17929 20.6252 8.37458 20.625 7.56195V7.56348Z" fill="black"></path><path d="M17.8032 0L21.9282 4.12472V0H17.8032Z" fill="#00C08B"></path></svg></a></div><br/>
                <div>Don't miss out on the farming :)</div>
              </div>
              <div className="success-link-border-right">
                <div>Check out NEAR projects, games, NFTs, comics…</div><br/>
                <div><a href="https://awesomenear.com?from=crossword" target="_blank">Awesome NEAR</a></div>
              </div>
              <div>
                <p>Bridge your prize money to Ethereum or Aurora</p>
                <div className="success-links-center">
                  <a href="https://rainbowbridge.app?from=crossword" target="_blank"><img src={rainbowBridge} width="319" alt="Image of Aurora's Rainbow Bridge where NEAR and Ethereum can bridge assets"/></a>
                </div>
              </div>
            </div>
        </div>
    );
}

export default SuccessPage;

'''
'''--- src/components/WonPage.js ---
import React from "react";
import {motion} from 'framer-motion/dist/framer-motion';

const WonPage = ({
                     claimStatusClasses,
                     claimError,
                     needsNewAccount,
                     setNeedsNewAccount,
                     claimPrize,
                     playerKeyPair,
                     nearConfig
                 }) => {

    async function claimAccountType(e) {
        if (e.target.value === 'create-account') {
            setNeedsNewAccount(true);
        } else {
            setNeedsNewAccount(false);
        }
    }

    return (
        <div className="container">
            <div className="title">You won!</div>
            <div className="error-msg">You still need to claim your prize.</div>
            <div className="content">
                <form action="">
                    <div id="claim-status" className={claimStatusClasses}><p>{claimError}</p></div>
                    <div className="field-group">
                        <label htmlFor="claim-memo" className="sr-only">Enter your winning memo:</label>
                        <input type="text" id="claim-memo" name="claim-memo" placeholder="Enter your winning memo:"/>
                    </div>
                    <div className="field-group">
                        <div className="radio-field">
                            <input
                                type="radio"
                                id="have-account"
                                name="account-funding-radio"
                                value="have-account"
                                checked={needsNewAccount === false}
                                onChange={claimAccountType}
                            />
                            <label htmlFor="have-account">I have an account</label>
                        </div>
                        <div className="radio-field">
                            <input
                                type="radio"
                                id="create-account"
                                name="account-funding-radio"
                                value="create-account"
                                checked={needsNewAccount === true}
                                onChange={claimAccountType}
                            />
                            <label htmlFor="create-account">I need to create an account</label>
                        </div>
                    </div>

                    <motion.div
                        id="seed-phrase-wrapper"
                        className="field-group"
                        animate={{
                            opacity: needsNewAccount === true ? 1 : 0,
                            transitionEnd: {
                                display: needsNewAccount === true?"block":"none",
                            },
                        }}
                        transition={{duration: 0.5}}

                    >
                        <h3>You need to write this down, friend.</h3>
                        <p id="seed-phrase">{playerKeyPair.seedPhrase}</p>
                        <p>After you submit and it succeeds, use this seed phrase at <a
                            href={nearConfig.walletUrl}
                            target="_blank">NEAR Wallet</a>
                        </p>
                    </motion.div>

                    <div className="field-group">
                        <label htmlFor="claim-account-id" className="sr-only">Enter account name</label>
                        <input type="text" id="claim-account-id" name="claim-account-id"
                               placeholder="Enter account name"/>
                    </div>

                    <button type="submit" id="claim-button" onClick={claimPrize}>Submit</button>
                </form>
            </div>
        </div>
    );
}

export default WonPage;

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-crossword-account.testnet';

function getConfig(env) {
  switch(env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/css/main.css ---
*, *:before, *:after {
  box-sizing: border-box;
}

html {
  color: #222;
  font-size: 1em;
  line-height: 1.4;
}

body {
  font-size: 16px;
  line-height: 1.43;
  font-family: Manrope, sans-serif !important;
  color: #000;
  background: url('../img/bg.png') repeat-x top center;
  background-size: auto 236px;
}

::-moz-selection {
  background: #b3d4fc;
  text-shadow: none;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

textarea {
  resize: vertical;
}

.hidden,
[hidden] {
  display: none !important;
}

img {
  display: flex;
  max-width: 100%;
  height: auto;
}

.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.sr-only.focusable:active,
.sr-only.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: inherit;
  width: auto;
}

.invisible {
  visibility: hidden;
}

.clearfix::before,
.clearfix::after {
  content: " ";
  display: table;
}

.clearfix::after {
  clear: both;
}

@media only screen and (min-width: 35em) {
  /* Style adjustments for viewports that meet the condition */
}

@media print,
  (-webkit-min-device-pixel-ratio: 1.25),
  (min-resolution: 1.25dppx),
  (min-resolution: 120dpi) {
}

@media print {
  *,
  *::before,
  *::after {
    background: #fff !important;
    color: #000 !important;
    /* Black prints faster */
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]::after {
    content: " (" attr(href) ")";
  }

  abbr[title]::after {
    content: " (" attr(title) ")";
  }

  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: "";
  }

  pre {
    white-space: pre-wrap !important;
  }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  thead {
    display: table-header-group;
  }

  tr,
  img {
    page-break-inside: avoid;
  }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }
}

.container {
  padding: 0 15px;
  width: 100vw;
  /*max-width: calc(545px + 30px);*/
  margin: 0 auto;
  text-align: center;
}

.wrapper {
  max-width: 100%;
  display: grid;
  grid-gap: 0;
  grid-template-areas:
          "header"
          "content";
  grid-template-rows: auto 1fr;
  grid-template-columns: 1fr;
  min-height: 100vh;
}

.main-area {
  min-width: 100%;
  max-width: 100vw;
  grid-area: content;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

.site-header {
  grid-area: header;
  display: flex;
  justify-content: center;
  align-items: center;
  /*padding-top: 24px;*/
  padding-top: 48px;
  /*padding-bottom: 24px;*/
}

.field-group {
  max-width: 423px;
  margin: 0 auto 25px;
}
.content {
  margin-top: 25px;
}
.field-group input:not([type=radio]):not([type=checkbox]):not([type=submit]):not([type=reset]) {
  background: rgba(213, 213, 213, 0.1);
  border: 1px solid #D4D4D4;
  border-radius: 3px;
  display: block;
  width: 100%;
  color: #000;
  padding: 12px 8px;
  font-weight: 500;
  text-align: left;
}

.field-group input:not([type=radio]):not([type=checkbox]):not([type=submit]):not([type=reset]):focus {
  outline-color: #AAD055;
}
.field-group input:not([type=radio]):not([type=checkbox])::placeholder {
  color: rgba(0,0,0,.4);
}

input[type=submit],
button[type=submit],
.btn {
  font-weight: 500;
  color: #000;
  background: rgba(255, 255, 255, 0.5);
  border: 1px solid #000000;
  box-sizing: border-box;
  border-radius: 22px;
  min-width: 210px;
  height: 44px;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
}
input[type=submit]:hover,
button[type=submit]:hover,
.btn:hover {
  background: #000;
  color: #fff;
}

.radio-field {
  text-align: left;
  line-height: 2;
}
.radio-field label{
  position: relative;
  padding-left: 23px;
}
.radio-field label:before{
  content: '';
  position: absolute;
  left: 0;
  top: 1px;
  background: rgba(196, 196, 196, 0.1);
  border: 1.5px solid #D4D4D4;
  width: 17px;
  height: 17px;
  border-radius: 50%;
}
.radio-field input {
  position: absolute;
  opacity: 0;
}
.radio-field input:checked + label:before{
  background: #AAD055;
  border-color: #AAD055;
}

.title {
  font-weight: 600;
  font-size: 37px;
  line-height: 1;
  color: #6B6EF9;
  margin: 0 0 5px;
}
.error-msg {
  font-weight: 600;
  line-height: 2.5;
  color: #DB5555;
}

/*.site-logo { padding-top: 100px; }*/

.main-area .grid {
  /*max-width: 567px;*/
  /*max-width: 45vh;*/
  min-width: 290px;
  width: calc(100% - 30px);
  margin: 0 auto;
  max-width: 70vh;
}
.main-area .clues {
  background: #F5F5F5;
  display: flex;
  justify-content: center;
  padding: 60px 0;
}
.main-area .clues .direction {
  margin: 0 6px;
  font-size: 14px;
}
.main-area .clues .direction h3 {
  font-size: 14px;
  color: #000;
}

.main-area .grid [text-anchor="start"] {
  font-size: 41% !important;
}

.main-area .styles_WrapperUi__2TxXl {
  position: fixed;
}
'''
'''--- src/css/normalize.css ---
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers.
 */

body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */

main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * Remove the gray background on active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove the border on images inside links in IE 10.
 */

img {
  border-style: none;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */

details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Misc
   ========================================================================== */

/**
 * Add the correct display in IE 10+.
 */

template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */

[hidden] {
  display: none;
}

'''
'''--- src/fonts/OFL.txt ---
Copyright (c) 2016-2019 The Inter Project Authors (me@rsms.me)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

'''
'''--- src/fonts/README.txt ---
Inter Variable Font
===================

This download contains Inter as both a variable font and static fonts.

Inter is a variable font with these axes:
  slnt
  wght

This means all the styles are contained in a single file:
  Inter-VariableFont_slnt,wght.ttf

If your app fully supports variable fonts, you can now pick intermediate styles
that aren’t available as static fonts. Not all apps support variable fonts, and
in those cases you can use the static font files for Inter:
  static/Inter-Thin.ttf
  static/Inter-ExtraLight.ttf
  static/Inter-Light.ttf
  static/Inter-Regular.ttf
  static/Inter-Medium.ttf
  static/Inter-SemiBold.ttf
  static/Inter-Bold.ttf
  static/Inter-ExtraBold.ttf
  static/Inter-Black.ttf

Get started
-----------

1. Install the font files you want to use

2. Use your app's font picker to view the font family and all the
available styles

Learn more about variable fonts
-------------------------------

  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts
  https://variablefonts.typenetwork.com
  https://medium.com/variable-fonts

In desktop apps

  https://theblog.adobe.com/can-variable-fonts-illustrator-cc
  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts

Online

  https://developers.google.com/fonts/docs/getting_started
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide
  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts

Installing fonts

  MacOS: https://support.apple.com/en-us/HT201749
  Linux: https://www.google.com/search?q=how+to+install+a+font+on+gnu%2Blinux
  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows

Android Apps

  https://developers.google.com/fonts/docs/android
  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts

License
-------
Please read the full license text (OFL.txt) to understand the permissions,
restrictions and requirements for usage, redistribution, and modification.

You can use them freely in your products & projects - print or digital,
commercial or otherwise.

This isn't legal advice, please consider consulting a lawyer and see the full
license for all details.

'''
'''--- src/index.html ---
<!doctype html>
<html class="no-js" lang="en">

<head>
  <meta charset="utf-8">
  <title>Crossword Puzzle on NEAR</title>
  <meta name="description" content="A smart contract powered crossword puzzle on the proof-of-stake, sharded NEAR Protocol blockchain">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="./favicon.ico" />
  <link rel="apple-touch-icon" href="./favicon.ico" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="css/normalize.css">
  <link rel="stylesheet" href="css/main.css">

  <meta name="theme-color" content="#fafafa">
  <meta property="og:title" content="NEAR Crossword Puzzle">
  <meta property="og:description" content="A learning opportunity with NEAR smart contracts and tools.">
  <meta name="monetization" content="$ilp.uphold.com/UBRhzFMzNFyF">
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-W7388GB8Q3"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-W7388GB8Q3');
  </script>
</head>

<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
<script src="./index.js"></script>
</body>

</html>

'''
'''--- src/index.js ---
import "regenerator-runtime/runtime";
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import { mungeBlockchainCrossword, viewMethodOnContract } from './utils';
import { generateSeedPhrase } from 'near-seed-phrase';

async function initCrossword() {
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');

  let existingKey = localStorage.getItem('playerKeyPair');

  if (!existingKey) {
    // Create a random key in here
    let seedPhrase = generateSeedPhrase();
    localStorage.setItem('playerKeyPair', JSON.stringify(seedPhrase));
  }

  // Get crossword puzzle using view method
  const chainData = await viewMethodOnContract(nearConfig, 'get_unsolved_puzzles');
  let data;

  // There may not be any crossword puzzles to solve, check this.
  if (chainData.puzzles.length) {
    // Save the crossword solution's public key
    // Again, assuming there's only one crossword puzzle.
    localStorage.setItem('crosswordSolutionPublicKey', chainData.puzzles[0]['solution_public_key']);
    data = mungeBlockchainCrossword(chainData.puzzles);
  } else {
    console.log("Oof, there's no crossword to play right now, friend.");
  }
  let creatorAccount = chainData.creator_account;

  return { nearConfig, data, creatorAccount };
}

window.nearInitPromise = initCrossword()
  .then(({ nearConfig, data, creatorAccount }) => {
    ReactDOM.render(
      <App
        nearConfig={nearConfig}
        data={data}
        creatorAccount={creatorAccount}
      />,
      document.getElementById('root'));
  });

'''
'''--- src/loader.js ---
import React from 'react'
import ExampleComponent from 'react-fullpage-custom-loader'

const defaultProps = {
  sentences: [
    'Transaction processing…',
  ],
  loaderType: 'fire', // a nice one
  loaderSize: 'big', // small, medium or big?
  color: '#f2f2f2', // your default color for the loader
  textStyles: { // Any CSS style!
    fontSize: 19,
    fontWeight: 'bold',
    height: '6em',
    color: '#f2f2f2'
  },
  wrapperBackgroundColor: 'linear-gradient(to bottom, #f2f2f2 0%, #111111 100%)', // any valid CSS background string works (gradients here!)
  counter: false, // We are going to show the counter below the text
  counterMax: 5, // Stop after 5 cycles
  counterDelay: 3000, // A cycle length in milliseconds
  counterChars: null, // if no chars are passed you get to see the counter number
  counterStyles: {
    color: 'white'
  }, // any text style to modify the counter
  fadeIn: true, // controlled on top level
  startFadeOut: false // controlled on top level
}

const SimpleDark = (props) => {
  return (
    <ExampleComponent
      {...defaultProps}
      {...props}
    />
  )
}

export default SimpleDark

'''
'''--- src/utils.js ---
// This function takes the input from the Rust smart contract
// and turns it into what the crossword library would like.
// Opportunity to enhance the library so this isn't necessary.

import * as nearAPI from 'near-api-js';

function mungeBlockchainCrossword(chainData) {
  const data = {
    across: {},
    down: {}
  };
  // Assume there is only one crossword puzzle, get the first
  const crosswordClues = chainData[0].answer;

  crosswordClues.forEach((clue) => {
    // In the smart contract it's stored as "Across" but the
    // React library uses "across"
    const direction = clue.direction.toLowerCase();
    data[direction][clue.num] = {};
    data[direction][clue.num]['clue'] = clue.clue;
    data[direction][clue.num]['answer'] = '?'.repeat(clue.length);
    data[direction][clue.num]['row'] = clue.start.y;
    data[direction][clue.num]['col'] = clue.start.x;
  });
  return data;
}

// Our API could be improved here :)
// See: https://github.com/near/near-api-js/issues/612
async function viewMethodOnContract(nearConfig, method) {
  const provider = new nearAPI.providers.JsonRpcProvider(nearConfig.nodeUrl);
  const rawResult = await provider.query(`call/${nearConfig.contractName}/${method}`, 'AQ4'); // Base 58 of '{}'
  return JSON.parse(rawResult.result.map((x) => String.fromCharCode(x)).join(''));
}

function parseSolutionSeedPhrase(data, gridData) {
  // JavaScript determining what the highest clue number is
  // Example: 10 if there are ten clues, some which have both across and down clues
  let totalClues = Object.keys(data.across).concat(Object.keys(data.down))
    .map(n => parseInt(n))
    .reduce((n, m) => Math.max(n, m));

  let seedPhrase = [];
  // Assume that crossword starts at 1 and goes to totalClues
  for (let i = 1; i <= totalClues; i++) {
    let word = '';
    // If a number has both across and down clues, do across first.
    let iString = i.toString(); // not strictly necessary
    if (data.across.hasOwnProperty(iString)) {
      const answerLength = data.across[i].answer.length;
      for (let j = 0; j < answerLength; j++) {
        word += gridData[data['across'][i].row][data['across'][i].col + j].guess;
      }
      seedPhrase.push(word);
    }
    word = ''; // Clear for items where there's both across and down
    if (data.down.hasOwnProperty(iString)) {
      const answerLength = data.down[i].answer.length;
      for (let j = 0; j < answerLength; j++) {
        word += gridData[data['down'][i].row + j][data['down'][i].col].guess;
      }
      seedPhrase.push(word);
    }
  }
  const finalSeedPhrase = seedPhrase.map(w => w.toLowerCase()).join(' ');
  console.log(`Crossword solution as seed phrase: %c${finalSeedPhrase}`, "color: #00C1DE;");
  return finalSeedPhrase;
}

// Taken from Mozilla docs here:
// https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_1_%E2%80%93_escaping_the_string_before_encoding_it
function b64toUtf8(str) {
  return decodeURIComponent(escape(window.atob(str)));
}

/* Example of expected data for crossword library
  export const data = {
    across: {
      1: {
        clue: 'one plus one',
        answer: 'TWO',
        row: 0,
        col: 0,
      },
    },
    down: {
      2: {
        clue: 'three minus two',
        answer: 'ONE',
        row: 0,
        col: 2,
      },
    },
  };
*/

module.exports = {
  mungeBlockchainCrossword,
  viewMethodOnContract,
  parseSolutionSeedPhrase,
  b64toUtf8
};

'''