*GitHub Repository "mikenevermindng/connecus-ui"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/connecus-ui.iml" filepath="$PROJECT_DIR$/.idea/connecus-ui.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
'''
'''--- README.md ---
connesus
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `connesus.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `connesus.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account connesus.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'connesus.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- package.json ---
{
  "name": "connesus",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy:pages": "gh-pages -d dist/",
    "start": "parcel src/index.html --open",
    "dev": "npm run start",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "babel-plugin-module-resolver": "^4.1.0",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "react": ">=16.x",
    "react-dom": "~17.0.1",
    "react-icons": "^4.3.1",
    "react-router-dom": "^6.2.2",
    "react-tag-input": "^6.8.0",
    "regenerator-runtime": "~0.13.5",
    "src": "^1.1.2",
    "uuidv4": "^6.2.12",
    "web3.storage": "^3.5.6"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import { login, logout } from './utils'
import getConfig from './config'
import {
  BrowserRouter,
  Routes,
  Route,
  Link
} from "react-router-dom";
import DaoPage from './pages/Dao'
import Home from './pages/Home';
import CreateDao from "./pages/CreateDao";

const { networkId, contractName } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {

  return (
    <>
      <BrowserRouter>
        <Routes>
          <Route path="/create" element={<CreateDao />} />
          <Route path="/dao/:id" element={<DaoPage />} />
          <Route path="/" element={<Home />} />
        </Routes>
      </BrowserRouter>
    </>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/BountyCard/index.js ---
import React, {useState, useEffect} from 'react'
import hearts from '@assets/hearts.png'
import {timestampToDateTime} from '@utils/time.utils';
import useDaoContract from '@hooks/useDaoContract'

import './style.css'

export default function BountyCard({bounty, ftStorageBalance}) {

    const {contract: DaoContract} = useDaoContract()

    const {id, claim_amount, duration, start_time, token} = bounty

    const [claimable, setClaimable] = useState(false)
    const [claimTooltip, setClaimTooltip] = useState("")

    let expired = timestampToDateTime(duration, start_time);

    const claimHandler = async () => {
        DaoContract.claim_bounty({
            bounty_id: id
        })
    }

    useEffect(() => {
        let allowClaim = ftStorageBalance ? claim_amount > 0 : false
        setClaimTooltip(ftStorageBalance ? "" : "Deposit for token storage is required")
        setClaimable(allowClaim)
    }, [ftStorageBalance])
    
    return (
        <>
        <div className="bounty-card">
            <div className="token-name">
                {token.slice(0, -8)}
            </div>
            <div className="token-logo">
                <img src={hearts} alt="" />
            </div>
            <div className="token-account-id">
                {token}
            </div>
            <div className="token-amount">
                <div>You can claim</div>
                <div>{claim_amount} Connecus</div>
            </div>
            <div className="claim-button">
                <button 
                    type="button" 
                    className="btn btn-warning" 
                    disabled={!claimable} 
                    onClick={claimHandler}
                    data-bs-toggle="tooltip" 
                    data-bs-placement="top" 
                    title={claimTooltip}
                >
                    Claim
                </button>
            </div>
            <div className="token-claim-status">
                Opening, expired at {expired.toLocaleTimeString()} {expired.toLocaleDateString()}
            </div>
        </div>
        </>
    )
}
'''
'''--- src/components/BountyCard/style.css ---
.bounty-card {
    width: 250px;
    padding: 20px 10px;
    background: #fff;
    text-align: center;
    border-radius: 10px;
    margin: 20px 10px
}

.bounty-card .token-name {
    color: #aaa;
    font-size: 1.2rem;
    font-weight: bold;
}

.bounty-card .token-logo img {
    width: 80px;
    height: 80px;
}

.bounty-card .token-amount {
    font-size: 1rem;
    font-weight: bold;
    color: #555;
}

.bounty-card .token-account-id {
    color: #aaa;
    font-size: 0.8rem;
    font-weight: bold;
}

.bounty-card .token-claim-status {
    font-size: 0.6rem;
    color: #555;
}
'''
'''--- src/components/BountyCreate/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import useFtContract from "@hooks/useFtContract";
import { utils, transactions } from "near-api-js";
const FT_TOKEN_CONTRACT = "connecus-token.manhndev.testnet"
const TEST_DAO_CONTRACT = "connecus-dao.manhndev.testnet"

export default function BountyCreate() {

    const {contract: FtContract} = useFtContract()
    const [duration, setDuration] = useState(null)
    const [description, setDescription] = useState(null)
    const [claimValue, setClaimValue] = useState(0)
    const updateNumber = (event, callback) => {
        let value = event.target.value
        if (value === "") {
            callback(0)
            return
        }
        if (!isNaN(value)) {
            callback(parseInt(value).toString())
        }
    }
    const PAYMENT_TOKEN = {
        name: "Connecus",
        symbol: "CNES",
        accountId: "connecus.testnet"
    }

    const [optionListIndex, setOptionListIndex] = useState([])
    const MAX_OPTION = 8
    const [currentAction, setCurrentAction] = useState(0);

    const [tags, setTags] = useState([])
    const [currentInputTag, setCurrentInputTag] = useState("")

    const addTags = (tagString) => {
        setTags([...tags, tagString])
    }

    const removeTags = (index) => {
        setTags([
            ...tags.slice(0, index),
            ...tags.slice(index + 1)
        ])
    }

    const handleAddTags = (event) => {
        if (event.key === 'Enter') {
            event.preventDefault()
            addTags(event.target.value)
            setCurrentInputTag("")
        }
    }

    const handleCreateBounty = async (event) => {
        event.preventDefault()
        const claimers = {}
        const claimAmountPerson = parseInt(claimValue)
        
        tags.forEach(tag => {
            claimers[tag] = claimAmountPerson
        })

        if (Object.entries(claimers).length < 1) {
            alert("ERR_NO_CLAIMERS")
            return
        } 

        if (!description || !claimValue || !duration) {
            alert("FORM_NOT_FULFILLED")
            return
        }

        let data = {
            claimer: claimers,
            duration: (duration * 24 * 60 * 60 * 1000 * 1000000).toString(),
            start_time: (Date.now() * 1000000).toString(),
            token: FT_TOKEN_CONTRACT,
            description
        }

        const transferAmount = Object.entries(claimers).length * claimAmountPerson

        let transferMsg = {
            purpose: {
                CreateBounty: data
            }
        }

        let transferMsgString = JSON.stringify(transferMsg)

        const result = await window.account.signAndSendTransaction({
            receiverId: FtContract.contractId,
            actions: [
                transactions.functionCall(
                    'storage_deposit', 
                    {account_id: TEST_DAO_CONTRACT},
                    10000000000000, 
                    utils.format.parseNearAmount("0.01")
                ),
                transactions.functionCall(
                    'ft_transfer_call', 
                    {
                        receiver_id: TEST_DAO_CONTRACT, 
                        amount: transferAmount.toString(), 
                        memo: null,
                        msg: transferMsgString
                    }, 
                    250000000000000,
                    1
                )
            ]
        });

    }

    return (
        <>
        <form>
            <fieldset>
                <legend>Create Bounty</legend>
                <div className="mb-3">
                    <label htmlFor="disabledTextInput" className="form-label">Description</label>
                    <textarea id="disabledTextInput" className="form-control" placeholder="Description" onChange={(event) => setDescription(event.target.value)} />
                </div>
                <div className="mb-3">
                    <label className="form-label">Payment token</label>
                    <input 
                        id="paymentToken" 
                        className="form-control" 
                        placeholder="Description" 
                        disabled
                        value={`${PAYMENT_TOKEN.name} (${PAYMENT_TOKEN.symbol})`} />
                </div>
                <div className="mb-3">
                    <label className="form-label">Claim amount for each</label>
                    <input 
                        id="paymentToken" 
                        className="form-control" 
                        placeholder="Description" 
                        onChange={(e) => updateNumber(e, setClaimValue)}
                        value={claimValue} />
                </div>
                <div className="mb-3">
                    <label className="form-label">Claim duration</label>
                    <input 
                        id="paymentToken" 
                        className="form-control" 
                        placeholder="Claim duration (days)" 
                        onChange={(e) => updateNumber(e, setDuration)}
                        value={duration} />
                </div>
                <div className="mb-3">
                    <label htmlFor="disabledTextInput" className="form-label">Claimer</label>
                    <div className="d-flex flex-wrap">
                        {tags.map((tag, index) => {
                            return <div 
                                className="claimer-tag" 
                                data-bs-toggle="tooltip" 
                                data-bs-placement="top" 
                                title="Double click to remove"
                                key={`claimer-tag-${index}`}
                                onDoubleClick={() => removeTags(index)}
                            >{tag}</div>
                        })}
                    </div>
                    <input 
                        className="form-control" 
                        placeholder="Add claimer" 
                        value={currentInputTag}
                        onChange={(event) => setCurrentInputTag(event.target.value)}
                        onKeyDown={(event) => handleAddTags(event)}
                    />
                </div>
                <button className="btn btn-warning w-100 mt-5" onClick={(event) => handleCreateBounty(event)}>Submit</button>
            </fieldset>
        </form>
        </>
    )
}
'''
'''--- src/components/BountyCreate/style.css ---
.claimer-tag {
    padding: 2px 10px;
    background: #2c3e50;
    color: #fff;
    margin-bottom: 5px;
    margin-left: 5px;
    cursor: pointer;
}
'''
'''--- src/components/Button/index.js ---
import React from 'react';

import './style.css';

const Button = ({type, text}) => (
    <button className={`button ${type}`}>{text}</button>
)

export default Button;
'''
'''--- src/components/Button/style.css ---
.button {
    outline: none;
    border: none;
    border-radius: 4px;
    padding: 8px 16px;
    transition: all 0.2s ease-in-out;
}

.button:hover {
    transform: translateY(-2px);
}

.button.primary {
    background-color: #0a0ab1;
    color: white;
}

.button.primary:hover {
    background-color: #2727c9;
}

.button.secondary {
    background-color: white;
    color: #333;
    border: 2px solid #0a0ab1;
}

.button.secondary:hover {
    background-color: #e3e3e3;
}
'''
'''--- src/components/DaoBase/index.js ---
import React, {useState, useEffect} from 'react'

import facebook from '@assets/facebook.png'
import twitter from '@assets/twitter.png'
import instagram from '@assets/instagram.png'
import discord from '@assets/discord.png'
import donation from '@assets/hearts.png'
import './style.css'
import useDaoContract from '@hooks/useDaoContract'
import { utils, transactions } from "near-api-js";
const TEST_DAO_CONTRACT = "connecus-dao.manhndev.testnet"
const FT_TOKEN_CONTRACT = "connecus-token.manhndev.testnet"

export default function TokenCreateForm({metadata}) {

    const {contract: DaoContract} = useDaoContract()

    const [donateValue, setDonateValue] = useState(0)
    const updateDonateValue = (event) => {
        const value = event.target.value
        if (value === "") {
            setDonateValue(0)
            return
        }
        if (!isNaN(value)) {
            setDonateValue(parseInt(value).toString())
        }
    }

    const donateHandler = async () => {

        let transferMsg = {
            purpose: "OpenDonate"
        }

        let transferMsgString = JSON.stringify(transferMsg)

        const result = await window.account.signAndSendTransaction({
            receiverId: FT_TOKEN_CONTRACT,
            actions: [
                transactions.functionCall(
                    'storage_deposit', 
                    {account_id: TEST_DAO_CONTRACT},
                    10000000000000, 
                    utils.format.parseNearAmount("0.01")
                ),
                transactions.functionCall(
                    'ft_transfer_call', 
                    {
                        receiver_id: TEST_DAO_CONTRACT, 
                        amount: donateValue.toString(), 
                        memo: null,
                        msg: transferMsgString
                    }, 
                    250000000000000,
                    1
                )
            ]
        });
    }
    
    return (
        <>
        <div className="dao-base-information">
            <div className="dao-thumbnail">
                <img src={metadata?.thumbnail} alt="" />
            </div>
            <div className="dao-title">
                {metadata?.name?.toUpperCase()}
            </div>
            <div className="dao-owner">
                {TEST_DAO_CONTRACT}
            </div>
            <div className="dao-purpose">
                {metadata?.purpose?.toLowerCase()}
            </div>
            <div className="dao-social-networks d-flex justify-content-evenly mt-1">
                <div className="dao-social-thumbnail" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook">
                    <img src={facebook} alt="" />
                </div>
                <div className="dao-social-thumbnail" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter">
                    <img src={twitter} alt="" />
                </div>
                <div className="dao-social-thumbnail" data-bs-toggle="tooltip" data-bs-placement="top" title="Instagram">
                    <img src={instagram} alt="" />
                </div>
                <div className="dao-social-thumbnail" data-bs-toggle="tooltip" data-bs-placement="top" title="Discord">
                    <img src={discord} alt="" />
                </div>
                <div className="dao-social-thumbnail" data-bs-toggle="tooltip" data-bs-placement="top" title="Donate">
                    <a className="mr-2" data-bs-toggle="collapse" href="#collapseOpenDonate" role="button" aria-expanded="false" aria-controls="collapseOpenDonate">
                        <img src={donation} alt="" />
                    </a>
                </div>
            </div>
            <div className="collapse" id="collapseOpenDonate">
                <div className="d-flex justify-content-center">
                    <div className="input-group mb-3 mt-3 w-75">
                        <input 
                            min="0"
                            type="number"
                            className="form-control" 
                            placeholder="Donate value" 
                            aria-label="Recipient's username" 
                            aria-describedby="button-addon2"
                            value={donateValue}
                            onChange={(event) => updateDonateValue(event)}
                        />
                        <button className="btn btn-secondary" type="button" id="button-addon2" onClick={donateHandler}>Donate</button>
                    </div>
                </div>
            </div>
        </div>
        </>
    )
}
'''
'''--- src/components/DaoBase/style.css ---
.dao-base-information {
    width: 400px;
    padding: 40px 10px;
    background-color: #F5F5F5;
    border-radius: 10px;
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
    margin: 0 30px;
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
}

.dao-base-information .dao-thumbnail img {
    width: 60%;
    height: 60%;
    border-radius: 50%;
}

.dao-base-information .dao-thumbnail {
    text-align: center;
}

.dao-base-information .dao-title {
    margin-top: 1rem;
    text-align: center;
    font-size: 1.4rem;
    font-weight: bold;
    font-family: 'Fredoka', sans-serif;
}

.dao-base-information .dao-owner {
    margin-top: 0rem;
    text-align: center;
    font-size: 1.2rem;
    font-weight: bold;
    color: #aaa;
}

.dao-base-information .dao-purpose {
    padding: 0px 20px;
    text-align: center;
    font-family: 'Merriweather', serif;
    font-weight: 500;
    font-size: 0.9rem;
    font-weight: 600;
    color: #555;
}

.dao-base-information .dao-social-networks {
    padding: 0px 40px;
}

.dao-base-information .dao-social-networks .dao-social-thumbnail img {
    width: 36px;
    height: 36px;
    filter: grayscale(100%);
    transition: 0.3s;
    border-radius: 50%;
    
}

.dao-base-information .dao-social-thumbnail img:hover {
    filter: grayscale(0%);
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
}
'''
'''--- src/components/DaoBounties/index.js ---
import React, {useState, useEffect} from 'react'
import './style.css'
import BountyCard from '@component/BountyCard'
import useDaoContract from '@hooks/useDaoContract'

export default function DaoBounties({ftStorageBalance}) {

    const  {contract: DaoContract} = useDaoContract()
    const [start, setStart] = useState(0)
    const [limit, setLimit] = useState(10)
    const [bounties, setBounties] = useState([])

    useEffect(() => {
        if (DaoContract) {
            DaoContract.get_bounties({
                from_index: start,
                limit: limit,
                account_id: window.accountId
            }).then(result => {
                setBounties(result)
            })
        }
    }, [DaoContract])

    return (
        <>
        <div className="dao-bounties">
            <div className="dao-bounties-header mt-5">
                Claim your bounties
            </div>
            <div className="dao-bounties-list d-flex flex-wrap justify-content-between">
                {bounties.map(bounty => {
                    return <BountyCard key={bounty.id} bounty={bounty} ftStorageBalance={ftStorageBalance}/>
                })}
            </div>
        </div>
        </>
    )
}
'''
'''--- src/components/DaoBounties/style.css ---
.dao-bounties {
    margin-left: auto;
    min-height: 100vh;
    background-color: #e9e9e9;
    float: right;
    width: calc(100% - 460px);
    padding: 0px 30px 30px 30px;
}

.dao-bounties .dao-bounties-header {
    font-size: 1.5rem;
    color: #aaa;
    margin-right: 10px;
}
'''
'''--- src/components/DaoCard/index.js ---
import React from 'react';

import facebook from '@assets/facebook.png'
import twitter from '@assets/twitter.png'
import instagram from '@assets/instagram.png'
import discord from '@assets/discord.png'

import './style.css';

const DaoCard = ({thumbnail}) => (
    <div className='dao__card'>
        <div className='dao__card-img'>
            <div
                className='dao__card-thumbnail'
                style={{backgroundImage: "url(" + thumbnail + ")"}}
            />
            <div className='dao__card-thumbnail-overlay'>
                <div className='dao__card-social'>
                    <img src={facebook} alt="social-link" className='dao__card-social-icon'/>
                    <img src={twitter} alt="social-link" className='dao__card-social-icon'/>
                    <img src={instagram} alt="social-link" className='dao__card-social-icon'/>
                    <img src={discord} alt="social-link" className='dao__card-social-icon'/>
                </div>
            </div>
        </div>

        <div className='dao__card-content'>
            <div className='dao__card-title'>
                HYDRA M
            </div>
            <div className='dao__card-symbol'>
                GMR
            </div>
        </div>
    </div>
)

export default DaoCard;
'''
'''--- src/components/DaoCard/style.css ---
.dao__card {
    background-color: white;
    border-radius: 4px;
    width: 30%;
    height: auto;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
}

.dao__card:hover {
    transform: translateY(-8px);
    box-shadow: 0 10px 24px -8px rgba(0, 0, 0, 0.5);
}

.dao__card-img {
    width: 100%;
    height: 240px;
    position: relative;
}

.dao__card-thumbnail {
    width: 100%;
    height: 100%;
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
}

.dao__card:hover  .dao__card-thumbnail-overlay {
    opacity: 100;
}

.dao__card-thumbnail-overlay {
    opacity: 0;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.40);
    transition: all 0.2s ease-in-out;
}

.dao__card-social {
    position: absolute;
    bottom: 16px;
    left: 24px;
    display: flex;
    align-items: center;
    gap: 16px;
}

.dao__card-social-icon {
    width: 32px;
    height: 32px;
}

.dao__card-content {
    padding: 16px 24px;
}

.dao__card-title {
    font-weight: bold;
    font-size: 30px;
    text-transform: uppercase;
    margin-bottom: 16px;
}

.dao__card-symbol {
    font-size: 18px;
    font-style: italic;
    text-decoration: underline;
}
'''
'''--- src/components/DaoManagement/index.js ---
import React, {useState, useEffect} from 'react'
import './style.css'
import ProposalCreate from '@component/ProposalCreate'
import BountyCreate from '@component/BountyCreate'

export default function DaoManagement() {

    

    return (
        <>
        <div className="dao-management">
            <div className="dao-management-header mt-5">
                <p>
                    <a className="btn btn-light mr-2" data-bs-toggle="collapse" href="#collapseCreateProposal" role="button" aria-expanded="false" aria-controls="collapseCreateProposal">
                        Create proposal
                    </a>
                    <a className="btn btn-light mr-2" data-bs-toggle="collapse" href="#collapseCreateBounty" role="button" aria-expanded="false" aria-controls="collapseCreateBounty">
                        Create bounty
                    </a>
                </p>
                <div className="collapse" id="collapseCreateProposal">
                    <div className="card card-body">
                        <ProposalCreate />
                    </div>
                </div>
                <div className="collapse" id="collapseCreateBounty">
                    <div className="card card-body">
                        <BountyCreate />
                    </div>
                </div>
            </div>
        </div>
        </>
    )
}
'''
'''--- src/components/DaoManagement/style.css ---
.dao-management {
    margin-left: auto;
    min-height: 100vh;
    background-color: #e9e9e9;
    float: right;
    width: calc(100% - 460px);
    padding: 0px 30px 30px 30px;
}

.dao-bounties .dao-management-header {
    font-size: 1.5rem;
    color: #aaa;
    margin-right: 10px;
}
'''
'''--- src/components/DaoNewsFeed/index.js ---
import React, {useState, useEffect} from 'react'
import './style.css'
import PollingProposal from '@component/PollingProposal'
import DonateProposal from '@component/DonateProposal'
import useDaoContract from '@hooks/useDaoContract'

export default function DaoNewsFeed() {

    const {contract: DaoContract} = useDaoContract()
    const [proposals, setProposals] = useState([])
    const [total, setTotal] = useState(0)
    const [start, setStart] = useState(0)
    const [limit, setLimit] = useState(10)

    useEffect(() => {
        if (DaoContract) {
            const fetchData = async () => {
                let numberOfProposals = await DaoContract.get_last_proposal_id();
                setTotal(numberOfProposals);
                let proposalList = await DaoContract.get_proposals({
                    from_index: start, 
                    limit: limit, 
                    account_id: window.accountId ? window.accountId : ""
                })
                setProposals(proposalList)
            }
            fetchData()
        }
    }, [DaoContract])
    
    return (
        <>
        <div className="dao-news-feed">
            {proposals.map((proposal) => {
                if (proposal.kind === "Donate") {
                    return <DonateProposal proposal={proposal} key={`proposal-${proposal.id}`} />
                } else {
                    return <PollingProposal proposal={proposal} key={`proposal-${proposal.id}`}/>
                }
            })}
        </div>
        </>
    )
}
'''
'''--- src/components/DaoNewsFeed/style.css ---
.dao-news-feed {
    margin-left: auto;
    min-height: 100vh;
    background-color: #e9e9e9;
    float: right;
    width: calc(100% - 460px);
    padding: 0px 30px 30px 30px;
}
'''
'''--- src/components/DaoSubNavbar/index.js ---
import React, {useState, useEffect} from 'react'
import './style.css'
import burger from '@assets/hamburger.png'
import hearts from '@assets/hearts.png'
import { logout, login } from '../../utils'
import { utils, transactions } from "near-api-js";
const TEST_DAO_CONTRACT = "connecus-dao.manhndev.testnet"

export default function DaoSubNavbar({
    setCurrentTab,
    FtContract,
    ftStorageBalance,
    userDelegation,
    daoOwner
}) {

    const  [isActive, setActive] = useState(false);
    
    const [delegateValue, setDelegateValue] = useState(1)

    const updateDonateValue = (event) => {
        setDelegateValue(parseInt(event.target.value))
    } 

    const changeTab = (index) => {
        setCurrentTab(index)
        setActive(false)
    }

    const handleDelegate = async () => {
        
        let transferMsg = {
            purpose: {
                Delegate: window.accountId
            }
        }

        let transferMsgString = JSON.stringify(transferMsg)

        const result = await window.account.signAndSendTransaction({
            receiverId: FtContract.contractId,
            actions: [
                transactions.functionCall(
                    'storage_deposit', 
                    {account_id: TEST_DAO_CONTRACT},
                    10000000000000, 
                    utils.format.parseNearAmount("0.01")
                ),
                transactions.functionCall(
                    'ft_transfer_call', 
                    {
                        receiver_id: TEST_DAO_CONTRACT, 
                        amount: delegateValue.toString(), 
                        memo: null,
                        msg: transferMsgString
                    }, 
                    250000000000000,
                    1
                )
            ]
        });
    }

    const handleRegisterToken = async () => {
        await FtContract.storage_deposit(
            {account_id: window.accountId}, 
            10000000000000, 
            utils.format.parseNearAmount("0.01")
        )
    }

    return (
        <>
        <div className={`side-bar-menu ${isActive ? "active" : ""} d-flex flex-column justify-content-evenly`}>
            {window.accountId && (
                <>
                <div>
                    <div className="dropdown text-center">
                        <button className="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                            {`${window.accountId} `}
                        </button>
                        <ul className="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                            <li onClick={logout}><a className="dropdown-item danger" href="#">Logout</a></li>
                        </ul>
                    </div>
                    <div className="connecus mt-3">
                        <p className="text-center">Delegation Amount</p>
                        <p className="text-center">${userDelegation}</p>
                    </div>
                </div>
                </>
            )}
            {!window.accountId && <div className="text-center">
                <button className="btn btn-secondary" type="button" onClick={login}>
                    Login to Connecus
                </button>
            </div>}
            <div className="nav-items">
                <div className="nav-item" onClick={() => changeTab(1)}>
                    News feed
                </div>
                <div className="nav-item" onClick={() => changeTab(2)}>
                    Bounties
                </div>
                <div className="nav-item" onClick={() => changeTab(3)}>
                    Bounty Tasks
                </div>
                {daoOwner === window.accountId && <div className="nav-item" onClick={() => changeTab(4)}>
                    Manage
                </div>}
            </div>
            <div className="text-center">
                <div className="connecus-logo">
                    <img src={hearts} alt="" />
                </div>
                <div className="connecus">
                    Connecus
                </div>
            </div>
            <div>
                <div className="input-group mt-3 px-3">
                {ftStorageBalance &&<input 
                        min="1"
                        className="form-control text-end" 
                        placeholder={`Delegate Amount`} 
                        aria-label="Recipient's username" 
                        aria-describedby="button-addon2"
                        type="number"
                        value={delegateValue}
                        onChange={(event) => updateDonateValue(event)}
                    />}
                </div>
                <div className="input-group px-3 text-center mt-1">
                    {
                        ftStorageBalance ? <button 
                            className="btn btn-warning w-100" 
                            type="button" 
                            id="button-addon2"
                            onClick={handleDelegate}
                        >Add Delegate</button>
                        :  <button 
                            className="btn btn-warning w-100" 
                            type="button" 
                            id="button-addon2"
                            onClick={handleRegisterToken}
                        >Register Connecus</button>
                    }
                </div>
            </div>
        </div>
        <div className={`side-bar-menu-burger ${isActive ? "active" : ""}`} onClick={() => setActive(!isActive)}>
            <img src={burger} alt="burger" />
        </div>
        <div className={`grey-layer ${isActive ? "active" : ""}`}></div>
        <br />
        </>
    )
}
'''
'''--- src/components/DaoSubNavbar/style.css ---
.proposal-navbar {
    position: fixed;
    top: 15px;
    right: 0;
    z-index: 10000;
}

.side-bar-menu {
    min-height: 100vh;
    background-color: #fff;
    width: 20%;
    max-width: 250px;
    padding: 30px 0px 30px 0px;
    position: fixed;
    top: 0;
    left: -20%;
    z-index: 1000;
    transition: left 0.5s ease;
}

.side-bar-menu.active {
    left: 0;
}

.grey-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000;
    opacity: 0.5;
    transition: 0.1s;
    display: none;
    z-index: 500;
}

.grey-layer.active {
    display: block;
}

.side-bar-menu-burger {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 1000;
    background: #fff;
    padding: 5px;
    border-radius: 5px;
    transition: left 0.5s ease;
    cursor: pointer;
}

.side-bar-menu-burger.active {
    left: calc(20% + 20px);
}

.side-bar-menu-burger img {
    width: 32px;
    height: auto;
}

.side-bar-menu .connecus-logo {
    text-align: center;
}

.side-bar-menu .connecus {
    font-size: 1.2rem;
    font-weight: bold;
    color: #888;
}

.side-bar-menu .connecus p {
    margin-bottom: 0;
}

.side-bar-menu .connecus-logo img {
    width: 60%;
    height: auto;
}

.side-bar-menu .nav-items {
    padding: 20px 0px;
    margin: 30px 0px;
}

.side-bar-menu .nav-items .nav-item {
    font-size: 1.3rem;
    font-weight: 500;
    color: #888;
    cursor: pointer;
    margin: 0px 20px;
    text-align: center;
    transition: 0.2s;
}

.side-bar-menu .nav-items .nav-item:hover {
    background: #eee;
    color: #333;
}
'''
'''--- src/components/Donate/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import {timestampToDateTime} from '@utils/time.utils';
import { utils, transactions } from "near-api-js";
const TEST_DAO_CONTRACT = "connecus-dao.manhndev.testnet"
const FT_TOKEN_CONTRACT = "connecus-token.manhndev.testnet"

export default function Donate({proposal}) {

    let {duration, id, total_donations, submission_time: startTime} = proposal

    let expired = timestampToDateTime(duration, startTime);

    let [donateValue, setDonateValue] = useState(0)
    const updateDonateValue = (event) => {
        const value = event.target.value
        if (value === "") {
            setDonateValue(0)
            return
        }
        if (!isNaN(value)) {
            setDonateValue(parseInt(value).toString())
        }
    }

    const donateHandler = async () => {

        let transferMsg = {
            purpose: {
                ProposalDonate: parseInt(id)
            }
        }

        let transferMsgString = JSON.stringify(transferMsg)

        const result = await window.account.signAndSendTransaction({
            receiverId: FT_TOKEN_CONTRACT,
            actions: [
                transactions.functionCall(
                    'storage_deposit', 
                    {account_id: TEST_DAO_CONTRACT},
                    10000000000000, 
                    utils.format.parseNearAmount("0.01")
                ),
                transactions.functionCall(
                    'ft_transfer_call', 
                    {
                        receiver_id: TEST_DAO_CONTRACT, 
                        amount: donateValue.toString(), 
                        memo: null,
                        msg: transferMsgString
                    }, 
                    250000000000000,
                    1
                )
            ]
        });
    }

    return (
        <>
        <div className="wrapper">
            <header className="d-flex justify-content-between">
                <div>Donate</div>
                <div>${total_donations} CNES</div>
            </header>
            <div className="input-group mt-3">
                <input 
                    min="0"
                    type="number"
                    className="form-control" 
                    placeholder="Donate value" 
                    aria-label="Recipient's username" 
                    aria-describedby="button-addon2"
                    value={donateValue}
                    onChange={(event) => updateDonateValue(event)}
                />
                <button className="btn btn-secondary" type="button" id="button-addon2" onClick={donateHandler}>Donate</button>
            </div>
            <div id="emailHelp" className="form-text fst-italic">Expired at {expired.toLocaleTimeString()} {expired.toLocaleDateString()}</div>
        </div>
        </>
    )
}
'''
'''--- src/components/Donate/style.css ---
.wrapper{
    background: #fff;
    border-radius: 15px;
    padding: 25px;
    width: calc(100% - 64px);
    box-shadow: 0px 5px 10px rgba(0,0,0,0.1);
}

.donate-expired {
    font-size: 0.8rem;
    font-style: italic;
}
'''
'''--- src/components/DonateProposal/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import Donate from '@component/Donate'
import ProposalHeader from '@component/ProposalHeader'
import ProposalAction from '@component/ProposalAction'

export default function DonateProposal({proposal}) {

    const {description, duration, id, total_donations, submission_time} = proposal

    return (
        <>
            <div className="proposal mt-4">
                <ProposalHeader />
                <div className="proposal-description">
                    {description}
                </div>
                <div className="proposal-kind">
                    <Donate 
                        proposal={proposal}
                    />
                </div>
                {/* <ProposalAction /> */}
            </div>
            
        </>
    )
}
'''
'''--- src/components/DonateProposal/style.css ---
.proposal .proposal-kind {
    margin-left: 64px;
}

.proposal .proposal-description {
    margin: 0 64px 1rem 64px;
    text-align: justify;
}
'''
'''--- src/components/Footer/index.js ---
import React from 'react';

import facebook from '@assets/facebook.png'
import twitter from '@assets/twitter.png'
import instagram from '@assets/instagram.png'
import discord from '@assets/discord.png'

import './style.css';

const Footer = () => (
    <div className='footer'>
        <div className='footer--left'>
            <div className='footer__logo'>LOGO</div>
            <p className='footer__description'>Connecus is a platform to help you promote, evolve your own community easier like never before.</p>
            <div className='footer__social'>
                <img src={facebook} alt="social-link" className='footer__social-icon'/>
                <img src={twitter} alt="social-link" className='footer__social-icon'/>
                <img src={instagram} alt="social-link" className='footer__social-icon'/>
                <img src={discord} alt="social-link" className='footer__social-icon'/>
            </div>
        </div>

        <div className='footer--right'>
            <div className='footer__menu'>About Us</div>
            <div className='footer__menu'>Document</div>
            <div className='footer__menu'>FAQ</div>
        </div>
    </div>
)

export default Footer;
'''
'''--- src/components/Footer/style.css ---
.footer {
    width: 100%;
    background-color: white;
    padding: 64px 128px;
    display: flex;
    gap: 64px;
}

.footer__logo {
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 16px;
}

.footer__description {
    width: 70%;
}

.footer__social {
    margin-top: 32px;
    display: flex;
    align-items: center;
    gap: 16px;
}

.footer__social-icon {
    width: 32px;
    height: 32px;
    cursor: pointer;
}

.footer__menu {
    font-weight: 600;
    margin-bottom: 16px;
    cursor: pointer;
}
'''
'''--- src/components/InputField/index.js ---
import React from 'react';

import './style.css';

const InputField = ({label, type}) => {
    return (
        <div className='input-field'>
            <div className='input-label'>{label}</div>
            <input type={type} className='input-bar'/>
        </div>
    )
}

export default InputField;
'''
'''--- src/components/InputField/style.css ---
.input-field {
    margin-bottom: 24px;
}

.input-label {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 8px;
}

.input-bar {
    width: 100%;
    border: 2px solid #0a0ab1;
    border-radius: 4px;
    outline: none;
    padding: 8px 16px;
}
'''
'''--- src/components/Navbar/index.js ---
import React from 'react';

import Button from "../Button";

import './style.css';

const Navbar = () => (
    <div className='nav'>
        <div className='nav__logo'>LOGO</div>
        <Button type={'primary'} text={'Some Button!'}/>
    </div>
)

export default Navbar;
'''
'''--- src/components/Navbar/style.css ---
.nav {
    width: 100%;
    height: 64px;
    background-color: white;
    padding: 0 64px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: fixed;
    z-index: 5;
}

.nav__logo {
    font-size: 20px;
    font-weight: bold;
}

.nav__menu {
    display: flex;
    align-items: center;
    gap: 24px;
}

.nav__search-input {
    outline: none;
    border: none;
    border-radius: 4px;
    padding: 8px 16px;
    background-color: #dcd8d8;
}

.nav__button {
    background-color: #0a0ab1;
    color: white;
    outline: none;
    border: none;
    border-radius: 16px;
    padding: 8px 16px;
}
'''
'''--- src/components/Poll/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import {timestampToDateTime} from '@utils/time.utils';
import useDaoContract from '@hooks/useDaoContract'

export default function Poll({proposalId}) {

    const {contract: DaoContract} = useDaoContract()

    let [selected, setSelected] = useState(null)
    let [userDelegation, setUserDelegation] = useState(0)
    let [proposal, setProposal] = useState({
        duration: 0, 
        total_delegation_amount: 0, 
        option_delegations: 0, 
        options: [], 
        submission_time: 0
    })
    let {
        duration, 
        total_delegation_amount, 
        option_delegations, 
        options, 
        submission_time,
        user_select
    } = proposal

    console.log(total_delegation_amount)

    let expired = timestampToDateTime(duration, submission_time);

    const fetchProposal = async () => {
        let res = await DaoContract.get_proposal({id: proposalId, account_id: window.accountId})
        console.log(res);
        if (res) {
            setProposal(res)
        }
    }

    const [optionsList, setOptionsList] = useState([])

    useEffect(() => {
        const optionList = []
        Object.keys(options).forEach(function(key) {
            optionList.push({
                ...options[key],
                id: key,
            })
        });
        console.log(optionList)
        setOptionsList(optionList)
    }, [options])

    console.log(optionsList)

    useEffect(() => {
        if (DaoContract) {
            fetchProposal()
            DaoContract.delegation_balance_of({account_id: window.accountId}).then(result => {
                setUserDelegation(result)
            })
        }
    }, [DaoContract]) 

    useEffect(() => {
        if (user_select) {
            setSelected(user_select.option)
        }
    }, [user_select])

    const voteHandler = async (optionId) => {
        DaoContract.act_proposal({
            id: proposalId, 
            action: {
                Vote: {
                    option_id: optionId
                }
            }
        })
    }

    return (
        <>
        <div className="wrapper">
            <header>Vote</header>
            <div className="poll-area">
                {optionsList.map(option => {
                    let percent = option_delegations[option.id] ? option_delegations[option.id] / total_delegation_amount * 100 : 0
                    return (
                        <label key={option.id} className={`${selected === option.id ? "selected" : ""}`} onClick={() => voteHandler(option.id)}>
                            <div className="select-option">
                                <div className="column">
                                    <span className="circle"></span>
                                    <span className="text">{option.title}</span>
                                </div>
                                <span className="percent">{percent}%</span>
                            </div>
                            <p className="select-option-description">{option.description}</p>
                            <div className="progress" percent={percent}></div>
                        </label>
                    )
                })}
            </div>
            <div id="emailHelp" className="form-text fst-italic">Expired at {expired.toLocaleTimeString()} {expired.toLocaleDateString()}</div>
        </div>
        </>
    )
}
'''
'''--- src/components/Poll/style.css ---
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap');

::selection{
    color: #fff;
    background: #6665ee;
}
.wrapper{
    background: #fff;
    border-radius: 15px;
    padding: 25px;
    width: calc(100% - 64px);
    box-shadow: 0px 5px 10px rgba(0,0,0,0.1);
}
.wrapper header{
    font-size: 1.2rem;
    font-weight: bold;
}
.wrapper .poll-area{
    margin: 20px 0 15px 0;
}
.poll-area label{
    display: block;
    margin-bottom: 10px;
    border-radius: 5px;
    padding: 8px 15px;
    border: 2px solid #e6e6e6;
    transition: all 0.2s ease;
}
.poll-area label:hover{
    border-color: #ddd;
}
label.selected{
    border-color: #6665ee!important;
}
label .select-option{
    display: flex;
    pointer-events: none;
    justify-content: space-between;
}
label .select-option .column{
    display: flex;
    align-items: center;
}
label .select-option .circle{
    height: 19px;
    width: 19px;
    display: block;
    border: 2px solid #ccc;
    border-radius: 50%;
    margin-right: 10px;
    position: relative;
}
label.selected .select-option .circle{
    border-color: #6665ee;
}
label .select-option .circle::after{
    content: "";
    height: 11px;
    width: 11px;
    background: #6665ee;
    border-radius: inherit;
    position: absolute;
    left: 2px;
    top: 2px;
    display: none;
}
.poll-area label:hover .select-option .circle::after{
    display: block;
    background: #e6e6e6;
}
label.selected .select-option .circle::after{
    display: block;
    background: #6665ee!important;
}
label .select-option span{
    font-size: 16px;
    font-weight: 500;
}

label .select-option-description {
    margin-left: 30px;
    margin-bottom: 0;
    font-size: 0.8rem;
    color: #555;
}

label .progress{
    height: 7px;
    width: calc(100% - 30px);
    position: relative;
    background: #f0f0f0;
    margin: 8px 0 3px 0;
    border-radius: 30px;
    display: block;
    pointer-events: none;
    margin-left: 30px;
}
label .progress:after{
    position: absolute;
    content: "";
    height: 100%;
    background: #ccc;
    width: calc(1% * attr(percent));
    border-radius: inherit;
    transition: all 0.2s ease;
}
label.selected .progress::after{
    background: #6665ee;
}
label.selectall .progress,
label.selectall .select-option .percent{
    display: inline-block;
}
input[type="radio"],
input[type="checkbox"]{
    display: none;
}
'''
'''--- src/components/PollingProposal/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import Poll from '@component/Poll'
import ProposalHeader from '@component/ProposalHeader'
import ProposalAction from '@component/ProposalAction'

export default function PollingProposal({proposal}) {

    console.log(proposal)
    const {description, duration, id, total_donations, submission_time, options, option_delegations} = proposal

    return (
        <>
            <div className="proposal mt-4">
                <ProposalHeader />
                <div className="proposal-description">
                    {description}
                </div>
                <div className="proposal-kind">
                    <Poll proposalId={proposal.id} />
                </div>
                {/* <ProposalAction /> */}
            </div>
            <br />
        </>
    )
}
'''
'''--- src/components/PollingProposal/style.css ---
.proposal .proposal-description {
    margin: 0 64px 1rem 64px;
    text-align: justify;
}

.proposal .proposal-kind {
    margin-left: 64px;
}
'''
'''--- src/components/ProposalAction/index.js ---
import React, { useState, useEffect } from "react";
import heart from '@assets/heart.png';
import comment from '@assets/comments.png';
import share from '@assets/next.png';
import './style.css'

export default function ProposalAction() {

    return (
        <>
        <div className="proposal-actions d-flex mt-3">
            <div className="proposal-action">
                <img src={heart} alt="" /> <span>Like</span>
            </div>
            <div className="proposal-action">
                <img src={comment} alt="" /> <span>Comment</span>
            </div>
            <div className="proposal-action">
                <img src={share} alt="" /> <span>Share</span>
            </div>
        </div>
        </>
    )
}
'''
'''--- src/components/ProposalAction/style.css ---
.proposal-actions {
    margin-left: 20px;
    margin-bottom: 30px;
}

.proposal-actions .proposal-action img {
    width: 20px;
    height: 20px;
    
}

.proposal-actions .proposal-action {
    margin-left: 72px;
    cursor: pointer;
}
'''
'''--- src/components/ProposalCreate/index.js ---
import React, { useState, useEffect } from "react";
import useDaoContract from '@hooks/useDaoContract';
import { uuid } from 'uuidv4';

export default function ProposalCreate() {

    const {contract: DaoContract} = useDaoContract()
    const [duration, setDuration] = useState(null)
    const [description, setDescription] = useState(null)
    const [proposalKind, setProposalKind] = useState('Donate')
    const [voteKind, setVoteKind] = useState('MajorityVote')
    const updateDuration = (event) => {
        let value = event.target.value
        if (value === "") {
            setDuration(0)
            return
        }
        if (!isNaN(value)) {
            setDuration(parseInt(value).toString())
        }
    }

    const [optionListIndex, setOptionListIndex] = useState([])
    const MAX_OPTION = 8
    const [currentAction, setCurrentAction] = useState(0);

    const [option1, setOption1] = useState({title: null, description: null})
    const [option2, setOption2] = useState({title: null, description: null})
    const [option3, setOption3] = useState({title: null, description: null})
    const [option4, setOption4] = useState({title: null, description: null})
    const [option5, setOption5] = useState({title: null, description: null})
    const [option6, setOption6] = useState({title: null, description: null})
    const [option7, setOption7] = useState({title: null, description: null})
    const [option8, setOption8] = useState({title: null, description: null})

    const optionActions = [
        [option1, setOption1], 
        [option2, setOption2], 
        [option3, setOption3], 
        [option4, setOption4], 
        [option5, setOption5], 
        [option6, setOption6], 
        [option7, setOption7], 
        [option8, setOption8]
    ]

    const setOption = (index, value) => {
        let [option, setOption] = optionActions[index]
        setOption(value)
    }

    const getOption = (index) => {
        let [option, setOption] = optionActions[index]
        return option
    }

    const addOptionToOptionList = (event) => {
        event.preventDefault()
        if (currentAction < MAX_OPTION) {
            setOptionListIndex([...optionListIndex, currentAction])
            setCurrentAction(currentAction + 1)
        }
    }

    const getListOptionValue = () => {
        let success = true
        const values = optionListIndex.map(index => {
            const option = getOption(index)
            const {title, description} = option
            if (!title || !description) {
                success = false
            }
            return {...option, min_vote_weight: 0}
        })
        return {
            success,
            options: values,
            msg: "ERROR_INVALID_OPTION"
        }
    }

    const handleSubmit = async (event) => {
        event.preventDefault()

        const {
            success,
            options,
            msg
        } = getListOptionValue()
        
        if (!success) {
            alert(msg)
            return
        }
        if (!description || !proposalKind || !duration) {
            console.log(description, proposalKind, duration)
            alert("Please fullfill the form")
            return
        }
        const durationInNanoSecond = parseInt(duration) * 60 * 60 * 1000 * 1000000
        const durationInNanoSecondString = durationInNanoSecond.toString()

        const optionMap = {}
        options.forEach(option => {
            const optionId = uuid()
            optionMap[optionId] = option
        })

        if (proposalKind === 'Vote') {
            if (!voteKind) {
                alert("Invalid vote kind")
                return
            } else if (options.length < 1) {
                alert("Number of options must be greater than zero")
                return
            } else {
                let proposalInput ={
                    description,
                    duration: durationInNanoSecondString,
                    options: optionMap,
                    kind: {
                        Vote: {
                            vote_kind: voteKind
                        }
                    }
                }
                await DaoContract.add_proposal({
                    proposal_input: proposalInput
                })
                return
            }
        } else {
            
            let proposalInput = {
                description,
                duration: durationInNanoSecondString,
                options: optionMap,
                kind: "Donate"
            }
            await DaoContract.add_proposal({
                proposal_input: proposalInput
            })
            return
        }
    }

    useEffect(() => {
        if (DaoContract) {
            DaoContract.get_owner().then(result => console.log(result))
        }
    }, [DaoContract])

    return (
        <>
        <form>
            <fieldset>
                <legend>Create proposal</legend>
                <div className="mb-3">
                    <label htmlFor="disabledTextInput" className="form-label">Description</label>
                    <textarea id="disabledTextInput" className="form-control" placeholder="Description" onChange={(event) => setDescription(event.target.value)} />
                </div>
                <div className="mb-3 row">
                    <div className="col-6">
                        <label className="form-label">Proposal Kind</label>
                        <select className="form-select" aria-label="Default select example" onChange={event => setProposalKind(event.target.value)}>
                            <option value="Donate">Donate</option>
                            <option value="Vote">Vote</option>
                        </select>
                    </div>
                    <div className="col-6">
                        <label className="form-label">Duration</label>
                        <input 
                            min="0"
                            className="form-control" 
                            placeholder="Duration (hours)" 
                            aria-label="Recipient's username" 
                            aria-describedby="button-addon2"
                            value={duration}
                            onChange={(event) => updateDuration(event)}
                        />
                    </div>
                </div>
                {proposalKind === 'Vote' && 
                    <>
                    <div className="mb-3 row">
                        <div className="col-12">
                            <label className="form-label">Vote Kind</label>
                            <select className="form-select" aria-label="Default select example" onChange={event => setVoteKind(event.target.value)}>
                                <option value="MajorityVote">Majority Vote</option>
                                <option value="VoteByDelegation">Vote By Delegation</option>
                            </select>
                        </div>
                    </div>
                    {optionListIndex.map(optionIndex => {
                        return <div className="mb-3 row" key={`option-${optionIndex}`}>
                            <label className="form-label">Option {optionIndex + 1}</label>
                            <div className="col-6">
                                <input 
                                    className="form-control" 
                                    placeholder="Title" 
                                    value={getOption(optionIndex)['title']}
                                    onChange={(event) => setOption(
                                        optionIndex, 
                                        {
                                            title: event.target.value, 
                                            description: getOption(optionIndex)['description']
                                        }
                                    )}
                                />
                            </div>
                            <div className="col-6">
                                <input 
                                    className="form-control" 
                                    placeholder="Description" 
                                    value={getOption(optionIndex)['description']}
                                    onChange={(event) => setOption(
                                        optionIndex, 
                                        {
                                            title: getOption(optionIndex)['title'], 
                                            description: event.target.value
                                        }
                                    )}
                                />
                            </div>
                        </div>
                    })}
                    {currentAction < MAX_OPTION && <div className="add-option">
                        <button className="btn btn-dark" onClick={addOptionToOptionList}>Add Option</button>
                    </div>}
                    </>
                }
                <button className="btn btn-warning w-100 mt-5" onClick={handleSubmit}>Submit</button>
            </fieldset>
        </form>
        </>
    )
}
'''
'''--- src/components/ProposalHeader/index.js ---
import React, { useState, useEffect } from "react";

export default function ProposalHeader({
    name,
    avatar,
    created_at
}) {

    return (
        <>
        <div className="proposal-header d-flex mt-3">
            <div className="avatar-sm">
                <img src="https://pbs.twimg.com/profile_images/1470780411747844096/vpxt_095_400x400.jpg" alt="" />
            </div>
            <div>
                <div className="header-user-name">
                    CZ Binance
                </div>
                <div className="header-created-time">
                    10 giờ trước
                </div>
            </div>
        </div>
        </>
    )
}
'''
'''--- src/components/TokenCard/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import getConfig from '@config'
import {
    Link
} from "react-router-dom";
const { contractName } = getConfig(process.env.NODE_ENV || 'development')

export default function TokenCard({token}) {
    
    const {metadata, owner_id, total_supply} = token

    const {icon, name, symbol, spec} = metadata

    return (
        <>
        <Link to={`/${symbol.toLowerCase()}`}>
            <div className="token-card">
                <div className="token-icon-place">
                    <img src={icon} alt="token-icon" className="token-icon" />
                </div>
                <div className="token-name">
                    {name}
                </div>
                <div className="token-owner">
                    {owner_id}
                </div>
            </div>
        </Link>
        </>
    )
}
'''
'''--- src/components/TokenCard/style.css ---
.token-card {
    text-align: center;
    background-color: #2c3e50;
    padding: 15px 30px;
    border-radius: 20px;
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
    transition: 0.3s;
    cursor: pointer;
}

.token-card:hover {
    background-color: #192a56;
    transform: scale(1.2);
}

.token-card .token-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
}

.token-card .token-name {
    font-size: 1.2rem;
    font-weight: bold;
}

.token-car .token-owner {
    margin-bottom: 0!important;
}
'''
'''--- src/components/TokenCreateForm/index.js ---
import React, {useState, useEffect} from 'react'
import './style.css'
import {tokenMetadataCreate} from '@utils/token.utils'
import {storeFiles} from '@utils/web3.storage'
import {DEFAULT_DECIMALS} from '@constants/standard.constant'

export default function TokenCreateForm() {
    const [tokenArgs, setTokenArgs] = useState({})
    const createTokens = async () => {
        const {name, symbol, logo, supply} = tokenArgs
        if (!name || !symbol || !logo || !supply) {
            alert('Please fill out the form')
        }
        const accountId = window.accountId
        try {
            const cid = await storeFiles([logo])
            const logoURL = `https://${cid}.ipfs.dweb.link/${logo.name}`
            const tokenMetadata = tokenMetadataCreate(name, symbol, logoURL)
            const argsList = {
                owner_id: accountId,
                total_supply: (supply * DEFAULT_DECIMALS).toString(),
                metadata: tokenMetadata
            }
            const minRequiredDeposit = await window.contract.get_required_deposit({args: argsList, account_id: accountId})
        
            await window.contract.create_token({
                args: argsList
            }, "300000000000000", minRequiredDeposit.toString())
        } catch(error) {
            console.log(error)
        }
    } 
    return (
        <>
        <div className="form form-create-token row">
            <h2>CREATE TOKEN</h2>
            <div className="form-group">
                <label className="form-label" htmlFor="name">Token's name </label>
                <input className="form-control" onChange={(event) => setTokenArgs({...tokenArgs, name: event.target.value})} type="text" name="token" id="name" placeholder="Token's name" />
            </div>
            
            <div className="form-group">
                <label className="form-label" htmlFor="logo">Token's logo </label>
                <input className="form-control" 
                onChange={(event) => setTokenArgs({...tokenArgs, logo: event.target.files[0]})} 
                type="file" 
                name="token" 
                id="logo" 
                placeholder="Token's logo" 
                accept="image/*"
                />
            </div>
            <div className="form-group col-6">
                <label className="form-label" htmlFor="symbol">Symbol </label>
                <input className="form-control" onChange={(event) => setTokenArgs({...tokenArgs, symbol: event.target.value})} type="text" name="token" id="symbol" placeholder="Token's symbol" />
            </div>
            <div className="form-group col-6">
                <label className="form-label" htmlFor="supply">Initial Supply </label>
                <input className="form-control" onChange={(event) => setTokenArgs({...tokenArgs, supply: event.target.value})} type="number" name="token" id="supply" placeholder="Token's initial supply" />
            </div>
            <button className="btn btn-warning form-create-submit" onClick={() => createTokens()}>Create</button>
        </div>
        </>
    )
}
'''
'''--- src/components/TokenCreateForm/style.css ---
.form-create-token {
    margin-left: auto;
    width: 400px;
    padding: 40px 10px;
    background-color: #0a3d62;
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
    border-radius: 5px;
}

.form-create-token h2 {
    text-align: center;
}

.form-group {
    margin-top: 10px
}

.form-create-submit {
    margin-top: 10px;
    width: 350px;
    margin-left: auto;
    margin-right: auto;
}
'''
'''--- src/config.js ---
const CONTRACT_NAME = 'develop.connesus.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/constants/standard.constant.js ---
export const FT_METADATA_SPEC = "ft-1.0.0"
export const DEFAULT_DECIMALS = Math.pow(10, 8)
'''
'''--- src/global.css ---
@import url('https://fonts.googleapis.com/css2?family=Dosis:wght@700&family=Fredoka:wght@500&family=League+Gothic&family=Merriweather:wght@400;700&family=Roboto&family=Sigmar+One&display=swap');* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;
}

body {
  margin: 0;
  font-family: 'Fredoka', sans-serif;
  background: #f6b93b;  /* fallback for old browsers */
}

/* Create two equal columns that floats next to each other */
.layout-column {
  float: left;
  width: 50%;
  padding: 10px;
  height: 300px; /* Should be removed. Only for demonstration */
}

/* Clear floats after the columns */
.layout-row:after {
  content: "";
  display: table;
  clear: both;
}

.avatar-sm img {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  margin-right: 10px
}

.header-user-name {
  font-weight: bold;
}

.header-created-time {
  color: #555;
  font-size: 0.8rem;
  font-weight: bold;
}

.mr-3 {
  margin-right: 3rem;
}

.mr-2 {
  margin-right: 2rem;
}

.mr-1 {
  margin-right: 1rem;
}

.ml-3 {
  margin-right: 3rem;
}

.ml-2 {
  margin-right: 2rem;
}

.ml-1 {
  margin-right: 1rem;
}

'''
'''--- src/hooks/useDaoContract.js ---
import React, {useState, useEffect} from "react";
import getConfig from '@config'
const { contractName } = getConfig(process.env.NODE_ENV || 'development')
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'

const TEST_DAO_CONTRACT = "connecus-dao.manhndev.testnet"

export default function useDaoContract(accountId) {
    const [contract, setContract] = useState(null)

    const initContract = async () => {
        const contract = await new Contract(window.walletConnection.account(), TEST_DAO_CONTRACT, {
            viewMethods: [
                'version',
                'get_metadata',
                'token_account',
                'get_locked_storage_amount',
                'get_available_amount',
                'delegation_total_supply',
                'delegation_balance_of',
                'delegation_balance_ratio',
                'get_last_proposal_id',
                'get_proposals',
                'get_proposal',
                'get_proposal_donation',
                'get_bounties',
                'get_bounty',
                'get_owner'
            ],
            changeMethods: [
                'add_proposal',
                'act_proposal',
                'with_draw_bounty_rest',
                'claim_bounty',
                'register_delegation',
                'withdraw',
            ],
        })
        setContract(contract)
    }

    useEffect(() => {
        if (window.walletConnection.account()) {
            initContract()
        }
    }, [])

    return {
        contract,
    }
}

'''
'''--- src/hooks/useFactoryContract.js ---

'''
'''--- src/hooks/useFtContract.js ---
import React, {useState, useEffect} from "react";
import getConfig from '@config'
const { contractName } = getConfig(process.env.NODE_ENV || 'development')
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'

const FT_TOKEN_CONTRACT = "connecus-token.manhndev.testnet"

export default function useFtContract(accountId) {
    const [contract, setContract] = useState(null)

    const initContract = async () => {
        const contract = await new Contract(window.walletConnection.account(), FT_TOKEN_CONTRACT, {
            viewMethods: [
                'ft_balance_of',
                'ft_total_supply',
                'storage_balance_of'
            ],
            changeMethods: [
                'storage_deposit',
                'ft_transfer',
                'ft_transfer_call',
            ],
        })
        setContract(contract)
    }

    useEffect(() => {
        if (window.walletConnection.account()) {
            initContract()
        }
    }, [])

    return {
        contract,
    }
}
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'
import './global.css'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/pages/CreateDao.js ---
import React from 'react';
import {AiOutlineCloudUpload} from "react-icons/ai";

import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import InputField from "../components/InputField";
import Button from "../components/Button";

import './styles/CreateDao.css';

const CreateDao = () => {
    return (
        <div>
            <Navbar/>

            <div className='create-dao'>
                <div className='create-dao--left'>
                    <div className='input__box--file'>
                        <label style={{width: '100%', height: '100%'}}>
                            <div className='input__box--file-inner'>
                                <div className='input__box-text'>
                                    <AiOutlineCloudUpload fontSize={40}/>
                                    <p>Click to upload your thumbnail</p>
                                </div>

                                <p className='input__box-note'>Use high-quality JPG or PNG less than 20 MB</p>
                            </div>
                            <input type='file' style={{width: 0, height: 0}}/>
                        </label>
                    </div>
                </div>

                <div className='create-dao--right'>
                    <InputField type={'text'} label={"Your DAO's name"}/>
                    <InputField type={'text'} label={"Your DAO's symbol"}/>

                    <div className='create-dao__separator'>
                        <div className='create-dao__separator-line'/>
                        <div className='create-dao__separator-text'>DAO's social links (not required)</div>
                    </div>

                    <InputField type={'text'} label={"Facebook"}/>
                    <InputField type={'text'} label={"Twitter"}/>
                    <InputField type={'text'} label={"Instagram"}/>
                    <InputField type={'text'} label={"Discord"}/>

                    <div className='create-dao__btn'>
                        <Button type={'primary'} text={'Create DAO'}/>
                    </div>
                </div>
            </div>

            <Footer/>
        </div>
    )
}

export default CreateDao;
'''
'''--- src/pages/Dao.js ---
import React, { useState, useEffect } from 'react'
import DaoBase from '@component/DaoBase'
import './styles/dao.page.css'
import DaoNewsFeed from '@component/DaoNewsFeed'
import DaoSubNavbar from '@component/DaoSubNavbar'
import DaoBounties from '@component/DaoBounties'
import DaoManagement from '@component/DaoManagement'
import { logout, login } from '../utils'

import useDaoContract from '@hooks/useDaoContract';
import useFtContract from '@hooks/useFtContract'

export default function DaoPage() {

    const {contract: DaoContract} = useDaoContract()
    const {contract: FtContract} = useFtContract()
    const [currentTab, setCurrentTab] = useState(1)
    const [metadata, setMetadata] = useState(null)
    const [ftStorageBalance, setFtStorageBalance] = useState(0)
    const [userDelegation, setUserDelegation] = useState(0)
    const [daoOwner, setDaoOwner] = useState("");

    useEffect(() => {
        if (DaoContract) {
            DaoContract.get_metadata().then((result) => {
                setMetadata(result)
            })
            DaoContract.get_owner().then(result => setDaoOwner(result))
            if (window.accountId) {
                DaoContract.delegation_balance_of({account_id: window.accountId}).then(result => setUserDelegation(result))
            }
        }
    }, [DaoContract])

    useEffect(() => {
        if (FtContract) {
            if (window.accountId) {
                FtContract.storage_balance_of({account_id: window.accountId}).then(result => {
                    setFtStorageBalance(result)
                })
            }
        }
    }, [FtContract])

    return (
        <main>
            <DaoSubNavbar 
                setCurrentTab={setCurrentTab} 
                currentTab={currentTab} 
                DaoContract={DaoContract} 
                FtContract={FtContract} 
                ftStorageBalance={ftStorageBalance}
                userDelegation={userDelegation}
                daoOwner={daoOwner}
            />
            <DaoBase metadata={metadata} />
            {currentTab === 1 && <DaoNewsFeed />}
            {currentTab === 2 && <DaoBounties ftStorageBalance={ftStorageBalance} />}
            {currentTab === 4 && <DaoManagement />}
        </main>
    )
}
'''
'''--- src/pages/Home.js ---
import React from 'react';

import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import DaoCard from "../components/DaoCard";
import Button from "../components/Button";

import './styles/Home.page.css';

const Home = () => {
    return (
        <div>
            <Navbar/>

            <div className='hero'>
                <div className='hero--left'>
                    <h1 className='hero__title'>
                        Your Community
                        Your Partners
                    </h1>
                    <p className='hero__subtitle'>Connecus is a platform to help you promote, evolve your own community easier like never before.</p>

                    <div className='hero__btns'>
                        <Button type={'primary'} text={'Primary Button'}/>
                        <Button type={'secondary'} text={'Secondary Button'}/>
                    </div>
                </div>

                <div className='hero--right'>
                    <img src="http://210.94.194.63:5112/fe-connecus/static/media/community1.edd3db98.svg" alt="hero-img"/>
                </div>
            </div>

            <div className='dao-section'>
                <h1 className='dao__title'>
                    Top Influencers
                </h1>

                <div className='dao__cards'>
                    <DaoCard thumbnail={'https://i.pinimg.com/564x/7f/65/f3/7f65f3451374aef5b61dc3f14492e413.jpg'}/>
                    <DaoCard thumbnail={'https://i.pinimg.com/564x/94/51/a9/9451a9d4e5d6fdcf783669952f1a13d8.jpg'}/>
                    <DaoCard thumbnail={'https://i.pinimg.com/564x/b4/3c/d3/b43cd33006d3c50bd241047a6fbb3104.jpg'}/>
                    <DaoCard thumbnail={'https://i.pinimg.com/564x/e3/75/b5/e375b5bc3d3e2df39d59b7fcad7793bd.jpg'}/>
                    <DaoCard thumbnail={'https://i.pinimg.com/564x/04/cd/92/04cd92e85f0ae39205fc160ef13b1546.jpg'}/>
                    <DaoCard thumbnail={'https://i.pinimg.com/564x/02/24/b0/0224b0d3d7a74a2afd80291d2f302a4d.jpg'}/>
                </div>

                <div className={'dao__btn'}>
                    <Button type={'secondary'} text={'See More'}/>
                </div>
            </div>

            <Footer/>
        </div>
    )
}

export default Home;
'''
'''--- src/pages/styles/CreateDao.css ---
.create-dao {
    padding: 128px 128px 64px;
    display: flex;
    gap: 64px;
}

.create-dao--left {
    width: 50%;
}

.create-dao--right {
    width: 50%;
}

.input__box--file {
    width: 420px;
    height: 420px;
    border-radius: 4px;
    background-color: #dcd8d8;
    padding: 32px;
}

.input__box--file-inner {
    width: 100%;
    height: 100%;
    border-radius: 4px;
    border: dashed 1px #656565;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 96px;
}

.input__box-text {
    display: flex;
    flex-direction: column;
    gap: 8px;
    align-items: center;
    justify-content: center;
    font-size: 18px;
}

.input__box-note {
    font-size: 14px;
}

.create-dao__separator {
    height: 30px;
    position: relative;
    margin-top: 48px;
}

.create-dao__separator-line {
    width: 100%;
    height: 2px;
    background-color: #0a0ab1;
}

.create-dao__separator-text {
    font-size: 14px;
    font-weight: bold;
    padding: 0 16px;
    background-color: #F6B93B;
    position: absolute;
    left: 50%;
    top: -40%;
    transform: translateX(-50%);
}

.create-dao__btn {
    display: flex;
    justify-content: flex-end;
}
'''
'''--- src/pages/styles/Home.page.css ---
body {
    overflow-x: hidden;
}

.hero {
    width: 90%;
    margin: 0 auto;
    padding: 128px 64px 64px;
    display: flex;
    gap: 64px;
    align-items: center;
    justify-content: space-between;
}

.hero__title {
    font-weight: bold;
    font-size: 60px;
    margin-bottom: 16px;
}

.hero__subtitle {
    font-size: 18px;
}

.hero__btns {
    margin-top: 64px;
    display: flex;
    gap: 16px;
}

.dao-section {
    background-color: #0a0ab1;
    height: auto;
    clip-path: polygon(0 0, 100% 11%, 100% 100%, 0 100%);
    padding: 240px 128px 64px;
    position: relative;
    z-index: 1;
}

.dao__title {
    font-weight: bold;
    font-size: 60px;
    color: white;
    margin-bottom: 16px;
}

.dao__cards {
    width: 100%;
    justify-content: space-between;
    margin: 32px 0;
    display: flex;
    flex-wrap: wrap;
    gap: 1.6rem;
}

.dao__btn {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

'''
'''--- src/pages/styles/dao.page.css ---
.project-introduction {
    font-family: 'League Gothic', sans-serif;
    
}

.project-introduction h1 {
    font-size: 6rem;
}

.project-introduction p {
    font-size: 2.2rem;
}

.user-button {
    position: fixed;
    top: 10px;
    left: 30px;
    z-index: 100000;
}
'''
'''--- src/pages/styles/tokenDetail.page.css ---
.token-detail {
    padding: 40px 50px;
    background-color: #192a56;
    width: 90%;
    border-radius: 30px;
}

.token-detail .token-detail-info .token-logo img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
}

.token-detail .token-detail-info .token-logo {
    margin-right: 20px;
}

.token-symbol {
    font-size: 2rem;
    line-height: 2rem;
    font-weight: bold;
}

.token-name {
    font-size: 1rem;
    font-weight: bold;
    color: #7f8fa6
}

.token-spec {
    margin-right: 1rem;
}

.token-supply {
    font-size: 1.2rem;
    font-weight: bold;
}

.token-actions {

} 

.action {
    text-align: center;
    padding: 15px;
    transition: 0.2s;
    cursor: pointer;
}

.action:hover {
    transform: scale(1.2);
}

.action .action-logo {
    border-radius: 50%;
    background-color: #34495e;
}

.action .action-logo img {
    width: 70px;
    height: 70px;
    margin: 20px;
}

.action .action-title {
    font-size: 1.1rem;
    font-weight: bold;
}

.active {
    transform: scale(1.2);
}

.action-detail .token-logo img {
    width: 150px;
    height: 150px;
    border-radius:50%;
} 

.action-form {
    width: 300px;
    margin-left: auto;
    margin-right: auto;
}

.token-action-buttons button {
    width: 100%;
}
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  window.accountId = window.walletConnection.getAccountId()
  window.account = window.walletConnection.account();

  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: [
      'get_min_attached_balance',
      'get_required_deposit',
      'get_number_of_tokens',
      'get_tokens',
      'get_token',
  ],
  changeMethods: [
      'storage_deposit',
      'create_token'
  ],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/utils/funcs.js ---
export const yoktoNear = 1000000000000000000000000;
export const proposalsReload = 60000;
export const updatesJsonUrl = 'https://raw.githubusercontent.com/zavodil/sputnik-dao-updates/master/updates.json?t=';

export const timestampToReadable = (timestamp) => {
  let seconds = Number(timestamp / 1e9);
  let d = Math.floor(seconds / (3600 * 24));
  let h = Math.floor(seconds % (3600 * 24) / 3600);
  let m = Math.floor(seconds % 3600 / 60);
  let s = Math.floor(seconds % 60);

  let dDisplay = d > 0 ? d + (d === 1 ? " day, " : " days, ") : "";
  let hDisplay = h > 0 ? h + (h === 1 ? " hour, " : " hours, ") : "";
  let mDisplay = m > 0 ? m + (m === 1 ? " minute, " : " minutes, ") : "";
  let sDisplay = s > 0 ? s + (s === 1 ? " second" : " seconds") : "";
  return (dDisplay + hDisplay + mDisplay + sDisplay).replace(/,\s*$/, "");
}

export const convertDuration = (duration) => {
  let utcSeconds = duration / 1e9;
  let epoch = new Date(0);
  epoch.setUTCSeconds(utcSeconds);
  return epoch;
}

export const parseForumUrl = (url) => {
  //let afterSlashChars = id.match(/\/([^\/]+)\/?$/)[1];
  let a = url.replace(/\/$/, "").split('/');
  let last = a[a.length - 1];
  let secondLast = a[a.length - 2];
  let category = null;
  let subCategory = null;
  if (/^\d+$/.test(secondLast)) {
    category = secondLast;
    subCategory = last
  } else {
    if (/^\d+$/.test(last)) {
      category = last;
    }
  }

  if (category === null) {
    return url;
  } else {
    return subCategory === null ? "/t/" + category : "/t/" + category + "/" + subCategory;
  }
}
'''
'''--- src/utils/time.utils.js ---
export const timestampToDateTime = (startTime, duration) => {
    let expired = new Date(parseInt(duration / 1000000) + parseInt(startTime / 1000000))
    return expired
}
'''
'''--- src/utils/token.utils.js ---
import {FT_METADATA_SPEC} from '@constants/standard.constant'

export const tokenMetadataCreate = (name, symbol, icon, reference, reference_hash, decimals) => {
    return {
        spec: FT_METADATA_SPEC,
        name: name,
        symbol: symbol,
        icon: icon,
        reference: reference || null,
        reference_hash: reference_hash || null,
        decimals: decimals || 8,
    }
}
'''
'''--- src/utils/web3.storage.js ---
import { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'

const TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGRhMjM1MDYwZUVkNWZBOERFMjlFMjAwN2QwNDkzMEExNGE1ZEZhNjgiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2MzMwNzcxOTU5NzYsIm5hbWUiOiJtYW5obnZfdGVzdCJ9.upuMLynlXF32CxbGpe2MG0DscV8ivvBGyxPPa3ehj50"

function makeStorageClient(TOKEN) {
    return new Web3Storage({ token: TOKEN })
}

async function storeFiles(files) {
    const client = makeStorageClient(TOKEN)
    const cid = await client.put(files)
    return cid
}

async function retrieveFiles(cid) {
    const client = makeStorageClient(TOKEN)
    const res = await client.get(cid)
    console.log(`Got a response! [${res.status}] ${res.statusText}`)
    if (!res.ok) {
        throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)
    }

    // unpack File objects from the response
    const files = await res.files()
    return files
}

async function retrieve(cid) {
    const client = makeStorageClient(TOKEN)
    const res = await client.get(cid)
    console.log(`Got a response! [${res.status}] ${res.statusText}`)
    if (!res.ok) {
        throw new Error(`failed to get ${cid}`)
    }
}

async function checkFileStatus(TOKEN, cid) {
    const client = makeStorageClient(TOKEN)
    const status = await client.status(cid)
    if (status) {
        console.log(status)
    }
}

module.exports = {
    makeStorageClient,
    storeFiles,
    retrieve,
    retrieveFiles,
    checkFileStatus
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''