*GitHub Repository "nearvndev/nft-market-tutorial-frontend"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .idea/misc.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JavaScriptSettings">
    <option name="languageLevel" value="JSX" />
  </component>
</project>
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/nft-market-frontend-pik.iml" filepath="$PROJECT_DIR$/.idea/nft-market-frontend-pik.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/workspace.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="33c3fd1c-8578-4369-9a76-bfca43a95f65" name="Default Changelist" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JavaScript File" />
      </list>
    </option>
  </component>
  <component name="ProjectId" id="23mfva6BSU9UxjVdowg7IqyRSsI" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_package_manager_path" value="yarn" />
    <property name="ts.external.directory.path" value="$APPLICATION_HOME_DIR$/plugins/JavaScriptLanguage/jsLanguageServicesImpl/external" />
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="33c3fd1c-8578-4369-9a76-bfca43a95f65" name="Default Changelist" comment="" />
      <created>1642344413581</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1642344413581</updated>
      <workItem from="1642344418778" duration="286000" />
      <workItem from="1642344780141" duration="316000" />
      <workItem from="1642345571095" duration="648000" />
      <workItem from="1642346336746" duration="10426000" />
      <workItem from="1642406156587" duration="1108000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="WindowStateProjectService">
    <state x="998" y="527" key="#com.intellij.fileTypes.FileTypeChooser" timestamp="1642344582296">
      <screen x="0" y="0" width="2560" height="1440" />
    </state>
    <state x="998" y="527" key="#com.intellij.fileTypes.FileTypeChooser/0.0.2560.1440@0.0.2560.1440" timestamp="1642344582296" />
    <state x="945" y="331" width="670" height="676" key="search.everywhere.popup" timestamp="1642352384679">
      <screen x="0" y="0" width="2560" height="1440" />
    </state>
    <state x="945" y="331" width="670" height="676" key="search.everywhere.popup/0.0.2560.1440@0.0.2560.1440" timestamp="1642352384679" />
  </component>
</project>
'''
'''--- README.md ---
nft-market-frontend
==================
Step 1: Config!
---------------

Change NFT_CONTRACT_NAME and MARKET_CONTRACT_NAME in:

    config.js

Step 2: Storage deposit in MARKET CONTRACT!
---------------

One command:

    near call MARKET_CONTRACT_NAME storate_deposit --accountId ACCOUNT_ID --deposit 0.01

Step 3: Test!
---------------

One command:

    yarn start

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- develop.env ---
CONTRACT_NAME=nft-market.piknguyenvu.testnet
'''
'''--- package.json ---
{
  "name": "nft-market-frontend-pik",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "env-cmd -f ./develop.env parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./develop.env parcel src/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "@ant-design/icons": "^4.7.0",
    "antd": "^4.18.3",
    "bn.js": "^5.2.0",
    "borsh": "latest",
    "near-api-js": "~0.43.1",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "react-router": "^6.2.1",
    "react-router-dom": "^6.2.1",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, { useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useLocation } from "react-router"
import { login, logout } from './utils'
import Routes from "./routes";
import './global.css'
import { Layout, Menu, Button, Dropdown } from 'antd';
import { UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';
import 'antd/dist/antd.css';
import "./global.css";

const { Header, Content, Footer, Sider } = Layout;

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {
    const location = useLocation();
    const menu = (
        <Menu>
            <Menu.Item>
                <div onClick={logout}>
                    Logout
                </div>
            </Menu.Item>
        </Menu>
    );

  return (
      <Layout style={{minHeight: '100vh'}}>
          <Sider
              breakpoint="lg"
              collapsedWidth="0"
              onBreakpoint={broken => {
                  console.log(broken);
              }}
              onCollapse={(collapsed, type) => {
                  console.log(collapsed, type);
              }}
          >
              <div className="logo" />
              <Menu theme="dark" mode="inline" defaultSelectedKeys={[location.pathname]}>
                  <Menu.Item key="/" icon={<VideoCameraOutlined />}>
                      <Link to={"/"}> Market Place </Link>
                  </Menu.Item>
                  <Menu.Item key="/profile" icon={<UserOutlined />}>
                      <Link to={"/profile"}> Collectibles </Link>
                  </Menu.Item>
              </Menu>
          </Sider>
          <Layout>
              <Header className="site-layout-sub-header-background" style={{padding: 15}} >
                  <div></div>
                  {
                      window.walletConnection.isSignedIn() ?
                          <Dropdown overlay={menu} placement="bottomLeft" arrow>
                              <Button type="primary" shape="round" icon={<UserOutlined />}>
                                  { window.accountId }
                              </Button>
                          </Dropdown>:
                          <Button onClick={login} type="primary" shape="round" icon={<UserOutlined />}>
                              Login
                          </Button>
                  }
              </Header>
              <Content style={{ margin: '24px 16px 0' }}>
                  <div className="site-layout-background" style={{ paddingBottom: 24, paddingTop: 24, minHeight: 360 }}>
                      <Routes/>
                  </div>
              </Content>
              <Footer style={{ textAlign: 'center' }}>VBI Dev NFT Marketplace</Footer>
          </Layout>
      </Layout>
  )
}
'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/ModalSale.js ---
import React, { useState } from "react";
import { Modal, Input, Divider, Radio } from "antd";

function ModalSale(props) {
    const [price, setPrice] = useState(0);
    const [token, setToken] = useState("NEAR");

    function handleOk() {
        props.handleOk(token, price);
    }

    function handleTokenChange(e) {
        setToken(e.target.value);
    }

    return (
        <Modal title="Sale NFT" visible={props.visible} onOk={handleOk} onCancel={props.handleCancel}>
            <div style={{marginBottom: 30}}>
                <span style={{marginBottom: 10, display: "block"}}>Select token ({token}):</span>
                <Radio.Group value={token} onChange={handleTokenChange}>
                    <Radio.Button value="NEAR">NEAR</Radio.Button>
                    <Radio.Button value="VBIC">VBIC</Radio.Button>
                </Radio.Group>
            </div>
            <div>
                <span style={{marginBottom: 10,  display: "block"}}>Input price ({token}):</span>
                <Input type={"number"} onChange={(e) => setPrice(e.target.value)} placeholder={"ex: 1000 ..."} size="large" />
            </div>
        </Modal>
    )
}

export default ModalSale
'''
'''--- src/components/ModalTransferNFT.js ---
import React, { useState } from "react";
import { Modal, Input, Divider } from "antd";
import { UserOutlined } from "@ant-design/icons";

function ModalTransferNFT(props) {
    const [accountId, setAccountId] = useState("");

    function handleOk() {
        props.handleOk(accountId);
    }

    return (
        <Modal title="Transfer NFT" visible={props.visible} onOk={handleOk} onCancel={props.handleCancel}>
            <h2>Transfer to:</h2>
            <Input onChange={(e) => setAccountId(e.target.value)} placeholder={"ex: vbidev.testnet ..."} size="large" prefix={<UserOutlined />} />
        </Modal>
    )
}

export default ModalTransferNFT
'''
'''--- src/components/ModelMintNFT.js ---
import React, { useState } from "react";
import { Modal, Input, Divider } from "antd";

function ModalMintNFT(props) {
    const [tokenId, setTokenId] = useState("");
    const [tokenTitle, setTokenTitle] = useState("");
    const [description, setDescription] = useState("");
    const [media, setMedia] = useState("");

    function handleOk() {
        props.handleOk({
            tokenId, tokenTitle, description, media
        });
    }

    return (
        <Modal title="Mint NFT" visible={props.visible} onOk={handleOk} onCancel={props.handleCancel}>
            <span>Token Id:</span>
            <Input onChange={(e) => setTokenId(e.target.value)} style={{marginBottom: 15}}/>
            <span>Title:</span>
            <Input onChange={(e) => setTokenTitle(e.target.value)} style={{marginBottom: 15}}/>
            <span>Description:</span>
            <Input onChange={(e) => setDescription(e.target.value)} style={{marginBottom: 15}}/>
            <span>Media:</span>
            <Input onChange={(e) => setMedia(e.target.value)} style={{marginBottom: 15}} />
        </Modal>
    )
}

export default ModalMintNFT
'''
'''--- src/config.js ---
const NFT_CONTRACT_NAME = process.env.NFT_CONTRACT_NAME ||'nft-tutorial.vbidev.testnet'
const MARKET_CONTRACT_NAME = process.env.MARKET_CONTRACT_NAME || 'nft-market.vbidev.testnet'
const FT_CONTRACT_NAME = process.env.FT_CONTRACT_NAME || 'ft.vbidev.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      nftContractName: NFT_CONTRACT_NAME,
      marketContractName: MARKET_CONTRACT_NAME,
      ftContractName: FT_CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      nftContractName: NFT_CONTRACT_NAME,
      marketContractName: MARKET_CONTRACT_NAME,
      ftContractName: FT_CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      nftContractName: NFT_CONTRACT_NAME,
      marketContractName: MARKET_CONTRACT_NAME,
      ftContractName: FT_CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      nftContractName: NFT_CONTRACT_NAME,
      marketContractName: MARKET_CONTRACT_NAME,
      ftContractName: FT_CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      nftContractName: NFT_CONTRACT_NAME,
      marketContractName: MARKET_CONTRACT_NAME,
      ftContractName: FT_CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      nftContractName: NFT_CONTRACT_NAME,
      marketContractName: MARKET_CONTRACT_NAME,
      ftContractName: FT_CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
.logo {
    height: 32px;
    margin: 16px;
    background: rgba(255, 255, 255, 0.2);
}

.site-layout-sub-header-background {
    background: #fff;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items:center;
}

.site-layout-background {
    background: #fff;
}
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import { BrowserRouter } from "react-router-dom";
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <BrowserRouter>
          <App />
      </BrowserRouter>,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/layouts/MainLayout.js ---
import { Layout, Menu } from 'antd';
import { UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';

const { Header, Content, Footer, Sider } = Layout;

function MainLayout() {
    return (
        <Layout>
            <Sider
                breakpoint="lg"
                collapsedWidth="0"
                onBreakpoint={broken => {
                    console.log(broken);
                }}
                onCollapse={(collapsed, type) => {
                    console.log(collapsed, type);
                }}
            >
                <div className="logo" />
                <Menu theme="dark" mode="inline" defaultSelectedKeys={['4']}>
                    <Menu.Item key="1" icon={<UserOutlined />}>
                        nav 1
                    </Menu.Item>
                    <Menu.Item key="2" icon={<VideoCameraOutlined />}>
                        nav 2
                    </Menu.Item>
                    <Menu.Item key="3" icon={<UploadOutlined />}>
                        nav 3
                    </Menu.Item>
                    <Menu.Item key="4" icon={<UserOutlined />}>
                        nav 4
                    </Menu.Item>
                </Menu>
            </Sider>
            <Layout>
                <Header className="site-layout-sub-header-background" style={{ padding: 0 }} />
                <Content style={{ margin: '24px 16px 0' }}>
                    <div className="site-layout-background" style={{ padding: 24, minHeight: 360 }}>
                        content
                    </div>
                </Content>
                <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>
            </Layout>
        </Layout>
    )
}

export default MainLayout
'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/pages/MarketPlace.js ---
import React, { useEffect, useState } from 'react'
import {Button, Card, PageHeader, notification} from "antd";
import {ShoppingCartOutlined} from "@ant-design/icons";
import { utils, transactions } from "near-api-js";
import {login, parseTokenWithDecimals} from "../utils";
import { functionCall } from 'near-api-js/lib/transaction';

const { Meta } = Card;

function MarketPlace() {
    const [data, setData] = useState([]);
    const [tokenList, setTokenList] = useState([]);

    async function handleBuy(item) {
        console.log(item);
        try {
           if ( !window.walletConnection.isSignedIn() ) return login();

           if (item.sale_conditions.is_native) {
            let nearBalance = await window.account.getAccountBalance();
            if (nearBalance.available < parseInt(item.sale_conditions.amount)) {
                notification["warning"]({
                    message: 'Số dư NEAR không đủ',
                    description:
                      'Tài khoản của bạn không đủ số dư để mua NFT!',
                  });

                  return;
            }

            await window.contractMarket.offer(
                {
                    nft_contract_id: item.nft_contract_id,
                    token_id: item.token_id
                },
                300000000000000,
                item.sale_conditions.amount
            )
           } else {
               // Check balance
                let vbicBalance = await window.contractFT.ft_balance_of({account_id: window.accountId})
                if (vbicBalance < parseInt(item.sale_conditions.amount)) {
                    notification["warning"]({
                        message: 'Số dư VBIC không đủ',
                        description:
                        'Tài khoản của bạn không đủ số dư để mua NFT!',
                    });

                    return;
                }

               // Handle storage deposit
               let message = {
                   nft_contract_id: window.contractNFT.contractId,
                   token_id: item.token_id
               }
               const result = await window.account.signAndSendTransaction({
                   receiverId: window.contractFT.contractId,
                   actions: [
                       transactions.functionCall(
                           'storage_deposit', 
                           {account_id: item.owner_id},
                           10000000000000, 
                           utils.format.parseNearAmount("0.01")
                        ),
                       transactions.functionCall(
                           'ft_transfer_call', 
                           { receiver_id: window.contractMarket.contractId, amount: item.sale_conditions.amount, msg: JSON.stringify(message) },
                           250000000000000,
                           "1"
                        )
                   ]
               });

               console.log("Result: ", result);
           }

        } catch (e) {
            console.log("Error: ", e);
        }
    }

    useEffect(async () => {
        try {
            let data  = await window.contractMarket.get_sales(
                {
                    from_index: "0",
                    limit: 10
                }
            );

            let mapItemData = data.map(async item => {
                let itemData =  await window.contractNFT.nft_token({token_id: item.token_id});
                
                return {
                    ...item,
                    itemData
                }
            });
        
            let dataNew = await Promise.all(mapItemData);
            console.log("Data market: ", dataNew);
            setData(dataNew);
        } catch (e) {
            console.log(e);
        }
    }, []);

    useEffect(async () => {
        if (window.accountId) {
            // Get token list
            let tokenList = [];
            let nearBalance = await window.account.getAccountBalance();
            let vbicBalance = await window.contractFT.ft_balance_of({account_id: window.accountId})

            tokenList.push({
                isNative: true,
                symbol: "NEAR",
                balance: nearBalance.available,
                decimals: 24,
                contractId: "near"
            });

            tokenList.push({
                isNative: false,
                symbol: "VBIC",
                balance: vbicBalance,
                decimals: 18,
                contractId: window.contractFT.contractId
            });

            setTokenList(tokenList);
        }
    }, []);

    return (
        <div>
            <PageHeader
                className="site-page-header"
                title="Marketplace"
            />
            <div style={{ padding: 30, display: "flex" }}>
                {
                    data.map( item => {
                        return (
                            <Card
                                key={item.token_id}
                                hoverable
                                style={{ width: 240, marginRight: 15, marginBottom: 15 }}
                                cover={<img style={{height: 300, width: "100%", objectFit: "contain"}} alt="Media NFT" src={item.itemData.metadata.media} />}
                                actions={[
                                    <Button onClick={() => handleBuy(item)} icon={<ShoppingCartOutlined />}> Buy </Button>
                                ]}
                            >
                                <h1>{item.sale_conditions.is_native ? 
                                    utils.format.formatNearAmount(item.sale_conditions.amount) + " NEAR":
                                    parseTokenWithDecimals(item.sale_conditions.amount, item.sale_conditions.decimals) + " VBIC"
                                }</h1>
                                <Meta title={item.token_id} description={item.owner_id} />
                            </Card>
                        )
                    })
                }
            </div>
        </div>
    )
}

export default MarketPlace;
'''
'''--- src/pages/Profile.js ---
import React, { useEffect, useState} from 'react'
import {Button, Card, PageHeader, notification} from "antd";
import {SendOutlined, DollarCircleOutlined, EllipsisOutlined } from "@ant-design/icons";
import ModalTransferNFT from "../components/ModalTransferNFT";
import ModalSale from "../components/ModalSale";
import {default as PublicKey, transactions, utils} from "near-api-js"
import { functionCall, createTransaction } from "near-api-js/lib/transaction";
import ModalMintNFT from "../components/ModelMintNFT";
import {login, parseTokenAmount} from "../utils";
import BN from "bn.js";
import {baseDecode} from "borsh";
import getConfig from '../config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')
const { Meta } = Card;

function Profile() {
    const [nfts, setNFTs] = useState([]);
    const [transferVisible, setTransferVisible] = useState(false);
    const [saleVisible, setSaleVisible] = useState(false);
    const [mintVisible, setMintVisible] = useState(false);
    const [currentToken, setCurrentToken] = useState(null);

    useEffect(async () => {
        if (window.accountId) {
            let data  = await window.contractNFT.nft_tokens_for_owner({"account_id": window.accountId, "from_index": "0", "limit": 10});
            console.log("Data: ", data);
            setNFTs(data);
        }
    }, []);

    function handleTransferToken(token) {
        setCurrentToken(token);

        setTransferVisible(true);
    }

    function  getGas(gas) {
        return gas ? new BN(gas) : new BN('100000000000000');
    }
    function getAmount(amount) {
        return amount ? new BN(utils.format.parseNearAmount(amount)) : new BN('0');
    }

    function handleSaleToken(token) {
        setCurrentToken(token);

        setSaleVisible(true);
    }

    async function submitTransfer(accountId, tokenId) {
        try {
            if (accountId && currentToken.token_id) {
                await window.contractNFT.nft_transfer(
                    {
                        receiver_id: accountId,
                        token_id: currentToken.token_id,
                        approval_id: 0,
                        memo: "Transfer to " + accountId
                    },
                    30000000000000,
                    1
                );
                setTransferVisible(false);
            }
        } catch (e) {
            console.log("Transfer error: ", e);
            setTransferVisible(false);
        } finally {
            setTransferVisible(false);
        }
    }

    async function createTransactionA({
        receiverId,
        actions,
        nonceOffset = 1,
    }) {
        const localKey = await this.connection.signer.getPublicKey(
            this.accountId,
            this.connection.networkId
        );
        let accessKey = await this.accessKeyForTransaction(
            receiverId,
            actions,
            localKey
        );
        if (!accessKey) {
            throw new Error(
                `Cannot find matching key for transaction sent to ${receiverId}`
            );
        }

        const block = await this.connection.provider.block({ finality: 'final' });
        const blockHash = baseDecode(block.header.hash);

        const publicKey = PublicKey.from(accessKey.public_key);
        const nonce = accessKey.access_key.nonce + nonceOffset;

        return createTransaction(
            this.accountId,
            publicKey,
            receiverId,
            nonce,
            actions,
            blockHash
        );
    }

    async function executeMultiTransactions(transactions, callbackUrl) {
        const nearTransactions = await Promise.all(
            transactions.map((t, i) => {
                return createTransactionA({
                    receiverId: t.receiverId,
                    nonceOffset: i + 1,
                    actions: t.functionCalls.map((fc) =>
                        functionCall(
                            fc.methodName,
                            fc.args,
                            getGas(fc.gas),
                            getAmount(fc.amount)
                        )
                    ),
                });
            })
        );

        return window.walletConnection.requestSignTransactions(nearTransactions);
    }

    async function submitOnSale(token, price) {
        try {
            if (price && currentToken.token_id) {

                let sale_conditions = token === "NEAR" ? 
                        {
                            is_native: true,
                            contract_id: "near",
                            decimals: "24",
                            amount: utils.format.parseNearAmount(price.toString())
                        } : {
                            is_native: false,
                            contract_id: window.contractFT.contractId,
                            decimals: "18",
                            amount: parseTokenAmount(price, 18).toLocaleString('fullwide', {useGrouping:false})
                        };

                // Check storage balance
                let storageAccount = await window.contractMarket.storage_balance_of({
                    account_id: window.accountId
                });

                // Submit sale
                if (storageAccount > 0) {
                    console.log("Data: ", storageAccount, utils.format.parseNearAmount("0.1"), nearConfig.marketContractName);
                    await window.contractNFT.nft_approve({
                        token_id: currentToken.token_id,
                        account_id: nearConfig.marketContractName,
                        msg: JSON.stringify({sale_conditions})
                    },
                    30000000000000, utils.format.parseNearAmount("0.01"));
                    setSaleVisible(false);
                } else {
                    notification["warning"]({
                        message: 'Không đủ Storage Balance',
                        description:
                          'Storage Balance của bạn không đủ để đăng bán NFT mới. Vui lòng nạp thêm tại đây!',
                      });
                }
            }

        } catch (e) {
            console.log("Transfer error: ", e);
            setTransferVisible(false);
        } finally {
            setTransferVisible(false);
        }
    }

    async function submitOnMint(data) {
        // call NFT contract mint_token
        if (data.tokenId && data.media) {
            try {
                await window.contractNFT.nft_mint({
                    token_id: data.tokenId,
                    receiver_id: window.accountId,
                    metadata: {
                        title: data.tokenTitle,
                        description: data.description,
                        media: data.media
                    }
                }, 30000000000000, utils.format.parseNearAmount("0.01"))
            } catch (e) {
                console.log("Error: ", e);
            }
        }
    }

    function handleClickMint() {
        if (window.walletConnection.isSignedIn()) {
            setMintVisible(true);
        } else {
            login();
        }
    }

    return (
        <div>
            <PageHeader
                className="site-page-header"
                title="My Collectibles"
                extra={[
                    <Button onClick={handleClickMint} key="3">Mint NFT</Button>
                ]}
            />
            <div style={{ padding: 30, display: "flex" }}>
                {
                    nfts.map((item) => {
                        return (
                            <Card
                                key={item.token_id}
                                hoverable
                                style={{ width: 240, marginRight: 15, marginBottom: 15 }}
                                cover={<img style={{height: 300, width: "100%", objectFit: "contain"}} alt="nft-cover" src={item.metadata.media} />}
                                actions={[
                                    <SendOutlined onClick={() => handleTransferToken(item)} key={"send"}/>,
                                    <DollarCircleOutlined onClick={() => handleSaleToken(item)} key={"sell"} />,
                                ]}
                            >
                                <Meta title={`${item.metadata.title} (${item.approved_account_ids[nearConfig.marketContractName] >= 0 ? "SALE" : "NOT SALE"})`} description={item.owner_id} />
                            </Card>
                        )
                    })
                }
            </div>
            <ModalTransferNFT visible={transferVisible} handleOk={submitTransfer} handleCancel={() => setTransferVisible(false)} />
            <ModalSale visible={saleVisible} handleOk={submitOnSale} handleCancel={() => setSaleVisible(false)} />
            <ModalMintNFT visible={mintVisible} handleOk={submitOnMint} handleCancel={() => setMintVisible(false)} />
        </div>
    )
}

export default Profile;
'''
'''--- src/routes/index.js ---
import React from "react";
import {
    Routes,
    Route
} from "react-router-dom";

import MarketPlace from "../pages/MarketPlace";
import Profile from "../pages/Profile";

function Router() {
    return (
        <Routes>
            <Route path="/" element={<MarketPlace />} />
            <Route path="/profile" element={<Profile />} />
        </Routes>
    )
}

export default Router
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  window.account = window.walletConnection.account();

  // Initializing our contract APIs by contract name and configuration
  window.contractMarket = await new Contract(window.walletConnection.account(), nearConfig.marketContractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['storage_balance_of', 'storage_minimum_balance', 'get_sales_by_contract_id', 'get_sales'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['storate_deposit', "offer"],
  });

  window.contractNFT = await new Contract(window.walletConnection.account(), nearConfig.nftContractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['nft_tokens_for_owner', "nft_token"],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['nft_mint', "nft_transfer", "nft_approve"],
  });

  window.contractFT = await new Contract(window.walletConnection.account(), nearConfig.ftContractName, {
    viewMethods: ['ft_metadata', 'ft_balance_of'],
    changeMethods: ['ft_transfer_call', 'storage_deposit']
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.marketContractName)
}

export function parseTokenWithDecimals(amount, decimals) {
  let amountD = amount / Math.pow(10, decimals);
  return Math.floor(amountD * 100 / 100);
}

export function parseTokenAmount(amount, decimals) {
  return amount * Math.pow(10, decimals);
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- vercel.json ---
{
    "rewrites":  [
      {"source": "/(.*)", "destination": "/"}
    ]
}
'''