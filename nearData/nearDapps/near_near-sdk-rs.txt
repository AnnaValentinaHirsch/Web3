*GitHub Repository "near/near-sdk-rs"*

'''--- ci/compare_sizes/cache.py ---
import os
import sys

class Cache:
    def __init__(self, dir):
        self._dir = dir
        print(f"Cache directory: {dir}", file=sys.stderr)
        os.makedirs(self.registry, exist_ok=True)
        os.makedirs(self.git, exist_ok=True)
        os.makedirs(self.target, exist_ok=True)

    @property
    def root(self):
        return self._dir

    @property
    def registry(self):
        return os.path.join(self.root, "registry")

    @property
    def git(self):
        return os.path.join(self.root, "git")

    @property
    def target(self):
        return os.path.join(self.root, "target")

'''
'''--- ci/compare_sizes/compare_sizes.py ---
#!/usr/bin/env python3

# Requires:
# `pip install GitPython docker appdirs`
import argparse
import os
import sys
from cache import Cache
from appdirs import AppDirs

from project_instance import ProjectInstance

def common_entries(*dcts):
    if not dcts:
        return
    for i in set(dcts[0]).intersection(*dcts[1:]):
        yield (i,) + tuple(d[i] for d in dcts)

def list_dirs(path):
    entries = map(lambda p: os.path.join(path, p), os.listdir(path))
    return filter(os.path.isdir, entries)

def report(master, this_branch):
    def diff(old, new):
        diff = (new - old) / old

        return "{0:+.0%}".format(diff)

    header = """# Contract size report

Sizes are given in bytes.

| contract | master | this branch | difference |
| - | - | - | - |"""

    combined = [
        (name, master, branch, diff(master, branch))
        for name, master, branch in common_entries(master, this_branch)
    ]
    combined.sort(key=lambda el: el[0])
    rows = [f"| {name} | {old} | {new} | {diff} |" for name, old, new, diff in combined]

    return "\n".join([header, *rows])

def main():
    parser = argparse.ArgumentParser(
        prog="compare_sizes",
        description="compare example contract sizes between current branch and master",
    )
    parser.add_argument("-c", "--cargo-cache-dir")
    args = parser.parse_args()

    default_cache_dir = os.path.join(
        AppDirs("near_sdk_dev_cache", "near").user_data_dir,
        "contract_build",
    )
    cache_dir = args.cargo_cache_dir if args.cargo_cache_dir else default_cache_dir
    cache = Cache(cache_dir)

    this_file = os.path.abspath(os.path.realpath(__file__))
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(this_file)))

    cur_branch = ProjectInstance(project_root)

    with cur_branch.branch("master") as master:
        cur_sizes = cur_branch.sizes(cache)
        master_sizes = master.sizes(cache)

        print(report(master_sizes, cur_sizes))

if __name__ == "__main__":
    main()

'''
'''--- ci/compare_sizes/project_instance.py ---
import docker
import os
import glob
import subprocess
import tempfile
import shutil
import sys
import platform
from contextlib import contextmanager
from git import Repo

class ProjectInstance:
    def __init__(self, root_dir):
        self._root_dir = root_dir

    @contextmanager
    def branch(self, branch):
        repo = Repo(self._root_dir)

        try:
            with tempfile.TemporaryDirectory() as tempdir:
                repo.git.worktree("add", tempdir, branch)
                branch_project = ProjectInstance(tempdir)

                yield branch_project
        finally:
            repo.git.worktree("prune")

    @property
    def _examples_dir(self):
        return os.path.join(self._root_dir, "examples")

    def _build_artifact(self, artifact, cache):
        client = docker.from_env()
        tag = "latest-arm64" if platform.machine() == "ARM64" else "latest-amd64"
        image = f"nearprotocol/contract-builder:{tag}"

        client.containers.run(
            image,
            "./build.sh",
            mounts=[
                docker.types.Mount("/host", self._root_dir, type="bind"),
                docker.types.Mount(
                    "/usr/local/cargo/registry", cache.registry, type="bind"
                ),
                docker.types.Mount("/usr/local/cargo/git", cache.git, type="bind"),
                docker.types.Mount("/target", cache.target, type="bind"),
            ],
            working_dir=f"/host/examples/{artifact.name}",
            cap_add=["SYS_PTRACE"],
            security_opt=["seccomp=unconfined"],
            remove=True,
            user=os.getuid(),
            environment={
                "RUSTFLAGS": "-C link-arg=-s",
                "CARGO_TARGET_DIR": "/target",
            },
        )

    @property
    def _examples(self):
        examples = filter(os.DirEntry.is_dir, os.scandir(self._examples_dir))

        # build "status-message" first, as it's a dependency of some other examples
        return sorted(examples, key=lambda x: x.name != "status-message")

    def build_artifacts(self, cache):
        for example in self._examples:
            print(f"Building {example.name}...", file=sys.stderr)
            self._build_artifact(example, cache)

    def sizes(self, cache):
        self.build_artifacts(cache)

        artifact_paths = glob.glob(self._examples_dir + "/*/res/*.wasm")
        return {
            os.path.basename(path): os.stat(path).st_size for path in artifact_paths
        }

'''