*GitHub Repository "omarr45/near-fe-template"*

'''--- README.md ---
# Starter frontend template for NEAR projects

## Features:

- Routing
- Dark Theme toggler
- Tailwind CSS
- Redirect Page

<hr/>

## Things to change:

### `NEAR/config.js` :

1. Change contract name - line 1

### `src/index.js` :

1. Choose environment (testnet / mainnet) - line 14
2. Add contract's functions (view & change) - lines 42,44

### `src/App.js` :

1. Change contract name at sign in method - line 14

### `public/index.html` :

1. Change `<title>` tag - line 27
2. Change description - line 10
3. Change favicon.ico, logo192.png, and logo512.png

<hr/>

## Functions calling:

- Pass the `contract` to any component, and then call `contract.myFunction()`

- If it has any parameters, then `contract.myFunction({ arg1 : 'a', arg2 : 'b' })`

- To get the hash of any transaction:

```js
// pass wallet to the component from App.js
const resp = await wallet
  .account()
  .signAndSendTransaction({
    receiverId: 'abcdefg.testnet',
    actions: [
      // import { transactions } from 'near-api-js';
      transactions.functionCall(
        'methodName',
        {
          arg1: id,
          arg2: newOwner,
        },
        30000000000000, // 300 Tgas
        0 // attached money
      ),
    ],
  })
  .catch((err) => {
    console.log(err);
  });
console.log(resp.transaction.hash); // gets the hash
```

'''
'''--- package.json ---
{
  "name": "near-fe-template",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "buffer": "^6.0.3",
    "flowbite": "^1.5.3",
    "flowbite-react": "^0.2.0",
    "near-api-js": "^1.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.4.2",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.12",
    "postcss": "^8.4.17",
    "tailwindcss": "^3.1.8"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap');

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Montserrat', sans-serif;
  -webkit-font-smoothing: antialiased;
}

img,
video,
svg {
  display: block;
  max-width: 100%;
}

input,
button,
textarea,
select {
  font: inherit;
}

.container {
  width: 100%;
  max-width: 1000px;
  text-align: center;
  margin: 0 auto;
}

'''
'''--- src/App.js ---
import './App.css';

import { HashRouter, Route, Routes } from 'react-router-dom';

import { Flowbite } from 'flowbite-react';
import Home from './pages/Home';
import Navbar from './components/Navbar';
import Redirect from './pages/Redirect';

window.Buffer = window.Buffer || require('buffer').Buffer;

function App({ contract, currentUser, wallet }) {
  const signIn = () => {
    wallet.requestSignIn({
      contractId: 'abcdefg.testnet',
      successUrl: window.location.origin + '/#/redirect',
    });
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <HashRouter>
      <Flowbite>
        <div className='min-h-screen dark:bg-gray-900 text-black dark:text-white font-bold'>
          <Navbar login={signIn} logout={signOut} acc={currentUser} />
          <Routes>
            <Route
              path='/'
              exact
              element={<Home login={signIn} acc={currentUser} />}
            />
            <Route path='/redirect' exact element={<Redirect />} />
          </Routes>
        </div>
      </Flowbite>
    </HashRouter>
  );
}

export default App;

'''
'''--- src/NEAR/config.js ---
const CONTRACT_NAME = 'abcdefg.testnet';

function environment(env) {
  switch (env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;

'''
'''--- src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- src/index.js ---
import './index.css';

import { Contract, WalletConnection, connect, keyStores } from 'near-api-js';

import App from './App';
import React from 'react';
import ReactDOM from 'react-dom/client';
import environment from './NEAR/config';

// Initializing contract
async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = environment('testnet');

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await connect({ keyStore, ...nearConfig });

  // Initialize wallet connection
  const walletConnection = new WalletConnection(near);

  // Load in user's account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  const contract = await new Contract(
    walletConnection.account(),
    nearConfig.contractName,
    {
      // View methods are read-only â€“ they don't modify the state, but usually return some value
      viewMethods: [],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: [],
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />
    );
  }
);

'''
'''--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    'node_modules/flowbite-react/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0fdfa',
          100: '#ccfbf1',
          200: '#99f6e4',
          300: '#5eead4',
          400: '#2dd4bf',
          500: '#14b8a6',
          600: '#0d9488',
          700: '#0f766e',
          800: '#115e59',
          900: '#134e4a',
        },
        secondary: {
          50: '#fbf8eb',
          100: '#f6edcb',
          200: '#eeda9a',
          300: '#e5bf5f',
          400: '#dba634',
          500: '#cc8f26',
          600: '#b87520',
          700: '#8c511c',
          800: '#75421e',
          900: '#64381f',
        },
      },
    },
  },
  plugins: [require('flowbite/plugin')],
};

'''