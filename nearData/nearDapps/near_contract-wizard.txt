*GitHub Repository "near/contract-wizard"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .prettierrc.yml ---
singleQuote: true

'''
'''--- .vscode/tasks.json ---
{
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "build",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": [],
      "label": "npm: build",
      "detail": "node build.mjs"
    }
  ]
}

'''
'''--- README.md ---
# NEAR Contract Wizard

## Setup

1. Install dependencies: `npm install`.
2. Run `npm run prepare` to install commit hooks.
3. Run `npm run build:dev` to build the project.

## Generating code using the CLI

There's a simple CLI script `src/cli.ts` that you can use to try out the code generation.

```bash
npm run -s cli 'ft:{"name":"My Fungible Token","symbol":"MFT","decimals":24,"preMint":10}' > my_ft_contract.rs
```

## Testing

Run `npm run test` to run the tests.

The tests work by generating the Rust code, writing it to `tests/src/lib.rs`, and then trying to compile it to WASM. Compilation failure = test failure.

For this to work, you have to have the Rust build tools installed, as well as the `wasm32-unknown-unknown` target. You can install the WASM target with:

```bash
rustup target add wasm32-unknown-unknown
```

## Authors

- Jacob Lindahl <jacob.lindahl@near.org> [@sudo_build](https://twitter.com/sudo_build)

'''
'''--- package-lock.json ---
{
  "name": "contract-wizard",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "contract-wizard",
      "version": "1.0.0",
      "license": "Apache-2.0",
      "devDependencies": {
        "@types/node": "^20.5.9",
        "esbuild": "^0.19.2",
        "husky": "^8.0.3",
        "lint-staged": "^14.0.1",
        "prettier": "^3.0.3",
        "typescript": "^5.2.2"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.19.2.tgz",
      "integrity": "sha512-tM8yLeYVe7pRyAu9VMi/Q7aunpLwD139EY1S99xbQkT4/q2qa6eA4ige/WJQYdJ8GBL1K33pPFhPfPdJ/WzT8Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.19.2.tgz",
      "integrity": "sha512-lsB65vAbe90I/Qe10OjkmrdxSX4UJDjosDgb8sZUKcg3oefEuW2OT2Vozz8ef7wrJbMcmhvCC+hciF8jY/uAkw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.19.2.tgz",
      "integrity": "sha512-qK/TpmHt2M/Hg82WXHRc/W/2SGo/l1thtDHZWqFq7oi24AjZ4O/CpPSu6ZuYKFkEgmZlFoa7CooAyYmuvnaG8w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.19.2.tgz",
      "integrity": "sha512-Ora8JokrvrzEPEpZO18ZYXkH4asCdc1DLdcVy8TGf5eWtPO1Ie4WroEJzwI52ZGtpODy3+m0a2yEX9l+KUn0tA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.19.2.tgz",
      "integrity": "sha512-tP+B5UuIbbFMj2hQaUr6EALlHOIOmlLM2FK7jeFBobPy2ERdohI4Ka6ZFjZ1ZYsrHE/hZimGuU90jusRE0pwDw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.19.2.tgz",
      "integrity": "sha512-YbPY2kc0acfzL1VPVK6EnAlig4f+l8xmq36OZkU0jzBVHcOTyQDhnKQaLzZudNJQyymd9OqQezeaBgkTGdTGeQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.19.2.tgz",
      "integrity": "sha512-nSO5uZT2clM6hosjWHAsS15hLrwCvIWx+b2e3lZ3MwbYSaXwvfO528OF+dLjas1g3bZonciivI8qKR/Hm7IWGw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.19.2.tgz",
      "integrity": "sha512-Odalh8hICg7SOD7XCj0YLpYCEc+6mkoq63UnExDCiRA2wXEmGlK5JVrW50vZR9Qz4qkvqnHcpH+OFEggO3PgTg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.19.2.tgz",
      "integrity": "sha512-ig2P7GeG//zWlU0AggA3pV1h5gdix0MA3wgB+NsnBXViwiGgY77fuN9Wr5uoCrs2YzaYfogXgsWZbm+HGr09xg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.19.2.tgz",
      "integrity": "sha512-mLfp0ziRPOLSTek0Gd9T5B8AtzKAkoZE70fneiiyPlSnUKKI4lp+mGEnQXcQEHLJAcIYDPSyBvsUbKUG2ri/XQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.19.2.tgz",
      "integrity": "sha512-hn28+JNDTxxCpnYjdDYVMNTR3SKavyLlCHHkufHV91fkewpIyQchS1d8wSbmXhs1fiYDpNww8KTFlJ1dHsxeSw==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.19.2.tgz",
      "integrity": "sha512-KbXaC0Sejt7vD2fEgPoIKb6nxkfYW9OmFUK9XQE4//PvGIxNIfPk1NmlHmMg6f25x57rpmEFrn1OotASYIAaTg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.19.2.tgz",
      "integrity": "sha512-dJ0kE8KTqbiHtA3Fc/zn7lCd7pqVr4JcT0JqOnbj4LLzYnp+7h8Qi4yjfq42ZlHfhOCM42rBh0EwHYLL6LEzcw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.19.2.tgz",
      "integrity": "sha512-7Z/jKNFufZ/bbu4INqqCN6DDlrmOTmdw6D0gH+6Y7auok2r02Ur661qPuXidPOJ+FSgbEeQnnAGgsVynfLuOEw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.19.2.tgz",
      "integrity": "sha512-U+RinR6aXXABFCcAY4gSlv4CL1oOVvSSCdseQmGO66H+XyuQGZIUdhG56SZaDJQcLmrSfRmx5XZOWyCJPRqS7g==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.19.2.tgz",
      "integrity": "sha512-oxzHTEv6VPm3XXNaHPyUTTte+3wGv7qVQtqaZCrgstI16gCuhNOtBXLEBkBREP57YTd68P0VgDgG73jSD8bwXQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.19.2.tgz",
      "integrity": "sha512-WNa5zZk1XpTTwMDompZmvQLHszDDDN7lYjEHCUmAGB83Bgs20EMs7ICD+oKeT6xt4phV4NDdSi/8OfjPbSbZfQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.19.2.tgz",
      "integrity": "sha512-S6kI1aT3S++Dedb7vxIuUOb3oAxqxk2Rh5rOXOTYnzN8JzW1VzBd+IqPiSpgitu45042SYD3HCoEyhLKQcDFDw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.19.2.tgz",
      "integrity": "sha512-VXSSMsmb+Z8LbsQGcBMiM+fYObDNRm8p7tkUDMPG/g4fhFX5DEFmjxIEa3N8Zr96SjsJ1woAhF0DUnS3MF3ARw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.19.2.tgz",
      "integrity": "sha512-5NayUlSAyb5PQYFAU9x3bHdsqB88RC3aM9lKDAz4X1mo/EchMIT1Q+pSeBXNgkfNmRecLXA0O8xP+x8V+g/LKg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.19.2.tgz",
      "integrity": "sha512-47gL/ek1v36iN0wL9L4Q2MFdujR0poLZMJwhO2/N3gA89jgHp4MR8DKCmwYtGNksbfJb9JoTtbkoe6sDhg2QTA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.19.2.tgz",
      "integrity": "sha512-tcuhV7ncXBqbt/Ybf0IyrMcwVOAPDckMK9rXNHtF17UTK18OKLpg08glminN06pt2WCoALhXdLfSPbVvK/6fxw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@types/node": {
      "version": "20.5.9",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.5.9.tgz",
      "integrity": "sha512-PcGNd//40kHAS3sTlzKB9C9XL4K0sTup8nbG5lC14kzEteTNuAFh9u5nA0o5TWnSG2r/JNPRXFVcHJIIeRlmqQ==",
      "dev": true
    },
    "node_modules/ansi-escapes": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-5.0.0.tgz",
      "integrity": "sha512-5GFMVX8HqE/TB+FuBJGuO5XG0WrsA6ptUqoODaT/n9mmUaZFkqnBueB4leqGBCmrUHnCnC4PCZTCd0E7QQ83bA==",
      "dev": true,
      "dependencies": {
        "type-fest": "^1.0.2"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
      "integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
      "dev": true,
      "engines": {
        "node": "^12.17.0 || ^14.13 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/cli-cursor": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-4.0.0.tgz",
      "integrity": "sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==",
      "dev": true,
      "dependencies": {
        "restore-cursor": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-truncate": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-3.1.0.tgz",
      "integrity": "sha512-wfOBkjXteqSnI59oPcJkcPl/ZmwvMMOj340qUIY1SKZCv0B9Cf4D4fAucRkIKQmsIuYK3x1rrgU7MeGRruiuiA==",
      "dev": true,
      "dependencies": {
        "slice-ansi": "^5.0.0",
        "string-width": "^5.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "dev": true
    },
    "node_modules/commander": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-11.0.0.tgz",
      "integrity": "sha512-9HMlXtt/BNoYr8ooyjjNRdIilOTkVJXB+GhxMTtOKwk0R4j4lS4NpjuqmRxroBfnfTSHQIHQB7wryHhXarNjmQ==",
      "dev": true,
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true
    },
    "node_modules/esbuild": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.19.2.tgz",
      "integrity": "sha512-G6hPax8UbFakEj3hWO0Vs52LQ8k3lnBhxZWomUJDxfz3rZTLqF5k/FCzuNdLx2RbpBiQQF9H9onlDDH1lZsnjg==",
      "dev": true,
      "hasInstallScript": true,
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/android-arm": "0.19.2",
        "@esbuild/android-arm64": "0.19.2",
        "@esbuild/android-x64": "0.19.2",
        "@esbuild/darwin-arm64": "0.19.2",
        "@esbuild/darwin-x64": "0.19.2",
        "@esbuild/freebsd-arm64": "0.19.2",
        "@esbuild/freebsd-x64": "0.19.2",
        "@esbuild/linux-arm": "0.19.2",
        "@esbuild/linux-arm64": "0.19.2",
        "@esbuild/linux-ia32": "0.19.2",
        "@esbuild/linux-loong64": "0.19.2",
        "@esbuild/linux-mips64el": "0.19.2",
        "@esbuild/linux-ppc64": "0.19.2",
        "@esbuild/linux-riscv64": "0.19.2",
        "@esbuild/linux-s390x": "0.19.2",
        "@esbuild/linux-x64": "0.19.2",
        "@esbuild/netbsd-x64": "0.19.2",
        "@esbuild/openbsd-x64": "0.19.2",
        "@esbuild/sunos-x64": "0.19.2",
        "@esbuild/win32-arm64": "0.19.2",
        "@esbuild/win32-ia32": "0.19.2",
        "@esbuild/win32-x64": "0.19.2"
      }
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "dev": true
    },
    "node_modules/execa": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/execa/-/execa-7.2.0.tgz",
      "integrity": "sha512-UduyVP7TLB5IcAQl+OzLyLcS/l32W/GLg+AhHJ+ow40FOk2U3SAllPwR44v4vmdFwIWqpdwxxpQbF1n5ta9seA==",
      "dev": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.1",
        "human-signals": "^4.3.0",
        "is-stream": "^3.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^5.1.0",
        "onetime": "^6.0.0",
        "signal-exit": "^3.0.7",
        "strip-final-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.18.0 || ^16.14.0 || >=18.0.0"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/human-signals": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-4.3.1.tgz",
      "integrity": "sha512-nZXjEF2nbo7lIw3mgYjItAfgQXog3OjJogSbKa2CQIIvSGWcKgeJnQlNXip6NglNzYH45nSRiEVimMvYL8DDqQ==",
      "dev": true,
      "engines": {
        "node": ">=14.18.0"
      }
    },
    "node_modules/husky": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/husky/-/husky-8.0.3.tgz",
      "integrity": "sha512-+dQSyqPh4x1hlO1swXBiNb2HzTDN1I2IGLQx1GrBuiqFJfoMrnZWwVmatvSiO+Iz8fBUnf+lekwNo4c2LlXItg==",
      "dev": true,
      "bin": {
        "husky": "lib/bin.js"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/typicode"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
      "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz",
      "integrity": "sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==",
      "dev": true,
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true
    },
    "node_modules/lilconfig": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
      "integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lint-staged": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/lint-staged/-/lint-staged-14.0.1.tgz",
      "integrity": "sha512-Mw0cL6HXnHN1ag0mN/Dg4g6sr8uf8sn98w2Oc1ECtFto9tvRF7nkXGJRbx8gPlHyoR0pLyBr2lQHbWwmUHe1Sw==",
      "dev": true,
      "dependencies": {
        "chalk": "5.3.0",
        "commander": "11.0.0",
        "debug": "4.3.4",
        "execa": "7.2.0",
        "lilconfig": "2.1.0",
        "listr2": "6.6.1",
        "micromatch": "4.0.5",
        "pidtree": "0.6.0",
        "string-argv": "0.3.2",
        "yaml": "2.3.1"
      },
      "bin": {
        "lint-staged": "bin/lint-staged.js"
      },
      "engines": {
        "node": "^16.14.0 || >=18.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/lint-staged"
      }
    },
    "node_modules/listr2": {
      "version": "6.6.1",
      "resolved": "https://registry.npmjs.org/listr2/-/listr2-6.6.1.tgz",
      "integrity": "sha512-+rAXGHh0fkEWdXBmX+L6mmfmXmXvDGEKzkjxO+8mP3+nI/r/CWznVBvsibXdxda9Zz0OW2e2ikphN3OwCT/jSg==",
      "dev": true,
      "dependencies": {
        "cli-truncate": "^3.1.0",
        "colorette": "^2.0.20",
        "eventemitter3": "^5.0.1",
        "log-update": "^5.0.1",
        "rfdc": "^1.3.0",
        "wrap-ansi": "^8.1.0"
      },
      "engines": {
        "node": ">=16.0.0"
      },
      "peerDependencies": {
        "enquirer": ">= 2.3.0 < 3"
      },
      "peerDependenciesMeta": {
        "enquirer": {
          "optional": true
        }
      }
    },
    "node_modules/log-update": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/log-update/-/log-update-5.0.1.tgz",
      "integrity": "sha512-5UtUDQ/6edw4ofyljDNcOVJQ4c7OjDro4h3y8e1GQL5iYElYclVHJ3zeWchylvMaKnDbDilC8irOVyexnA/Slw==",
      "dev": true,
      "dependencies": {
        "ansi-escapes": "^5.0.0",
        "cli-cursor": "^4.0.0",
        "slice-ansi": "^5.0.0",
        "strip-ansi": "^7.0.1",
        "wrap-ansi": "^8.0.1"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/npm-run-path": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.1.0.tgz",
      "integrity": "sha512-sJOdmRGrY2sjNTRMbSvluQqg+8X7ZK61yvzBEIDhz4f8z1TZFYABsqjjCBd/0PUNE9M6QDgHJXQkGUEm7Q+l9Q==",
      "dev": true,
      "dependencies": {
        "path-key": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path/node_modules/path-key": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
      "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/onetime": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz",
      "integrity": "sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==",
      "dev": true,
      "dependencies": {
        "mimic-fn": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pidtree": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/pidtree/-/pidtree-0.6.0.tgz",
      "integrity": "sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==",
      "dev": true,
      "bin": {
        "pidtree": "bin/pidtree.js"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/prettier": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.0.3.tgz",
      "integrity": "sha512-L/4pUDMxcNa8R/EthV08Zt42WBO4h1rarVtK0K+QJG0X187OLo7l699jWw0GKuwzkPQ//jMFA/8Xm6Fh3J/DAg==",
      "dev": true,
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/restore-cursor": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-4.0.0.tgz",
      "integrity": "sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==",
      "dev": true,
      "dependencies": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/restore-cursor/node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/restore-cursor/node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rfdc": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.3.0.tgz",
      "integrity": "sha512-V2hovdzFbOi77/WajaSMXk2OLm+xNIeQdMMuB7icj7bk6zi2F8GGAxigcnDFpJHbNyNcgyJDiP+8nOrY5cZGrA==",
      "dev": true
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true
    },
    "node_modules/slice-ansi": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
      "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^6.0.0",
        "is-fullwidth-code-point": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/slice-ansi?sponsor=1"
      }
    },
    "node_modules/string-argv": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/string-argv/-/string-argv-0.3.2.tgz",
      "integrity": "sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==",
      "dev": true,
      "engines": {
        "node": ">=0.6.19"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz",
      "integrity": "sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/type-fest": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-1.4.0.tgz",
      "integrity": "sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.2.2.tgz",
      "integrity": "sha512-mI4WrpHsbCIcwT9cF4FZvr80QUeKvsUsUvKDoR+X/7XHQH98xYD8YHZg7ANtz2GtZt/CBq2QJ0thkGJMHfqc1w==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/yaml": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.3.1.tgz",
      "integrity": "sha512-2eHWfjaoXgTBC2jNM1LRef62VQa0umtvRiDSk6HSzW7RvS5YtkabJrwYLLEKWBc8a5U2PTSCs+dJjUTJdlHsWQ==",
      "dev": true,
      "engines": {
        "node": ">= 14"
      }
    }
  }
}

'''
'''--- package.json ---
{
  "name": "contract-wizard",
  "version": "1.0.0",
  "description": "Generate Rust code for NEAR smart contracts using near-sdk-contract-tools",
  "main": "./src/lib.ts",
  "scripts": {
    "prepare": "husky install",
    "build:dev": "node build.mjs",
    "build:prod": "NODE_ENV=production node build.mjs",
    "format": "prettier . --write",
    "test": "node build-test.mjs && node build/test.js",
    "cli": "node build-cli.mjs && node build/cli.js",
    "dev": "bos-loader test --path ./build/dev/src",
    "clean": "rm -rf ./build",
    "deploy": "cd build/prod && bos components deploy contractwizard.near sign-as contractwizard.near network-config mainnet"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/near/contract-wizard.git"
  },
  "author": "Jacob Lindahl <jacob.lindahl@near.org>",
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/near/contract-wizard/issues"
  },
  "homepage": "https://github.com/near/contract-wizard#readme",
  "devDependencies": {
    "@types/node": "^20.5.9",
    "esbuild": "^0.19.2",
    "husky": "^8.0.3",
    "lint-staged": "^14.0.1",
    "prettier": "^3.0.3",
    "typescript": "^5.2.2"
  },
  "lint-staged": {
    "**/*": "prettier --write --ignore-unknown"
  }
}

'''
'''--- src/cli.ts ---
import {
  generateCode,
  NonFungibleToken,
  FungibleToken,
  Owner,
  Pause,
  ContractPlugin,
} from './lib';

const [tokenString, ...pluginStrings] = process.argv.slice(2);

const [tokenType, tokenConfigString] = tokenString.split(/:(.*)/);
const tokenConfig = JSON.parse(tokenConfigString);

const token = (() => {
  switch (tokenType) {
    case 'ft':
      return new FungibleToken(tokenConfig);
    case 'nft':
      return new NonFungibleToken(tokenConfig);
    default:
      throw new Error(`Unknown token type: ${tokenType}`);
  }
})();

const plugins: ContractPlugin[] = [];

for (const pluginString of pluginStrings) {
  const [pluginName, pluginConfigString] = pluginString.split(/:(.*)/);
  const pluginConfig = JSON.parse(pluginConfigString);
  switch (pluginName) {
    case 'owner':
      plugins.push(new Owner(pluginConfig));
      break;
    case 'pause':
      plugins.push(new Pause(pluginConfig));
      break;
    default:
      throw new Error(`Unknown plugin: ${pluginName}`);
  }
}

const code = generateCode({
  token,
  plugins,
});

console.log(code);

'''
'''--- src/lib.ts ---
function makeValidAccountId(s: string): string {
  const clean = (s: string) =>
    s
      .split('.')
      .map((p) => p.replace(/[^a-z0-9_-]/g, ''))
      .filter((p) => p.length > 0)
      .join('.');
  const cleaned = clean(s);

  if (cleaned.length > 64) {
    return clean(cleaned.substring(0, 64));
  } else if (cleaned.length < 2) {
    return clean(cleaned + '.near');
  } else {
    return cleaned;
  }
}

function makeString(s: string): string {
  return JSON.stringify(s);
}

function indent(n: number): (s: string) => string {
  return (s: string) =>
    s
      .split('\n')
      .map((line) => (line.length ? '    '.repeat(n) + line : ''))
      .join('\n');
}

export interface Import {
  path: string[];
}

export interface TokenCodeFragments {
  imports: Import[];
  deriveMacroName?: string;
  deriveMacroAttribute?: string;
  constructorCode?: string;
  bindgenCode?: string;
  otherCode?: string;
}

export interface Hooks {
  all: string[];
  authorized: string[];
}

function hooksToCons(hooks: string[]): string {
  if (hooks.length === 0) {
    return '()';
  } else if (hooks.length === 1) {
    return hooks[0];
  } else {
    const hook = hooks[0];
    const tail = hooks.slice(1);
    return `(${hook}, ${hooksToCons(tail)})`;
  }
}

export interface Token {
  generate(hooks: Hooks): TokenCodeFragments;
}

export class FungibleToken implements Token {
  constructor(
    public config: {
      name: string;
      symbol: string;
      decimals: number | string;
      preMint?: string;
      preMintReceiver?: string;
      mintable?: boolean;
      burnable?: boolean;
    },
  ) {}

  generate(hooks: Hooks): TokenCodeFragments {
    const imports = [
      { path: ['near_sdk_contract_tools', 'ft', '*'] },
      { path: ['near_sdk', 'env'] },
    ];

    const decimalsValue =
      'decimals' in this.config ? +this.config.decimals : 24;
    const decimals = Math.max(0, Math.min(38, decimalsValue));

    let constructorCodes = [
      `
Nep148Controller::set_metadata(
    &mut contract,
    &FungibleTokenMetadata::new(${makeString(
      this.config.name,
    )}.to_string(), ${makeString(this.config.symbol)}.to_string(), ${decimals}),
);
`.trim(),
    ];

    const preMint =
      this.config.preMint && +this.config.preMint > 0
        ? (this.config.preMint + '').trim()
        : undefined;

    if (preMint !== undefined) {
      let preMintReceiver;

      if (this.config.preMintReceiver) {
        preMintReceiver = `"${makeValidAccountId(
          this.config.preMintReceiver,
        )}".parse().unwrap()`;
      } else {
        preMintReceiver = 'env::predecessor_account_id()';
      }

      constructorCodes.push(
        `
Nep141Controller::mint(
    &mut contract,
    &Nep141Mint {
        amount: ${preMint}u128,
        receiver_id: &${preMintReceiver},
        memo: None,
    },
)
.unwrap_or_else(|e| env::panic_str(&e.to_string()));
`.trim(),
      );
    }

    const bindgenCodes = [];

    if (this.config.mintable) {
      imports.push({ path: ['near_sdk', 'AccountId'] });
      imports.push({ path: ['near_sdk', 'env'] });
      imports.push({ path: ['near_sdk', 'json_types', 'U128'] });
      const code = `
pub fn mint(&mut self, account_id: AccountId, amount: U128) {
    Nep141Controller::mint(
        self,
        &Nep141Mint {
            amount: amount.into(),
            receiver_id: &account_id,
            memo: None,
        },
    )
    .unwrap_or_else(|e| env::panic_str(&e.to_string()));
}
`.trim();
      bindgenCodes.push(code);
    }

    if (this.config.burnable) {
      imports.push({ path: ['near_sdk', 'env'] });
      imports.push({ path: ['near_sdk', 'json_types', 'U128'] });
      const code = `
pub fn burn(&mut self, amount: U128) {
    Nep141Controller::burn(
        self,
        &Nep141Burn {
            amount: amount.into(),
            owner_id: &env::predecessor_account_id(),
            memo: None,
        },
    )
    .unwrap_or_else(|e| env::panic_str(&e.to_string()));
}
`.trim();
      bindgenCodes.push(code);
    }

    const bindgenCode = bindgenCodes.join('\n\n') || undefined;

    const attributes = [];

    if (hooks.all.length !== 0) {
      attributes.push(`all_hooks = "${hooksToCons(hooks.all)}"`);
    }

    if (hooks.authorized.length !== 0) {
      attributes.push(`mint_hook = "${hooksToCons(hooks.authorized)}"`);
    }

    const deriveMacroAttribute =
      attributes.length > 0
        ? `#[fungible_token(${attributes.join(', ')})]`
        : undefined;

    return {
      imports,
      deriveMacroName: 'FungibleToken',
      deriveMacroAttribute,
      constructorCode: constructorCodes.join('\n\n'),
      bindgenCode,
    };
  }
}

export class NonFungibleToken implements Token {
  constructor(
    public config: {
      name: string;
      symbol: string;
      baseUri?: string;
      mintable?: boolean;
      burnable?: boolean;
    },
  ) {}

  generate(hooks: Hooks): TokenCodeFragments {
    const imports = [{ path: ['near_sdk_contract_tools', 'nft', '*'] }];

    const constructorCode = `
contract.set_contract_metadata(ContractMetadata::new(
    ${makeString(this.config.name)}.to_string(),
    ${makeString(this.config.symbol)}.to_string(),
    ${
      this.config.baseUri
        ? `Some(${makeString(this.config.baseUri)}.to_string())`
        : 'None'
    },
));
    `.trim();

    let otherCode = undefined;

    const bindgenCodes = [];

    if (this.config.mintable) {
      imports.push({ path: ['near_sdk', 'AccountId'] });
      imports.push({ path: ['near_sdk', 'env'] });
      const code = `
pub fn mint(&mut self, token_id: TokenId, account_id: AccountId, metadata: TokenMetadata) {
    Nep177Controller::mint_with_metadata(self, token_id, account_id, metadata)
        .unwrap_or_else(|e| env::panic_str(&e.to_string()));
}
    `.trim();
      bindgenCodes.push(code);
    }

    if (this.config.burnable) {
      imports.push({ path: ['near_sdk', 'env'] });
      const code = `
pub fn burn(&mut self, token_id: TokenId) {
    Nep177Controller::burn_with_metadata(self, token_id, &env::predecessor_account_id())
        .unwrap_or_else(|e| env::panic_str(&e.to_string()));
}
    `.trim();
      bindgenCodes.push(code);
    }

    const bindgenCode = bindgenCodes.join('\n\n') || undefined;

    const attributes = [];

    if (hooks.all.length !== 0) {
      attributes.push(`all_hooks = "${hooksToCons(hooks.all)}"`);
    }

    if (hooks.authorized.length !== 0) {
      attributes.push(`mint_hook = "${hooksToCons(hooks.authorized)}"`);
    }

    const deriveMacroAttribute =
      attributes.length > 0
        ? `#[non_fungible_token(${attributes.join(', ')})]`
        : undefined;

    return {
      imports,
      deriveMacroName: 'NonFungibleToken',
      deriveMacroAttribute,
      constructorCode,
      bindgenCode,
      otherCode,
    };
  }
}

export interface ContractPlugin {
  generate(): PluginCodeFragments;
}

export interface PluginCodeFragments {
  imports: Import[];
  deriveMacroName?: string;
  deriveMacroAttribute?: string;
  constructorCode?: string;
  otherCode?: string;
  hooks: Hooks;
}

export class Rbac implements ContractPlugin {
  constructor(
    public config: {
      accountId?: string;
    },
  ) {}

  generate(): PluginCodeFragments {
    const imports = [
      { path: ['near_sdk', 'borsh', 'self'] },
      { path: ['near_sdk', 'borsh', 'BorshSerialize'] },
      { path: ['near_sdk', 'BorshStorageKey'] },
      { path: ['near_sdk_contract_tools', 'Rbac'] },
      { path: ['near_sdk_contract_tools', 'rbac', '*'] },
      { path: ['near_sdk_contract_tools', 'hook', 'Hook'] },
    ];

    let accountId;

    if (this.config.accountId) {
      accountId = `"${makeValidAccountId(
        this.config.accountId,
      )}".parse().unwrap()`;
    } else {
      imports.push({ path: ['near_sdk', 'env'] });
      accountId = 'env::predecessor_account_id()';
    }

    return {
      imports,
      deriveMacroName: 'Rbac',
      deriveMacroAttribute: `#[rbac(roles = "Role")]`,
      hooks: {
        all: [],
        authorized: ['OnlyAdmin'],
      },
      constructorCode: `contract.add_role(${accountId}, &Role::Admin);`,
      otherCode: `
#[derive(BorshSerialize, BorshStorageKey)]
pub enum Role {
    Admin,
}

pub struct OnlyAdmin;

impl<A> Hook<Contract, A> for OnlyAdmin {
    fn hook<R>(contract: &mut Contract, _args: &A, f: impl FnOnce(&mut Contract) -> R) -> R {
        <Contract as Rbac>::require_role(&Role::Admin);
        f(contract)
    }
}
`.trim(),
    };
  }
}

export class Owner implements ContractPlugin {
  constructor(
    public config: {
      accountId?: string;
    },
  ) {}

  generate(): PluginCodeFragments {
    const imports = [
      { path: ['near_sdk_contract_tools', 'Owner'] },
      { path: ['near_sdk_contract_tools', 'owner', '*'] },
      { path: ['near_sdk_contract_tools', 'owner', 'hooks', 'OnlyOwner'] },
    ];

    if (!this.config.accountId) {
      imports.push({ path: ['near_sdk', 'env'] });
    }

    const accountId = this.config.accountId
      ? `"${makeValidAccountId(this.config.accountId)}".parse().unwrap()`
      : 'env::predecessor_account_id()';

    const constructorCode = `Owner::init(&mut contract, &${accountId});`;

    return {
      imports,
      deriveMacroName: 'Owner',
      constructorCode,
      hooks: {
        all: [],
        authorized: ['OnlyOwner'],
      },
    };
  }
}

export class Pause implements ContractPlugin {
  constructor(_config: {}) {}

  generate(): PluginCodeFragments {
    const imports = [
      { path: ['near_sdk_contract_tools', 'Pause'] },
      { path: ['near_sdk_contract_tools', 'pause', '*'] },
      { path: ['near_sdk_contract_tools', 'pause', 'hooks', 'PausableHook'] },
    ];

    return {
      imports,
      deriveMacroName: 'Pause',
      hooks: {
        all: ['PausableHook'],
        authorized: [],
      },
    };
  }
}

export interface CodeGenerationOptions {
  token: Token;
  plugins: ContractPlugin[];
}

export interface CodeGenerationOptionsPojo {
  token:
    | {
        which: 'ft';
        config: ConstructorParameters<typeof FungibleToken>[0];
      }
    | {
        which: 'nft';
        config: ConstructorParameters<typeof NonFungibleToken>[0];
      };
  plugins: {
    owner?: {};
    pause?: {};
    rbac?: {};
  };
}

function isPojoConfig(x: any): x is CodeGenerationOptionsPojo {
  return (
    x &&
    typeof x === 'object' &&
    typeof x.token === 'object' &&
    typeof x.token.which === 'string'
  );
}

function pojoToConfig(pojo: CodeGenerationOptionsPojo): CodeGenerationOptions {
  const token =
    pojo.token.which === 'ft'
      ? new FungibleToken(pojo.token.config)
      : new NonFungibleToken(pojo.token.config);

  const plugins = Object.entries(pojo.plugins).map(([pluginId, config]) => {
    switch (pluginId) {
      case 'owner':
        return new Owner(config);
      case 'pause':
        return new Pause(config);
      case 'rbac':
        return new Rbac(config);
      default:
        throw new Error(`Unknown plugin: "${pluginId}"`);
    }
  });

  return {
    token,
    plugins,
  };
}

interface ImportNode {
  part: string;
  children: {
    [part: string]: ImportNode;
  };
}

function resolveImports(imports: Import[]): string {
  const roots: ImportNode = {
    part: '',
    children: {},
  };

  function addPath(root: ImportNode, path: string[]) {
    if (path.length == 0) {
      return;
    }

    const [part, ...rest] = path;

    if (root.children[part] == undefined) {
      root.children[part] = {
        part,
        children: {},
      };
    }

    addPath(root.children[part], rest);
  }

  for (const i of imports) {
    addPath(roots, i.path);
  }

  function generateImportCode(root: ImportNode, maxCols = 80): string {
    const childNodes = Object.values(root.children);
    const prefix = `${root.part}::`;
    if (childNodes.length === 1) {
      return `${prefix}${generateImportCode(
        childNodes[0],
        maxCols - prefix.length,
      )}`;
    } else if (childNodes.length > 1) {
      const childCodes = childNodes.map((childNode) =>
        generateImportCode(childNode, maxCols - prefix.length),
      );

      childCodes.sort();

      // first line doesn't have an indent applied
      const lines = [childCodes.shift()!];

      while (childCodes.length > 0) {
        const nextCode = childCodes.shift()!;
        if (nextCode.includes('\n')) {
          lines.push(indent(1)(nextCode));
          continue;
        }
        const nextLine = lines[lines.length - 1] + ', ' + nextCode;
        if (nextLine.length > maxCols) {
          lines.push(indent(1)(nextCode));
        } else {
          lines[lines.length - 1] = nextLine;
        }
      }

      if (lines.length === 1) {
        const line = lines[0];
        const singleLine = `${prefix}{${line}}`;
        if (singleLine.length <= maxCols) {
          return singleLine;
        } else {
          return `${prefix}{\n${indent(1)(line)}\n}`;
        }
      }

      // apply indent to first line
      lines[0] = indent(1)(lines[0]);

      const childCode = lines.join(',\n');
      return `${prefix}{
${childCode},
}`;
    } else {
      return root.part;
    }
  }

  return Object.values(roots.children)
    .map((child) => `use ${generateImportCode(child, 75)};`)
    .join('\n');
}

export function generateCode(
  options: CodeGenerationOptions | CodeGenerationOptionsPojo,
): string {
  let useOptions;
  if (isPojoConfig(options)) {
    useOptions = pojoToConfig(options);
  } else {
    useOptions = options;
  }

  const imports = [
    { path: ['near_sdk', 'near_bindgen'] },
    { path: ['near_sdk', 'PanicOnDefault'] },
    { path: ['near_sdk', 'borsh', 'self'] },
    { path: ['near_sdk', 'borsh', 'BorshSerialize'] },
    { path: ['near_sdk', 'borsh', 'BorshDeserialize'] },
  ];

  const hooks: Hooks = {
    all: [],
    authorized: [],
  };

  const deriveMacroNames = [
    'BorshSerialize',
    'BorshDeserialize',
    'PanicOnDefault',
  ];
  const deriveMacroAttributes = [];
  const constructorCodes = [];
  const otherCodes = [];

  Object.values(useOptions.plugins).forEach((plugin) => {
    const pluginCodeFragments = plugin.generate();
    imports.push(...pluginCodeFragments.imports);
    hooks.all.push(...pluginCodeFragments.hooks.all);
    hooks.authorized.push(...pluginCodeFragments.hooks.authorized);
    if (pluginCodeFragments.constructorCode) {
      constructorCodes.push(pluginCodeFragments.constructorCode);
    }
    if (pluginCodeFragments.deriveMacroName) {
      deriveMacroNames.push(pluginCodeFragments.deriveMacroName);
    }
    if (pluginCodeFragments.deriveMacroAttribute) {
      deriveMacroAttributes.push(pluginCodeFragments.deriveMacroAttribute);
    }
    if (pluginCodeFragments.otherCode) {
      otherCodes.push(pluginCodeFragments.otherCode);
    }
  });

  const tokenCodeFragments = useOptions.token.generate(hooks);

  imports.push(...tokenCodeFragments.imports);
  if (tokenCodeFragments.deriveMacroName) {
    deriveMacroNames.push(tokenCodeFragments.deriveMacroName);
  }
  if (tokenCodeFragments.deriveMacroAttribute) {
    deriveMacroAttributes.push(tokenCodeFragments.deriveMacroAttribute);
  }
  if (tokenCodeFragments.constructorCode) {
    constructorCodes.push(tokenCodeFragments.constructorCode);
  }
  if (tokenCodeFragments.otherCode) {
    otherCodes.push(tokenCodeFragments.otherCode);
  }

  deriveMacroAttributes.push('#[near_bindgen]');

  let constructorCode = '\nSelf {}';
  if (constructorCodes.length > 0) {
    constructorCode = `
let mut contract = Self {};

${constructorCodes.join('\n')}

contract`;
  }

  let bindgenCode = '';
  if (tokenCodeFragments.bindgenCode) {
    bindgenCode = `

${tokenCodeFragments.bindgenCode}`;
  }

  return (
    `
${resolveImports(imports)}

#[derive(${deriveMacroNames.join(', ')})]
${deriveMacroAttributes.join('\n')}
pub struct Contract {}

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new() -> Self {${indent(2)(constructorCode)}
    }${indent(1)(bindgenCode)}
}

${otherCodes.join('\n\n')}
`.trim() + '\n'
  );
}

'''
'''--- src/srcDoc.ts ---
import { CodeGenerationOptionsPojo, generateCode } from './lib';

window.addEventListener('message', (e) => {
  window.top!.postMessage(
    generateCode(e.data as CodeGenerationOptionsPojo),
    '*',
  );
});

'''
'''--- src/test.ts ---
import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';
import { CodeGenerationOptionsPojo, generateCode } from './lib';

const testOptions: CodeGenerationOptionsPojo[] = [
  {
    token: {
      which: 'ft',
      config: {
        name: 'My Fungible Token',
        symbol: 'MFT',
        decimals: 24,
        preMint: '0',
        mintable: true,
        burnable: true,
      },
    },
    plugins: {},
  },
  {
    token: {
      which: 'ft',
      config: {
        name: 'My Fungible Token',
        symbol: 'MFT',
        decimals: 24,
        preMint: '1000',
        preMintReceiver: 'bob.near',
        mintable: false,
        burnable: false,
      },
    },
    plugins: {
      pause: {},
      rbac: {
        accountId: 'bob.near',
      },
    },
  },
  {
    token: {
      which: 'nft',
      config: {
        name: 'My Non Fungible Token',
        symbol: 'MNFT',
        mintable: false,
        burnable: false,
      },
    },
    plugins: {},
  },
  {
    token: {
      which: 'nft',
      config: {
        name: 'My Non Fungible Token',
        symbol: 'MNFT',
        mintable: true,
        burnable: true,
      },
    },
    plugins: {
      owner: {},
    },
  },
  {
    token: {
      which: 'nft',
      config: {
        name: 'My Non Fungible Token',
        symbol: 'MNFT',
        mintable: true,
        burnable: true,
      },
    },
    plugins: {
      pause: {},
    },
  },
  {
    token: {
      which: 'nft',
      config: {
        name: 'My Non Fungible Token',
        symbol: 'MNFT',
        mintable: true,
        burnable: false,
      },
    },
    plugins: {
      pause: {},
      owner: {},
    },
  },
  {
    token: {
      which: 'ft',
      config: {
        name: 'My Fungible Token',
        symbol: 'MFT',
        decimals: 18,
        preMint: '0',
        mintable: false,
        burnable: true,
      },
    },
    plugins: {
      rbac: {
        accountId: 'bob.near',
      },
    },
  },
  {
    token: {
      which: 'nft',
      config: {
        name: 'My Non Fungible Token',
        symbol: 'MNFT',
        mintable: false,
        burnable: false,
      },
    },
    plugins: {
      rbac: {},
    },
  },
  {
    token: {
      which: 'ft',
      config: {
        name: 'My Fungible Token',
        symbol: 'MFT',
        decimals: 24,
        preMint: '1220',
        preMintReceiver: 'bob.near',
        mintable: true,
        burnable: false,
      },
    },
    plugins: {
      rbac: {
        accountId: 'bob.near',
      },
    },
  },
];

// use to specify the indices of specific tests to run
const only: number[] = [];

const srcDir = 'tests/src';
const filePath = path.join(srcDir, 'lib.rs');

fs.mkdirSync(srcDir, { recursive: true });

const runTests =
  only.length === 0 ? testOptions : only.map((i) => testOptions[i]);

for (const options of runTests) {
  const code = generateCode(options);
  fs.writeFileSync(filePath, code, {
    encoding: 'utf-8',
  });

  try {
    execSync('cargo build --release --target wasm32-unknown-unknown', {
      cwd: path.join(__dirname, '..', 'tests'),
      stdio: 'inherit',
    });
  } catch (e) {
    console.error(`Failed to compile generated code`);
    console.error(options);
    process.exit(1);
  }
}

'''
'''--- tests/Cargo.toml ---
[package]
authors = ["Jacob Lindahl <jacob.lindahl@near.org>"]
edition = "2021"
name = "tests"
version = "0.1.0"
publish = false

[dependencies]
near-sdk = "4.1.1"
near-sdk-contract-tools = "2.1.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
debug = false
lto = true
opt-level = "z"
overflow-checks = true
panic = "abort"

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "strict": true,
    "lib": ["es2017", "dom"]
  },
  "include": ["src/**/*"]
}

'''