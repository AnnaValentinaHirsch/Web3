*GitHub Repository "marco-sundsk/buildlinks_near_redbag"*

'''--- README.md ---
# BuildlinksRedbag4Near contract

BuildlinksRedbag4Near contract allows any user to create a redbag that their online group friends can grab to claim tokens even if they don't have an account yet.

Play with this contract
========================
the contract is deployed at testnet with the name `rb01.testnet`

you can set it to env for later use:
```shell
export CONTRACTID=rb01.testnet
```

## Look around
```shell
# 
near view $CONTRACTID show_redbag_brief '{"public_key": "xxxxxxxxxxx"}'
# 
near view $CONTRACTID show_redbag_detail '{"public_key": "xxxxxxxxxxx"}'
# 
near view $CONTRACTID show_send '{"account_id": "humeng.testnet"}'
near view $CONTRACTID show_send_list '{"account_id": "humeng.testnet"}'
# 
near view $CONTRACTID show_recv '{"account_id": "xxxxxxxxxxx"}'
near view $CONTRACTID show_recv_list '{"account_id": "xxxxxx"}'
```
## Let's play
```shell
# attached 5 Near
near call $CONTRACTID send_redbag '{"public_key": "xxxx", "count": 2, "mode": 1, "slogan": "aaa"}' --amount=5 --account_id=humeng.testnet
# 
near call $CONTRACTID create_account_and_claim '{"new_account_id": "", "new_public_key": ""}' --account_id=alice.testnet

near call $CONTRACTID claim '{"account_id": ""}' --account_id=alice.testnet

near call $CONTRACTID revoke '{"public_key": "aaaaaaa"}' --account_id=alice.testnet
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# deploy it
near deploy rb01.testnet res/redbag2.wasm --account_id=rb01.testnet
```

Contract Interface
==================

### Data Structure
```rust
/// one claim info used in HumanReadableRedDetail
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableClaimInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

/// detail info about a redbag used for return in view functions 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedDetail {
    pub owner: AccountId,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub height: U64,
    pub ts: U64,
    pub claim_info: Vec<HumanReadableClaimInfo>,
}

// brief info about a redbag used for return in view functions
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedBrief {
    pub owner: AccountId,
    pub id: Base58PublicKey,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub received_count: u8,
    pub height: U64,
    pub ts: U64,
}

// Brief of one's recv info used for return in view functions
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRecvBrief {
    pub id: Base58PublicKey,
    pub balance: U128,
    pub height: U64,
    pub ts: U64,
}
```

### Send Claim and Revoke Redbag
```rust
/// 发红包功能
/// Generate a redbag
#[payable]
pub fn send_redbag(&mut self, public_key: Base58PublicKey,
    count: u8, mode: u8, slogan: String,) -> Promise;

/// 创建新用户同时领取红包
/// Interface of a funding contract that invoked by a web wallet,
/// just in the case, the amount of funding is the redbag he received.
pub fn create_account_and_claim(&mut self, new_account_id: AccountId,
    new_public_key: Base58PublicKey,) -> Promise;

/// 老用户领取红包
/// User claims his redbag using an already exist near account
pub fn claim(&mut self, account_id: AccountId) -> U128;

/// 红包所有人撤回对应public_key的红包剩余金额
/// 撤回视为自己领取剩余金额
/// The owner revoked a redbag which hasn't been thoroughly claimed out.
pub fn revoke(&mut self, public_key: Base58PublicKey) -> Promise;
```

### View interfaces
```rust
pub fn show_send_list(&self, account_id: AccountId) -> Vec<HumanReadableRedBrief>;

pub fn show_recv_list(&self, account_id: AccountId) -> Vec<HumanReadableRecvBrief>;

pub fn show_redbag_brief(&self, public_key: Base58PublicKey) -> HumanReadableRedBrief;

pub fn show_redbag_detail(&self, public_key: Base58PublicKey) ->  HumanReadableRedDetail;
```

The way it works:

Sender, that has NEAR:
- Creates a new key pair `(pk1, privkey1)`.
- Calls `redbag.send_redbag(pk1, count, mode, slogan)` with attached balance of NEAR that they want to wrap into the redbag.
- Sends a redbag link to any online group with `privkey1` behind the link.

note: `count` indicates the number of receivers that can share the redbag; `mode` decides a random share with value 1 or an even share with value 0; `slogan` is a blessing words that would be the caption of that redbag.

Receiver, that doesn't have NEAR:
- Receives link to the wallet with `privkey1`.
- Wallet creates new key pair for this user (or they generate it via HSM) `(pk2, privkey2)`.
- Enters the `new_account_id` receiver want for their new account.
- Wallet creates a transaction to `redbag.create_account_and_claim(new_account_id, pk2)`.
- Contract creates new account with `new_account_id` name and `pk2` as full access key and transfers his share of the redbag.

If Receiver already has account:
- Sign tx with `privkey1` to call `redbag.claim()`, which transfers his share of the redbag to signer's account.

If Sender wants to revoke the redbag):
- Sign tx with `privkey1` to call `redbag.revoke()`, which transfers remaining money back to sender's account.

'''
'''--- contracts/blredbag/Cargo.toml ---
[package]
name = "blredbag"
version = "0.1.0"
authors = ["Buildlinks Inc <sun.dsk1@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/blredbag/README.md ---
# BuildlinksRedbag4Near contract

BuildlinksRedbag4Near contract allows any user to create a redbag that their online group friends can grab to claim tokens even if they don't have an account yet.

Play with this contract
========================
the contract is deployed at testnet with the name `rb01.testnet`

you can set it to env for later use:
```shell
export CONTRACTID=rb01.testnet
```

## Look around
```shell
# 
near view $CONTRACTID show_redbag_brief '{"public_key": "xxxxxxxxxxx"}'
# 
near view $CONTRACTID show_redbag_detail '{"public_key": "xxxxxxxxxxx"}'
# 
near view $CONTRACTID show_send '{"account_id": "humeng.testnet"}'
near view $CONTRACTID show_send_list '{"account_id": "humeng.testnet"}'
# 
near view $CONTRACTID show_recv '{"account_id": "xxxxxxxxxxx"}'
near view $CONTRACTID show_recv_list '{"account_id": "xxxxxx"}'
```
## Let's play
```shell
# attached 5 Near
near call $CONTRACTID send_redbag '{"public_key": "xxxx", "count": 2, "mode": 1, "slogan": "aaa"}' --amount=5 --account_id=humeng.testnet
# 
near call $CONTRACTID create_account_and_claim '{"new_account_id": "", "new_public_key": ""}' --account_id=alice.testnet

near call $CONTRACTID claim '{"account_id": ""}' --account_id=alice.testnet

near call $CONTRACTID revoke '{"public_key": "aaaaaaa"}' --account_id=alice.testnet
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# deploy it
near deploy rb01.testnet res/redbag.wasm --account_id=rb01.testnet
```

Contract Interface
==================

### Data Structure
```rust
/// one claim info used in HumanReadableRedDetail
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableClaimInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

/// detail info about a redbag used for return in view functions 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedDetail {
    pub owner: AccountId,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub height: U64,
    pub ts: U64,
    pub claim_info: Vec<HumanReadableClaimInfo>,
}

// brief info about a redbag used for return in view functions
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedBrief {
    pub owner: AccountId,
    pub id: Base58PublicKey,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub received_count: u8,
    pub height: U64,
    pub ts: U64,
}

// Brief of one's recv info used for return in view functions
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRecvBrief {
    pub id: Base58PublicKey,
    pub balance: U128,
    pub height: U64,
    pub ts: U64,
}
```

### Send Claim and Revoke Redbag
```rust
/// 发红包功能
/// Generate a redbag
#[payable]
pub fn send_redbag(&mut self, public_key: Base58PublicKey,
    count: u8, mode: u8, slogan: String,) -> Promise;

/// 创建新用户同时领取红包
/// Interface of a funding contract that invoked by a web wallet,
/// just in the case, the amount of funding is the redbag he received.
pub fn create_account_and_claim(&mut self, new_account_id: AccountId,
    new_public_key: Base58PublicKey,) -> Promise;

/// 老用户领取红包
/// User claims his redbag using an already exist near account
pub fn claim(&mut self, account_id: AccountId) -> U128;

/// 红包所有人撤回对应public_key的红包剩余金额
/// 撤回视为自己领取剩余金额
/// The owner revoked a redbag which hasn't been thoroughly claimed out.
pub fn revoke(&mut self, public_key: Base58PublicKey) -> Promise;
```

### View interfaces
```rust
pub fn show_send_list(&self, account_id: AccountId) -> Vec<HumanReadableRedBrief>;

pub fn show_recv_list(&self, account_id: AccountId) -> Vec<HumanReadableRecvBrief>;

pub fn show_redbag_brief(&self, public_key: Base58PublicKey) -> HumanReadableRedBrief;

pub fn show_redbag_detail(&self, public_key: Base58PublicKey) ->  HumanReadableRedDetail;
```

The way it works:

Sender, that has NEAR:
- Creates a new key pair `(pk1, privkey1)`.
- Calls `redbag.send_redbag(pk1, count, mode, slogan)` with attached balance of NEAR that they want to wrap into the redbag.
- Sends a redbag link to any online group with `privkey1` behind the link.

note: `count` indicates the number of receivers that can share the redbag; `mode` decides a random share with value 1 or an even share with value 0; `slogan` is a blessing words that would be the caption of that redbag.

Receiver, that doesn't have NEAR:
- Receives link to the wallet with `privkey1`.
- Wallet creates new key pair for this user (or they generate it via HSM) `(pk2, privkey2)`.
- Enters the `new_account_id` receiver want for their new account.
- Wallet creates a transaction to `redbag.create_account_and_claim(new_account_id, pk2)`.
- Contract creates new account with `new_account_id` name and `pk2` as full access key and transfers his share of the redbag.

If Receiver already has account:
- Sign tx with `privkey1` to call `redbag.claim()`, which transfers his share of the redbag to signer's account.

If Sender wants to revoke the redbag):
- Sign tx with `privkey1` to call `redbag.revoke()`, which transfers remaining money back to sender's account.

'''
'''--- contracts/blredbag/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/blredbag.wasm ./res/

'''
'''--- contracts/blredbag/src/internal.rs ---
use crate::*;

impl RedBag {
    /********************/
    /* Internal methods */
    /********************/
    pub(crate) fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }

    pub(crate) fn claim_redbag(&mut self, pk: PublicKey, account_id: AccountId) -> Balance {
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");

        // 查看红包剩余数量是否可被领取
        let mut rb = &mut redbag.unwrap();

        // 判断用户是否领取过
        assert!(
            rb.claim_info
                .iter()
                .filter(|x| x.user == account_id)
                .count()
                == 0,
            "Sorry, you have claimed this redbag before."
        );
        
        assert!(
            rb.claim_info.len() < rb.count as usize,
            "Sorry, the redbag has been claimed out."
        );
        assert!(
            rb.remaining_balance != 0,
            "Sorry, the redbag has been revoked."
        );
        assert!(
            rb.remaining_balance >= MIN_REDBAG_SHARE,
            "Sorry, the redbag has few value to be claimed."
        );
        
        // 领取红包 如果是最后一个领取人，则拿走所有
        let amount = if rb.claim_info.len() == rb.count as usize - 1 {
            rb.remaining_balance
        } else {
            if rb.mode == 1 {
                self.random_amount(&rb)
            } else {
                self.even_amount(&rb)
            }
        };
        // 更新红包记录
        rb.remaining_balance -= amount;
        let ci = ClaimInfo {
            user: account_id.clone(),
            amount,
            height: env::block_index(),
            ts: env::block_timestamp(),
        };
        rb.claim_info.push(ci);
        self.red_info.insert(&pk, &rb);

        // 更新领取人记录
        let mut receiver_record = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());
        receiver_record.push(pk.clone());
        self.receiver_redbag.insert(&account_id, &receiver_record);
        amount
    }

    pub(crate) fn is_redbag_closed(&self, pk: PublicKey) -> bool {
        let redbag = self.red_info.get(&pk).expect("No redbag found for this pk!");

        if redbag.remaining_balance < MIN_REDBAG_SHARE {
            return true;
        }

        if redbag.claim_info.len() == redbag.count as usize {
            return true;
        }

        false
    }

    /// Redbag receiver may encounter errors that 
    /// may cause the create_account_and_claim fail, 
    /// in this case, the claim_info vec in red_info 
    /// and receiver_redbag map need to be rolled back.
    pub(crate) fn remove_recv(&mut self, pk: PublicKey, account_id: AccountId, 
        height: u64, amount: Balance) -> bool {

        // handle roll back of red_info
        let redbag = self.red_info.get(&pk);
        if redbag.is_none() {
            return false;
        }
        let mut rb = &mut redbag.unwrap();
        rb.remaining_balance += amount;
        let new_claim_info: Vec<ClaimInfo> = rb.claim_info
            .iter().filter(|x| x.user != account_id 
                || x.height != height 
                || x.amount != amount)
            .map(|x| x.clone()).collect();
        rb.claim_info = new_claim_info;
        self.red_info.insert(&pk, &rb);
        
        // handle roll back of receiver_redbag
        let receiver_record = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());
        let new_recv_record: Vec<PublicKey> = receiver_record
            .iter().filter(|x| **x != pk).map(|x| x.clone()).collect();
        if receiver_record.len() > 0 {
            self.receiver_redbag.insert(&account_id, &new_recv_record);
        } else {
            self.receiver_redbag.remove(&account_id);
        }
        
        true
    }

    /// 生成随机, 255个层级 total_amount * share_rate / u8::max_value().into()
    pub(crate) fn random_amount(&self, rb: &RedInfo) -> u128 {

        // figure out standard share
        // then got random scope is [standard/2, standard*3/2]
        let standard = rb.remaining_balance / (rb.count as usize - rb.claim_info.len()) as u128;
        let left_bound = standard / 2;
        let right_bound = standard * 3 / 2;

        // got random in scope
        let random_u8: u8 = env::random_seed().iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
        let offset = (right_bound - left_bound) * random_u8 as u128 / 0x100_u128;

        env::log(
            format!(
                "Create random {} in scope [{}, {}]",
                offset, left_bound, right_bound
            )
            .as_bytes(),
        );

        // keep random_share illegal 
        let random_share = left_bound + offset;
        if random_share >= MIN_REDBAG_SHARE {
            random_share
        } else {
            MIN_REDBAG_SHARE
        }
    }

    pub(crate) fn even_amount(&self, rb: &RedInfo) -> u128 {
        let even_share = rb.balance / rb.count as u128;
        if even_share >= MIN_REDBAG_SHARE {
            even_share
        } else {
            MIN_REDBAG_SHARE
        }
    }

    pub(crate) fn format_claiminfo(&self, claiminfo: &ClaimInfo) -> HumanReadableClaimInfo {
        HumanReadableClaimInfo {
            user: claiminfo.user.clone(),
            amount: claiminfo.amount.into(),
            height: claiminfo.height.into(),
            ts: claiminfo.ts.into(),
        }
    }

    pub(crate) fn redbag_brief(&self, pk: &PublicKey) -> HumanReadableRedBrief {
        let redbag_info = self.red_info.get(pk).unwrap();
        HumanReadableRedBrief {
            owner: redbag_info.owner,
            id: (*pk).clone().try_into().unwrap(),
            mode: redbag_info.mode,
            count: redbag_info.count,
            balance: redbag_info.balance.into(),
            remaining_balance: redbag_info.remaining_balance.into(),
            received_count: redbag_info.claim_info.len() as u8,
            height: redbag_info.height.into(),
            ts: redbag_info.ts.into(),
        }
    }

    pub(crate) fn recv_brief(&self, pk: &PublicKey, claim: &ClaimInfo) -> HumanReadableRecvBrief {
        HumanReadableRecvBrief {
            id: pk.clone().try_into().unwrap(),
            balance: claim.amount.into(),
            height: claim.height.into(),
            ts: claim.ts.into(),
        }
    }
}
'''
'''--- contracts/blredbag/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::json_types::{Base58PublicKey, U128, U64};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::wee_alloc;
use near_sdk::{
    env, ext_contract, near_bindgen, AccountId, Balance, BlockHeight, Gas, Promise, PromiseResult,
    PublicKey,
};
use std::collections::HashSet;
use uint::construct_uint;
use std::convert::TryInto;

mod internal;

/// this 0.5 Near acts as base AKA, which is guaranteed by this contract itself
const BASE_ACCESS_KEY_ALLOWANCE: Balance = 500_000_000_000_000_000_000_000;

/// the total cost that create_account_and_claim is a little less than 0.020 Near
/// to be more secure, we set single_claim_cost to 0.050 Near
/// 
/// the total cost that create_account_and_claim is a little less than 30T gas,
/// equal to 0.003 Near， Now we set to 0.01 Near for secure
const MIN_SINGLE_CLAIM_COST: Balance = 3_000_000_000_000_000_000_000;
const SINGLE_CLAIM_COST: Balance = 10_000_000_000_000_000_000_000;

/// the minimum balance that an account must contain to maintain state fee.
/// 0.1 NEAR
const MIN_REDBAG_SHARE: Balance = 100_000_000_000_000_000_000_000;

/// 20T Gas attached to the callback from account creation.
pub const ON_CREATE_ACCOUNT_CALLBACK_GAS: Gas = 20_000_000_000_000;

/// Indicates there are no deposit for a callback for better readability.
const NO_DEPOSIT: Balance = 0;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

/// one claim info
#[derive(BorshDeserialize, BorshSerialize, Clone)]
pub struct ClaimInfo {
    pub user: AccountId, // 领取者账户
    pub amount: Balance, // 领取到的红包价值
    pub height: BlockHeight,
    pub ts: u64,
}

/// one claim info used for return
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableClaimInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

/// describe a redbag
#[derive(BorshDeserialize, BorshSerialize)]
pub struct RedInfo {
    pub owner: AccountId,           // 红包的发送人
    pub mode: u8,                   // 红包模式,随机红包1; 均分红包0
    pub count: u8,                  // 红包数量
    pub slogan: String,             // 祝福词
    pub balance: Balance,           // 总金额
    pub remaining_balance: Balance, // 红包剩余金额
    pub height: BlockHeight,
    pub ts: u64,
    pub claim_info: Vec<ClaimInfo>,
}

/// detail info about a redbag used for return 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedDetail {
    pub owner: AccountId,
    pub slogan: String,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub height: U64,
    pub ts: U64,
    pub claim_info: Vec<HumanReadableClaimInfo>,
}

// brief info about a redbag used for return
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedBrief {
    pub owner: AccountId,
    pub id: Base58PublicKey,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub received_count: u8,
    pub height: U64,
    pub ts: U64,
}

// Brief of recv info for a receiver
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRecvBrief {
    pub id: Base58PublicKey,
    pub balance: U128,
    pub height: U64,
    pub ts: U64,
}

// HumanReadableStatistic
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableStatistic {
    pub owner_id: AccountId,
    pub base_aka: U128,
    pub single_recv_fee: U128,
    pub total_send_count: u32,  // count of sent redbag
    pub total_recv_count: u32,  // count of redbag receiver
    pub total_revoke_count: u32,  // count of revoke 
    pub total_send_amount: U128,  // total NEAR that sent
    pub total_recv_amount: U128,  // total NEAR that received
    pub total_revoke_amount: U128,  // total NEAR that rovoked
    pub total_account_created: u32,  // count of new account created
}

#[ext_contract(ext_self)]
pub trait ExtRedBag {
    /// Callback after creating account and claiming redbag.
    fn on_account_created_and_claimed_ex(&mut self, 
        account_id: AccountId, height: U64, amount: U128) -> bool;
}

fn is_promise_success() -> bool {
    assert_eq!(
        env::promise_results_count(),
        1,
        "Contract expected a result on the callback"
    );
    match env::promise_result(0) {
        PromiseResult::Successful(_) => true,
        _ => false,
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct RedBag {
    pub owner_id: AccountId,
    pub base_aka: Balance,
    pub single_recv_fee: Balance,
    // 红包库
    pub red_info: LookupMap<PublicKey, RedInfo>,
    // 记录用户发送的红包
    pub sender_redbag: LookupMap<AccountId, Vec<PublicKey>>,
    // 记录用户领取的红包
    pub receiver_redbag: LookupMap<AccountId, Vec<PublicKey>>,
    // total redbag send info
    pub total_send_count: u32,
    pub total_recv_count: u32,
    pub total_revoke_count: u32,
    // toal redbag recv info
    pub total_send_amount: Balance,
    pub total_recv_amount: Balance,
    pub total_revoke_amount: Balance,
    // total new accounts created
    pub total_account_created: u32,
}

impl Default for RedBag {
    fn default() -> Self {
        env::panic(b"This contract should be initialized before usage")
    }
}

#[near_bindgen]
impl RedBag {

    #[init]
    pub fn new(owner_id: AccountId, ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid");
        
        Self {
            owner_id,
            base_aka: BASE_ACCESS_KEY_ALLOWANCE,
            single_recv_fee: SINGLE_CLAIM_COST,
            red_info: LookupMap::new(b"b".to_vec()),
            sender_redbag: LookupMap::new(b"s".to_vec()),
            receiver_redbag: LookupMap::new(b"r".to_vec()),
            total_send_count: 0,
            total_recv_count: 0,
            total_revoke_count: 0,
            total_send_amount: 0,
            total_recv_amount: 0,
            total_revoke_amount: 0,
            total_account_created: 0,
        }
    }

    //***********************/
    // owner functions
    //***********************/

    pub fn change_owner_id(&mut self, new_owner_id: AccountId) {
        self.assert_owner();
        assert!(env::is_valid_account_id(new_owner_id.as_bytes()),
            "The owner account ID is invalid");
        self.owner_id = new_owner_id;
    }

    pub fn update_single_recv_fee(&mut self, single_recv_fee: U128) {
        self.assert_owner();
        let single_recv_fee: Balance = single_recv_fee.into();
        assert!(single_recv_fee > MIN_SINGLE_CLAIM_COST, 
            "single_recv_fee is too low");
        self.single_recv_fee = single_recv_fee;
    }

    pub fn update_base_aka(&mut self, base_aka: U128) {
        self.assert_owner();
        self.base_aka = base_aka.into();
    }

    //***********************/
    // user functions
    //***********************/

    /// 发红包功能
    #[payable]
    pub fn send_redbag(
        &mut self,
        public_key: Base58PublicKey,
        count: u8,
        mode: u8,
        slogan: String,
    ) -> Promise {
        let fee_cost: Balance = count as Balance * self.single_recv_fee;
        assert!(
            env::attached_deposit() > fee_cost + count as Balance * MIN_REDBAG_SHARE,
            "Attached deposit must be greater than count * (single_recv_fee + MIN_REDBAG_SHARE)"
        );

        let owner = env::signer_account_id();
        let pk: PublicKey = public_key.clone().into();
        assert!(
            self.red_info.get(&pk).is_none(),
            "The public_key already exists"
        );

        // make sure slogan would NOT be too long
        let short_slogan: String;
        let slogan_vec = slogan.chars().collect::<Vec<_>>();
        if slogan_vec.len() > 32 {
            short_slogan = slogan_vec[..32].iter().cloned().collect::<String>();
        } else {
            short_slogan = slogan_vec[..].iter().cloned().collect::<String>();
        }

        // 初始化红包信息并记录
        let new_red_info = RedInfo {
            owner: owner.clone(),
            mode,
            count,
            slogan: short_slogan.to_string(),
            balance: env::attached_deposit() - fee_cost,
            remaining_balance: env::attached_deposit() - fee_cost,
            height: env::block_index(),
            ts: env::block_timestamp(),
            claim_info: Vec::new(),
        };
        self.red_info.insert(&pk, &new_red_info);
        // 更新账户的发红包记录
        let mut relation_vec = self.sender_redbag.get(&owner).unwrap_or(Vec::new());
        relation_vec.push(pk.clone());
        self.sender_redbag.insert(&owner, &relation_vec);
        // 更新统计信息
        self.total_send_count += 1;
        self.total_send_amount += env::attached_deposit() - fee_cost;

        // 添加 access key
        Promise::new(env::current_account_id()).add_access_key(
            pk,
            self.base_aka + fee_cost,
            env::current_account_id(),
            b"create_account_and_claim,claim".to_vec(),
        )
    }

    /// 创建新用户同时领取红包
    pub fn create_account_and_claim(
        &mut self,
        new_account_id: AccountId,
        new_public_key: Base58PublicKey,
    ) -> Promise {
        let pk = env::signer_account_pk();
        let amount = self.claim_redbag(pk.clone(), new_account_id.clone());

        Promise::new(new_account_id.clone())
            .create_account()
            .add_full_access_key(new_public_key.into())
            .transfer(amount)
            .then(ext_self::on_account_created_and_claimed_ex(
                new_account_id,
                env::block_index().into(),
                amount.into(),
                &env::current_account_id(),
                NO_DEPOSIT,
                ON_CREATE_ACCOUNT_CALLBACK_GAS,
            ))
    }

    /// 领取红包
    pub fn claim(&mut self, account_id: AccountId) -> U128 {
        let pk = env::signer_account_pk();

        let amount = self.claim_redbag(pk.clone(), account_id.clone());

        Promise::new(account_id).transfer(amount);

        if self.is_redbag_closed(pk) {
            Promise::new(env::current_account_id()).delete_key(env::signer_account_pk());
        }

        self.total_recv_count += 1;
        self.total_recv_amount += amount;
        amount.into()
    }

    /// 红包所有人撤回对应public_key的红包剩余金额
    /// 撤回视为自己领取剩余金额
    pub fn revoke(&mut self, public_key: Base58PublicKey) -> Promise {
        let pk: PublicKey = public_key.clone().into();
        let account_id = env::signer_account_id();
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");
        // 查看红包剩余数量和金额是否足够撤回
        let mut rb = &mut redbag.unwrap();
        assert!(
            rb.owner == account_id,
            "Sorry, Only redbag owner can revoke."
        );
        assert!(
            rb.claim_info.len() < rb.count as usize,
            "Sorry, the redbag has been claimed out."
        );
        assert!(
            rb.remaining_balance != 0,
            "Sorry, the redbag has already been revoked."
        );
        // 红包剩余
        let amount: Balance = rb.remaining_balance;
        // 更新红包记录
        rb.remaining_balance = 0;
        let ci = ClaimInfo {
            user: account_id.clone(),
            amount,
            height: env::block_index(),
            ts: env::block_timestamp(),
        };
        rb.claim_info.push(ci);
        self.red_info.insert(&pk, &rb);
        // 更新领取人记录
        let mut receiver_record = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());
        receiver_record.push(pk.clone());
        self.receiver_redbag.insert(&account_id, &receiver_record);

        Promise::new(env::current_account_id()).delete_key(pk);

        self.total_revoke_count += 1;
        self.total_revoke_amount += amount;
        Promise::new(account_id).transfer(amount)
    }

    /************************/
    /* view functions       */
    /************************/

    /// Returns the balance associated with given key.
    pub fn get_key_balance(&self, key: Base58PublicKey) -> U128 {
        self.red_info.get(&key.into()).expect("Key is missing")
            .remaining_balance
            .into()
    }

    pub fn show_statistic(&self) -> HumanReadableStatistic {
        HumanReadableStatistic {
            owner_id: self.owner_id.clone(),
            base_aka: self.base_aka.into(),
            single_recv_fee: self.single_recv_fee.into(),
            total_send_count: self.total_send_count,
            total_recv_count: self.total_recv_count,
            total_revoke_count: self.total_revoke_count,
            total_send_amount: self.total_send_amount.into(),
            total_recv_amount: self.total_recv_amount.into(),
            total_revoke_amount: self.total_revoke_amount.into(),
            total_account_created: self.total_account_created,
        }
    }

    /// 看某个红包的详情
    pub fn show_redbag_detail(&self, public_key: Base58PublicKey) ->  HumanReadableRedDetail {
        let pk = public_key.into();
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");
        let redbag_info = &redbag.unwrap();

        let cis: Vec<HumanReadableClaimInfo> = redbag_info.claim_info.iter()
            .map(|x| self.format_claiminfo(&x)).collect();

        HumanReadableRedDetail {
            owner: redbag_info.owner.clone(),
            slogan: redbag_info.slogan.clone(),
            mode: redbag_info.mode,
            count: redbag_info.count,
            balance: redbag_info.balance.into(),
            remaining_balance: redbag_info.remaining_balance.into(),
            height: redbag_info.height.into(),
            ts: redbag_info.ts.into(),
            claim_info: cis,
        }
    }

    /// 查询用户所发的所有红包
    pub fn show_send_list(&self, account_id: AccountId) -> Vec<HumanReadableRedBrief> {
        let relation_vec = self.sender_redbag.get(&account_id).unwrap_or(Vec::new());
        relation_vec
            .iter()
            .map(|x| self.redbag_brief(x))
            .collect()
    }

    // 查询用户抢到的所有红包
    pub fn show_recv_list(&self, account_id: AccountId) -> Vec<HumanReadableRecvBrief> {
        let relation_vec = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());

        // using set to remove duplicate id
        let a: HashSet<_> = relation_vec.into_iter().collect();

        let mut ret: Vec<HumanReadableRecvBrief> = Vec::new();
        for id in a.iter() {
            let redbag = self.red_info.get(id).unwrap();
            for ci in &redbag.claim_info {
                if ci.user == account_id {
                    ret.push(self.recv_brief(id, ci));
                }
            }
        }

        ret
    }

    /// obsolete
    pub fn show_redbag_brief(&self, public_key: Base58PublicKey) -> HumanReadableRedBrief {
        let pk = public_key.into();
        self.redbag_brief(&pk)
    }

    /************************/
    /* callback functions   */
    /************************/

    /// callback after execution `create_account_and_claim`.
    pub fn on_account_created_and_claimed_ex(&mut self, 
        account_id: AccountId, height: U64, amount: U128) -> bool {
        assert_eq!(
            env::predecessor_account_id(),
            env::current_account_id(),
            "Callback can only be called from the contract"
        );
        let amount: Balance = amount.into();
        let creation_ret = is_promise_success();
        if creation_ret {
            if self.is_redbag_closed(env::signer_account_pk()) {
                Promise::new(env::current_account_id()).delete_key(env::signer_account_pk());
            }
            self.total_account_created += 1;
            self.total_recv_count += 1;
            self.total_recv_amount += amount;
        } else {
            // In case of failure, put the amount back.
            // 失败的情况下，回退资金及相关结构信息的更改
            let remove_ret = self.remove_recv(env::signer_account_pk(), account_id, height.into(), amount);
            env::log(
                format!(
                    "Create account and claim failed! Redbag info rolled back: {}",
                    remove_ret
                )
                .as_bytes(),
            );
            
        }
        creation_ret
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use std::convert::TryInto;

    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, BlockHeight, PublicKey, VMContext};
}

'''
'''--- contracts/redbag/Cargo.toml ---
[package]
name = "redbag"
version = "0.1.0"
authors = ["Buildlinks Inc <sun.dsk1@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/redbag/README.md ---
# BuildlinksRedbag4Near contract

BuildlinksRedbag4Near contract allows any user to create a redbag that their online group friends can grab to claim tokens even if they don't have an account yet.

Play with this contract
========================
the contract is deployed at testnet with the name `rb01.testnet`

you can set it to env for later use:
```shell
export CONTRACTID=rb01.testnet
```

## Look around
```shell
# 
near view $CONTRACTID show_redbag_brief '{"public_key": "xxxxxxxxxxx"}'
# 
near view $CONTRACTID show_redbag_detail '{"public_key": "xxxxxxxxxxx"}'
# 
near view $CONTRACTID show_send '{"account_id": "humeng.testnet"}'
near view $CONTRACTID show_send_list '{"account_id": "humeng.testnet"}'
# 
near view $CONTRACTID show_recv '{"account_id": "xxxxxxxxxxx"}'
near view $CONTRACTID show_recv_list '{"account_id": "xxxxxx"}'
```
## Let's play
```shell
# attached 5 Near
near call $CONTRACTID send_redbag '{"public_key": "xxxx", "count": 2, "mode": 1, "slogan": "aaa"}' --amount=5 --account_id=humeng.testnet
# 
near call $CONTRACTID create_account_and_claim '{"new_account_id": "", "new_public_key": ""}' --account_id=alice.testnet

near call $CONTRACTID claim '{"account_id": ""}' --account_id=alice.testnet

near call $CONTRACTID revoke '{"public_key": "aaaaaaa"}' --account_id=alice.testnet
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# deploy it
near deploy rb01.testnet res/redbag2.wasm --account_id=rb01.testnet
```

Contract Interface
==================

### Data Structure
```rust
/// one claim info used in HumanReadableRedDetail
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableClaimInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

/// detail info about a redbag used for return in view functions 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedDetail {
    pub owner: AccountId,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub height: U64,
    pub ts: U64,
    pub claim_info: Vec<HumanReadableClaimInfo>,
}

// brief info about a redbag used for return in view functions
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedBrief {
    pub owner: AccountId,
    pub id: Base58PublicKey,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub received_count: u8,
    pub height: U64,
    pub ts: U64,
}

// Brief of one's recv info used for return in view functions
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRecvBrief {
    pub id: Base58PublicKey,
    pub balance: U128,
    pub height: U64,
    pub ts: U64,
}
```

### Send Claim and Revoke Redbag
```rust
/// 发红包功能
/// Generate a redbag
#[payable]
pub fn send_redbag(&mut self, public_key: Base58PublicKey,
    count: u8, mode: u8, slogan: String,) -> Promise;

/// 创建新用户同时领取红包
/// Interface of a funding contract that invoked by a web wallet,
/// just in the case, the amount of funding is the redbag he received.
pub fn create_account_and_claim(&mut self, new_account_id: AccountId,
    new_public_key: Base58PublicKey,) -> Promise;

/// 老用户领取红包
/// User claims his redbag using an already exist near account
pub fn claim(&mut self, account_id: AccountId) -> U128;

/// 红包所有人撤回对应public_key的红包剩余金额
/// 撤回视为自己领取剩余金额
/// The owner revoked a redbag which hasn't been thoroughly claimed out.
pub fn revoke(&mut self, public_key: Base58PublicKey) -> Promise;
```

### View interfaces
```rust
pub fn show_send_list(&self, account_id: AccountId) -> Vec<HumanReadableRedBrief>;

pub fn show_recv_list(&self, account_id: AccountId) -> Vec<HumanReadableRecvBrief>;

pub fn show_redbag_brief(&self, public_key: Base58PublicKey) -> HumanReadableRedBrief;

pub fn show_redbag_detail(&self, public_key: Base58PublicKey) ->  HumanReadableRedDetail;
```

The way it works:

Sender, that has NEAR:
- Creates a new key pair `(pk1, privkey1)`.
- Calls `redbag.send_redbag(pk1, count, mode, slogan)` with attached balance of NEAR that they want to wrap into the redbag.
- Sends a redbag link to any online group with `privkey1` behind the link.

note: `count` indicates the number of receivers that can share the redbag; `mode` decides a random share with value 1 or an even share with value 0; `slogan` is a blessing words that would be the caption of that redbag.

Receiver, that doesn't have NEAR:
- Receives link to the wallet with `privkey1`.
- Wallet creates new key pair for this user (or they generate it via HSM) `(pk2, privkey2)`.
- Enters the `new_account_id` receiver want for their new account.
- Wallet creates a transaction to `redbag.create_account_and_claim(new_account_id, pk2)`.
- Contract creates new account with `new_account_id` name and `pk2` as full access key and transfers his share of the redbag.

If Receiver already has account:
- Sign tx with `privkey1` to call `redbag.claim()`, which transfers his share of the redbag to signer's account.

If Sender wants to revoke the redbag):
- Sign tx with `privkey1` to call `redbag.revoke()`, which transfers remaining money back to sender's account.

'''
'''--- contracts/redbag/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/redbag.wasm ./res/

'''
'''--- contracts/redbag/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::json_types::{Base58PublicKey, U128, U64};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::wee_alloc;
use near_sdk::{
    env, ext_contract, near_bindgen, AccountId, Balance, BlockHeight, Gas, Promise, PromiseResult,
    PublicKey,
};
use std::collections::HashSet;
use uint::construct_uint;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

use std::convert::TryInto;

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

/// Access key allowance for redbag keys,
/// take it as additional fee used by creation new account.
const ACCESS_KEY_ALLOWANCE: Balance = 100_000_000_000_000_000_000_000;

/// the minimum balance that an account must contain to maintain state fee.
/// 0.1 NEAR
const MIN_REDBAG_SHARE: Balance = 100_000_000_000_000_000_000_000;

/// Gas attached to the callback from account creation.
pub const ON_CREATE_ACCOUNT_CALLBACK_GAS: Gas = 20_000_000_000_000;

/// Indicates there are no deposit for a callback for better readability.
const NO_DEPOSIT: Balance = 0;

/// one claim info
#[derive(BorshDeserialize, BorshSerialize)]
pub struct ClaimInfo {
    pub user: AccountId, // 领取者账户
    pub amount: Balance, // 领取到的红包价值
    pub height: BlockHeight,
    pub ts: u64,
}

/// one claim info used for return
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableClaimInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

/// describe a redbag
#[derive(BorshDeserialize, BorshSerialize)]
pub struct RedInfo {
    pub owner: AccountId,           // 红包的发送人
    pub mode: u8,                   // 红包模式,随机红包1; 均分红包0
    pub count: u8,                  // 红包数量
    pub slogan: String,             // 祝福词
    pub balance: Balance,           // 总金额
    pub remaining_balance: Balance, // 红包剩余金额
    pub height: BlockHeight,
    pub ts: u64,
    pub claim_info: Vec<ClaimInfo>,
}

/// detail info about a redbag used for return 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedDetail {
    pub owner: AccountId,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub height: U64,
    pub ts: U64,
    pub claim_info: Vec<HumanReadableClaimInfo>,
}

// brief info about a redbag used for return
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRedBrief {
    pub owner: AccountId,
    pub id: Base58PublicKey,
    pub mode: u8,
    pub count: u8,
    pub balance: U128,
    pub remaining_balance: U128,
    pub received_count: u8,
    pub height: U64,
    pub ts: U64,
}

// Brief of recv info for a receiver
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRecvBrief {
    pub id: Base58PublicKey,
    pub balance: U128,
    pub height: U64,
    pub ts: U64,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct RedBag {
    // 红包库
    pub red_info: LookupMap<PublicKey, RedInfo>,
    // 记录用户发送的红包
    pub sender_redbag: LookupMap<AccountId, Vec<PublicKey>>,
    // 记录用户领取的红包
    pub receiver_redbag: LookupMap<AccountId, Vec<PublicKey>>,
}

#[ext_contract(ext_self)]
pub trait ExtRedBag {
    /// Callback after creating account and claiming redbag.
    fn on_account_created_and_claimed(&mut self, amount: U128) -> bool;
}

fn is_promise_success() -> bool {
    assert_eq!(
        env::promise_results_count(),
        1,
        "Contract expected a result on the callback"
    );
    match env::promise_result(0) {
        PromiseResult::Successful(_) => true,
        _ => false,
    }
}

impl Default for RedBag {
    fn default() -> Self {
        // env::panic(b"dice contract should be initialized before usage")
        Self {
            red_info: LookupMap::new(b"b".to_vec()),
            sender_redbag: LookupMap::new(b"s".to_vec()),
            receiver_redbag: LookupMap::new(b"r".to_vec()),
        }
    }
}

#[near_bindgen]
impl RedBag {

    /// 发红包功能
    #[payable]
    pub fn send_redbag(
        &mut self,
        public_key: Base58PublicKey,
        count: u8,
        mode: u8,
        slogan: String,
    ) -> Promise {
        let total_aka: Balance = count as Balance * ACCESS_KEY_ALLOWANCE;
        assert!(
            env::attached_deposit() > total_aka,
            "Attached deposit must be greater than count * ACCESS_KEY_ALLOWANCE"
        );

        let owner = env::signer_account_id();
        let pk: PublicKey = public_key.clone().into();
        assert!(
            self.red_info.get(&pk).is_none(),
            "The public_key already exists"
        );

        // make sure slogan would NOT be too long
        let short_slogan;
        if slogan.len() > 32 {
            short_slogan = &slogan[..32];
        } else {
            short_slogan = &slogan[..];
        }

        // 初始化红包信息并记录
        let new_red_info = RedInfo {
            owner: owner.clone(),
            mode,
            count,
            slogan: short_slogan.to_string(),
            balance: env::attached_deposit() - total_aka,
            remaining_balance: env::attached_deposit() - total_aka,
            height: env::block_index(),
            ts: env::block_timestamp(),
            claim_info: Vec::new(),
        };
        self.red_info.insert(&pk, &new_red_info);
        // 更新账户的发红包记录
        let mut relation_vec = self.sender_redbag.get(&owner).unwrap_or(Vec::new());
        relation_vec.push(pk.clone());
        self.sender_redbag.insert(&owner, &relation_vec);

        // 添加 access key
        Promise::new(env::current_account_id()).add_access_key(
            pk,
            ACCESS_KEY_ALLOWANCE,
            env::current_account_id(),
            b"create_account_and_claim,claim".to_vec(),
        )
    }

    /// 创建新用户同时领取红包
    pub fn create_account_and_claim(
        &mut self,
        new_account_id: AccountId,
        new_public_key: Base58PublicKey,
    ) -> Promise {
        let pk = env::signer_account_pk();
        let amount = self.claim_redbag(pk.clone(), new_account_id.clone());

        Promise::new(new_account_id)
            .create_account()
            .add_full_access_key(new_public_key.into())
            .transfer(amount)
            .then(ext_self::on_account_created_and_claimed(
                amount.into(),
                &env::current_account_id(),
                NO_DEPOSIT,
                ON_CREATE_ACCOUNT_CALLBACK_GAS,
            ))
    }

    /// 领取红包
    pub fn claim(&mut self, account_id: AccountId) -> U128 {
        let pk = env::signer_account_pk();

        let amount = self.claim_redbag(pk.clone(), account_id.clone());

        Promise::new(account_id).transfer(amount);

        amount.into()
    }

    /// 红包所有人撤回对应public_key的红包剩余金额
    /// 撤回视为自己领取剩余金额
    pub fn revoke(&mut self, public_key: Base58PublicKey) -> Promise {
        let pk: PublicKey = public_key.clone().into();
        let account_id = env::signer_account_id();
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");
        // 查看红包剩余数量和金额是否足够撤回
        let mut rb = &mut redbag.unwrap();
        assert!(
            rb.owner == account_id,
            "Sorry, Only redbag owner can revoke."
        );
        assert!(
            rb.claim_info.len() < rb.count as usize,
            "Sorry, the redbag has been claimed out."
        );
        assert!(
            rb.remaining_balance != 0,
            "Sorry, the redbag has already been revoked."
        );
        // 红包剩余
        let amount: Balance = rb.remaining_balance;
        // 更新红包记录
        rb.remaining_balance = 0;
        let ci = ClaimInfo {
            user: account_id.clone(),
            amount,
            height: env::block_index(),
            ts: env::block_timestamp(),
        };
        rb.claim_info.push(ci);
        self.red_info.insert(&pk, &rb);
        // 更新领取人记录
        let mut receiver_record = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());
        receiver_record.push(pk.clone());
        self.receiver_redbag.insert(&account_id, &receiver_record);

        Promise::new(account_id).transfer(amount)
    }

    /************************/
    /* view functions       */
    /************************/

    /// obsolete
    pub fn show_redbag(&self, public_key: Base58PublicKey) -> String {
        let pk = public_key.into();
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");
        let rb = &redbag.unwrap();

        let ci_json: Vec<_> = rb
            .claim_info
            .iter()
            .map(|x| format!("{{\"account\":\"{}\", \"amount\":{}}}", x.user, x.amount))
            .collect();
        let recvs_json = format!("[{}]", ci_json.join(","));

        format!("{{\"owner\":\"{}\", \"count\":{}, \"balance\":{}, \"remaining\":{}, \"mode\":{}, \"slogan\":\"{}\",\"list\":\"{}\"}}", 
            rb.owner, rb.count, rb.balance, rb.remaining_balance, rb.mode, rb.slogan, recvs_json)
    }

    /// 看某个红包的详情
    pub fn show_redbag_detail(&self, public_key: Base58PublicKey) ->  HumanReadableRedDetail {
        let pk = public_key.into();
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");
        let redbag_info = &redbag.unwrap();

        let cis: Vec<HumanReadableClaimInfo> = redbag_info.claim_info.iter()
            .map(|x| self.format_claiminfo(&x)).collect();

        HumanReadableRedDetail {
            owner: redbag_info.owner.clone(),
            mode: redbag_info.mode,
            count: redbag_info.count,
            balance: redbag_info.balance.into(),
            remaining_balance: redbag_info.remaining_balance.into(),
            height: redbag_info.height.into(),
            ts: redbag_info.ts.into(),
            claim_info: cis,
        }
    }

    /// obsolete
    pub fn show_send(&self, account_id: AccountId) -> Vec<Base58PublicKey> {
        let relation_vec = self.sender_redbag.get(&account_id).unwrap_or(Vec::new());
        relation_vec
            .iter()
            .map(|x| x.clone().try_into().unwrap())
            .collect()
    }

    /// 查询用户所发的所有红包
    pub fn show_send_list(&self, account_id: AccountId) -> Vec<HumanReadableRedBrief> {
        let relation_vec = self.sender_redbag.get(&account_id).unwrap_or(Vec::new());
        relation_vec
            .iter()
            .map(|x| self.redbag_brief(x))
            .collect()
    }

    // obsolete
    pub fn show_recv(&self, account_id: AccountId) -> Vec<Base58PublicKey> {
        let relation_vec = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());
        relation_vec
            .iter()
            .map(|x| x.clone().try_into().unwrap())
            .collect()
    }

    // 查询用户抢到的所有红包
    pub fn show_recv_list(&self, account_id: AccountId) -> Vec<HumanReadableRecvBrief> {
        let relation_vec = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());

        // using set to remove duplicate id
        let a: HashSet<_> = relation_vec.into_iter().collect();

        let mut ret: Vec<HumanReadableRecvBrief> = Vec::new();
        for id in a.iter() {
            let redbag = self.red_info.get(id).unwrap();
            for ci in &redbag.claim_info {
                if ci.user == account_id {
                    ret.push(self.recv_brief(id, ci));
                }
            }
        }

        ret
    }

    /// obsolete
    pub fn show_redbag_brief(&self, public_key: Base58PublicKey) -> HumanReadableRedBrief {
        let pk = public_key.into();
        self.redbag_brief(&pk)
    }

    /************************/
    /* callback functions   */
    /************************/

    /// callback after execution `create_account_and_claim`.
    pub fn on_account_created_and_claimed(&mut self, amount: U128) -> bool {
        assert_eq!(
            env::predecessor_account_id(),
            env::current_account_id(),
            "Callback can only be called from the contract"
        );
        let creation_succeeded = is_promise_success();
        if creation_succeeded {
            // Promise::new(env::current_account_id()).delete_key(env::signer_account_pk());
            assert_eq!(1, 1, "Nop");
        } else {
            // In case of failure, put the amount back.
            // TODO: 失败的情况下，回退资金及相关结构信息的更改
            // self.accounts.insert(&env::signer_account_pk(), &amount.into());
            let amount: u128 = amount.into();
            env::log(
                format!(
                    "Create account and claim failed! related amount is {}",
                    amount
                )
                .as_bytes(),
            );
            assert_eq!(1, 1, "Nop");
        }
        creation_succeeded
    }

    /************************/
    /* internal functions   */
    /************************/

    fn claim_redbag(&mut self, pk: PublicKey, account_id: AccountId) -> Balance {
        // 查看红包是否存在
        let redbag = self.red_info.get(&pk);
        assert!(redbag.is_some(), "No corresponding redbag found.");

        // 查看红包剩余数量是否可被领取
        let mut rb = &mut redbag.unwrap();
        assert!(
            rb.claim_info.len() < rb.count as usize,
            "Sorry, the redbag has been claimed out."
        );
        assert!(
            rb.remaining_balance != 0,
            "Sorry, the redbag has been revoked."
        );
        assert!(
            rb.remaining_balance >= MIN_REDBAG_SHARE,
            "Sorry, the redbag has few value to be claimed."
        );
        // 判断用户是否领取过
        assert!(
            rb.claim_info
                .iter()
                .filter(|x| x.user == account_id)
                .count()
                == 0,
            "Sorry, you have claimed this redbag before."
        );
        // 领取红包 如果是最后一个领取人，则拿走所有
        let amount = if rb.claim_info.len() == rb.count as usize - 1 {
            rb.remaining_balance
        } else {
            if rb.mode == 1 {
                self.random_amount(rb.remaining_balance)
            } else {
                self.even_amount(rb.balance.into(), rb.count)
            }
        };
        // 更新红包记录
        rb.remaining_balance -= amount;
        let ci = ClaimInfo {
            user: account_id.clone(),
            amount,
            height: env::block_index(),
            ts: env::block_timestamp(),
        };
        rb.claim_info.push(ci);
        self.red_info.insert(&pk, &rb);

        // 更新领取人记录
        let mut receiver_record = self.receiver_redbag.get(&account_id).unwrap_or(Vec::new());
        receiver_record.push(pk.clone());
        self.receiver_redbag.insert(&account_id, &receiver_record);
        amount
    }

    /// 生成随机, 255个层级 total_amount * share_rate / u8::max_value().into()
    fn random_amount(&self, total_amount: u128) -> u128 {
        // todo:
        let u8_max_value: u128 = u8::max_value().into();
        let min_share: u128 = total_amount / u8_max_value;

        // 获取随机比率
        let random_seed = env::random_seed();
        let mut share_rate: u8 = random_seed.iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));

        // 限制过大或过小的比率在2%到60%之间
        if share_rate < 5_u8 {
            share_rate = 5;
        } else if share_rate > 153 {
            share_rate = 153;
        }

        let random_share = min_share.wrapping_mul(share_rate.into());
        if random_share >= MIN_REDBAG_SHARE {
            random_share
        } else {
            MIN_REDBAG_SHARE
        }
    }

    fn even_amount(&self, total_amount: u128, count: u8) -> u128 {
        let even_share = total_amount / count as u128;
        if even_share >= MIN_REDBAG_SHARE {
            even_share
        } else {
            MIN_REDBAG_SHARE
        }
    }

    fn format_claiminfo(&self, claiminfo: &ClaimInfo) -> HumanReadableClaimInfo {
        HumanReadableClaimInfo {
            user: claiminfo.user.clone(),
            amount: claiminfo.amount.into(),
            height: claiminfo.height.into(),
            ts: claiminfo.ts.into(),
        }
    }

    fn redbag_brief(&self, pk: &PublicKey) -> HumanReadableRedBrief {
        let redbag_info = self.red_info.get(pk).unwrap();
        HumanReadableRedBrief {
            owner: redbag_info.owner,
            id: (*pk).clone().try_into().unwrap(),
            mode: redbag_info.mode,
            count: redbag_info.count,
            balance: redbag_info.balance.into(),
            remaining_balance: redbag_info.remaining_balance.into(),
            received_count: redbag_info.claim_info.len() as u8,
            height: redbag_info.height.into(),
            ts: redbag_info.ts.into(),
        }
    }

    fn recv_brief(&self, pk: &PublicKey, claim: &ClaimInfo) -> HumanReadableRecvBrief {
        HumanReadableRecvBrief {
            id: pk.clone().try_into().unwrap(),
            balance: claim.amount.into(),
            height: claim.height.into(),
            ts: claim.ts.into(),
        }
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use std::convert::TryInto;

    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, BlockHeight, PublicKey, VMContext};
}

'''
'''--- frontend/src/.env ---
# 所有环境默认

# 选择钱包环境 (主网 测试网)
# VUE_APP_NODE_ENV=development
VUE_APP_NODE_ENV=production

# 默认合约名称
# VUE_APP_CONTRACT_NAME=rb01.testnet
VUE_APP_CONTRACT_NAME=biudrop.near

# 主网合约名称
VUE_APP_MAINNET_CONTRACT_NAME=biudrop.near

# 测试网合约名称
VUE_APP_TESTNET_CONTRACT_NAME=rb01.testnet

# 默认url
# VUE_APP_BASE_URL=http://47.242.35.20/redbag/
VUE_APP_BASE_URL=https://near-redbag.buildlinks.org/

# 默认主网钱包地址
VUE_APP_MAINNET_WALLET_URL=https://near-wallet.buildlinks.org

# 默认测试网钱包地址
VUE_APP_TESTNET_WALLET_URL=http://47.242.35.20/testnet

# 主网nodeUrl
VUE_APP_MAINNET_NODE_URL=https://near-rpc.buildlinks.org

# 测试网nodeUrl
VUE_APP_TESTNET_NODE_URL=https://rpc.testnet.near.org

# 默认文件引入路径
VUE_APP_PUBLIC_PATH=https://redbag-near-1258187630.cos.ap-shanghai.myqcloud.com

'''
'''--- frontend/src/README.md ---
# buildlinks-near-redbag

## Project setup
```
yarn install
```

### Compiles and hot-reloads for development
```
yarn serve
```

### Compiles and minifies for production
```
yarn build
```

### Lints and fixes files
```
yarn lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- frontend/src/babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- frontend/src/package.json ---
{
  "name": "buildlinks-near-redbag",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint",
    "build:development": "vue-cli-service build --mode development"
  },
  "dependencies": {
    "babel-plugin-component": "^1.1.1",
    "core-js": "^3.6.5",
    "element-ui": "^2.15.1",
    "html2canvas": "^1.0.0-rc.7",
    "layui-layer": "^1.0.9",
    "mint-ui": "^2.2.13",
    "moment": "^2.29.1",
    "near-api-js": "~0.35.0",
    "postcss-px2rem": "^0.3.0",
    "px2rem-loader": "^0.1.9",
    "qrcode": "^1.4.4",
    "qrcodejs2": "^0.0.2",
    "regenerator-runtime": "~0.13.5",
    "vue": "^2.6.11",
    "vue-clipboard2": "^0.3.1",
    "vue-flipper": "^1.0.0",
    "vue-layer": "^1.2.1",
    "vue-router": "^3.2.0"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-plugin-eslint": "~4.5.0",
    "@vue/cli-plugin-router": "~4.5.0",
    "@vue/cli-service": "~4.5.0",
    "@vue/eslint-config-standard": "^5.1.2",
    "babel-eslint": "^10.1.0",
    "env-cmd": "~10.1.0",
    "eslint": "^6.7.2",
    "eslint-plugin-import": "^2.20.2",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.0",
    "eslint-plugin-vue": "^6.2.2",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "less": "^3.0.4",
    "less-loader": "^5.0.0",
    "lint-staged": "^9.5.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4",
    "vue-template-compiler": "^2.6.11"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "@vue/standard"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ],
  "gitHooks": {
    "pre-commit": "lint-staged"
  },
  "lint-staged": {
    "*.{js,jsx,vue}": [
      "vue-cli-service lint",
      "git add"
    ]
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- frontend/src/public/index.html ---
<!--
 * @Author: your name
 * @Date: 2021-02-26 11:37:19
 * @LastEditTime: 2021-03-09 15:13:33
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /buildlinks-near-redbag/public/index.html
-->
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta name="referrer" content="never">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <!-- <link rel="icon" href="<%= BASE_URL %>favicon.ico"> -->
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- frontend/src/src/assets/css/near.css ---
/*! Spectre.css v0.5.8 | MIT License | github.com/picturepan2/spectre */
/* Manually forked from Normalize.css */
/* normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
/** 1. Change the default font family in all browsers (opinionated). 2. Correct the line height in all browsers. 3. Prevent adjustments of font size after orientation changes in IE on Windows Phone and in iOS. */
/* Document ========================================================================== */
html {
  font-family: sans-serif; /* 1 */
  -webkit-text-size-adjust: 100%; /* 3 */ 
  -ms-text-size-adjust: 100%; /* 3 */
}

/* Sections ========================================================================== */
/** Remove the margin in all browsers (opinionated). */
body {
  margin: 0;
}

/** Add the correct display in IE 9-. */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/** Correct the font size and margin on `h1` elements within `section` and `article` contexts in Chrome, Firefox, and Safari. */
h1 {
  font-size: 2em;
  margin: .67em 0;
}

/* Grouping content ========================================================================== */
/** Add the correct display in IE 9-. 1. Add the correct display in IE. */
figcaption,
figure,
main {
  /* 1 */ display: block;
}

/** Add the correct margin in IE 8 (removed). */
/** 1. Add the correct box sizing in Firefox. 2. Show the overflow in Edge and IE. */
hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/** 1. Correct the inheritance and scaling of font size in all browsers. (removed) 2. Correct the odd `em` font sizing in all browsers. */
/* Text-level semantics ========================================================================== */
/** 1. Remove the gray background on active links in IE 10. 2. Remove gaps in links underline in iOS 8+ and Safari 8+. */
a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/** Remove the outline on focused links when they are also active or hovered in all browsers (opinionated). */
a:active,
a:hover {
  outline-width: 0;
}

/** Modify default styling of address. */
address {
  font-style: normal;
}

/** 1. Remove the bottom border in Firefox 39-. 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. (removed) */
/** Prevent the duplicate application of `bolder` by the next rule in Safari 6. */
b,
strong {
  font-weight: inherit;
}

/** Add the correct font weight in Chrome, Edge, and Safari. */
b,
strong {
  font-weight: bolder;
}

/** 1. Correct the inheritance and scaling of font size in all browsers. 2. Correct the odd `em` font sizing in all browsers. */
code,
kbd,
pre,
samp {
  font-family: "SF Mono", "Segoe UI Mono", "Roboto Mono", Menlo, Courier, monospace; /* 1 (changed) */
  font-size: 1em; /* 2 */
}

/** Add the correct font style in Android 4.3-. */
dfn {
  font-style: italic;
}

/** Add the correct background and color in IE 9-. (Removed) */
/** Add the correct font size in all browsers. */
small {
  font-size: 80%;
  font-weight: 400; /* (added) */
}

/** Prevent `sub` and `sup` elements from affecting the line height in all browsers. */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -.25em;
}

sup {
  top: -.5em;
}

/* Embedded content ========================================================================== */
/** Add the correct display in IE 9-. */
audio,
video {
  display: inline-block;
}

/** Add the correct display in iOS 4-7. */
audio:not([controls]) {
  display: none;
  height: 0;
}

/** Remove the border on images inside links in IE 10-. */
img {
  border-style: none;
}

/** Hide the overflow in IE. */
svg:not(:root) {
  overflow: hidden;
}

/* Forms ========================================================================== */
/** 1. Change the font styles in all browsers (opinionated). 2. Remove the margin in Firefox and Safari. */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 (changed) */
  font-size: inherit; /* 1 (changed) */
  line-height: inherit; /* 1 (changed) */
  margin: 0; /* 2 */
}

/** Show the overflow in IE. 1. Show the overflow in Edge. */
button,
input {
  /* 1 */ overflow: visible;
}

/** Remove the inheritance of text transform in Edge, Firefox, and IE. 1. Remove the inheritance of text transform in Firefox. */
button,
select {
  /* 1 */ text-transform: none;
}

/** 1. Prevent a WebKit bug where (2) destroys native `audio` and `video` controls in Android 4. 2. Correct the inability to style clickable types in iOS and Safari. */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/** Remove the inner border and padding in Firefox. */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/** Restore the focus styles unset by the previous rule (removed). */
/** Change the border, margin, and padding in all browsers (opinionated) (changed). */
fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/** 1. Correct the text wrapping in Edge and IE. 2. Correct the color inheritance from `fieldset` elements in IE. 3. Remove the padding so developers are not caught out when they zero out `fieldset` elements in all browsers. */
legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/** 1. Add the correct display in IE 9-. 2. Add the correct vertical alignment in Chrome, Firefox, and Opera. */
progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/** Remove the default vertical scrollbar in IE. */
textarea {
  overflow: auto;
}

/** 1. Add the correct box sizing in IE 10-. 2. Remove the padding in IE 10-. */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/** Correct the cursor style of increment and decrement buttons in Chrome. */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/** 1. Correct the odd appearance in Chrome and Safari. 2. Correct the outline style in Safari. */
[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/** Remove the inner padding and cancel buttons in Chrome and Safari on macOS. */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/** 1. Correct the inability to style clickable types in iOS and Safari. 2. Change font properties to `inherit` in Safari. */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive ========================================================================== */
/* Add the correct display in IE 9-. 1. Add the correct display in Edge, IE, and Firefox. */
details,
menu {
  display: block;
}

/* Add the correct display in all browsers. */
summary {
  display: list-item;
  outline: none;
}

/* Scripting ========================================================================== */
/** Add the correct display in IE 9-. */
canvas {
  display: inline-block;
}

/** Add the correct display in IE. */
template {
  display: none;
}

/* Hidden ========================================================================== */
/** Add the correct display in IE 10-. */
[hidden] {
  display: none;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-size: 20px;
  line-height: 1.5;
  -webkit-tap-highlight-color: transparent;
}

body {
  background: white;
  color: #313131;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
  font-size: .8rem;
  /* overflow-x: hidden; */
  /* text-rendering: optimizeLegibility; */
}

a {
  color: #7d7d7d;
  outline: none;
  text-decoration: none;
}

a:focus {
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

a:focus,
a:hover,
a:active,
a.active {
  color: #646464;
  text-decoration: underline;
}

a:visited {
  color: #979797;
}

:focus {
  outline: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: inherit;
  font-weight: 500;
  line-height: 1.2;
  margin-bottom: .5em;
  margin-top: 0;
}

.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  font-weight: 700;
}

h1,
.h1 {
  font-size: 2rem;
}

h2,
.h2 {
  font-size: 1.6rem;
}

h3,
.h3 {
  font-size: 1.4rem;
}

h4,
.h4 {
  font-size: 1.2rem;
}

h5,
.h5 {
  font-size: 1rem;
}

h6,
.h6 {
  font-size: .8rem;
}

p {
  margin: 0 0 1.2rem;
}

a,
ins,
u {
  -webkit-text-decoration-skip: ink edges;
  text-decoration-skip: ink edges;
}

abbr[title] {
  border-bottom: .05rem dotted;
  cursor: help;
  text-decoration: none;
}

kbd {
  background: #242424;
  border-radius: .4rem;
  color: #fff;
  font-size: .7rem; 
  line-height: 1.25;
  padding: .1rem .2rem;
}

mark {
  background: #ffe9b3;
  border-bottom: .05rem solid #ffd367;
  border-radius: .4rem;
  color: #313131;
  padding: .05rem .1rem 0;
}

blockquote {
  border-left: .1rem solid #e5e5e5;
  margin-left: 0;
  padding: .4rem .8rem;
}

blockquote p:last-child {
  margin-bottom: 0;
}

ul,
ol {
  margin: .8rem 0 .8rem .8rem;
  padding: 0;
}

ul ul,
ul ol,
ol ul,
ol ol {
  margin: .8rem 0 .8rem .8rem;
}

ul li,
ol li {
  margin-top: .4rem;
}

ul {
  list-style: disc inside;
}

ul ul {
  list-style-type: circle;
}

ol {
  list-style: decimal inside;
}

ol ol {
  list-style-type: lower-alpha;
}

dl dt {
  font-weight: bold;
}

dl dd {
  margin: .4rem 0 .8rem 0;
}

html:lang(zh),
html:lang(zh-Hans),
.lang-zh,
.lang-zh-hans {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", sans-serif;
}

html:lang(zh-Hant),
.lang-zh-hant {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang TC", "Hiragino Sans CNS", "Microsoft JhengHei", "Helvetica Neue", sans-serif;
}

html:lang(ja),
.lang-ja {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Hiragino Sans", "Hiragino Kaku Gothic Pro", "Yu Gothic", YuGothic, Meiryo, "Helvetica Neue", sans-serif;
}

html:lang(ko),
.lang-ko {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Malgun Gothic", "Helvetica Neue", sans-serif;
}

:lang(zh) ins,
:lang(zh) u,
:lang(ja) ins,
:lang(ja) u,
.lang-cjk ins,
.lang-cjk u {
  border-bottom: .05rem solid;
  text-decoration: none;
}

:lang(zh) del + del,
:lang(zh) del + s,
:lang(zh) ins + ins,
:lang(zh) ins + u,
:lang(zh) s + del,
:lang(zh) s + s,
:lang(zh) u + ins,
:lang(zh) u + u,
:lang(ja) del + del,
:lang(ja) del + s,
:lang(ja) ins + ins,
:lang(ja) ins + u,
:lang(ja) s + del,
:lang(ja) s + s,
:lang(ja) u + ins,
:lang(ja) u + u,
.lang-cjk del + del,
.lang-cjk del + s,
.lang-cjk ins + ins,
.lang-cjk ins + u,
.lang-cjk s + del,
.lang-cjk s + s,
.lang-cjk u + ins,
.lang-cjk u + u {
  margin-left: .125em;
}

.table {
  border-collapse: collapse;
  border-spacing: 0;
  text-align: left; 
  width: 100%;
}

.table.table-striped tbody tr:nth-of-type(odd) {
  background: #f8f8f8;
}

.table tbody tr.active,
.table.table-striped tbody tr.active {
  background: #f0f0f0;
}

.table.table-hover tbody tr:hover {
  background: #f0f0f0;
}

.table.table-scroll {
  display: block;
  overflow-x: auto;
  padding-bottom: .75rem;
  white-space: nowrap;
}

.table td,
.table th {
  border-bottom: .05rem solid #e5e5e5;
  padding: .6rem .4rem;
}

.table th {
  border-bottom-width: .1rem;
}

.btn {
  align-items: center;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: #f0f0f0;
  border: .05rem solid #eaeaea;
  border-radius: 10rem;
  box-shadow: 0 .1rem 1rem rgba(36, 36, 36, .1);
  color: #7d7d7d;
  cursor: pointer;
  display: inline-flex;
  font-size: .8rem;
  height: 1.8rem;
  line-height: 1.2rem;
  outline: none;
  padding: .25rem .6rem;
  text-align: center;
  text-decoration: none;
  transition: background .2s, border .2s, box-shadow .2s, color .2s;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;
}

.btn:visited {
  color: #7d7d7d;
}

.btn:focus {
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.btn:focus,
.btn:hover {
  /* background: #e3514c; */
  /* border-color: #e1443f;
  color: #fff; */
  text-decoration: none;
}

.btn:active,
.btn.active {
  /* background: #e1443f;
  border-color: #dd2f29;
  color: #fff; */
  text-decoration: none;
}

.btn:active.loading::after,
.btn.active.loading::after {
  border-bottom-color: #fff;
  border-left-color: #fff;
}

.btn[disabled],
.btn:disabled,
.btn.disabled {
  cursor: default;
  opacity: .5;
  pointer-events: none;
}

.btn.btn-no {
  background: #e6a7a5;
  border-color: #e6a7a5;
  box-shadow: 0 .1rem 1rem rgba(227, 81, 76, .25);
  color: #fff;
}

.btn.btn-primary {
  background: #e3514c;
  border-color: #e1443f;
  box-shadow: 0 .1rem 1rem rgba(227, 81, 76, .25);
  color: #fff;
}

.btn.btn-primary:visited {
  color: #fff;
}

.btn.btn-primary:focus,
.btn.btn-primary:hover {
  background: #e03c36;
  border-color: #dd2f29;
  color: #fff;
}

.btn.btn-primary:active,
.btn.btn-primary.active {
  background: #de332d;
  border-color: #da2822;
  color: #fff;
}

.btn.btn-primary.loading::after {
  border-bottom-color: #fff;
  border-left-color: #fff;
}

.btn.btn-gold {
  background: #55390d;
  border-color: #48300b;
  box-shadow: 0 .2rem 1rem rgba(85, 57, 13, .5);
  color: #f8e8cf;
}

.btn.btn-gold:visited {
  color: #f8e8cf;
}

.btn.btn-gold:focus,
.btn.btn-gold:hover,
.btn.btn-gold:active,
.btn.btn-gold.active {
  background: #48300b;
  border-color: #3a2709;
  color: #f8e8cf;
}

.btn.btn-link {
  background: transparent;
  border-color: transparent;
  box-shadow: none;
  color: #7d7d7d;
}

.btn.btn-link:visited,
.btn.btn-link:focus,
.btn.btn-link:hover,
.btn.btn-link:active,
.btn.btn-link.active {
  color: #646464;
}

.btn.btn-sm {
  font-size: .7rem;
  height: 1.4rem;
  padding: .05rem .45rem;
}

.btn.btn-lg {
  height: 2rem;
  padding: .35rem .9rem;
}

.btn.btn-block {
  display: block;
  width: 100%;
}

.btn.btn-rounded {
  border-radius: 10rem;
}

.btn.btn-action {
  padding-left: 0;
  padding-right: 0; 
  width: 1.8rem;
}

.btn.btn-action.btn-sm {
  width: 1.4rem;
}

.btn.btn-action.btn-lg {
  width: 2rem;
}

.btn.btn-clear {
  background: transparent;
  border: 0;
  color: currentColor;
  height: 1rem;
  line-height: .8rem;
  margin-left: .2rem;
  margin-right: -2px;
  opacity: 1;
  padding: .1rem;
  text-decoration: none;
  width: 1rem;
}

.btn.btn-clear:focus,
.btn.btn-clear:hover {
  background: rgba(248, 248, 248, .5);
  opacity: .95;
}

.btn.btn-clear::before {
  content: "\2715";
}

.btn-group {
  display: inline-flex;
  flex-wrap: wrap;
}

.btn-group .btn {
  flex: 1 0 auto;
}

.btn-group .btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}

.btn-group .btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  margin-left: -.05rem;
}

.btn-group .btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  margin-left: -.05rem;
}

.btn-group .btn:focus,
.btn-group .btn:hover,
.btn-group .btn:active,
.btn-group .btn.active {
  z-index: 1;
}

.btn-group.btn-group-block {
  display: flex;
}

.btn-group.btn-group-block .btn {
  flex: 1 0 0;
}

.form-group:not(:last-child) {
  margin-bottom: .4rem;
}

fieldset {
  margin-bottom: .8rem;
}

legend {
  font-size: .9rem;
  font-weight: 500;
  margin-bottom: .8rem;
}

.form-label {
  display: block;
  line-height: 1.2rem;
  padding: .3rem 0;
}

.form-label.label-sm {
  font-size: .7rem;
  padding: .1rem 0;
}

.form-label.label-lg {
  font-size: .9rem;
  padding: .4rem 0;
}

.form-input {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: white;
  background-image: none;
  border: .05rem solid #e0e0e0;
  border-radius: .4rem;
  color: #313131;
  display: block;
  font-size: .8rem;
  height: 1.8rem;
  line-height: 1.2rem;
  max-width: 100%;
  outline: none;
  padding: .25rem .6rem;
  position: relative;
  transition: background .2s, border .2s, box-shadow .2s, color .2s;
  width: 100%;
}

.form-input:focus {
  border-color: #e3514c; 
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.form-input::-webkit-input-placeholder {
  color: #b0b0b0;
}

.form-input:-ms-input-placeholder {
  color: #b0b0b0;
}

.form-input::-ms-input-placeholder {
  color: #b0b0b0;
}

.form-input::placeholder {
  color: #b0b0b0;
}

.form-input.input-sm {
  font-size: .7rem;
  height: 1.4rem;
  padding: .05rem .45rem;
}

.form-input.input-lg {
  font-size: .9rem;
  height: 2rem;
  padding: .35rem .9rem;
}

.form-input.input-inline {
  display: inline-block;
  vertical-align: middle;
  width: auto;
}

.form-input[type="file"] {
  height: auto;
}

textarea.form-input,
textarea.form-input.input-lg,
textarea.form-input.input-sm {
  height: auto;
}

.form-input-hint {
  color: #b0b0b0;
  font-size: .7rem;
  margin-top: .2rem;
}

.has-success .form-input-hint,
.is-success + .form-input-hint {
  color: #32b643;
}

.has-error .form-input-hint,
.is-error + .form-input-hint {
  color: #e85600;
}

.form-select {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: white; 
  border: .05rem solid #e0e0e0;
  border-radius: .4rem;
  color: inherit;
  font-size: .8rem;
  height: 1.8rem;
  line-height: 1.2rem;
  outline: none;
  padding: .25rem .6rem;
  vertical-align: middle;
  width: 100%;
}

.form-select:focus {
  border-color: #e3514c; 
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.form-select::-ms-expand {
  display: none;
}

.form-select.select-sm {
  font-size: .7rem;
  height: 1.4rem;
  padding: .05rem 1.25rem .05rem .45rem;
}

.form-select.select-lg {
  font-size: .9rem;
  height: 2rem;
  padding: .35rem 1.7rem .35rem .9rem;
}

.form-select[size],
.form-select[multiple] {
  height: auto;
  padding: .25rem .6rem;
}

.form-select[size] option,
.form-select[multiple] option {
  padding: .1rem .2rem;
}

.form-select:not([multiple]):not([size]) {
  background: white url("data:image/svg+xml;charset=utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%204%205'%3E%3Cpath%20fill='%23667189'%20d='M2%200L0%202h4zm0%205L0%203h4z'/%3E%3C/svg%3E") no-repeat right .35rem center/.4rem .5rem;
  padding-right: 1.4rem;
}

.has-icon-left,
.has-icon-right {
  position: relative;
}

.has-icon-left .form-icon,
.has-icon-right .form-icon {
  height: .8rem;
  margin: 0 .25rem;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: .8rem;
  z-index: 2;
}

.has-icon-left .form-icon {
  left: .05rem;
}

.has-icon-left .form-input {
  padding-left: 1.3rem;
}

.has-icon-right .form-icon {
  right: .05rem;
}

.has-icon-right .form-input {
  padding-right: 1.3rem;
}

.form-checkbox,
.form-radio,
.form-switch {
  display: block;
  line-height: 1.2rem;
  margin: .2rem 0;
  min-height: 1.4rem;
  padding: .1rem .6rem .1rem 1.4rem;
  position: relative;
}

.form-checkbox input,
.form-radio input,
.form-switch input {
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  position: absolute;
  width: 1px;
}

.form-checkbox input:focus + .form-icon,
.form-radio input:focus + .form-icon,
.form-switch input:focus + .form-icon {
  border-color: #e3514c; 
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.form-checkbox input:checked + .form-icon,
.form-radio input:checked + .form-icon,
.form-switch input:checked + .form-icon {
  background: #e3514c;
  border-color: #e3514c;
}

.form-checkbox .form-icon,
.form-radio .form-icon,
.form-switch .form-icon {
  border: .05rem solid #e0e0e0;
  cursor: pointer;
  display: inline-block;
  position: absolute;
  transition: background .2s, border .2s, box-shadow .2s, color .2s;
}

.form-checkbox.input-sm,
.form-radio.input-sm,
.form-switch.input-sm {
  font-size: .7rem;
  margin: 0;
}

.form-checkbox.input-lg,
.form-radio.input-lg,
.form-switch.input-lg {
  font-size: .9rem;
  margin: .3rem 0;
}

.form-checkbox .form-icon,
.form-radio .form-icon {
  background: white;
  height: .8rem;
  left: 0;
  top: .3rem;
  width: .8rem;
}

.form-checkbox input:active + .form-icon,
.form-radio input:active + .form-icon {
  background: #f0f0f0;
}

.form-checkbox .form-icon {
  border-radius: .4rem;
}

.form-checkbox input:checked + .form-icon::before {
  background-clip: padding-box;
  border: .1rem solid #fff;
  border-left-width: 0;
  border-top-width: 0;
  content: "";
  height: 9px;
  left: 50%;
  margin-left: -3px;
  margin-top: -6px;
  position: absolute;
  top: 50%;
  transform: rotate(45deg);
  width: 6px;
}

.form-checkbox input:indeterminate + .form-icon {
  background: #e3514c;
  border-color: #e3514c;
}

.form-checkbox input:indeterminate + .form-icon::before {
  background: white;
  content: "";
  height: 2px;
  left: 50%;
  margin-left: -5px;
  margin-top: -1px;
  position: absolute;
  top: 50%;
  width: 10px;
}

.form-radio .form-icon {
  border-radius: 50%;
}

.form-radio input:checked + .form-icon::before {
  background: white;
  border-radius: 50%;
  content: "";
  height: 6px;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 6px;
}

.form-switch {
  padding-left: 2.2rem;
}

.form-switch .form-icon {
  background: #b0b0b0;
  background-clip: padding-box;
  border-radius: .45rem;
  height: .9rem;
  left: 0;
  top: .25rem;
  width: 1.6rem;
}

.form-switch .form-icon::before {
  background: white;
  border-radius: 50%;
  content: "";
  display: block;
  height: .8rem;
  left: 0;
  position: absolute;
  top: 0;
  transition: background .2s, border .2s, box-shadow .2s, color .2s, left .2s;
  width: .8rem;
}

.form-switch input:checked + .form-icon::before {
  left: 14px;
}

.form-switch input:active + .form-icon::before {
  background: #f8f8f8;
}

.input-group {
  display: flex;
}

.input-group .input-group-addon {
  background: #f8f8f8;
  border: .05rem solid #e0e0e0;
  border-radius: .4rem;
  line-height: 1.2rem;
  padding: .25rem .6rem;
  white-space: nowrap;
}

.input-group .input-group-addon.addon-sm {
  font-size: .7rem;
  padding: .05rem .45rem;
}

.input-group .input-group-addon.addon-lg {
  font-size: .9rem;
  padding: .35rem .9rem;
}

.input-group .form-input,
.input-group .form-select {
  flex: 1 1 auto;
  width: 1%;
}

.input-group .input-group-btn {
  z-index: 1;
}

.input-group .form-input:first-child:not(:last-child),
.input-group .form-select:first-child:not(:last-child),
.input-group .input-group-addon:first-child:not(:last-child),
.input-group .input-group-btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}

.input-group .form-input:not(:first-child):not(:last-child),
.input-group .form-select:not(:first-child):not(:last-child),
.input-group .input-group-addon:not(:first-child):not(:last-child),
.input-group .input-group-btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  margin-left: -.05rem;
}

.input-group .form-input:last-child:not(:first-child),
.input-group .form-select:last-child:not(:first-child),
.input-group .input-group-addon:last-child:not(:first-child),
.input-group .input-group-btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  margin-left: -.05rem;
}

.input-group .form-input:focus,
.input-group .form-select:focus,
.input-group .input-group-addon:focus,
.input-group .input-group-btn:focus {
  z-index: 2;
}

.input-group .form-select {
  width: auto;
}

.input-group.input-inline {
  display: inline-flex;
}

.has-success .form-input,
.form-input.is-success,
.has-success .form-select,
.form-select.is-success {
  background: #f9fdfa;
  border-color: #32b643;
}

.has-success .form-input:focus,
.form-input.is-success:focus,
.has-success .form-select:focus,
.form-select.is-success:focus {
  box-shadow: 0 0 0 .1rem rgba(50, 182, 67, .1);
}

.has-error .form-input,
.form-input.is-error,
.has-error .form-select,
.form-select.is-error {
  background: #fffaf7;
  border-color: #e85600;
}

.has-error .form-input:focus,
.form-input.is-error:focus,
.has-error .form-select:focus,
.form-select.is-error:focus {
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.has-error .form-checkbox .form-icon,
.form-checkbox.is-error .form-icon,
.has-error .form-radio .form-icon,
.form-radio.is-error .form-icon,
.has-error .form-switch .form-icon,
.form-switch.is-error .form-icon {
  border-color: #e85600;
}

.has-error .form-checkbox input:checked + .form-icon,
.form-checkbox.is-error input:checked + .form-icon,
.has-error .form-radio input:checked + .form-icon,
.form-radio.is-error input:checked + .form-icon,
.has-error .form-switch input:checked + .form-icon,
.form-switch.is-error input:checked + .form-icon {
  background: #e85600;
  border-color: #e85600;
}

.has-error .form-checkbox input:focus + .form-icon,
.form-checkbox.is-error input:focus + .form-icon,
.has-error .form-radio input:focus + .form-icon,
.form-radio.is-error input:focus + .form-icon,
.has-error .form-switch input:focus + .form-icon,
.form-switch.is-error input:focus + .form-icon {
  border-color: #e85600; 
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.has-error .form-checkbox input:indeterminate + .form-icon,
.form-checkbox.is-error input:indeterminate + .form-icon {
  background: #e85600;
  border-color: #e85600;
}

.form-input:not(:-ms-input-placeholder):invalid {
  border-color: #e85600;
}

.form-input:not(:placeholder-shown):invalid {
  border-color: #e85600;
}

.form-input:not(:-ms-input-placeholder):invalid:focus {
  background: #fffaf7; 
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.form-input:not(:placeholder-shown):invalid:focus {
  background: #fffaf7; 
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.form-input:not(:-ms-input-placeholder):invalid + .form-input-hint {
  color: #e85600;
}

.form-input:not(:placeholder-shown):invalid + .form-input-hint {
  color: #e85600;
}

.form-input:disabled,
.form-input.disabled,
.form-select:disabled,
.form-select.disabled {
  background-color: #f0f0f0;
  cursor: not-allowed;
  opacity: .5;
}

.form-input[readonly] {
  background-color: #f8f8f8;
}

input:disabled + .form-icon,
input.disabled + .form-icon {
  background: #f0f0f0;
  cursor: not-allowed;
  opacity: .5;
}

.form-switch input:disabled + .form-icon::before,
.form-switch input.disabled + .form-icon::before {
  background: white;
}

.form-horizontal {
  padding: .4rem 0;
}

.form-horizontal .form-group {
  display: flex;
  flex-wrap: wrap;
}

.form-inline {
  display: inline-block;
}

.label {
  background: #f0f0f0;
  border-radius: .4rem;
  color: #3e3e3e;
  display: inline-block; 
  line-height: 1.25;
  padding: .1rem .2rem;
}

.label.label-rounded {
  border-radius: 5rem;
  padding-left: .4rem;
  padding-right: .4rem;
}

.label.label-primary {
  background: #e3514c;
  color: #fff;
}

.label.label-secondary {
  background: #fdf2f1;
  color: #e3514c;
}

.label.label-success {
  background: #32b643;
  color: #fff;
}

.label.label-warning {
  background: #ffb700;
  color: #fff;
}

.label.label-error {
  background: #e85600;
  color: #fff;
}

code {
  background: #fcf2f2;
  border-radius: .4rem;
  color: #d73e48;
  font-size: 85%; 
  line-height: 1.25;
  padding: .1rem .2rem;
}

.code {
  border-radius: .4rem;
  color: #313131;
  position: relative;
}

.code::before {
  color: #b0b0b0;
  content: attr(data-lang);
  font-size: .7rem;
  position: absolute;
  right: .4rem;
  top: .1rem;
}

.code code {
  background: #f8f8f8;
  color: inherit;
  display: block;
  line-height: 1.5;
  overflow-x: auto;
  padding: 1rem;
  width: 100%;
}

.img-responsive {
  display: block;
  height: auto;
  max-width: 100%;
}

.img-fit-cover {
  object-fit: cover;
}

.img-fit-contain {
  object-fit: contain;
}

.video-responsive {
  display: block;
  overflow: hidden;
  padding: 0;
  position: relative;
  width: 100%;
}

.video-responsive::before {
  content: "";
  display: block;
  padding-bottom: 56.25%;
}

.video-responsive iframe,
.video-responsive object,
.video-responsive embed {
  border: 0;
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
}

video.video-responsive {
  height: auto;
  max-width: 100%;
}

video.video-responsive::before {
  content: none;
}

.video-responsive-4-3::before {
  padding-bottom: 75%;
}

.video-responsive-1-1::before {
  padding-bottom: 100%;
}

.figure {
  margin: 0 0 .4rem 0;
}

.figure .figure-caption {
  color: #7d7d7d;
  margin-top: .4rem;
}

.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: .4rem;
  padding-right: .4rem;
  width: 100%;
}

.container.grid-xl {
  max-width: 1296px;
}

.container.grid-lg {
  max-width: 976px;
}

.container.grid-md {
  max-width: 856px;
}

.container.grid-sm {
  max-width: 616px;
}

.container.grid-xs {
  max-width: 496px;
}

.show-xs,
.show-sm,
.show-md,
.show-lg,
.show-xl {
  display: none !important;
}

.columns {
  display: flex;
  flex-wrap: wrap;
  margin-left: -.4rem;
  margin-right: -.4rem;
}

.columns.col-gapless {
  margin-left: 0;
  margin-right: 0;
}

.columns.col-gapless > .column {
  padding-left: 0;
  padding-right: 0;
}

.columns.col-oneline {
  flex-wrap: nowrap;
  overflow-x: auto;
}

.column {
  flex: 1;
  max-width: 100%;
  padding-left: .4rem;
  padding-right: .4rem;
}

.column.col-12,
.column.col-11,
.column.col-10,
.column.col-9,
.column.col-8,
.column.col-7,
.column.col-6,
.column.col-5,
.column.col-4,
.column.col-3,
.column.col-2,
.column.col-1,
.column.col-auto {
  flex: none;
}

.col-12 {
  width: 100%;
}

.col-11 {
  width: 91.66666667%;
}

.col-10 {
  width: 83.33333333%;
}

.col-9 {
  width: 75%;
}

.col-8 {
  width: 66.66666667%;
}

.col-7 {
  width: 58.33333333%;
}

.col-6 {
  width: 50%;
}

.col-5 {
  width: 41.66666667%;
}

.col-4 {
  width: 33.33333333%;
}

.col-3 {
  width: 25%;
}

.col-2 {
  width: 16.66666667%;
}

.col-1 {
  width: 8.33333333%;
}

.col-auto {
  flex: 0 0 auto;
  max-width: none;
  width: auto;
}

.col-mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.col-ml-auto {
  margin-left: auto;
}

.col-mr-auto {
  margin-right: auto;
}

@media (max-width: 1280px) {
  .col-xl-12,
  .col-xl-11,
  .col-xl-10,
  .col-xl-9,
  .col-xl-8,
  .col-xl-7,
  .col-xl-6,
  .col-xl-5,
  .col-xl-4,
  .col-xl-3,
  .col-xl-2,
  .col-xl-1,
  .col-xl-auto {
    flex: none;
  }
  .col-xl-12 {
    width: 100%;
  }
  .col-xl-11 {
    width: 91.66666667%;
  }
  .col-xl-10 {
    width: 83.33333333%;
  }
  .col-xl-9 {
    width: 75%;
  }
  .col-xl-8 {
    width: 66.66666667%;
  }
  .col-xl-7 {
    width: 58.33333333%;
  }
  .col-xl-6 {
    width: 50%;
  }
  .col-xl-5 {
    width: 41.66666667%;
  }
  .col-xl-4 {
    width: 33.33333333%;
  }
  .col-xl-3 {
    width: 25%;
  }
  .col-xl-2 {
    width: 16.66666667%;
  }
  .col-xl-1 {
    width: 8.33333333%;
  }
  .col-xl-auto {
    width: auto;
  }
  .hide-xl {
    display: none !important;
  }
  .show-xl {
    display: block !important;
  }
}

@media (max-width: 960px) {
  .col-lg-12,
  .col-lg-11,
  .col-lg-10,
  .col-lg-9,
  .col-lg-8,
  .col-lg-7,
  .col-lg-6,
  .col-lg-5,
  .col-lg-4,
  .col-lg-3,
  .col-lg-2,
  .col-lg-1,
  .col-lg-auto {
    flex: none;
  }
  .col-lg-12 {
    width: 100%;
  }
  .col-lg-11 {
    width: 91.66666667%;
  }
  .col-lg-10 {
    width: 83.33333333%;
  }
  .col-lg-9 {
    width: 75%;
  }
  .col-lg-8 {
    width: 66.66666667%;
  }
  .col-lg-7 {
    width: 58.33333333%;
  }
  .col-lg-6 {
    width: 50%;
  }
  .col-lg-5 {
    width: 41.66666667%;
  }
  .col-lg-4 {
    width: 33.33333333%;
  }
  .col-lg-3 {
    width: 25%;
  }
  .col-lg-2 {
    width: 16.66666667%;
  }
  .col-lg-1 {
    width: 8.33333333%;
  }
  .col-lg-auto {
    width: auto;
  }
  .hide-lg {
    display: none !important;
  }
  .show-lg {
    display: block !important;
  }
}

@media (max-width: 840px) {
  .col-md-12,
  .col-md-11,
  .col-md-10,
  .col-md-9,
  .col-md-8,
  .col-md-7,
  .col-md-6,
  .col-md-5,
  .col-md-4,
  .col-md-3,
  .col-md-2,
  .col-md-1,
  .col-md-auto {
    flex: none;
  }
  .col-md-12 {
    width: 100%;
  }
  .col-md-11 {
    width: 91.66666667%;
  }
  .col-md-10 {
    width: 83.33333333%;
  }
  .col-md-9 {
    width: 75%;
  }
  .col-md-8 {
    width: 66.66666667%;
  }
  .col-md-7 {
    width: 58.33333333%;
  }
  .col-md-6 {
    width: 50%;
  }
  .col-md-5 {
    width: 41.66666667%;
  }
  .col-md-4 {
    width: 33.33333333%;
  }
  .col-md-3 {
    width: 25%;
  }
  .col-md-2 {
    width: 16.66666667%;
  }
  .col-md-1 {
    width: 8.33333333%;
  }
  .col-md-auto {
    width: auto;
  }
  .hide-md {
    display: none !important;
  }
  .show-md {
    display: block !important;
  }
}

@media (max-width: 600px) {
  .col-sm-12,
  .col-sm-11,
  .col-sm-10,
  .col-sm-9,
  .col-sm-8,
  .col-sm-7,
  .col-sm-6,
  .col-sm-5,
  .col-sm-4,
  .col-sm-3,
  .col-sm-2,
  .col-sm-1,
  .col-sm-auto {
    flex: none;
  }
  .col-sm-12 {
    width: 100%;
  }
  .col-sm-11 {
    width: 91.66666667%;
  }
  .col-sm-10 {
    width: 83.33333333%;
  }
  .col-sm-9 {
    width: 75%;
  }
  .col-sm-8 {
    width: 66.66666667%;
  }
  .col-sm-7 {
    width: 58.33333333%;
  }
  .col-sm-6 {
    width: 50%;
  }
  .col-sm-5 {
    width: 41.66666667%;
  }
  .col-sm-4 {
    width: 33.33333333%;
  }
  .col-sm-3 {
    width: 25%;
  }
  .col-sm-2 {
    width: 16.66666667%;
  }
  .col-sm-1 {
    width: 8.33333333%;
  }
  .col-sm-auto {
    width: auto;
  }
  .hide-sm {
    display: none !important;
  }
  .show-sm {
    display: block !important;
  }
}

@media (max-width: 480px) {
  .col-xs-12,
  .col-xs-11,
  .col-xs-10,
  .col-xs-9,
  .col-xs-8,
  .col-xs-7,
  .col-xs-6,
  .col-xs-5,
  .col-xs-4,
  .col-xs-3,
  .col-xs-2,
  .col-xs-1,
  .col-xs-auto {
    flex: none;
  }
  .col-xs-12 {
    width: 100%;
  }
  .col-xs-11 {
    width: 91.66666667%;
  }
  .col-xs-10 {
    width: 83.33333333%;
  }
  .col-xs-9 {
    width: 75%;
  }
  .col-xs-8 {
    width: 66.66666667%;
  }
  .col-xs-7 {
    width: 58.33333333%;
  }
  .col-xs-6 {
    width: 50%;
  }
  .col-xs-5 {
    width: 41.66666667%;
  }
  .col-xs-4 {
    width: 33.33333333%;
  }
  .col-xs-3 {
    width: 25%;
  }
  .col-xs-2 {
    width: 16.66666667%;
  }
  .col-xs-1 {
    width: 8.33333333%;
  }
  .col-xs-auto {
    width: auto;
  }
  .hide-xs {
    display: none !important;
  }
  .show-xs {
    display: block !important;
  }
}

.hero {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding-bottom: 4rem;
  padding-top: 4rem;
}

.hero.hero-sm {
  padding-bottom: 2rem;
  padding-top: 2rem;
}

.hero.hero-lg {
  padding-bottom: 8rem;
  padding-top: 8rem;
}

.hero .hero-body {
  padding: .4rem;
}

.navbar {
  align-items: stretch;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

.navbar .navbar-section {
  align-items: center;
  display: flex;
  flex: 1 0 0;
}

.navbar .navbar-section:not(:first-child):last-child {
  justify-content: flex-end;
}

.navbar .navbar-center {
  align-items: center;
  display: flex;
  flex: 0 0 auto;
}

.navbar .navbar-brand {
  font-size: .9rem;
  text-decoration: none;
}

.accordion input:checked ~ .accordion-header .icon,
.accordion[open] .accordion-header .icon {
  transform: rotate(90deg);
}

.accordion input:checked ~ .accordion-body,
.accordion[open] .accordion-body {
  max-height: 50rem;
}

.accordion .accordion-header {
  display: block;
  padding: .2rem .4rem;
}

.accordion .accordion-header .icon {
  transition: transform .25s;
}

.accordion .accordion-body {
  margin-bottom: .4rem;
  max-height: 0;
  overflow: hidden;
  transition: max-height .25s;
}

summary.accordion-header::-webkit-details-marker {
  display: none;
}

.avatar {
  background: #e3514c;
  border-radius: 50%;
  color: rgba(255, 255, 255, .85);
  display: inline-block;
  font-size: .8rem;
  font-weight: 300;
  height: 1.6rem;
  line-height: 1.25;
  margin: 0;
  position: relative;
  vertical-align: middle; 
  width: 1.6rem;
}

.avatar.avatar-xs {
  font-size: .4rem;
  height: .8rem;
  width: .8rem;
}

.avatar.avatar-sm {
  font-size: .6rem;
  height: 1.2rem;
  width: 1.2rem;
}

.avatar.avatar-lg {
  font-size: 1.2rem;
  height: 2.4rem;
  width: 2.4rem;
}

.avatar.avatar-xl {
  font-size: 1.6rem;
  height: 3.2rem;
  width: 3.2rem;
}

.avatar img {
  border-radius: 50%;
  height: 100%;
  position: relative;
  width: 100%;
  z-index: 1;
}

.avatar .avatar-icon,
.avatar .avatar-presence {
  background: white;
  bottom: 14.64%;
  height: 50%;
  padding: .1rem;
  position: absolute;
  right: 14.64%;
  transform: translate(50%, 50%);
  width: 50%;
  z-index: 2;
}

.avatar .avatar-presence {
  background: #b0b0b0;
  border-radius: 50%;
  box-shadow: 0 0 0 .1rem #fff;
  height: .5em;
  width: .5em;
}

.avatar .avatar-presence.online {
  background: #32b643;
}

.avatar .avatar-presence.busy {
  background: #e85600;
}

.avatar .avatar-presence.away {
  background: #ffb700;
}

.avatar[data-initial]::before {
  color: currentColor;
  content: attr(data-initial);
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 1;
}

.badge {
  position: relative;
  white-space: nowrap;
}

.badge[data-badge]::after,
.badge:not([data-badge])::after {
  background: #e3514c;
  background-clip: padding-box;
  border-radius: .5rem;
  box-shadow: 0 0 0 .1rem white;
  color: #fff;
  content: attr(data-badge);
  display: inline-block;
  transform: translate(-.05rem, -.5rem);
}

.badge[data-badge]::after {
  font-size: .7rem;
  height: .9rem;
  line-height: 1;
  min-width: .9rem;
  padding: .1rem .2rem;
  text-align: center;
  white-space: nowrap;
}

.badge:not([data-badge])::after,
.badge[data-badge=""]::after {
  height: 6px;
  min-width: 6px;
  padding: 0;
  width: 6px;
}

.badge.btn::after {
  position: absolute;
  right: 0;
  top: 0;
  transform: translate(50%, -50%);
}

.badge.avatar::after {
  position: absolute;
  right: 14.64%;
  top: 14.64%;
  transform: translate(50%, -50%);
  z-index: 100;
}

.breadcrumb {
  list-style: none;
  margin: .2rem 0;
  padding: .2rem 0;
}

.breadcrumb .breadcrumb-item {
  color: #7d7d7d;
  display: inline-block;
  margin: 0;
  padding: .2rem 0;
}

.breadcrumb .breadcrumb-item:not(:last-child) {
  margin-right: .2rem;
}

.breadcrumb .breadcrumb-item:not(:last-child) a {
  color: #7d7d7d;
}

.breadcrumb .breadcrumb-item:not(:first-child)::before {
  color: #7d7d7d;
  content: "/";
  padding-right: .4rem;
}

.bar {
  background: #f0f0f0;
  border-radius: .4rem;
  display: flex;
  flex-wrap: nowrap;
  height: .8rem;
  width: 100%;
}

.bar.bar-sm {
  height: .2rem;
}

.bar .bar-item {
  background: #e3514c;
  color: #fff;
  display: block;
  flex-shrink: 0;
  font-size: .7rem;
  height: 100%;
  line-height: .8rem;
  position: relative;
  text-align: center;
  width: 0;
}

.bar .bar-item:first-child {
  border-bottom-left-radius: .4rem;
  border-top-left-radius: .4rem;
}

.bar .bar-item:last-child {
  border-bottom-right-radius: .4rem;
  border-top-right-radius: .4rem;
  flex-shrink: 1;
}

.bar-slider {
  height: .1rem;
  margin: .4rem 0;
  position: relative;
}

.bar-slider .bar-item {
  left: 0;
  padding: 0;
  position: absolute;
}

.bar-slider .bar-item:not(:last-child):first-child {
  background: #f0f0f0;
  z-index: 1;
}

.bar-slider .bar-slider-btn {
  background: #e3514c;
  border: 0;
  border-radius: 50%;
  height: .6rem;
  padding: 0;
  position: absolute;
  right: 0;
  top: 50%;
  transform: translate(50%, -50%);
  width: .6rem;
}

.bar-slider .bar-slider-btn:active {
  box-shadow: 0 0 0 .1rem #e3514c;
}

.card {
  background: white;
  border: .05rem solid #e5e5e5;
  border-radius: .4rem;
  display: flex;
  flex-direction: column;
}

.card .card-header,
.card .card-body,
.card .card-footer {
  padding: .8rem;
  padding-bottom: 0;
}

.card .card-header:last-child,
.card .card-body:last-child,
.card .card-footer:last-child {
  padding-bottom: .8rem;
}

.card .card-body {
  flex: 1 1 auto;
}

.card .card-image {
  padding-top: .8rem;
}

.card .card-image:first-child {
  padding-top: 0;
}

.card .card-image:first-child img {
  border-top-left-radius: .4rem;
  border-top-right-radius: .4rem;
}

.card .card-image:last-child img {
  border-bottom-left-radius: .4rem;
  border-bottom-right-radius: .4rem;
}

.chip {
  align-items: center;
  background: #f0f0f0;
  border-radius: 5rem;
  display: inline-flex;
  font-size: 90%;
  height: 1.2rem;
  line-height: .8rem;
  margin: .1rem;
  max-width: 320px;
  overflow: hidden;
  padding: .2rem .4rem;
  text-decoration: none;
  text-overflow: ellipsis;
  vertical-align: middle;
  white-space: nowrap;
}

.chip.active {
  background: #e3514c;
  color: #fff;
}

.chip .avatar {
  margin-left: -.4rem;
  margin-right: .2rem;
}

.chip .btn-clear {
  border-radius: 50%;
  transform: scale(.75);
}

.dropdown {
  display: inline-block;
  position: relative;
}

.dropdown .menu {
  -webkit-animation: slide-down .15s ease 1;
  animation: slide-down .15s ease 1;
  display: none;
  left: 0;
  max-height: 50vh;
  overflow-y: auto;
  position: absolute;
  top: 90%;
}

.dropdown.dropdown-right .menu {
  left: auto;
  right: 0;
}

.dropdown:focus .menu,
.dropdown:hover .menu,
.dropdown.active .menu,
.dropdown .dropdown-toggle:focus + .menu,
.dropdown .menu:hover {
  display: block;
}

.dropdown .btn-group .dropdown-toggle:nth-last-child(2) {
  border-bottom-right-radius: .4rem;
  border-top-right-radius: .4rem;
}

.empty {
  border-radius: .4rem;
  color: #2c2c2c;
  padding: 1.6rem 1.6rem; 
  text-align: center;
}

.empty .empty-icon {
  font-size: 3rem;
  margin-bottom: .8rem;
}

.empty .empty-title,
.empty .empty-subtitle {
  margin: .4rem auto;
}

.empty .empty-action {
  margin-top: .8rem;
}

.statistic-wrap {
  margin-top: .8rem;
}

.statistic-wrap .statistic-item {
 padding-top: .3rem;
}

.statistic-wrap .statistic-item .statistic-item-header {
  color: #b4b4b4;
}

.statistic-wrap .statistic-item .statistic-item-total {
  color: #000;
  font-weight: 700;
  padding-top: .3rem;
  font-size: 1.2rem;
}

.markdown {
  font-size: .8rem;
  font-weight: 400;
  line-height: 1.4rem;
  text-align: justify;
  word-break: break-word;
}

.markdown > :first-child {
  margin-top: 0;
}

.markdown h1,
.markdown h2,
.markdown h3,
.markdown h4,
.markdown h5,
.markdown h6 {
  font-weight: 700;
  line-height: 1.5;
  margin-bottom: 1.2rem;
  margin-top: .4rem;
}

.markdown h1 + hr,
.markdown h2 + hr,
.markdown h3 + hr,
.markdown h4 + hr,
.markdown h5 + hr,
.markdown h6 + hr {
  margin-top: -.4rem;
}

.markdown h1 {
  font-size: 28px;
}

.markdown h2 {
  font-size: 24px;
}

.markdown h3 {
  font-size: 22px;
}

.markdown h4 {
  font-size: 20px;
}

.markdown h5 {
  font-size: 18px;
}

.markdown h6 {
  font-size: 16px;
}

.markdown p {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  margin: 0 0 1.6rem;
}

.markdown a {
  border-bottom: .05rem solid currentColor;
  font-weight: 500;
  padding-bottom: .1rem;
}

.markdown a:focus,
.markdown a:hover,
.markdown a:active {
  text-decoration: none;
}

.markdown a,
.markdown ins,
.markdown u {
  -webkit-text-decoration-skip: ink edges;
  text-decoration-skip: ink edges;
}

.markdown del + del,
.markdown del + s,
.markdown ins + ins,
.markdown ins + u,
.markdown s + del,
.markdown s + s,
.markdown u + ins,
.markdown u + u {
  margin-left: .125em;
}

.markdown hr {
  background: #e5e5e5;
  border: none;
  display: block;
  height: 1px;
  margin: .4rem 0 1.2rem;
  overflow: hidden;
}

.markdown hr::after {
  clear: both;
  content: "";
  display: table;
}

.markdown ul,
.markdown ol {
  margin: 1.6rem 0 1.6rem 1.6rem;
  padding: 0;
}

.markdown ul ul,
.markdown ul ol,
.markdown ol ul,
.markdown ol ol {
  margin: .8rem 0 .8rem 1.6rem;
}

.markdown ul li,
.markdown ol li {
  margin-top: .4rem;
}

.markdown ul li > p,
.markdown ol li > p {
  display: inline;
}

.markdown ul {
  list-style: disc inside;
}

.markdown ul ul {
  list-style-type: circle;
}

.markdown ul > li > ul > li > ul {
  display: none;
}

.markdown ol {
  list-style: decimal inside;
}

.markdown ol ol {
  list-style-type: lower-alpha;
}

.markdown img {
  border: 0;
  display: block;
  height: auto;
  margin: 1rem auto;
  max-width: 100%;
}

.markdown img + em {
  color: #7d7d7d;
  display: inline-block;
  font-size: .7rem;
  text-align: center;
  width: 100%;
}

.markdown img.emojione {
  display: inline;
  height: 1rem;
  margin: 0;
  vertical-align: -10%;
  width: 1rem;
}

.markdown blockquote {
  border-left: .2rem solid #7d7d7d;
  margin: 1.6rem 0;
  padding: .8rem 1.6rem;
}

.markdown blockquote:empty {
  display: none;
}

.markdown blockquote p:last-child {
  margin-bottom: 0;
}

.markdown table {
  border-collapse: collapse;
  border-spacing: 0;
  display: block;
  font-size: .7rem;
  margin: 1.6rem 0;
  overflow-x: auto;
  padding-bottom: .75rem;
  text-align: left;
  white-space: nowrap;
  width: 100%;
}

.markdown table tbody tr:nth-of-type(odd) {
  background: #f8f8f8;
}

.markdown table td,
.markdown table th {
  border-bottom: 1px solid #242424;
  padding: .8rem; 
  width: 20%;
}

.markdown table th {
  border-bottom-width: 2px;
}

.markdown code {
  background: #f8f8f8;
  color: #d73e48;
  font-family: "SF Mono", "Segoe UI Mono", "Roboto Mono", Menlo, Courier, monospace;
  font-size: .9em;
  padding: .2em;
}

.markdown pre {
  background: #f8f8f8;
  margin: 1.6rem 0;
  overflow-x: auto;
  padding: .4rem .8rem;
}

.markdown .codehilite {
  font-size: .9em;
  line-height: 1.8;
}

.menu {
  background: white;
  border-radius: .4rem;
  box-shadow: 0 .05rem .2rem rgba(36, 36, 36, .3);
  list-style: none;
  margin: 0;
  min-width: 180px;
  padding: .4rem;
  transform: translateY(.2rem);
  z-index: 300;
}

.menu.menu-nav {
  background: transparent;
  box-shadow: none;
}

.menu .menu-item {
  margin-top: 0;
  padding: 0 .4rem;
  position: relative;
  text-decoration: none;
}

.menu .menu-item > a {
  border-radius: .4rem;
  color: inherit;
  display: block;
  margin: 0 -.4rem;
  padding: .2rem .4rem;
  text-decoration: none;
}

.menu .menu-item > a:focus,
.menu .menu-item > a:hover {
  background: #fdf2f1;
  color: #e3514c;
}

.menu .menu-item > a:active,
.menu .menu-item > a.active {
  background: #fdf2f1;
  color: #e3514c;
}

.menu .menu-item .form-checkbox,
.menu .menu-item .form-radio,
.menu .menu-item .form-switch {
  margin: .1rem 0;
}

.menu .menu-item + .menu-item {
  margin-top: .2rem;
}

.menu .menu-badge {
  align-items: center;
  display: flex;
  height: 100%;
  position: absolute;
  right: 0;
  top: 0;
}

.menu .menu-badge .label {
  margin-right: .4rem;
}

.modal {
  align-items: center;
  bottom: 0;
  display: none;
  justify-content: center;
  left: 0;
  opacity: 0;
  overflow: hidden;
  padding: .4rem;
  position: fixed;
  right: 0;
  top: 0;
}

.modal:target,
.modal.active {
  display: flex;
  opacity: 1;
  z-index: 400;
}

.modal:target .modal-overlay,
.modal.active .modal-overlay {
  background: rgba(248, 248, 248, .75);
  bottom: 0;
  cursor: default;
  display: block;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

.modal:target .modal-container,
.modal.active .modal-container {
  -webkit-animation: slide-down .2s ease 1;
  animation: slide-down .2s ease 1;
  z-index: 1;
}

.modal.modal-sm .modal-container {
  max-width: 320px;
  padding: 0 .4rem;
}

.modal.modal-lg .modal-overlay {
  background: white;
}

.modal.modal-lg .modal-container {
  box-shadow: none;
  max-width: 960px;
}

.modal-container {
  background: white;
  border-radius: .4rem;
  box-shadow: 0 .2rem .5rem rgba(36, 36, 36, .3);
  display: flex;
  flex-direction: column;
  max-height: 75vh;
  max-width: 640px;
  padding: 0 .8rem;
  width: 100%;
}

.modal-container.modal-fullheight {
  max-height: 100vh;
}

.modal-container .modal-header {
  color: #242424;
  padding: .8rem;
}

.modal-container .modal-body {
  overflow-y: auto;
  padding: .8rem;
  position: relative;
}

.modal-container .modal-footer {
  padding: .8rem;
  text-align: right;
}

.nav {
  display: flex;
  flex-direction: column;
  list-style: none;
  margin: .2rem 0;
}

.nav .nav-item a {
  color: #7d7d7d;
  padding: .2rem .4rem;
  text-decoration: none;
}

.nav .nav-item a:focus,
.nav .nav-item a:hover {
  color: #e3514c;
}

.nav .nav-item.active > a {
  color: #646464;
  font-weight: bold;
}

.nav .nav-item.active > a:focus,
.nav .nav-item.active > a:hover {
  color: #e3514c;
}

.nav .nav {
  margin-bottom: .4rem;
  margin-left: .8rem;
}

.pagination {
  display: flex;
  list-style: none;
  margin: .2rem 0;
  padding: .2rem 0;
}

.pagination .page-item {
  margin: .2rem .05rem;
}

.pagination .page-item span {
  display: inline-block;
  padding: .2rem .2rem;
}

.pagination .page-item a {
  border-radius: .4rem;
  display: inline-block;
  padding: .2rem .4rem;
  text-decoration: none;
}

.pagination .page-item a:focus,
.pagination .page-item a:hover {
  color: #e3514c;
}

.pagination .page-item.disabled a {
  cursor: default;
  opacity: .5;
  pointer-events: none;
}

.pagination .page-item.active a {
  background: #e3514c;
  color: #fff;
}

.pagination .page-item.page-prev,
.pagination .page-item.page-next {
  flex: 1 0 50%;
}

.pagination .page-item.page-next {
  text-align: right;
}

.pagination .page-item .page-item-title {
  margin: 0;
}

.pagination .page-item .page-item-subtitle {
  margin: 0;
  opacity: .5;
}

.panel {
  border: .05rem solid #e5e5e5;
  border-radius: .4rem;
  display: flex;
  flex-direction: column;
}

.panel .panel-header,
.panel .panel-footer {
  flex: 0 0 auto;
  padding: .8rem;
}

.panel .panel-nav {
  flex: 0 0 auto;
}

.panel .panel-body {
  flex: 1 1 auto;
  overflow-y: auto;
  padding: 0 .8rem;
}

.popover {
  display: inline-block;
  position: relative;
}

.popover .popover-container {
  left: 50%;
  opacity: 0;
  padding: .4rem;
  position: absolute;
  top: 0;
  transform: translate(-50%, -50%) scale(0);
  transition: transform .2s;
  width: 320px;
  z-index: 300;
}

.popover *:focus + .popover-container,
.popover:hover .popover-container {
  display: block;
  opacity: 1;
  transform: translate(-50%, -100%) scale(1);
}

.popover.popover-right .popover-container {
  left: 100%;
  top: 50%;
}

.popover.popover-right *:focus + .popover-container,
.popover.popover-right:hover .popover-container {
  transform: translate(0, -50%) scale(1);
}

.popover.popover-bottom .popover-container {
  left: 50%;
  top: 100%;
}

.popover.popover-bottom *:focus + .popover-container,
.popover.popover-bottom:hover .popover-container {
  transform: translate(-50%, 0) scale(1);
}

.popover.popover-left .popover-container {
  left: 0;
  top: 50%;
}

.popover.popover-left *:focus + .popover-container,
.popover.popover-left:hover .popover-container {
  transform: translate(-100%, -50%) scale(1);
}

.popover .card {
  border: 0; 
  box-shadow: 0 .2rem .5rem rgba(36, 36, 36, .3);
}

.step {
  display: flex;
  flex-wrap: nowrap;
  list-style: none;
  margin: .2rem 0;
  width: 100%;
}

.step .step-item {
  flex: 1 1 0;
  margin-top: 0;
  min-height: 1rem;
  position: relative; 
  text-align: center;
}

.step .step-item:not(:first-child)::before {
  background: #e3514c;
  content: "";
  height: 2px;
  left: -50%;
  position: absolute;
  top: 9px;
  width: 100%;
}

.step .step-item a {
  color: #e3514c;
  display: inline-block;
  padding: 20px 10px 0;
  text-decoration: none;
}

.step .step-item a::before {
  background: #e3514c;
  border: .1rem solid #fff;
  border-radius: 50%;
  content: "";
  display: block;
  height: .6rem;
  left: 50%;
  position: absolute;
  top: .2rem;
  transform: translateX(-50%);
  width: .6rem;
  z-index: 1;
}

.step .step-item.active a::before {
  background: #fff;
  border: .1rem solid #e3514c;
}

.step .step-item.active ~ .step-item::before {
  background: #e5e5e5;
}

.step .step-item.active ~ .step-item a {
  color: #b0b0b0;
}

.step .step-item.active ~ .step-item a::before {
  background: #e5e5e5;
}

.tab {
  align-items: center;
  border-bottom: .05rem solid transparent;
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: .2rem 0 .15rem 0;
}

.tab .tab-item {
  border-bottom: .1rem solid transparent;
  color: #b0b0b0;
  cursor: pointer;
  display: block;
  font-size: .8rem;
  margin: 0 .4rem;
  padding: .4rem .2rem .3rem .2rem;
  text-align: center;
  text-decoration: none;
  width: 4rem;
}

.tab .tab-item:focus,
.tab .tab-item:hover {
  color: #7d7d7d;
}

.tab .tab-item.active {
  border-bottom-color: #242424;
  color: #242424;
  font-weight: 700;
}

.tile {
  align-content: space-between;
  align-items: flex-start;
  display: flex;
}

.tile .tile-icon,
.tile .tile-action {
  flex: 0 0 auto;
}

.tile .tile-content {
  flex: 1 1 auto;
}

.tile .tile-content:not(:first-child) {
  padding-left: .4rem;
}

.tile .tile-content:not(:last-child) {
  padding-right: .4rem;
}

.tile .tile-title,
.tile .tile-subtitle {
  line-height: 1.2rem;
}

.tile.tile-centered {
  align-items: center;
}

.tile.tile-centered .tile-content {
  overflow: hidden;
}

.tile.tile-centered .tile-title,
.tile.tile-centered .tile-subtitle {
  margin-bottom: 0; 
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.toast {
  background: rgba(36, 36, 36, .95);
  border: .05rem solid #242424;
  border-color: #242424;
  border-radius: .4rem;
  color: #fff;
  display: block;
  padding: .4rem;
  width: 100%;
}

.toast.toast-primary {
  background: rgba(227, 81, 76, .95);
  border-color: #e3514c;
}

.toast.toast-success {
  background: rgba(50, 182, 67, .95);
  border-color: #32b643;
}

.toast.toast-warning {
  background: rgba(255, 183, 0, .95);
  border-color: #ffb700;
}

.toast.toast-error {
  background: rgba(232, 86, 0, .95);
  border-color: #e85600;
}

.toast a {
  color: #fff;
  text-decoration: underline;
}

.toast a:focus,
.toast a:hover,
.toast a:active,
.toast a.active {
  opacity: .75;
}

.toast .btn-clear {
  margin: .1rem;
}

.toast p:last-child {
  margin-bottom: 0;
}

.tooltip {
  position: relative;
}

.tooltip::after {
  background: rgba(36, 36, 36, .95);
  border-radius: .4rem;
  bottom: 100%;
  color: #fff;
  content: attr(data-tooltip);
  display: block;
  font-size: .7rem;
  left: 50%;
  max-width: 320px;
  opacity: 0;
  overflow: hidden;
  padding: .2rem .4rem;
  pointer-events: none;
  position: absolute;
  text-overflow: ellipsis;
  transform: translate(-50%, .4rem);
  transition: opacity .2s, transform .2s;
  white-space: pre;
  z-index: 300;
}

.tooltip:focus::after,
.tooltip:hover::after {
  opacity: 1;
  transform: translate(-50%, -.2rem);
}

.tooltip[disabled],
.tooltip.disabled {
  pointer-events: auto;
}

.tooltip.tooltip-right::after {
  bottom: 50%;
  left: 100%;
  transform: translate(-.2rem, 50%);
}

.tooltip.tooltip-right:focus::after,
.tooltip.tooltip-right:hover::after {
  transform: translate(.2rem, 50%);
}

.tooltip.tooltip-bottom::after {
  bottom: auto;
  top: 100%;
  transform: translate(-50%, -.4rem);
}

.tooltip.tooltip-bottom:focus::after,
.tooltip.tooltip-bottom:hover::after {
  transform: translate(-50%, .2rem);
}

.tooltip.tooltip-left::after {
  bottom: 50%;
  left: auto;
  right: 100%;
  transform: translate(.4rem, 50%);
}

.tooltip.tooltip-left:focus::after,
.tooltip.tooltip-left:hover::after {
  transform: translate(-.2rem, 50%);
}

@-webkit-keyframes loading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes loading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@-webkit-keyframes slide-down {
  0% {
    /* transform: translateY(-1.6rem); */
    display: none;
  }
  100% {
    /* transform: translateY(0); */
    display: block;
  }
}

@keyframes slide-down {
  0% {
    /* transform: translateY(-1.6rem); */
    display: none;
  }
  100% {
    /* transform: translateY(0); */
    display: block;
  }
}

.text-primary {
  color: #e3514c !important;
}

a.text-primary:focus,
a.text-primary:hover {
  color: #e03c36;
}

a.text-primary:visited {
  color: #e66662;
}

.text-secondary {
  color: #fbe5e4 !important;
}

a.text-secondary:focus,
a.text-secondary:hover {
  color: #f7cfce;
}

a.text-secondary:visited {
  color: #fefafa;
}

.text-gray {
  color: #b0b0b0 !important;
}

a.text-gray:focus,
a.text-gray:hover {
  color: #a4a4a4;
}

a.text-gray:visited {
  color: #bdbdbd;
}

.text-light {
  color: #fff !important;
}

a.text-light:focus,
a.text-light:hover {
  color: #f2f2f2;
}

a.text-light:visited {
  color: white;
}

.text-dark {
  color: #313131 !important;
}

a.text-dark:focus,
a.text-dark:hover {
  color: #242424;
}

a.text-dark:visited {
  color: #3e3e3e;
}

.text-success {
  color: #32b643 !important;
}

a.text-success:focus,
a.text-success:hover {
  color: #2da23c;
}

a.text-success:visited {
  color: #39c94b;
}

.text-warning {
  color: #ffb700 !important;
}

a.text-warning:focus,
a.text-warning:hover {
  color: #e6a500;
}

a.text-warning:visited {
  color: #ffbe1a;
}

.text-error {
  color: #e85600 !important;
}

a.text-error:focus,
a.text-error:hover {
  color: #cf4d00;
}

a.text-error:visited {
  color: #ff6003;
}

.bg-primary {
  background: #e3514c !important;
  color: #fff;
}

.bg-secondary {
  background: #fdf2f1 !important;
}

.bg-dark {
  background: #242424 !important;
  color: #fff;
}

.bg-gray {
  background: #f8f8f8 !important;
}

.bg-success {
  background: #32b643 !important;
  color: #fff;
}

.bg-warning {
  background: #ffb700 !important;
  color: #fff;
}

.bg-error {
  background: #e85600 !important;
  color: #fff;
}

.c-hand {
  cursor: pointer;
}

.c-move {
  cursor: move;
}

.c-zoom-in {
  cursor: zoom-in;
}

.c-zoom-out {
  cursor: zoom-out;
}

.c-not-allowed {
  cursor: not-allowed;
}

.c-auto {
  cursor: auto;
}

.d-block {
  display: block;
}

.d-inline {
  display: inline;
}

.d-inline-block {
  display: inline-block;
}

.d-flex {
  display: flex;
}

.d-inline-flex {
  display: inline-flex;
}

.d-none,
.d-hide {
  display: none !important;
}

.d-visible {
  visibility: visible;
}

.d-invisible {
  visibility: hidden;
}

.text-hide {
  background: transparent;
  border: 0;
  color: transparent;
  font-size: 0;
  line-height: 0;
  text-shadow: none;
}

.text-assistive {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.divider,
.divider-vert {
  display: block;
  position: relative;
}

.divider[data-content]::after,
.divider-vert[data-content]::after {
  background: white;
  color: #b0b0b0;
  content: attr(data-content);
  display: inline-block;
  font-size: .7rem;
  padding: 0 .4rem;
  transform: translateY(-.65rem);
}

.divider {
  border-top: .05rem solid #eaeaea;
  height: .05rem;
  margin: .4rem 0;
}

.divider[data-content] {
  margin: .8rem 0;
}

.divider-vert {
  display: block;
  padding: .8rem;
}

.divider-vert::before {
  border-left: .05rem solid #e5e5e5;
  bottom: .4rem;
  content: "";
  display: block;
  left: 50%;
  position: absolute;
  top: .4rem;
  transform: translateX(-50%);
}

.divider-vert[data-content]::after {
  left: 50%;
  padding: .2rem 0;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
}

.loading {
  color: currentColor !important;
  min-height: .8rem;
  pointer-events: none;
  position: relative;
}

.loading::after {
  -webkit-animation: loading .5s infinite linear;
  animation: loading .5s infinite linear;
  border: .1rem solid currentColor;
  border-radius: 50%;
  border-right-color: transparent;
  border-top-color: transparent;
  content: "";
  display: block;
  height: .8rem;
  left: 50%;
  margin-left: -.4rem;
  margin-top: -.4rem;
  position: absolute;
  top: 50%;
  width: .8rem;
  z-index: 1;
}

.loading.loading-lg {
  min-height: 2rem;
}

.loading.loading-lg::after {
  height: 1.6rem;
  margin-left: -.8rem;
  margin-top: -.8rem;
  width: 1.6rem;
}

.clearfix::after {
  clear: both;
  content: "";
  display: table;
}

.float-left {
  float: left !important;
}

.float-right {
  float: right !important;
}

.p-relative {
  position: relative !important;
}

.p-absolute {
  position: absolute !important;
}

.p-fixed {
  position: fixed !important;
}

.p-sticky {
  position: -webkit-sticky !important;
  position: sticky !important;
}

.p-centered {
  display: block;
  float: none;
  margin-left: auto;
  margin-right: auto;
}

.flex-centered {
  align-items: center;
  display: flex;
  justify-content: center;
}

.m-0 {
  margin: 0 !important;
}

.mb-0 {
  margin-bottom: 0 !important;
}

.ml-0 {
  margin-left: 0 !important;
}

.mr-0 {
  margin-right: 0 !important;
}

.mt-0 {
  margin-top: 0 !important;
}

.mx-0 {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.my-0 {
  margin-bottom: 0 !important;
  margin-top: 0 !important;
}

.m-1 {
  margin: .2rem !important;
}

.mb-1 {
  margin-bottom: .2rem !important;
}

.ml-1 {
  margin-left: .2rem !important;
}

.mr-1 {
  margin-right: .2rem !important;
}

.mt-1 {
  margin-top: .2rem !important;
}

.mx-1 {
  margin-left: .2rem !important;
  margin-right: .2rem !important;
}

.my-1 {
  margin-bottom: .2rem !important;
  margin-top: .2rem !important;
}

.m-2 {
  margin: .4rem !important;
}

.mb-2 {
  margin-bottom: .4rem !important;
}

.ml-2 {
  margin-left: .4rem !important;
}

.mr-2 {
  margin-right: .4rem !important;
}

.mt-2 {
  margin-top: .4rem !important;
}

.mx-2 {
  margin-left: .4rem !important;
  margin-right: .4rem !important;
}

.my-2 {
  margin-bottom: .4rem !important;
  margin-top: .4rem !important;
}

.p-0 {
  padding: 0 !important;
}

.pb-0 {
  padding-bottom: 0 !important;
}

.pl-0 {
  padding-left: 0 !important;
}

.pr-0 {
  padding-right: 0 !important;
}

.pt-0 {
  padding-top: 0 !important;
}

.px-0 {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

.py-0 {
  padding-bottom: 0 !important;
  padding-top: 0 !important;
}

.p-1 {
  padding: .2rem !important;
}

.pb-1 {
  padding-bottom: .2rem !important;
}

.pl-1 {
  padding-left: .2rem !important;
}

.pr-1 {
  padding-right: .2rem !important;
}

.pt-1 {
  padding-top: .2rem !important;
}

.px-1 {
  padding-left: .2rem !important;
  padding-right: .2rem !important;
}

.py-1 {
  padding-bottom: .2rem !important;
  padding-top: .2rem !important;
}

.p-2 {
  padding: .4rem !important;
}

.pb-2 {
  padding-bottom: .4rem !important;
}

.pl-2 {
  padding-left: .4rem !important;
}

.pr-2 {
  padding-right: .4rem !important;
}

.pt-2 {
  padding-top: .4rem !important;
}

.px-2 {
  padding-left: .4rem !important;
  padding-right: .4rem !important;
}

.py-2 {
  padding-bottom: .4rem !important;
  padding-top: .4rem !important;
}

.s-rounded {
  border-radius: .4rem;
}

.s-circle {
  border-radius: 50%;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.text-center {
  text-align: center;
}

.text-justify {
  text-align: justify;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-normal {
  font-weight: normal;
}

.text-bold {
  font-weight: bold;
}

.text-italic {
  font-style: italic;
}

.text-large {
  font-size: 1.2em;
}

.text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-clip {
  overflow: hidden;
  text-overflow: clip;
  white-space: nowrap;
}

.text-break {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  word-break: break-word;
  word-wrap: break-word;
}

/*! NEAR.css | MIT License */
body {
  background: #f8f8f8 url("../img/dapp-bg.png");
}

.near-container {
  display: flex;
  height: 100vh;
  overflow: hidden;
  padding: .5rem;
  width: 100vw;
}

.near-container .near-dapp {
  background: #fff;
  border: .1rem solid rgba(36, 36, 36, .1);
  border-radius: .4rem;
  box-shadow: 0 .2rem 1rem rgba(36, 36, 36, .05);
  display: flex;
  flex-direction: column;
  margin-left: auto;
  margin-right: auto;
  max-width: 480px;
  padding: .5rem 0;
  width: 100%;
}

.near-container .near-dapp-header {
  display: flex;
  height: 2.6rem;
  justify-content: space-between;
  padding: .5rem 1rem;
}

.near-container .near-dapp-header .near-logo {
  height: 1.6rem;
}

.near-container .near-user .dropdown {
  height: 2rem;
}

.near-container .near-user .btn {
  max-width: 60vw;
  padding: 0 .5rem 0 0;
}

.near-container .near-user .btn:focus,
.near-container .near-user .btn:hover {
  background: #f0f0f0;
  border-color: #eaeaea;
  color: #7d7d7d;
}

.near-container .near-user .btn-icon {
  background: white;
  border-radius: 50%;
  height: 1.6rem;
  margin: 0 .25rem 0 .05rem;
  padding: .3rem;
  width: 1.6rem;
}

.near-container .near-dapp-body {
  height: 100%;
  overflow-y: auto;
  padding: .5rem 1rem;
}

.near-container .near-dapp-body .near-balance {
  padding: .5rem;
  text-align: center;
}

.near-container .near-dapp-body .near-balance .near-balance-title {
  color: #7d7d7d;
  font-size: .7rem;
}

.near-container .near-dapp-body .near-balance .near-balance-funds {
  font-size: 2rem;
  font-weight: 900;
  line-height: 2rem;
}

.near-container .near-dapp-body .near-balance .near-balance-actions {
  margin-top: 1rem;
}

.near-container .near-dapp-body .near-tabs {
  display: flex;
  justify-content: center;
  padding: .5rem 0 1rem 0;
}

.near-container .near-dapp {
  position: relative;
}

.near-container .mask {
  position: fixed;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  padding-top: 2rem;
  align-items: flex-start;
  /* align-items: center; */
  top: 0;
  left: 0;
  /* box-shadow: 0 .1rem 1rem rgba(36, 36, 36, .05); */
  background-color: rgba(0, 0, 0, .5);
}

.near-container .mask .redbag-alert {
  width: 85%;
  max-width: 20rem;
  /* max-height: 10rem; */
  background-color: #fafafa;
  border-radius: .8rem;
  box-shadow: .0rem .0rem .4rem rgb(78, 77, 77);
  position: relative;
  padding: 1rem;
  margin-top: 3rem;
}

.near-container .mask .redbag-alert .btn-wrap {
  display: flex;
  justify-content: space-around;
}

.near-container .mask .redbag-alert .btn-wrap .btn {
  width: 6rem;
  justify-content: center;
}

.near-container .mask .redbag-info-wrap {
  width: 85%;
  max-width: 20rem;
  height: 30rem;
  background-color: #fafafa;
  border-radius: .8rem;
  box-shadow: .0rem .0rem .4rem rgb(78, 77, 77);
  position: relative;
  padding: 1rem;
}

.near-container .mask .redbag-info-wrap .title {
  width: 100%;
  height: 5rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.near-container .mask .redbag-info-wrap .title img {
  width: 9rem;
}

.near-container .mask .redbag-info-wrap .master-info {
  padding-bottom: 2rem;
  /* padding-top: 1rem; */
}

.near-container .mask .redbag-info-wrap .master-info .master-name {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1rem;
  font-weight: 500;
}

.near-container .mask .redbag-info-wrap .master-info .master-name span {
  width: 80%;
  overflow: hidden;
  text-overflow:ellipsis; 
  white-space: nowrap;
}

.near-container .mask .redbag-info-wrap .master-info .master-name img {
  width: 1.5rem;
  margin-right: .5rem;
}

.near-container .mask .redbag-info-wrap .master-info .slogan-info {
  padding-top: .2rem;
  font-size: .8rem;
  color: #b9b9b9;
  text-align: center;
}

.near-container .mask .redbag-info-wrap .line {
  height: .4rem;
  width: 100%;
  background-color: #f3f3f3;
  /* position: absolute; */
}

.near-container .mask .redbag-info-wrap .user-wrap {
  padding: .5rem;
}

.near-container .mask .redbag-info-wrap .user-wrap .top {
  padding-bottom: .5rem;
  overflow: hidden;
  text-overflow:ellipsis; 
  white-space: nowrap;
  border-bottom: 1px solid #eeeeee;
}

.near-container .mask .redbag-info-wrap .user-main {
  overflow: auto;
  max-height: 16rem;
}

.near-container .mask .redbag-info-wrap .user-main .user-item {
  border-bottom: 1px solid #eeeeee;
  width: 97%;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 0;
}

.near-container .mask .redbag-info-wrap .user-main .user-item:last-child {
  border: none;
}

.near-container .mask .redbag-info-wrap .user-main .active {
  color: #f3b869;
}

.near-container .mask .redbag-info-wrap .user-main .user-item .user-info {
  width: 70%;
  display: flex;
  align-items: center;
}

.near-container .mask .redbag-info-wrap .user-main .user-item .user-info span {
  width: 80%;
  overflow: hidden;
  text-overflow:ellipsis; 
  white-space: nowrap;
}

.near-container .mask .redbag-info-wrap .user-main .user-item .user-info img {
  width: 1rem;
  margin-right: .5rem;
}

.near-container .mask .redbag-info-wrap .user-main .user-item .near {
  overflow: hidden;
  text-overflow:ellipsis; 
  white-space: nowrap;
}

.near-container .mask .qr-code {
  width: 85%;
  max-width: 20rem;
  height: 21rem;
  max-height: 30rem;
  /* height: 90%; */
  background-color: #fafafa;
  border-radius: .8rem;
  box-shadow: .0rem .0rem .4rem rgb(78, 77, 77);
  position: relative;
  padding: 1rem 2rem 2rem;
}

.near-container .mask .qr-code .main .title {
  height: 5rem;
  text-align: center;
  padding-top: 1rem;
  white-space: nowrap;
	text-overflow:ellipsis;
	overflow: hidden;
}

.near-container .mask .qr-code .main {
  position: relative;
  padding-bottom: 1rem;
  /* padding: 0 1rem; */
}

.near-container .mask .qr-code .main .qr-img img{
  width: 100%;
  display: block;
  /* margin: 0 auto;
  display: block; */
}

.near-container .mask .qr-code .main .title h4 {
  font-size: 1.5rem;
}

.near-container .mask .qr-code .main .title span {
  font-size: .7rem;
  color: #babbbc;
}

.near-container .mask .qr-code .footer {
  text-align: center;
  white-space: nowrap;
	text-overflow:ellipsis;
	overflow: hidden;
  width: 100%;
  padding-top: .3rem;
  padding-bottom: .3rem;
  /* position: absolute; */
  /* bottom: 3.5rem;
  padding: 0 3rem;
  left: 50%;
  transform: translateX(-50%); */
}

.near-container .mask .qr-code .footer span {
  size: .7rem;
  color: #babbbc;
}

.near-container .mask .qr-code .main .qrccode-canvas-wrap {
  display: flex;
  width: 100%;
  max-width: 10rem;
  justify-content: center;
  margin: 0 auto;
  /* padding-top: 2rem; */
}

.near-container .mask .qr-code .main .qr-wrap {
  padding-bottom: 2rem;
}

.near-container .mask .qr-code .main .qrccode-canvas-wrap .qrccode img {
  display: block;
}

.near-container .mask .qr-code .url-wrap {
  position: absolute;
  bottom: 1.4rem;
  width: 100%;
  left: 50%;
  transform: translateX(-50%);
  /* padding-top: 1rem; */
  text-align: center;
}

.near-container .mask .qr-code .url-wrap .url-title {
  font-size: .6rem;
  color: #babbbc;
}

.near-container .mask .qr-code .url-wrap .url .btn{
  width: 100%;
  max-width: 10rem;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
}

.near-container .mask .send-redbag-wrap {
  width: 85%;
  /* height: 90%; */
  max-width: 20rem;
  max-height: 29rem;
  background-color: #fafafa;
  border-radius: .8rem;
  position: relative;
  /* background: #fafafa url('../img/dapp-bg.png') center 7rem; */
  /* background-size: 18rem; */
  box-shadow: .0rem .0rem .4rem rgb(78, 77, 77);
  padding: 1rem;
}

.near-container .mask .send-redbag-wrap .cancel,
.near-container .mask .qr-code .cancel,
.near-container .mask .redbag-info-wrap .cancel {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 1rem;
  height: 1rem;
  cursor: pointer;
  background: url('../img/cancel.png') no-repeat;
  background-size: 1rem;
}

.near-container .mask .send-redbag-wrap .title {
  width: 100%;
  height: 5rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.near-container .mask .send-redbag-wrap .title .near-logo {
  width: 9rem;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap .left {
  display: flex;
  align-items: center;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap .left img {
  width: 1.2rem;
  margin-right: .3rem;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap {
  width: 100%;
  height: 3.2rem;
  background-color: #fff;
  border-radius: .5rem;
  margin-top: 1rem;
  box-shadow: .0rem .0rem .4rem rgb(201, 201, 201);
  padding: 1rem;
  font-size: .8rem;
  font-weight: 500;
  color: #242424;
  display: flex;
  align-items: center;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap:nth-of-type(1) {
  margin: 0;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap .center {
  flex: 1;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap .center input {
  width: 100%;
  border: none;
  text-align: right;
  font-size: .8rem;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap .right {
  width: 2rem;
  padding-left: 1rem;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap input {
  width: 100%;
  border: none;
  font-size: .8rem;
}

.near-container .mask .send-redbag-wrap .main .inp-wrap input::-webkit-input-placeholder {
  color: #e1e1e1;
  font-size: .8rem;
  font-weight: 500;
}

.near-container .mask .send-redbag-wrap .main .redbag-type span {
  padding-left: .5rem;
}

.near-container .mask .send-redbag-wrap .main .redbag-type span:nth-of-type(1) {
  font-size: .6rem;
  color: #c7c7c7;
}

.near-container .mask .send-redbag-wrap .main .redbag-type span:nth-of-type(2) {
  font-size: .6rem;
  color: #d5726c;
  cursor: pointer;
}

.near-container .mask .send-redbag-wrap .main .redbag-type span:nth-of-type(3) {
  font-size: .6rem;
  color: #c7c7c7;
  padding: 0;
}

.near-container .mask .send-redbag-wrap .main .amount-money {
  font-size: 2.2rem;
  font-weight: 700;
  line-height: 5rem;
  text-align: center;
  overflow: hidden;    
  text-overflow: ellipsis;
  white-space: nowrap;
}

.near-container .mask .send-redbag-wrap .main .btn-wrap {
  margin-bottom: 1rem;
  display: flex;
  justify-content: center;
  width: 100%;
}

.near-container .mask .send-redbag-wrap .main .btn-wrap .btn {
  width: 15rem;
  height: 2.5rem;
  font-size: 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.near-container .near-drop-item {
  border: .05 solid #f8f8f8;
  border-radius: .4rem;
  box-shadow: 0 .1rem 1rem rgba(36, 36, 36, .05);
  margin-bottom: 1rem;
  overflow: hidden;
  padding: 1rem;
  position: relative;
  transition: box-shadow .2s;
}

.near-container .near-drop-item:hover {
  box-shadow: 0 .4rem 1rem rgba(36, 36, 36, .1);
}

.near-container .near-drop-item .drop-item-funds {
  font-size: 1.4rem;
  font-weight: 800;
  line-height: 1.6rem;
  margin-bottom: .5rem;
}

.near-container .near-drop-item .drop-item-funds span {
  font-size: 1rem;
  font-weight: 500;
  padding-left: .5rem;
}

.near-container .near-drop-item .drop-item-pubkey {
  font-size: .6rem;
  margin-bottom: .5rem;
}

.near-container .near-drop-item .drop-item-status {
  background: #fdf2f1;
  color: #e55e59;
  font-size: .6rem;
  /* height: .8rem; */
  line-height: .8rem;
  padding: .2rem;
  position: absolute;
  right: -2.5rem;
  text-align: center;
  text-transform: uppercase;
  top: 1rem;
  transform: rotate(45deg);
  width: 8rem;
}

.near-container .near-dapp-redpacket {
  background: #e03c36;
  border: .1rem solid #ae201b;
  border-radius: .8rem;
  box-shadow: 0 .1rem 1rem rgba(227, 81, 76, .75);
  max-width: 18.75rem;
  overflow: hidden;
  padding: 0;
}

.near-container .near-dapp-redpacket .near-redpacket-header {
  /* -webkit-animation: re-slide-up 3s ease-in-out 1 forwards;
  animation: re-slide-up 3s ease-in-out 1 forwards; */
  background: linear-gradient(to bottom, #e03c36 5%, #da2822);
  border-radius: .8rem .8rem 0 0;
  flex: 1 1 65vh;
  height: 65vh;
  position: relative;
  /* transform: translateY(-55vh); */
  z-index: 999;
}

.near-container .near-dapp-redpacket .near-redpacket-header::after,
.near-container .near-dapp-redpacket .near-redpacket-header::before {
  border-color: #da2822 transparent transparent transparent;
  border-radius: 20px;
  border-style: solid;
  border-width: 2rem 20rem 0 20rem;
  content: "";
  display: block;
  height: 2rem;
  left: 50%;
  position: absolute;
  top: 100%;
  transform: translate(-50%, 0);
  width: 100%;
  z-index: 99;
}

.near-container .near-dapp-redpacket .near-redpacket-header::before {
  border-top-color: #ae201b;
  transform: translate(-50%, .1rem);
  z-index: 99;
}

.near-container .near-dapp-redpacket .near-redpacket-header .redpacket-cover {
  display: block;
  height: 50vh;
  margin: 1rem auto;
  width: auto;
}

.near-container .near-dapp-redpacket .near-redpacket-header .redpacket-login {
  /* align-items: center;
  background-color: #e3c494;
  bottom: -3.5rem;
  display: flex;
  flex-direction: column;
  font-size: 1rem;
  font-weight: 400;
  height: 4.3rem;
  justify-content: space-around;
  left: calc(50% - 5rem);
  border-radius: .5rem;
  opacity: 1;
  position: absolute;
  width: 10rem;
  z-index: 999;
  padding: .2rem .4rem;
  box-shadow: 0 .2rem 1rem rgba(36, 36, 36, .25); */

  align-items: center;
  /* -webkit-animation: re-flip-btn 3s ease-in-out 1;
  animation: re-flip-btn 3s ease-in-out 1; */
  /* background: linear-gradient(45deg, #f0ce99 0, #e9b768 100%); */
  /* border: .1rem solid rgba(36, 36, 36, .1); */
  /* border-radius: 50%; */
  bottom: -4.5rem;
  /* box-shadow: 0 .2rem 1rem rgba(36, 36, 36, .25); */
  color: rgba(36, 36, 36, .75);
  display: flex;
  font-size: 1.2rem;
  font-weight: 700;
  height: 5rem;
  justify-content: center;
  align-items: center;
  left: calc(50% - 2.5rem);
  /* opacity: 0; */
  position: absolute;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 5rem;
  z-index: 999;
}

.near-container .near-dapp-redpacket .near-redpacket-header .redpacket-login .login,
.near-container .near-dapp-redpacket .near-redpacket-header .redpacket-login .register {
  /* padding: 3px 0;
  cursor: pointer;
  width: 100%;
  display: flex;
  font-weight: 700;
  justify-content: center;
  align-items: center;
  border-radius: .7rem;
  color: #da2c25;
  text-shadow: 1px 1px 2px rgb(153, 152, 152); */

  align-items: center;
  /* -webkit-animation: re-flip-btn 3s ease-in-out 1;
  animation: re-flip-btn 3s ease-in-out 1; */
  background: linear-gradient(45deg, #f0ce99 0, #e9b768 100%);
  border: .1rem solid rgba(36, 36, 36, .1);
  border-radius: 50%;
  /* bottom: -4.5rem; */
  box-shadow: 0 .2rem 1rem rgba(36, 36, 36, .25);
  color: rgba(36, 36, 36, .75);
  display: flex;
  font-size: 1.2rem;
  font-weight: 700;
  height: 5rem;
  justify-content: center;
  align-items: center;
  left: calc(50% - 2.5rem);
  /* opacity: 0; */
  position: absolute;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 5rem;
  z-index: 999;
}

/* .near-container .near-dapp-redpacket .near-redpacket-header .redpacket-login .active {
  background-color: #da2c25;
  box-shadow: 0px 0px 3px 1px rgb(136, 136, 136);
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 1rem;
  color: #e3c494;
  text-shadow: none;
} */

.near-container .near-dapp-redpacket .near-redpacket-header .registerLogin {
  align-items: center;
  /* -webkit-animation: re-flip-btn 3s ease-in-out 1;
  animation: re-flip-btn 3s ease-in-out 1; */
  background: linear-gradient(45deg, #f0ce99 0, #e9b768 100%);
  border: .1rem solid rgba(36, 36, 36, .1);
  border-radius: 50%;
  bottom: -4.5rem;
  box-shadow: 0 .2rem 1rem rgba(36, 36, 36, .25);
  color: rgba(36, 36, 36, .75);
  display: flex;
  font-weight: 700;
  height: 5rem;
  left: calc(50% - 2.5rem);
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 5rem;
  z-index: 999;
  flex-direction: column;
  font-size: 1rem;
  justify-content: center;
  opacity: 1;
  position: absolute;
}

.near-container .near-dapp-redpacket .near-redpacket-header .redpacket-btn {
  align-items: center;
  /* -webkit-animation: re-flip-btn 3s ease-in-out 1;
  animation: re-flip-btn 3s ease-in-out 1; */
  background: linear-gradient(45deg, #f0ce99 0, #e9b768 100%);
  border: .1rem solid rgba(36, 36, 36, .1);
  border-radius: 50%;
  bottom: -4.5rem;
  box-shadow: 0 .2rem 1rem rgba(36, 36, 36, .25);
  color: rgba(36, 36, 36, .75);
  display: flex;
  font-size: 1.2rem;
  font-weight: 700;
  height: 5rem;
  justify-content: center;
  left: calc(50% - 2.5rem);
  opacity: 0;
  position: absolute;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 5rem;
  z-index: 999;
}

.near-container .near-dapp-redpacket .near-redpacket-header .redpacket-btn::after {
  border: .1rem solid rgba(36, 36, 36, .05);
  border-radius: 50%;
  content: "";
  display: block;
  flex: 0 0 4rem;
  height: 4.4rem;
  left: .2rem;
  position: absolute;
  top: .2rem;
  width: 4.4rem;
}

.near-container .near-dapp-redpacket .near-redpacket-body {
  background: #e03c36;
  height: 35vh;
  position: relative;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-content {
  bottom: 1.5rem;
  color: #ecc27f;
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: flex-end;
  position: absolute;
  text-align: center;
  text-shadow: 0 .2rem .5rem rgba(36, 36, 36, .15);
  width: 100%;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-content .btn {
  width: 60% !important;
  margin: 0 auto .5rem;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-content .redpacket-content-title {
  font-size: 1.6rem;
  font-weight: 700;
  line-height: 1.8rem;
  margin-bottom: .5rem;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card {
  /* -webkit-animation: re-slide-down 3s ease-in-out 1 forwards;
  animation: re-slide-down 3s ease-in-out 1 forwards; */
  background: linear-gradient(to bottom, #eabb71 0, #e7b15b 100%);
  border: .1rem solid rgba(36, 36, 36, .15);
  border-radius: .6rem;
  bottom: 4rem;
  color: #55390d;
  display: flex;
  flex-direction: column;
  height: 78vh;
  left: 50%;
  padding: 6rem 1.5rem 2rem 1.5rem;
  position: absolute;
  text-align: center;
  text-shadow: 0 .2rem .5rem rgba(36, 36, 36, .15);
  transform: translate(-50%, -100%);
  width: 70%;
  z-index: 99;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card::after {
  border: .1rem solid rgba(36, 36, 36, .05);
  border-radius: .6rem;
  content: "";
  display: block;
  flex: 0 0 4rem;
  height: calc(78vh - .8rem);
  left: .3rem;
  position: absolute;
  top: .3rem;
  width: calc(100% - .6rem);
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card .redpacket-cover {
  display: block;
  height: 50vh;
  left: 50%;
  margin: 1rem auto;
  opacity: .5;
  position: absolute;
  top: 40%;
  transform: translate(-50%, -50%);
  width: auto;
  z-index: -1;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card .redpacket-card-header {
  flex: 0 0 1rem;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card .redpacket-card-header .h2 {
  font-size: 1.4rem;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card .redpacket-card-body {
  align-items: center;
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  justify-content: center;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card .redpacket-card-footer {
  align-items: center;
  display: flex;
  flex: 0 0 1rem;
  justify-content: center;
  margin-top: 2rem;
}

.near-container .near-dapp-redpacket .near-redpacket-body .redpacket-card .redpacket-card-footer .btn {
  position: relative;
  z-index: 999;
}

.toast-wechat {
  background: #55390d;
  border-radius: .2rem;
  box-shadow: 0 .2rem 2rem rgba(85, 57, 13, .75);
  color: #f8e8cf;
  display: none;
  padding: .5rem 1rem;
  position: fixed;
  right: 1rem;
  top: .75rem;
  z-index: 9999;
}

.toast-wechat::after {
  border-color: transparent transparent #55390d transparent;
  border-radius: .4rem;
  border-style: solid;
  border-width: 0 .5rem .5rem .5rem;
  content: "";
  position: absolute;
  right: 1rem;
  top: -.4rem;
}

@-webkit-keyframes re-flip-btn {
  0% {
    opacity: 1;
    transform: rotateY(0);
  }
  75% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: rotateY(1080deg);
  }
}

@keyframes re-flip-btn {
  0% {
    opacity: 1;
    transform: rotateY(0);
  }
  75% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: rotateY(1080deg);
  }
}

@-webkit-keyframes re-slide-up {
  0% {
    transform: translateY(0);
  }
  75% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(-55vh);
  }
}

@keyframes re-slide-up {
  0% {
    transform: translateY(0);
  }
  75% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(-55vh);
  }
}

@-webkit-keyframes re-slide-down {
  0% {
    transform: translate(-50%, -100%);
  }
  50% {
    transform: translate(-50%, -100%);
  }
  100% {
    transform: translate(-50%, 1rem);
  }
}

@keyframes re-slide-down {
  0% {
    transform: translate(-50%, -100%);
  }
  50% {
    transform: translate(-50%, -100%);
  }
  100% {
    transform: translate(-50%, 1rem);
  }
}
'''
'''--- frontend/src/src/assets/css/spectre.css ---
/*! Spectre.css v0.5.8 | MIT License | github.com/picturepan2/spectre */
/* Manually forked from Normalize.css */
/* normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
/** 1. Change the default font family in all browsers (opinionated). 2. Correct the line height in all browsers. 3. Prevent adjustments of font size after orientation changes in IE on Windows Phone and in iOS. */
/* Document ========================================================================== */
html {
  font-family: sans-serif; /* 1 */
  -webkit-text-size-adjust: 100%; /* 3 */ 
  -ms-text-size-adjust: 100%; /* 3 */
}

/* Sections ========================================================================== */
/** Remove the margin in all browsers (opinionated). */
body {
  margin: 0;
}

/** Add the correct display in IE 9-. */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/** Correct the font size and margin on `h1` elements within `section` and `article` contexts in Chrome, Firefox, and Safari. */
h1 {
  font-size: 2em;
  margin: .67em 0;
}

/* Grouping content ========================================================================== */
/** Add the correct display in IE 9-. 1. Add the correct display in IE. */
figcaption,
figure,
main {
  /* 1 */ display: block;
}

/** Add the correct margin in IE 8 (removed). */
/** 1. Add the correct box sizing in Firefox. 2. Show the overflow in Edge and IE. */
hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/** 1. Correct the inheritance and scaling of font size in all browsers. (removed) 2. Correct the odd `em` font sizing in all browsers. */
/* Text-level semantics ========================================================================== */
/** 1. Remove the gray background on active links in IE 10. 2. Remove gaps in links underline in iOS 8+ and Safari 8+. */
a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/** Remove the outline on focused links when they are also active or hovered in all browsers (opinionated). */
a:active,
a:hover {
  outline-width: 0;
}

/** Modify default styling of address. */
address {
  font-style: normal;
}

/** 1. Remove the bottom border in Firefox 39-. 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. (removed) */
/** Prevent the duplicate application of `bolder` by the next rule in Safari 6. */
b,
strong {
  font-weight: inherit;
}

/** Add the correct font weight in Chrome, Edge, and Safari. */
b,
strong {
  font-weight: bolder;
}

/** 1. Correct the inheritance and scaling of font size in all browsers. 2. Correct the odd `em` font sizing in all browsers. */
code,
kbd,
pre,
samp {
  font-family: "SF Mono", "Segoe UI Mono", "Roboto Mono", Menlo, Courier, monospace; /* 1 (changed) */
  font-size: 1em; /* 2 */
}

/** Add the correct font style in Android 4.3-. */
dfn {
  font-style: italic;
}

/** Add the correct background and color in IE 9-. (Removed) */
/** Add the correct font size in all browsers. */
small {
  font-size: 80%;
  font-weight: 400; /* (added) */
}

/** Prevent `sub` and `sup` elements from affecting the line height in all browsers. */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -.25em;
}

sup {
  top: -.5em;
}

/* Embedded content ========================================================================== */
/** Add the correct display in IE 9-. */
audio,
video {
  display: inline-block;
}

/** Add the correct display in iOS 4-7. */
audio:not([controls]) {
  display: none;
  height: 0;
}

/** Remove the border on images inside links in IE 10-. */
img {
  border-style: none;
}

/** Hide the overflow in IE. */
svg:not(:root) {
  overflow: hidden;
}

/* Forms ========================================================================== */
/** 1. Change the font styles in all browsers (opinionated). 2. Remove the margin in Firefox and Safari. */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 (changed) */
  font-size: inherit; /* 1 (changed) */
  line-height: inherit; /* 1 (changed) */
  margin: 0; /* 2 */
}

/** Show the overflow in IE. 1. Show the overflow in Edge. */
button,
input {
  /* 1 */ overflow: visible;
}

/** Remove the inheritance of text transform in Edge, Firefox, and IE. 1. Remove the inheritance of text transform in Firefox. */
button,
select {
  /* 1 */ text-transform: none;
}

/** 1. Prevent a WebKit bug where (2) destroys native `audio` and `video` controls in Android 4. 2. Correct the inability to style clickable types in iOS and Safari. */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/** Remove the inner border and padding in Firefox. */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/** Restore the focus styles unset by the previous rule (removed). */
/** Change the border, margin, and padding in all browsers (opinionated) (changed). */
fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/** 1. Correct the text wrapping in Edge and IE. 2. Correct the color inheritance from `fieldset` elements in IE. 3. Remove the padding so developers are not caught out when they zero out `fieldset` elements in all browsers. */
legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/** 1. Add the correct display in IE 9-. 2. Add the correct vertical alignment in Chrome, Firefox, and Opera. */
progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/** Remove the default vertical scrollbar in IE. */
textarea {
  overflow: auto;
}

/** 1. Add the correct box sizing in IE 10-. 2. Remove the padding in IE 10-. */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/** Correct the cursor style of increment and decrement buttons in Chrome. */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/** 1. Correct the odd appearance in Chrome and Safari. 2. Correct the outline style in Safari. */
[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/** Remove the inner padding and cancel buttons in Chrome and Safari on macOS. */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/** 1. Correct the inability to style clickable types in iOS and Safari. 2. Change font properties to `inherit` in Safari. */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive ========================================================================== */
/* Add the correct display in IE 9-. 1. Add the correct display in Edge, IE, and Firefox. */
details,
menu {
  display: block;
}

/* Add the correct display in all browsers. */
summary {
  display: list-item;
  outline: none;
}

/* Scripting ========================================================================== */
/** Add the correct display in IE 9-. */
canvas {
  display: inline-block;
}

/** Add the correct display in IE. */
template {
  display: none;
}

/* Hidden ========================================================================== */
/** Add the correct display in IE 10-. */
[hidden] {
  display: none;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-size: 20px;
  line-height: 1.5;
  -webkit-tap-highlight-color: transparent;
}

body {
  background: white;
  color: #313131;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
  font-size: .8rem;
  overflow-x: hidden;
  text-rendering: optimizeLegibility;
}

a {
  color: #7d7d7d;
  outline: none;
  text-decoration: none;
}

a:focus {
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

a:focus,
a:hover,
a:active,
a.active {
  color: #646464;
  text-decoration: underline;
}

a:visited {
  color: #979797;
}

:focus {
  outline: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: inherit;
  font-weight: 500;
  line-height: 1.2;
  margin-bottom: .5em;
  margin-top: 0;
}

.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  font-weight: 700;
}

h1,
.h1 {
  font-size: 2rem;
}

h2,
.h2 {
  font-size: 1.6rem;
}

h3,
.h3 {
  font-size: 1.4rem;
}

h4,
.h4 {
  font-size: 1.2rem;
}

h5,
.h5 {
  font-size: 1rem;
}

h6,
.h6 {
  font-size: .8rem;
}

p {
  margin: 0 0 1.2rem;
}

a,
ins,
u {
  -webkit-text-decoration-skip: ink edges;
  text-decoration-skip: ink edges;
}

abbr[title] {
  border-bottom: .05rem dotted;
  cursor: help;
  text-decoration: none;
}

kbd {
  background: #242424;
  border-radius: .4rem;
  color: #fff;
  font-size: .7rem; 
  line-height: 1.25;
  padding: .1rem .2rem;
}

mark {
  background: #ffe9b3;
  border-bottom: .05rem solid #ffd367;
  border-radius: .4rem;
  color: #313131;
  padding: .05rem .1rem 0;
}

blockquote {
  border-left: .1rem solid #e5e5e5;
  margin-left: 0;
  padding: .4rem .8rem;
}

blockquote p:last-child {
  margin-bottom: 0;
}

ul,
ol {
  margin: .8rem 0 .8rem .8rem;
  padding: 0;
}

ul ul,
ul ol,
ol ul,
ol ol {
  margin: .8rem 0 .8rem .8rem;
}

ul li,
ol li {
  margin-top: .4rem;
}

ul {
  list-style: disc inside;
}

ul ul {
  list-style-type: circle;
}

ol {
  list-style: decimal inside;
}

ol ol {
  list-style-type: lower-alpha;
}

dl dt {
  font-weight: bold;
}

dl dd {
  margin: .4rem 0 .8rem 0;
}

html:lang(zh),
html:lang(zh-Hans),
.lang-zh,
.lang-zh-hans {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", sans-serif;
}

html:lang(zh-Hant),
.lang-zh-hant {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang TC", "Hiragino Sans CNS", "Microsoft JhengHei", "Helvetica Neue", sans-serif;
}

html:lang(ja),
.lang-ja {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Hiragino Sans", "Hiragino Kaku Gothic Pro", "Yu Gothic", YuGothic, Meiryo, "Helvetica Neue", sans-serif;
}

html:lang(ko),
.lang-ko {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Malgun Gothic", "Helvetica Neue", sans-serif;
}

:lang(zh) ins,
:lang(zh) u,
:lang(ja) ins,
:lang(ja) u,
.lang-cjk ins,
.lang-cjk u {
  border-bottom: .05rem solid;
  text-decoration: none;
}

:lang(zh) del + del,
:lang(zh) del + s,
:lang(zh) ins + ins,
:lang(zh) ins + u,
:lang(zh) s + del,
:lang(zh) s + s,
:lang(zh) u + ins,
:lang(zh) u + u,
:lang(ja) del + del,
:lang(ja) del + s,
:lang(ja) ins + ins,
:lang(ja) ins + u,
:lang(ja) s + del,
:lang(ja) s + s,
:lang(ja) u + ins,
:lang(ja) u + u,
.lang-cjk del + del,
.lang-cjk del + s,
.lang-cjk ins + ins,
.lang-cjk ins + u,
.lang-cjk s + del,
.lang-cjk s + s,
.lang-cjk u + ins,
.lang-cjk u + u {
  margin-left: .125em;
}

.table {
  border-collapse: collapse;
  border-spacing: 0;
  text-align: left; 
  width: 100%;
}

.table.table-striped tbody tr:nth-of-type(odd) {
  background: #f8f8f8;
}

.table tbody tr.active,
.table.table-striped tbody tr.active {
  background: #f0f0f0;
}

.table.table-hover tbody tr:hover {
  background: #f0f0f0;
}

.table.table-scroll {
  display: block;
  overflow-x: auto;
  padding-bottom: .75rem;
  white-space: nowrap;
}

.table td,
.table th {
  border-bottom: .05rem solid #e5e5e5;
  padding: .6rem .4rem;
}

.table th {
  border-bottom-width: .1rem;
}

.btn {
  align-items: center;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: #f0f0f0;
  border: .05rem solid #eaeaea;
  border-radius: 10rem;
  box-shadow: 0 .1rem 1rem rgba(36, 36, 36, .1);
  color: #7d7d7d;
  cursor: pointer;
  display: inline-flex;
  font-size: .8rem;
  height: 1.8rem;
  line-height: 1.2rem;
  outline: none;
  padding: .25rem .6rem;
  text-align: center;
  text-decoration: none;
  transition: background .2s, border .2s, box-shadow .2s, color .2s;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;
}

.btn:visited {
  color: #7d7d7d;
}

.btn:focus {
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.btn:focus,
.btn:hover {
  background: #e3514c;
  border-color: #e1443f;
  color: #fff;
  text-decoration: none;
}

.btn:active,
.btn.active {
  background: #e1443f;
  border-color: #dd2f29;
  color: #fff;
  text-decoration: none;
}

.btn:active.loading::after,
.btn.active.loading::after {
  border-bottom-color: #fff;
  border-left-color: #fff;
}

.btn[disabled],
.btn:disabled,
.btn.disabled {
  cursor: default;
  opacity: .5;
  pointer-events: none;
}

.btn.btn-primary {
  background: #e3514c;
  border-color: #e1443f;
  box-shadow: 0 .1rem 1rem rgba(227, 81, 76, .25);
  color: #fff;
}

.btn.btn-primary:visited {
  color: #fff;
}

.btn.btn-primary:focus,
.btn.btn-primary:hover {
  background: #e03c36;
  border-color: #dd2f29;
  color: #fff;
}

.btn.btn-primary:active,
.btn.btn-primary.active {
  background: #de332d;
  border-color: #da2822;
  color: #fff;
}

.btn.btn-primary.loading::after {
  border-bottom-color: #fff;
  border-left-color: #fff;
}

.btn.btn-gold {
  background: #55390d;
  border-color: #48300b;
  box-shadow: 0 .2rem 1rem rgba(85, 57, 13, .5);
  color: #f8e8cf;
}

.btn.btn-gold:visited {
  color: #f8e8cf;
}

.btn.btn-gold:focus,
.btn.btn-gold:hover,
.btn.btn-gold:active,
.btn.btn-gold.active {
  background: #48300b;
  border-color: #3a2709;
  color: #f8e8cf;
}

.btn.btn-link {
  background: transparent;
  border-color: transparent;
  box-shadow: none;
  color: #7d7d7d;
}

.btn.btn-link:visited,
.btn.btn-link:focus,
.btn.btn-link:hover,
.btn.btn-link:active,
.btn.btn-link.active {
  color: #646464;
}

.btn.btn-sm {
  font-size: .7rem;
  height: 1.4rem;
  padding: .05rem .45rem;
}

.btn.btn-lg {
  height: 2rem;
  padding: .35rem .9rem;
}

.btn.btn-block {
  display: block;
  width: 100%;
}

.btn.btn-rounded {
  border-radius: 10rem;
}

.btn.btn-action {
  padding-left: 0;
  padding-right: 0; 
  width: 1.8rem;
}

.btn.btn-action.btn-sm {
  width: 1.4rem;
}

.btn.btn-action.btn-lg {
  width: 2rem;
}

.btn.btn-clear {
  background: transparent;
  border: 0;
  color: currentColor;
  height: 1rem;
  line-height: .8rem;
  margin-left: .2rem;
  margin-right: -2px;
  opacity: 1;
  padding: .1rem;
  text-decoration: none;
  width: 1rem;
}

.btn.btn-clear:focus,
.btn.btn-clear:hover {
  background: rgba(248, 248, 248, .5);
  opacity: .95;
}

.btn.btn-clear::before {
  content: "\2715";
}

.btn-group {
  display: inline-flex;
  flex-wrap: wrap;
}

.btn-group .btn {
  flex: 1 0 auto;
}

.btn-group .btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}

.btn-group .btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  margin-left: -.05rem;
}

.btn-group .btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  margin-left: -.05rem;
}

.btn-group .btn:focus,
.btn-group .btn:hover,
.btn-group .btn:active,
.btn-group .btn.active {
  z-index: 1;
}

.btn-group.btn-group-block {
  display: flex;
}

.btn-group.btn-group-block .btn {
  flex: 1 0 0;
}

.form-group:not(:last-child) {
  margin-bottom: .4rem;
}

fieldset {
  margin-bottom: .8rem;
}

legend {
  font-size: .9rem;
  font-weight: 500;
  margin-bottom: .8rem;
}

.form-label {
  display: block;
  line-height: 1.2rem;
  padding: .3rem 0;
}

.form-label.label-sm {
  font-size: .7rem;
  padding: .1rem 0;
}

.form-label.label-lg {
  font-size: .9rem;
  padding: .4rem 0;
}

.form-input {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: white;
  background-image: none;
  border: .05rem solid #e0e0e0;
  border-radius: .4rem;
  color: #313131;
  display: block;
  font-size: .8rem;
  height: 1.8rem;
  line-height: 1.2rem;
  max-width: 100%;
  outline: none;
  padding: .25rem .6rem;
  position: relative;
  transition: background .2s, border .2s, box-shadow .2s, color .2s;
  width: 100%;
}

.form-input:focus {
  border-color: #e3514c; 
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.form-input::-webkit-input-placeholder {
  color: #b0b0b0;
}

.form-input:-ms-input-placeholder {
  color: #b0b0b0;
}

.form-input::-ms-input-placeholder {
  color: #b0b0b0;
}

.form-input::placeholder {
  color: #b0b0b0;
}

.form-input.input-sm {
  font-size: .7rem;
  height: 1.4rem;
  padding: .05rem .45rem;
}

.form-input.input-lg {
  font-size: .9rem;
  height: 2rem;
  padding: .35rem .9rem;
}

.form-input.input-inline {
  display: inline-block;
  vertical-align: middle;
  width: auto;
}

.form-input[type="file"] {
  height: auto;
}

textarea.form-input,
textarea.form-input.input-lg,
textarea.form-input.input-sm {
  height: auto;
}

.form-input-hint {
  color: #b0b0b0;
  font-size: .7rem;
  margin-top: .2rem;
}

.has-success .form-input-hint,
.is-success + .form-input-hint {
  color: #32b643;
}

.has-error .form-input-hint,
.is-error + .form-input-hint {
  color: #e85600;
}

.form-select {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: white; 
  border: .05rem solid #e0e0e0;
  border-radius: .4rem;
  color: inherit;
  font-size: .8rem;
  height: 1.8rem;
  line-height: 1.2rem;
  outline: none;
  padding: .25rem .6rem;
  vertical-align: middle;
  width: 100%;
}

.form-select:focus {
  border-color: #e3514c; 
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.form-select::-ms-expand {
  display: none;
}

.form-select.select-sm {
  font-size: .7rem;
  height: 1.4rem;
  padding: .05rem 1.25rem .05rem .45rem;
}

.form-select.select-lg {
  font-size: .9rem;
  height: 2rem;
  padding: .35rem 1.7rem .35rem .9rem;
}

.form-select[size],
.form-select[multiple] {
  height: auto;
  padding: .25rem .6rem;
}

.form-select[size] option,
.form-select[multiple] option {
  padding: .1rem .2rem;
}

.form-select:not([multiple]):not([size]) {
  background: white url("data:image/svg+xml;charset=utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%204%205'%3E%3Cpath%20fill='%23667189'%20d='M2%200L0%202h4zm0%205L0%203h4z'/%3E%3C/svg%3E") no-repeat right .35rem center/.4rem .5rem;
  padding-right: 1.4rem;
}

.has-icon-left,
.has-icon-right {
  position: relative;
}

.has-icon-left .form-icon,
.has-icon-right .form-icon {
  height: .8rem;
  margin: 0 .25rem;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: .8rem;
  z-index: 2;
}

.has-icon-left .form-icon {
  left: .05rem;
}

.has-icon-left .form-input {
  padding-left: 1.3rem;
}

.has-icon-right .form-icon {
  right: .05rem;
}

.has-icon-right .form-input {
  padding-right: 1.3rem;
}

.form-checkbox,
.form-radio,
.form-switch {
  display: block;
  line-height: 1.2rem;
  margin: .2rem 0;
  min-height: 1.4rem;
  padding: .1rem .6rem .1rem 1.4rem;
  position: relative;
}

.form-checkbox input,
.form-radio input,
.form-switch input {
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  position: absolute;
  width: 1px;
}

.form-checkbox input:focus + .form-icon,
.form-radio input:focus + .form-icon,
.form-switch input:focus + .form-icon {
  border-color: #e3514c; 
  box-shadow: 0 0 0 .1rem rgba(255, 255, 255, .1);
}

.form-checkbox input:checked + .form-icon,
.form-radio input:checked + .form-icon,
.form-switch input:checked + .form-icon {
  background: #e3514c;
  border-color: #e3514c;
}

.form-checkbox .form-icon,
.form-radio .form-icon,
.form-switch .form-icon {
  border: .05rem solid #e0e0e0;
  cursor: pointer;
  display: inline-block;
  position: absolute;
  transition: background .2s, border .2s, box-shadow .2s, color .2s;
}

.form-checkbox.input-sm,
.form-radio.input-sm,
.form-switch.input-sm {
  font-size: .7rem;
  margin: 0;
}

.form-checkbox.input-lg,
.form-radio.input-lg,
.form-switch.input-lg {
  font-size: .9rem;
  margin: .3rem 0;
}

.form-checkbox .form-icon,
.form-radio .form-icon {
  background: white;
  height: .8rem;
  left: 0;
  top: .3rem;
  width: .8rem;
}

.form-checkbox input:active + .form-icon,
.form-radio input:active + .form-icon {
  background: #f0f0f0;
}

.form-checkbox .form-icon {
  border-radius: .4rem;
}

.form-checkbox input:checked + .form-icon::before {
  background-clip: padding-box;
  border: .1rem solid #fff;
  border-left-width: 0;
  border-top-width: 0;
  content: "";
  height: 9px;
  left: 50%;
  margin-left: -3px;
  margin-top: -6px;
  position: absolute;
  top: 50%;
  transform: rotate(45deg);
  width: 6px;
}

.form-checkbox input:indeterminate + .form-icon {
  background: #e3514c;
  border-color: #e3514c;
}

.form-checkbox input:indeterminate + .form-icon::before {
  background: white;
  content: "";
  height: 2px;
  left: 50%;
  margin-left: -5px;
  margin-top: -1px;
  position: absolute;
  top: 50%;
  width: 10px;
}

.form-radio .form-icon {
  border-radius: 50%;
}

.form-radio input:checked + .form-icon::before {
  background: white;
  border-radius: 50%;
  content: "";
  height: 6px;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 6px;
}

.form-switch {
  padding-left: 2.2rem;
}

.form-switch .form-icon {
  background: #b0b0b0;
  background-clip: padding-box;
  border-radius: .45rem;
  height: .9rem;
  left: 0;
  top: .25rem;
  width: 1.6rem;
}

.form-switch .form-icon::before {
  background: white;
  border-radius: 50%;
  content: "";
  display: block;
  height: .8rem;
  left: 0;
  position: absolute;
  top: 0;
  transition: background .2s, border .2s, box-shadow .2s, color .2s, left .2s;
  width: .8rem;
}

.form-switch input:checked + .form-icon::before {
  left: 14px;
}

.form-switch input:active + .form-icon::before {
  background: #f8f8f8;
}

.input-group {
  display: flex;
}

.input-group .input-group-addon {
  background: #f8f8f8;
  border: .05rem solid #e0e0e0;
  border-radius: .4rem;
  line-height: 1.2rem;
  padding: .25rem .6rem;
  white-space: nowrap;
}

.input-group .input-group-addon.addon-sm {
  font-size: .7rem;
  padding: .05rem .45rem;
}

.input-group .input-group-addon.addon-lg {
  font-size: .9rem;
  padding: .35rem .9rem;
}

.input-group .form-input,
.input-group .form-select {
  flex: 1 1 auto;
  width: 1%;
}

.input-group .input-group-btn {
  z-index: 1;
}

.input-group .form-input:first-child:not(:last-child),
.input-group .form-select:first-child:not(:last-child),
.input-group .input-group-addon:first-child:not(:last-child),
.input-group .input-group-btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}

.input-group .form-input:not(:first-child):not(:last-child),
.input-group .form-select:not(:first-child):not(:last-child),
.input-group .input-group-addon:not(:first-child):not(:last-child),
.input-group .input-group-btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  margin-left: -.05rem;
}

.input-group .form-input:last-child:not(:first-child),
.input-group .form-select:last-child:not(:first-child),
.input-group .input-group-addon:last-child:not(:first-child),
.input-group .input-group-btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  margin-left: -.05rem;
}

.input-group .form-input:focus,
.input-group .form-select:focus,
.input-group .input-group-addon:focus,
.input-group .input-group-btn:focus {
  z-index: 2;
}

.input-group .form-select {
  width: auto;
}

.input-group.input-inline {
  display: inline-flex;
}

.has-success .form-input,
.form-input.is-success,
.has-success .form-select,
.form-select.is-success {
  background: #f9fdfa;
  border-color: #32b643;
}

.has-success .form-input:focus,
.form-input.is-success:focus,
.has-success .form-select:focus,
.form-select.is-success:focus {
  box-shadow: 0 0 0 .1rem rgba(50, 182, 67, .1);
}

.has-error .form-input,
.form-input.is-error,
.has-error .form-select,
.form-select.is-error {
  background: #fffaf7;
  border-color: #e85600;
}

.has-error .form-input:focus,
.form-input.is-error:focus,
.has-error .form-select:focus,
.form-select.is-error:focus {
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.has-error .form-checkbox .form-icon,
.form-checkbox.is-error .form-icon,
.has-error .form-radio .form-icon,
.form-radio.is-error .form-icon,
.has-error .form-switch .form-icon,
.form-switch.is-error .form-icon {
  border-color: #e85600;
}

.has-error .form-checkbox input:checked + .form-icon,
.form-checkbox.is-error input:checked + .form-icon,
.has-error .form-radio input:checked + .form-icon,
.form-radio.is-error input:checked + .form-icon,
.has-error .form-switch input:checked + .form-icon,
.form-switch.is-error input:checked + .form-icon {
  background: #e85600;
  border-color: #e85600;
}

.has-error .form-checkbox input:focus + .form-icon,
.form-checkbox.is-error input:focus + .form-icon,
.has-error .form-radio input:focus + .form-icon,
.form-radio.is-error input:focus + .form-icon,
.has-error .form-switch input:focus + .form-icon,
.form-switch.is-error input:focus + .form-icon {
  border-color: #e85600; 
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.has-error .form-checkbox input:indeterminate + .form-icon,
.form-checkbox.is-error input:indeterminate + .form-icon {
  background: #e85600;
  border-color: #e85600;
}

.form-input:not(:-ms-input-placeholder):invalid {
  border-color: #e85600;
}

.form-input:not(:placeholder-shown):invalid {
  border-color: #e85600;
}

.form-input:not(:-ms-input-placeholder):invalid:focus {
  background: #fffaf7; 
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.form-input:not(:placeholder-shown):invalid:focus {
  background: #fffaf7; 
  box-shadow: 0 0 0 .1rem rgba(232, 86, 0, .1);
}

.form-input:not(:-ms-input-placeholder):invalid + .form-input-hint {
  color: #e85600;
}

.form-input:not(:placeholder-shown):invalid + .form-input-hint {
  color: #e85600;
}

.form-input:disabled,
.form-input.disabled,
.form-select:disabled,
.form-select.disabled {
  background-color: #f0f0f0;
  cursor: not-allowed;
  opacity: .5;
}

.form-input[readonly] {
  background-color: #f8f8f8;
}

input:disabled + .form-icon,
input.disabled + .form-icon {
  background: #f0f0f0;
  cursor: not-allowed;
  opacity: .5;
}

.form-switch input:disabled + .form-icon::before,
.form-switch input.disabled + .form-icon::before {
  background: white;
}

.form-horizontal {
  padding: .4rem 0;
}

.form-horizontal .form-group {
  display: flex;
  flex-wrap: wrap;
}

.form-inline {
  display: inline-block;
}

.label {
  background: #f0f0f0;
  border-radius: .4rem;
  color: #3e3e3e;
  display: inline-block; 
  line-height: 1.25;
  padding: .1rem .2rem;
}

.label.label-rounded {
  border-radius: 5rem;
  padding-left: .4rem;
  padding-right: .4rem;
}

.label.label-primary {
  background: #e3514c;
  color: #fff;
}

.label.label-secondary {
  background: #fdf2f1;
  color: #e3514c;
}

.label.label-success {
  background: #32b643;
  color: #fff;
}

.label.label-warning {
  background: #ffb700;
  color: #fff;
}

.label.label-error {
  background: #e85600;
  color: #fff;
}

code {
  background: #fcf2f2;
  border-radius: .4rem;
  color: #d73e48;
  font-size: 85%; 
  line-height: 1.25;
  padding: .1rem .2rem;
}

.code {
  border-radius: .4rem;
  color: #313131;
  position: relative;
}

.code::before {
  color: #b0b0b0;
  content: attr(data-lang);
  font-size: .7rem;
  position: absolute;
  right: .4rem;
  top: .1rem;
}

.code code {
  background: #f8f8f8;
  color: inherit;
  display: block;
  line-height: 1.5;
  overflow-x: auto;
  padding: 1rem;
  width: 100%;
}

.img-responsive {
  display: block;
  height: auto;
  max-width: 100%;
}

.img-fit-cover {
  object-fit: cover;
}

.img-fit-contain {
  object-fit: contain;
}

.video-responsive {
  display: block;
  overflow: hidden;
  padding: 0;
  position: relative;
  width: 100%;
}

.video-responsive::before {
  content: "";
  display: block;
  padding-bottom: 56.25%;
}

.video-responsive iframe,
.video-responsive object,
.video-responsive embed {
  border: 0;
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
}

video.video-responsive {
  height: auto;
  max-width: 100%;
}

video.video-responsive::before {
  content: none;
}

.video-responsive-4-3::before {
  padding-bottom: 75%;
}

.video-responsive-1-1::before {
  padding-bottom: 100%;
}

.figure {
  margin: 0 0 .4rem 0;
}

.figure .figure-caption {
  color: #7d7d7d;
  margin-top: .4rem;
}

.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: .4rem;
  padding-right: .4rem;
  width: 100%;
}

.container.grid-xl {
  max-width: 1296px;
}

.container.grid-lg {
  max-width: 976px;
}

.container.grid-md {
  max-width: 856px;
}

.container.grid-sm {
  max-width: 616px;
}

.container.grid-xs {
  max-width: 496px;
}

.show-xs,
.show-sm,
.show-md,
.show-lg,
.show-xl {
  display: none !important;
}

.columns {
  display: flex;
  flex-wrap: wrap;
  margin-left: -.4rem;
  margin-right: -.4rem;
}

.columns.col-gapless {
  margin-left: 0;
  margin-right: 0;
}

.columns.col-gapless > .column {
  padding-left: 0;
  padding-right: 0;
}

.columns.col-oneline {
  flex-wrap: nowrap;
  overflow-x: auto;
}

.column {
  flex: 1;
  max-width: 100%;
  padding-left: .4rem;
  padding-right: .4rem;
}

.column.col-12,
.column.col-11,
.column.col-10,
.column.col-9,
.column.col-8,
.column.col-7,
.column.col-6,
.column.col-5,
.column.col-4,
.column.col-3,
.column.col-2,
.column.col-1,
.column.col-auto {
  flex: none;
}

.col-12 {
  width: 100%;
}

.col-11 {
  width: 91.66666667%;
}

.col-10 {
  width: 83.33333333%;
}

.col-9 {
  width: 75%;
}

.col-8 {
  width: 66.66666667%;
}

.col-7 {
  width: 58.33333333%;
}

.col-6 {
  width: 50%;
}

.col-5 {
  width: 41.66666667%;
}

.col-4 {
  width: 33.33333333%;
}

.col-3 {
  width: 25%;
}

.col-2 {
  width: 16.66666667%;
}

.col-1 {
  width: 8.33333333%;
}

.col-auto {
  flex: 0 0 auto;
  max-width: none;
  width: auto;
}

.col-mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.col-ml-auto {
  margin-left: auto;
}

.col-mr-auto {
  margin-right: auto;
}

@media (max-width: 1280px) {
  .col-xl-12,
  .col-xl-11,
  .col-xl-10,
  .col-xl-9,
  .col-xl-8,
  .col-xl-7,
  .col-xl-6,
  .col-xl-5,
  .col-xl-4,
  .col-xl-3,
  .col-xl-2,
  .col-xl-1,
  .col-xl-auto {
    flex: none;
  }
  .col-xl-12 {
    width: 100%;
  }
  .col-xl-11 {
    width: 91.66666667%;
  }
  .col-xl-10 {
    width: 83.33333333%;
  }
  .col-xl-9 {
    width: 75%;
  }
  .col-xl-8 {
    width: 66.66666667%;
  }
  .col-xl-7 {
    width: 58.33333333%;
  }
  .col-xl-6 {
    width: 50%;
  }
  .col-xl-5 {
    width: 41.66666667%;
  }
  .col-xl-4 {
    width: 33.33333333%;
  }
  .col-xl-3 {
    width: 25%;
  }
  .col-xl-2 {
    width: 16.66666667%;
  }
  .col-xl-1 {
    width: 8.33333333%;
  }
  .col-xl-auto {
    width: auto;
  }
  .hide-xl {
    display: none !important;
  }
  .show-xl {
    display: block !important;
  }
}

@media (max-width: 960px) {
  .col-lg-12,
  .col-lg-11,
  .col-lg-10,
  .col-lg-9,
  .col-lg-8,
  .col-lg-7,
  .col-lg-6,
  .col-lg-5,
  .col-lg-4,
  .col-lg-3,
  .col-lg-2,
  .col-lg-1,
  .col-lg-auto {
    flex: none;
  }
  .col-lg-12 {
    width: 100%;
  }
  .col-lg-11 {
    width: 91.66666667%;
  }
  .col-lg-10 {
    width: 83.33333333%;
  }
  .col-lg-9 {
    width: 75%;
  }
  .col-lg-8 {
    width: 66.66666667%;
  }
  .col-lg-7 {
    width: 58.33333333%;
  }
  .col-lg-6 {
    width: 50%;
  }
  .col-lg-5 {
    width: 41.66666667%;
  }
  .col-lg-4 {
    width: 33.33333333%;
  }
  .col-lg-3 {
    width: 25%;
  }
  .col-lg-2 {
    width: 16.66666667%;
  }
  .col-lg-1 {
    width: 8.33333333%;
  }
  .col-lg-auto {
    width: auto;
  }
  .hide-lg {
    display: none !important;
  }
  .show-lg {
    display: block !important;
  }
}

@media (max-width: 840px) {
  .col-md-12,
  .col-md-11,
  .col-md-10,
  .col-md-9,
  .col-md-8,
  .col-md-7,
  .col-md-6,
  .col-md-5,
  .col-md-4,
  .col-md-3,
  .col-md-2,
  .col-md-1,
  .col-md-auto {
    flex: none;
  }
  .col-md-12 {
    width: 100%;
  }
  .col-md-11 {
    width: 91.66666667%;
  }
  .col-md-10 {
    width: 83.33333333%;
  }
  .col-md-9 {
    width: 75%;
  }
  .col-md-8 {
    width: 66.66666667%;
  }
  .col-md-7 {
    width: 58.33333333%;
  }
  .col-md-6 {
    width: 50%;
  }
  .col-md-5 {
    width: 41.66666667%;
  }
  .col-md-4 {
    width: 33.33333333%;
  }
  .col-md-3 {
    width: 25%;
  }
  .col-md-2 {
    width: 16.66666667%;
  }
  .col-md-1 {
    width: 8.33333333%;
  }
  .col-md-auto {
    width: auto;
  }
  .hide-md {
    display: none !important;
  }
  .show-md {
    display: block !important;
  }
}

@media (max-width: 600px) {
  .col-sm-12,
  .col-sm-11,
  .col-sm-10,
  .col-sm-9,
  .col-sm-8,
  .col-sm-7,
  .col-sm-6,
  .col-sm-5,
  .col-sm-4,
  .col-sm-3,
  .col-sm-2,
  .col-sm-1,
  .col-sm-auto {
    flex: none;
  }
  .col-sm-12 {
    width: 100%;
  }
  .col-sm-11 {
    width: 91.66666667%;
  }
  .col-sm-10 {
    width: 83.33333333%;
  }
  .col-sm-9 {
    width: 75%;
  }
  .col-sm-8 {
    width: 66.66666667%;
  }
  .col-sm-7 {
    width: 58.33333333%;
  }
  .col-sm-6 {
    width: 50%;
  }
  .col-sm-5 {
    width: 41.66666667%;
  }
  .col-sm-4 {
    width: 33.33333333%;
  }
  .col-sm-3 {
    width: 25%;
  }
  .col-sm-2 {
    width: 16.66666667%;
  }
  .col-sm-1 {
    width: 8.33333333%;
  }
  .col-sm-auto {
    width: auto;
  }
  .hide-sm {
    display: none !important;
  }
  .show-sm {
    display: block !important;
  }
}

@media (max-width: 480px) {
  .col-xs-12,
  .col-xs-11,
  .col-xs-10,
  .col-xs-9,
  .col-xs-8,
  .col-xs-7,
  .col-xs-6,
  .col-xs-5,
  .col-xs-4,
  .col-xs-3,
  .col-xs-2,
  .col-xs-1,
  .col-xs-auto {
    flex: none;
  }
  .col-xs-12 {
    width: 100%;
  }
  .col-xs-11 {
    width: 91.66666667%;
  }
  .col-xs-10 {
    width: 83.33333333%;
  }
  .col-xs-9 {
    width: 75%;
  }
  .col-xs-8 {
    width: 66.66666667%;
  }
  .col-xs-7 {
    width: 58.33333333%;
  }
  .col-xs-6 {
    width: 50%;
  }
  .col-xs-5 {
    width: 41.66666667%;
  }
  .col-xs-4 {
    width: 33.33333333%;
  }
  .col-xs-3 {
    width: 25%;
  }
  .col-xs-2 {
    width: 16.66666667%;
  }
  .col-xs-1 {
    width: 8.33333333%;
  }
  .col-xs-auto {
    width: auto;
  }
  .hide-xs {
    display: none !important;
  }
  .show-xs {
    display: block !important;
  }
}

.hero {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding-bottom: 4rem;
  padding-top: 4rem;
}

.hero.hero-sm {
  padding-bottom: 2rem;
  padding-top: 2rem;
}

.hero.hero-lg {
  padding-bottom: 8rem;
  padding-top: 8rem;
}

.hero .hero-body {
  padding: .4rem;
}

.navbar {
  align-items: stretch;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

.navbar .navbar-section {
  align-items: center;
  display: flex;
  flex: 1 0 0;
}

.navbar .navbar-section:not(:first-child):last-child {
  justify-content: flex-end;
}

.navbar .navbar-center {
  align-items: center;
  display: flex;
  flex: 0 0 auto;
}

.navbar .navbar-brand {
  font-size: .9rem;
  text-decoration: none;
}

.accordion input:checked ~ .accordion-header .icon,
.accordion[open] .accordion-header .icon {
  transform: rotate(90deg);
}

.accordion input:checked ~ .accordion-body,
.accordion[open] .accordion-body {
  max-height: 50rem;
}

.accordion .accordion-header {
  display: block;
  padding: .2rem .4rem;
}

.accordion .accordion-header .icon {
  transition: transform .25s;
}

.accordion .accordion-body {
  margin-bottom: .4rem;
  max-height: 0;
  overflow: hidden;
  transition: max-height .25s;
}

summary.accordion-header::-webkit-details-marker {
  display: none;
}

.avatar {
  background: #e3514c;
  border-radius: 50%;
  color: rgba(255, 255, 255, .85);
  display: inline-block;
  font-size: .8rem;
  font-weight: 300;
  height: 1.6rem;
  line-height: 1.25;
  margin: 0;
  position: relative;
  vertical-align: middle; 
  width: 1.6rem;
}

.avatar.avatar-xs {
  font-size: .4rem;
  height: .8rem;
  width: .8rem;
}

.avatar.avatar-sm {
  font-size: .6rem;
  height: 1.2rem;
  width: 1.2rem;
}

.avatar.avatar-lg {
  font-size: 1.2rem;
  height: 2.4rem;
  width: 2.4rem;
}

.avatar.avatar-xl {
  font-size: 1.6rem;
  height: 3.2rem;
  width: 3.2rem;
}

.avatar img {
  border-radius: 50%;
  height: 100%;
  position: relative;
  width: 100%;
  z-index: 1;
}

.avatar .avatar-icon,
.avatar .avatar-presence {
  background: white;
  bottom: 14.64%;
  height: 50%;
  padding: .1rem;
  position: absolute;
  right: 14.64%;
  transform: translate(50%, 50%);
  width: 50%;
  z-index: 2;
}

.avatar .avatar-presence {
  background: #b0b0b0;
  border-radius: 50%;
  box-shadow: 0 0 0 .1rem #fff;
  height: .5em;
  width: .5em;
}

.avatar .avatar-presence.online {
  background: #32b643;
}

.avatar .avatar-presence.busy {
  background: #e85600;
}

.avatar .avatar-presence.away {
  background: #ffb700;
}

.avatar[data-initial]::before {
  color: currentColor;
  content: attr(data-initial);
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 1;
}

.badge {
  position: relative;
  white-space: nowrap;
}

.badge[data-badge]::after,
.badge:not([data-badge])::after {
  background: #e3514c;
  background-clip: padding-box;
  border-radius: .5rem;
  box-shadow: 0 0 0 .1rem white;
  color: #fff;
  content: attr(data-badge);
  display: inline-block;
  transform: translate(-.05rem, -.5rem);
}

.badge[data-badge]::after {
  font-size: .7rem;
  height: .9rem;
  line-height: 1;
  min-width: .9rem;
  padding: .1rem .2rem;
  text-align: center;
  white-space: nowrap;
}

.badge:not([data-badge])::after,
.badge[data-badge=""]::after {
  height: 6px;
  min-width: 6px;
  padding: 0;
  width: 6px;
}

.badge.btn::after {
  position: absolute;
  right: 0;
  top: 0;
  transform: translate(50%, -50%);
}

.badge.avatar::after {
  position: absolute;
  right: 14.64%;
  top: 14.64%;
  transform: translate(50%, -50%);
  z-index: 100;
}

.breadcrumb {
  list-style: none;
  margin: .2rem 0;
  padding: .2rem 0;
}

.breadcrumb .breadcrumb-item {
  color: #7d7d7d;
  display: inline-block;
  margin: 0;
  padding: .2rem 0;
}

.breadcrumb .breadcrumb-item:not(:last-child) {
  margin-right: .2rem;
}

.breadcrumb .breadcrumb-item:not(:last-child) a {
  color: #7d7d7d;
}

.breadcrumb .breadcrumb-item:not(:first-child)::before {
  color: #7d7d7d;
  content: "/";
  padding-right: .4rem;
}

.bar {
  background: #f0f0f0;
  border-radius: .4rem;
  display: flex;
  flex-wrap: nowrap;
  height: .8rem;
  width: 100%;
}

.bar.bar-sm {
  height: .2rem;
}

.bar .bar-item {
  background: #e3514c;
  color: #fff;
  display: block;
  flex-shrink: 0;
  font-size: .7rem;
  height: 100%;
  line-height: .8rem;
  position: relative;
  text-align: center;
  width: 0;
}

.bar .bar-item:first-child {
  border-bottom-left-radius: .4rem;
  border-top-left-radius: .4rem;
}

.bar .bar-item:last-child {
  border-bottom-right-radius: .4rem;
  border-top-right-radius: .4rem;
  flex-shrink: 1;
}

.bar-slider {
  height: .1rem;
  margin: .4rem 0;
  position: relative;
}

.bar-slider .bar-item {
  left: 0;
  padding: 0;
  position: absolute;
}

.bar-slider .bar-item:not(:last-child):first-child {
  background: #f0f0f0;
  z-index: 1;
}

.bar-slider .bar-slider-btn {
  background: #e3514c;
  border: 0;
  border-radius: 50%;
  height: .6rem;
  padding: 0;
  position: absolute;
  right: 0;
  top: 50%;
  transform: translate(50%, -50%);
  width: .6rem;
}

.bar-slider .bar-slider-btn:active {
  box-shadow: 0 0 0 .1rem #e3514c;
}

.card {
  background: white;
  border: .05rem solid #e5e5e5;
  border-radius: .4rem;
  display: flex;
  flex-direction: column;
}

.card .card-header,
.card .card-body,
.card .card-footer {
  padding: .8rem;
  padding-bottom: 0;
}

.card .card-header:last-child,
.card .card-body:last-child,
.card .card-footer:last-child {
  padding-bottom: .8rem;
}

.card .card-body {
  flex: 1 1 auto;
}

.card .card-image {
  padding-top: .8rem;
}

.card .card-image:first-child {
  padding-top: 0;
}

.card .card-image:first-child img {
  border-top-left-radius: .4rem;
  border-top-right-radius: .4rem;
}

.card .card-image:last-child img {
  border-bottom-left-radius: .4rem;
  border-bottom-right-radius: .4rem;
}

.chip {
  align-items: center;
  background: #f0f0f0;
  border-radius: 5rem;
  display: inline-flex;
  font-size: 90%;
  height: 1.2rem;
  line-height: .8rem;
  margin: .1rem;
  max-width: 320px;
  overflow: hidden;
  padding: .2rem .4rem;
  text-decoration: none;
  text-overflow: ellipsis;
  vertical-align: middle;
  white-space: nowrap;
}

.chip.active {
  background: #e3514c;
  color: #fff;
}

.chip .avatar {
  margin-left: -.4rem;
  margin-right: .2rem;
}

.chip .btn-clear {
  border-radius: 50%;
  transform: scale(.75);
}

.dropdown {
  display: inline-block;
  position: relative;
}

.dropdown .menu {
  -webkit-animation: slide-down .15s ease 1;
  animation: slide-down .15s ease 1;
  display: none;
  left: 0;
  max-height: 50vh;
  overflow-y: auto;
  position: absolute;
  top: 90%;
}

.dropdown.dropdown-right .menu {
  left: auto;
  right: 0;
}

.dropdown:focus .menu,
.dropdown:hover .menu,
.dropdown.active .menu,
.dropdown .dropdown-toggle:focus + .menu,
.dropdown .menu:hover {
  display: block;
}

.dropdown .btn-group .dropdown-toggle:nth-last-child(2) {
  border-bottom-right-radius: .4rem;
  border-top-right-radius: .4rem;
}

.empty {
  border-radius: .4rem;
  color: #2c2c2c;
  padding: 1.6rem 1.6rem; 
  text-align: center;
}

.empty .empty-icon {
  font-size: 3rem;
  margin-bottom: .8rem;
}

.empty .empty-title,
.empty .empty-subtitle {
  margin: .4rem auto;
}

.empty .empty-action {
  margin-top: .8rem;
}

.markdown {
  font-size: .8rem;
  font-weight: 400;
  line-height: 1.4rem;
  text-align: justify;
  word-break: break-word;
}

.markdown > :first-child {
  margin-top: 0;
}

.markdown h1,
.markdown h2,
.markdown h3,
.markdown h4,
.markdown h5,
.markdown h6 {
  font-weight: 700;
  line-height: 1.5;
  margin-bottom: 1.2rem;
  margin-top: .4rem;
}

.markdown h1 + hr,
.markdown h2 + hr,
.markdown h3 + hr,
.markdown h4 + hr,
.markdown h5 + hr,
.markdown h6 + hr {
  margin-top: -.4rem;
}

.markdown h1 {
  font-size: 28px;
}

.markdown h2 {
  font-size: 24px;
}

.markdown h3 {
  font-size: 22px;
}

.markdown h4 {
  font-size: 20px;
}

.markdown h5 {
  font-size: 18px;
}

.markdown h6 {
  font-size: 16px;
}

.markdown p {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  margin: 0 0 1.6rem;
}

.markdown a {
  border-bottom: .05rem solid currentColor;
  font-weight: 500;
  padding-bottom: .1rem;
}

.markdown a:focus,
.markdown a:hover,
.markdown a:active {
  text-decoration: none;
}

.markdown a,
.markdown ins,
.markdown u {
  -webkit-text-decoration-skip: ink edges;
  text-decoration-skip: ink edges;
}

.markdown del + del,
.markdown del + s,
.markdown ins + ins,
.markdown ins + u,
.markdown s + del,
.markdown s + s,
.markdown u + ins,
.markdown u + u {
  margin-left: .125em;
}

.markdown hr {
  background: #e5e5e5;
  border: none;
  display: block;
  height: 1px;
  margin: .4rem 0 1.2rem;
  overflow: hidden;
}

.markdown hr::after {
  clear: both;
  content: "";
  display: table;
}

.markdown ul,
.markdown ol {
  margin: 1.6rem 0 1.6rem 1.6rem;
  padding: 0;
}

.markdown ul ul,
.markdown ul ol,
.markdown ol ul,
.markdown ol ol {
  margin: .8rem 0 .8rem 1.6rem;
}

.markdown ul li,
.markdown ol li {
  margin-top: .4rem;
}

.markdown ul li > p,
.markdown ol li > p {
  display: inline;
}

.markdown ul {
  list-style: disc inside;
}

.markdown ul ul {
  list-style-type: circle;
}

.markdown ul > li > ul > li > ul {
  display: none;
}

.markdown ol {
  list-style: decimal inside;
}

.markdown ol ol {
  list-style-type: lower-alpha;
}

.markdown img {
  border: 0;
  display: block;
  height: auto;
  margin: 1rem auto;
  max-width: 100%;
}

.markdown img + em {
  color: #7d7d7d;
  display: inline-block;
  font-size: .7rem;
  text-align: center;
  width: 100%;
}

.markdown img.emojione {
  display: inline;
  height: 1rem;
  margin: 0;
  vertical-align: -10%;
  width: 1rem;
}

.markdown blockquote {
  border-left: .2rem solid #7d7d7d;
  margin: 1.6rem 0;
  padding: .8rem 1.6rem;
}

.markdown blockquote:empty {
  display: none;
}

.markdown blockquote p:last-child {
  margin-bottom: 0;
}

.markdown table {
  border-collapse: collapse;
  border-spacing: 0;
  display: block;
  font-size: .7rem;
  margin: 1.6rem 0;
  overflow-x: auto;
  padding-bottom: .75rem;
  text-align: left;
  white-space: nowrap;
  width: 100%;
}

.markdown table tbody tr:nth-of-type(odd) {
  background: #f8f8f8;
}

.markdown table td,
.markdown table th {
  border-bottom: 1px solid #242424;
  padding: .8rem; 
  width: 20%;
}

.markdown table th {
  border-bottom-width: 2px;
}

.markdown code {
  background: #f8f8f8;
  color: #d73e48;
  font-family: "SF Mono", "Segoe UI Mono", "Roboto Mono", Menlo, Courier, monospace;
  font-size: .9em;
  padding: .2em;
}

.markdown pre {
  background: #f8f8f8;
  margin: 1.6rem 0;
  overflow-x: auto;
  padding: .4rem .8rem;
}

.markdown .codehilite {
  font-size: .9em;
  line-height: 1.8;
}

.menu {
  background: white;
  border-radius: .4rem;
  box-shadow: 0 .05rem .2rem rgba(36, 36, 36, .3);
  list-style: none;
  margin: 0;
  min-width: 180px;
  padding: .4rem;
  transform: translateY(.2rem);
  z-index: 300;
}

.menu.menu-nav {
  background: transparent;
  box-shadow: none;
}

.menu .menu-item {
  margin-top: 0;
  padding: 0 .4rem;
  position: relative;
  text-decoration: none;
}

.menu .menu-item > a {
  border-radius: .4rem;
  color: inherit;
  display: block;
  margin: 0 -.4rem;
  padding: .2rem .4rem;
  text-decoration: none;
}

.menu .menu-item > a:focus,
.menu .menu-item > a:hover {
  background: #fdf2f1;
  color: #e3514c;
}

.menu .menu-item > a:active,
.menu .menu-item > a.active {
  background: #fdf2f1;
  color: #e3514c;
}

.menu .menu-item .form-checkbox,
.menu .menu-item .form-radio,
.menu .menu-item .form-switch {
  margin: .1rem 0;
}

.menu .menu-item + .menu-item {
  margin-top: .2rem;
}

.menu .menu-badge {
  align-items: center;
  display: flex;
  height: 100%;
  position: absolute;
  right: 0;
  top: 0;
}

.menu .menu-badge .label {
  margin-right: .4rem;
}

.modal {
  align-items: center;
  bottom: 0;
  display: none;
  justify-content: center;
  left: 0;
  opacity: 0;
  overflow: hidden;
  padding: .4rem;
  position: fixed;
  right: 0;
  top: 0;
}

.modal:target,
.modal.active {
  display: flex;
  opacity: 1;
  z-index: 400;
}

.modal:target .modal-overlay,
.modal.active .modal-overlay {
  background: rgba(248, 248, 248, .75);
  bottom: 0;
  cursor: default;
  display: block;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

.modal:target .modal-container,
.modal.active .modal-container {
  -webkit-animation: slide-down .2s ease 1;
  animation: slide-down .2s ease 1;
  z-index: 1;
}

.modal.modal-sm .modal-container {
  max-width: 320px;
  padding: 0 .4rem;
}

.modal.modal-lg .modal-overlay {
  background: white;
}

.modal.modal-lg .modal-container {
  box-shadow: none;
  max-width: 960px;
}

.modal-container {
  background: white;
  border-radius: .4rem;
  box-shadow: 0 .2rem .5rem rgba(36, 36, 36, .3);
  display: flex;
  flex-direction: column;
  max-height: 75vh;
  max-width: 640px;
  padding: 0 .8rem;
  width: 100%;
}

.modal-container.modal-fullheight {
  max-height: 100vh;
}

.modal-container .modal-header {
  color: #242424;
  padding: .8rem;
}

.modal-container .modal-body {
  overflow-y: auto;
  padding: .8rem;
  position: relative;
}

.modal-container .modal-footer {
  padding: .8rem;
  text-align: right;
}

.nav {
  display: flex;
  flex-direction: column;
  list-style: none;
  margin: .2rem 0;
}

.nav .nav-item a {
  color: #7d7d7d;
  padding: .2rem .4rem;
  text-decoration: none;
}

.nav .nav-item a:focus,
.nav .nav-item a:hover {
  color: #e3514c;
}

.nav .nav-item.active > a {
  color: #646464;
  font-weight: bold;
}

.nav .nav-item.active > a:focus,
.nav .nav-item.active > a:hover {
  color: #e3514c;
}

.nav .nav {
  margin-bottom: .4rem;
  margin-left: .8rem;
}

.pagination {
  display: flex;
  list-style: none;
  margin: .2rem 0;
  padding: .2rem 0;
}

.pagination .page-item {
  margin: .2rem .05rem;
}

.pagination .page-item span {
  display: inline-block;
  padding: .2rem .2rem;
}

.pagination .page-item a {
  border-radius: .4rem;
  display: inline-block;
  padding: .2rem .4rem;
  text-decoration: none;
}

.pagination .page-item a:focus,
.pagination .page-item a:hover {
  color: #e3514c;
}

.pagination .page-item.disabled a {
  cursor: default;
  opacity: .5;
  pointer-events: none;
}

.pagination .page-item.active a {
  background: #e3514c;
  color: #fff;
}

.pagination .page-item.page-prev,
.pagination .page-item.page-next {
  flex: 1 0 50%;
}

.pagination .page-item.page-next {
  text-align: right;
}

.pagination .page-item .page-item-title {
  margin: 0;
}

.pagination .page-item .page-item-subtitle {
  margin: 0;
  opacity: .5;
}

.panel {
  border: .05rem solid #e5e5e5;
  border-radius: .4rem;
  display: flex;
  flex-direction: column;
}

.panel .panel-header,
.panel .panel-footer {
  flex: 0 0 auto;
  padding: .8rem;
}

.panel .panel-nav {
  flex: 0 0 auto;
}

.panel .panel-body {
  flex: 1 1 auto;
  overflow-y: auto;
  padding: 0 .8rem;
}

.popover {
  display: inline-block;
  position: relative;
}

.popover .popover-container {
  left: 50%;
  opacity: 0;
  padding: .4rem;
  position: absolute;
  top: 0;
  transform: translate(-50%, -50%) scale(0);
  transition: transform .2s;
  width: 320px;
  z-index: 300;
}

.popover *:focus + .popover-container,
.popover:hover .popover-container {
  display: block;
  opacity: 1;
  transform: translate(-50%, -100%) scale(1);
}

.popover.popover-right .popover-container {
  left: 100%;
  top: 50%;
}

.popover.popover-right *:focus + .popover-container,
.popover.popover-right:hover .popover-container {
  transform: translate(0, -50%) scale(1);
}

.popover.popover-bottom .popover-container {
  left: 50%;
  top: 100%;
}

.popover.popover-bottom *:focus + .popover-container,
.popover.popover-bottom:hover .popover-container {
  transform: translate(-50%, 0) scale(1);
}

.popover.popover-left .popover-container {
  left: 0;
  top: 50%;
}

.popover.popover-left *:focus + .popover-container,
.popover.popover-left:hover .popover-container {
  transform: translate(-100%, -50%) scale(1);
}

.popover .card {
  border: 0; 
  box-shadow: 0 .2rem .5rem rgba(36, 36, 36, .3);
}

.step {
  display: flex;
  flex-wrap: nowrap;
  list-style: none;
  margin: .2rem 0;
  width: 100%;
}

.step .step-item {
  flex: 1 1 0;
  margin-top: 0;
  min-height: 1rem;
  position: relative; 
  text-align: center;
}

.step .step-item:not(:first-child)::before {
  background: #e3514c;
  content: "";
  height: 2px;
  left: -50%;
  position: absolute;
  top: 9px;
  width: 100%;
}

.step .step-item a {
  color: #e3514c;
  display: inline-block;
  padding: 20px 10px 0;
  text-decoration: none;
}

.step .step-item a::before {
  background: #e3514c;
  border: .1rem solid #fff;
  border-radius: 50%;
  content: "";
  display: block;
  height: .6rem;
  left: 50%;
  position: absolute;
  top: .2rem;
  transform: translateX(-50%);
  width: .6rem;
  z-index: 1;
}

.step .step-item.active a::before {
  background: #fff;
  border: .1rem solid #e3514c;
}

.step .step-item.active ~ .step-item::before {
  background: #e5e5e5;
}

.step .step-item.active ~ .step-item a {
  color: #b0b0b0;
}

.step .step-item.active ~ .step-item a::before {
  background: #e5e5e5;
}

.tab {
  align-items: center;
  border-bottom: .05rem solid transparent;
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: .2rem 0 .15rem 0;
}

.tab .tab-item {
  border-bottom: .1rem solid transparent;
  color: #b0b0b0;
  cursor: pointer;
  display: block;
  font-size: .8rem;
  margin: 0 .4rem;
  padding: .4rem .2rem .3rem .2rem;
  text-align: center;
  text-decoration: none;
  width: 4rem;
}

.tab .tab-item:focus,
.tab .tab-item:hover {
  color: #7d7d7d;
}

.tab .tab-item.active {
  border-bottom-color: #242424;
  color: #242424;
  font-weight: 700;
}

.tile {
  align-content: space-between;
  align-items: flex-start;
  display: flex;
}

.tile .tile-icon,
.tile .tile-action {
  flex: 0 0 auto;
}

.tile .tile-content {
  flex: 1 1 auto;
}

.tile .tile-content:not(:first-child) {
  padding-left: .4rem;
}

.tile .tile-content:not(:last-child) {
  padding-right: .4rem;
}

.tile .tile-title,
.tile .tile-subtitle {
  line-height: 1.2rem;
}

.tile.tile-centered {
  align-items: center;
}

.tile.tile-centered .tile-content {
  overflow: hidden;
}

.tile.tile-centered .tile-title,
.tile.tile-centered .tile-subtitle {
  margin-bottom: 0; 
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.toast {
  background: rgba(36, 36, 36, .95);
  border: .05rem solid #242424;
  border-color: #242424;
  border-radius: .4rem;
  color: #fff;
  display: block;
  padding: .4rem;
  width: 100%;
}

.toast.toast-primary {
  background: rgba(227, 81, 76, .95);
  border-color: #e3514c;
}

.toast.toast-success {
  background: rgba(50, 182, 67, .95);
  border-color: #32b643;
}

.toast.toast-warning {
  background: rgba(255, 183, 0, .95);
  border-color: #ffb700;
}

.toast.toast-error {
  background: rgba(232, 86, 0, .95);
  border-color: #e85600;
}

.toast a {
  color: #fff;
  text-decoration: underline;
}

.toast a:focus,
.toast a:hover,
.toast a:active,
.toast a.active {
  opacity: .75;
}

.toast .btn-clear {
  margin: .1rem;
}

.toast p:last-child {
  margin-bottom: 0;
}

.tooltip {
  position: relative;
}

.tooltip::after {
  background: rgba(36, 36, 36, .95);
  border-radius: .4rem;
  bottom: 100%;
  color: #fff;
  content: attr(data-tooltip);
  display: block;
  font-size: .7rem;
  left: 50%;
  max-width: 320px;
  opacity: 0;
  overflow: hidden;
  padding: .2rem .4rem;
  pointer-events: none;
  position: absolute;
  text-overflow: ellipsis;
  transform: translate(-50%, .4rem);
  transition: opacity .2s, transform .2s;
  white-space: pre;
  z-index: 300;
}

.tooltip:focus::after,
.tooltip:hover::after {
  opacity: 1;
  transform: translate(-50%, -.2rem);
}

.tooltip[disabled],
.tooltip.disabled {
  pointer-events: auto;
}

.tooltip.tooltip-right::after {
  bottom: 50%;
  left: 100%;
  transform: translate(-.2rem, 50%);
}

.tooltip.tooltip-right:focus::after,
.tooltip.tooltip-right:hover::after {
  transform: translate(.2rem, 50%);
}

.tooltip.tooltip-bottom::after {
  bottom: auto;
  top: 100%;
  transform: translate(-50%, -.4rem);
}

.tooltip.tooltip-bottom:focus::after,
.tooltip.tooltip-bottom:hover::after {
  transform: translate(-50%, .2rem);
}

.tooltip.tooltip-left::after {
  bottom: 50%;
  left: auto;
  right: 100%;
  transform: translate(.4rem, 50%);
}

.tooltip.tooltip-left:focus::after,
.tooltip.tooltip-left:hover::after {
  transform: translate(-.2rem, 50%);
}

@-webkit-keyframes loading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes loading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@-webkit-keyframes slide-down {
  0% {
    opacity: 0;
    transform: translateY(-1.6rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-down {
  0% {
    opacity: 0;
    transform: translateY(-1.6rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.text-primary {
  color: #e3514c !important;
}

a.text-primary:focus,
a.text-primary:hover {
  color: #e03c36;
}

a.text-primary:visited {
  color: #e66662;
}

.text-secondary {
  color: #fbe5e4 !important;
}

a.text-secondary:focus,
a.text-secondary:hover {
  color: #f7cfce;
}

a.text-secondary:visited {
  color: #fefafa;
}

.text-gray {
  color: #b0b0b0 !important;
}

a.text-gray:focus,
a.text-gray:hover {
  color: #a4a4a4;
}

a.text-gray:visited {
  color: #bdbdbd;
}

.text-light {
  color: #fff !important;
}

a.text-light:focus,
a.text-light:hover {
  color: #f2f2f2;
}

a.text-light:visited {
  color: white;
}

.text-dark {
  color: #313131 !important;
}

a.text-dark:focus,
a.text-dark:hover {
  color: #242424;
}

a.text-dark:visited {
  color: #3e3e3e;
}

.text-success {
  color: #32b643 !important;
}

a.text-success:focus,
a.text-success:hover {
  color: #2da23c;
}

a.text-success:visited {
  color: #39c94b;
}

.text-warning {
  color: #ffb700 !important;
}

a.text-warning:focus,
a.text-warning:hover {
  color: #e6a500;
}

a.text-warning:visited {
  color: #ffbe1a;
}

.text-error {
  color: #e85600 !important;
}

a.text-error:focus,
a.text-error:hover {
  color: #cf4d00;
}

a.text-error:visited {
  color: #ff6003;
}

.bg-primary {
  background: #e3514c !important;
  color: #fff;
}

.bg-secondary {
  background: #fdf2f1 !important;
}

.bg-dark {
  background: #242424 !important;
  color: #fff;
}

.bg-gray {
  background: #f8f8f8 !important;
}

.bg-success {
  background: #32b643 !important;
  color: #fff;
}

.bg-warning {
  background: #ffb700 !important;
  color: #fff;
}

.bg-error {
  background: #e85600 !important;
  color: #fff;
}

.c-hand {
  cursor: pointer;
}

.c-move {
  cursor: move;
}

.c-zoom-in {
  cursor: zoom-in;
}

.c-zoom-out {
  cursor: zoom-out;
}

.c-not-allowed {
  cursor: not-allowed;
}

.c-auto {
  cursor: auto;
}

.d-block {
  display: block;
}

.d-inline {
  display: inline;
}

.d-inline-block {
  display: inline-block;
}

.d-flex {
  display: flex;
}

.d-inline-flex {
  display: inline-flex;
}

.d-none,
.d-hide {
  display: none !important;
}

.d-visible {
  visibility: visible;
}

.d-invisible {
  visibility: hidden;
}

.text-hide {
  background: transparent;
  border: 0;
  color: transparent;
  font-size: 0;
  line-height: 0;
  text-shadow: none;
}

.text-assistive {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.divider,
.divider-vert {
  display: block;
  position: relative;
}

.divider[data-content]::after,
.divider-vert[data-content]::after {
  background: white;
  color: #b0b0b0;
  content: attr(data-content);
  display: inline-block;
  font-size: .7rem;
  padding: 0 .4rem;
  transform: translateY(-.65rem);
}

.divider {
  border-top: .05rem solid #eaeaea;
  height: .05rem;
  margin: .4rem 0;
}

.divider[data-content] {
  margin: .8rem 0;
}

.divider-vert {
  display: block;
  padding: .8rem;
}

.divider-vert::before {
  border-left: .05rem solid #e5e5e5;
  bottom: .4rem;
  content: "";
  display: block;
  left: 50%;
  position: absolute;
  top: .4rem;
  transform: translateX(-50%);
}

.divider-vert[data-content]::after {
  left: 50%;
  padding: .2rem 0;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
}

.loading {
  color: currentColor !important;
  min-height: .8rem;
  pointer-events: none;
  position: relative;
}

.loading::after {
  -webkit-animation: loading .5s infinite linear;
  animation: loading .5s infinite linear;
  border: .1rem solid currentColor;
  border-radius: 50%;
  border-right-color: transparent;
  border-top-color: transparent;
  content: "";
  display: block;
  height: .8rem;
  left: 50%;
  margin-left: -.4rem;
  margin-top: -.4rem;
  position: absolute;
  top: 50%;
  width: .8rem;
  z-index: 1;
}

.loading.loading-lg {
  min-height: 2rem;
}

.loading.loading-lg::after {
  height: 1.6rem;
  margin-left: -.8rem;
  margin-top: -.8rem;
  width: 1.6rem;
}

.clearfix::after {
  clear: both;
  content: "";
  display: table;
}

.float-left {
  float: left !important;
}

.float-right {
  float: right !important;
}

.p-relative {
  position: relative !important;
}

.p-absolute {
  position: absolute !important;
}

.p-fixed {
  position: fixed !important;
}

.p-sticky {
  position: -webkit-sticky !important;
  position: sticky !important;
}

.p-centered {
  display: block;
  float: none;
  margin-left: auto;
  margin-right: auto;
}

.flex-centered {
  align-items: center;
  display: flex;
  justify-content: center;
}

.m-0 {
  margin: 0 !important;
}

.mb-0 {
  margin-bottom: 0 !important;
}

.ml-0 {
  margin-left: 0 !important;
}

.mr-0 {
  margin-right: 0 !important;
}

.mt-0 {
  margin-top: 0 !important;
}

.mx-0 {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.my-0 {
  margin-bottom: 0 !important;
  margin-top: 0 !important;
}

.m-1 {
  margin: .2rem !important;
}

.mb-1 {
  margin-bottom: .2rem !important;
}

.ml-1 {
  margin-left: .2rem !important;
}

.mr-1 {
  margin-right: .2rem !important;
}

.mt-1 {
  margin-top: .2rem !important;
}

.mx-1 {
  margin-left: .2rem !important;
  margin-right: .2rem !important;
}

.my-1 {
  margin-bottom: .2rem !important;
  margin-top: .2rem !important;
}

.m-2 {
  margin: .4rem !important;
}

.mb-2 {
  margin-bottom: .4rem !important;
}

.ml-2 {
  margin-left: .4rem !important;
}

.mr-2 {
  margin-right: .4rem !important;
}

.mt-2 {
  margin-top: .4rem !important;
}

.mx-2 {
  margin-left: .4rem !important;
  margin-right: .4rem !important;
}

.my-2 {
  margin-bottom: .4rem !important;
  margin-top: .4rem !important;
}

.p-0 {
  padding: 0 !important;
}

.pb-0 {
  padding-bottom: 0 !important;
}

.pl-0 {
  padding-left: 0 !important;
}

.pr-0 {
  padding-right: 0 !important;
}

.pt-0 {
  padding-top: 0 !important;
}

.px-0 {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

.py-0 {
  padding-bottom: 0 !important;
  padding-top: 0 !important;
}

.p-1 {
  padding: .2rem !important;
}

.pb-1 {
  padding-bottom: .2rem !important;
}

.pl-1 {
  padding-left: .2rem !important;
}

.pr-1 {
  padding-right: .2rem !important;
}

.pt-1 {
  padding-top: .2rem !important;
}

.px-1 {
  padding-left: .2rem !important;
  padding-right: .2rem !important;
}

.py-1 {
  padding-bottom: .2rem !important;
  padding-top: .2rem !important;
}

.p-2 {
  padding: .4rem !important;
}

.pb-2 {
  padding-bottom: .4rem !important;
}

.pl-2 {
  padding-left: .4rem !important;
}

.pr-2 {
  padding-right: .4rem !important;
}

.pt-2 {
  padding-top: .4rem !important;
}

.px-2 {
  padding-left: .4rem !important;
  padding-right: .4rem !important;
}

.py-2 {
  padding-bottom: .4rem !important;
  padding-top: .4rem !important;
}

.s-rounded {
  border-radius: .4rem;
}

.s-circle {
  border-radius: 50%;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.text-center {
  text-align: center;
}

.text-justify {
  text-align: justify;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-normal {
  font-weight: normal;
}

.text-bold {
  font-weight: bold;
}

.text-italic {
  font-style: italic;
}

.text-large {
  font-size: 1.2em;
}

.text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-clip {
  overflow: hidden;
  text-overflow: clip;
  white-space: nowrap;
}

.text-break {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  word-break: break-word;
  word-wrap: break-word;
}
'''
'''--- frontend/src/src/assets/img/icon-account.svg ---
<svg height="20" viewBox="0 0 20 20" width="20" xmlns="http://www.w3.org/2000/svg"><g style="stroke:#999;fill:none;fill-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-width:2" transform="translate(1 1)"><path d="m13.5 9c0-1.8200801-1.0963898-3.4609434-2.7779246-4.1574579-1.68153471-.6965145-3.61706493-.3115136-4.90405592.97547738-1.28699098 1.28699099-1.67199188 3.22252121-.97547738 4.90405592.6965145 1.6815348 2.3373778 2.7779246 4.1574579 2.7779246 2.4852814 0 4.5-2.0147186 4.5-4.5zm-4.5 4.5h-7.785c1.61008993 2.7756196 4.57619127 4.4840533 7.785 4.4840533 3.2088087 0 6.1749101-1.7084337 7.785-4.4840533z"/><path d="m0 9.00000013c.00000007-4.97056283 4.0294373-9 9-9s8.9999999 4.02943717 9 9"/></g></svg>
'''
'''--- frontend/src/src/assets/img/redpacket-cover.svg ---
<svg height="1467" viewBox="0 0 668 1467" width="668" xmlns="http://www.w3.org/2000/svg"><g fill="#eec88c" fill-rule="evenodd" transform="translate(0 49)"><path d="m454.561 344.36h-116.884c-5.918 0-10.731-4.82-10.731-10.73 0-2.16.634-4.23 1.831-6l.955-1.42-2.032-1.63h-46.663c-5.919 0-10.734-4.82-10.734-10.73 0-5.92 4.815-10.74 10.734-10.74h38.874c1.29 6.65 7.151 11.69 14.171 11.69h4.954v-3.71h-4.954c-5.917 0-10.732-4.81-10.732-10.73s4.815-10.73 10.732-10.73h38.661c5.916 0 10.733 4.81 10.733 10.73 0 .25-.011.49-.026.74l-.114 1.73 2.001.27 34.159.01c5.919 0 10.733 4.82 10.733 10.74 0 5.63-4.397 10.33-10.008 10.7l.247 3.71c4.155-.28 7.806-2.33 10.258-5.37h23.835c5.918 0 10.733 4.82 10.733 10.74 0 5.91-4.815 10.73-10.733 10.73m0-25.18h-21.652c.662-1.65 1.028-3.45 1.028-5.33 0-7.97-6.479-14.45-14.441-14.45h-32.341c-.494-7.52-6.771-13.48-14.412-13.48h-38.661c-7.64 0-13.898 5.97-14.393 13.48h-38.652c-7.964 0-14.443 6.48-14.443 14.45 0 7.96 6.479 14.44 14.443 14.44h43.218c-.672 1.68-1.019 3.49-1.019 5.34 0 7.96 6.478 14.44 14.441 14.44h116.884c7.963 0 14.441-6.48 14.441-14.44 0-7.97-6.478-14.45-14.441-14.45"/><path d="m450.283 862.272h-42.854l-1.861 1.505.876 1.295c1.099 1.63 1.681 3.533 1.681 5.508 0 5.434-4.421 9.855-9.856 9.855h-107.325c-5.435 0-9.856-4.421-9.856-9.855s4.421-9.855 9.856-9.855h21.885c2.251 2.792 5.605 4.669 9.419 4.924l.227-3.398c-5.153-.342-9.189-4.663-9.189-9.833 0-5.435 4.421-9.856 9.855-9.856h31.139l2.063-.266-.103-1.582c-.015-.224-.023-.452-.023-.68 0-5.433 4.421-9.856 9.856-9.856h35.499c5.435 0 9.854 4.423 9.854 9.856 0 5.432-4.419 9.854-9.854 9.854h-4.549v3.405h4.549c6.446 0 11.828-4.625 13.012-10.731h35.699c5.433 0 9.855 4.421 9.855 9.856 0 5.432-4.422 9.854-9.855 9.854m0-23.114h-35.494c-.454-6.905-6.2-12.386-13.217-12.386h-35.499c-7.019 0-12.778 5.479-13.233 12.386h-29.699c-7.312 0-13.26 5.948-13.26 13.26 0 1.726.335 3.38.944 4.902h-19.881c-7.312 0-13.262 5.947-13.262 13.26s5.95 13.262 13.262 13.262h107.325c7.314 0 13.261-5.949 13.261-13.262 0-1.696-.318-3.355-.934-4.901h39.687c7.31 0 13.26-5.95 13.26-13.261 0-7.312-5.95-13.26-13.26-13.26"/><path d="m245.76 589.412h-99.972l-1.944 1.569.914 1.355c1.149 1.701 1.757 3.691 1.757 5.754 0 5.676-4.618 10.294-10.294 10.294h-112.1053c-5.675 0-10.293-4.618-10.293-10.294s4.618-10.293 10.293-10.293h22.862c2.35 2.916 5.852 4.878 9.837 5.141l.236-3.549c-5.382-.359-9.597-4.87-9.597-10.271 0-5.677 4.619-10.294 10.294-10.294h32.525l2.159-.273-.112-1.662c-.016-.234-.024-.468-.024-.706 0-5.676 4.618-10.294 10.2933-10.294h37.081c5.676 0 10.294 4.618 10.294 10.294 0 5.677-4.618 10.294-10.294 10.294h-4.752v3.556h4.752c6.734 0 12.355-4.831 13.593-11.209h92.497c5.675 0 10.293 4.617 10.293 10.294s-4.618 10.294-10.293 10.294m0-24.145h-92.285c-.475-7.209-6.477-12.936-13.805-12.936h-37.081c-7.3293 0-13.3483 5.724-13.8213 12.936h-31.02c-7.638 0-13.851 6.212-13.851 13.851 0 1.803.35 3.531.987 5.12h-20.768c-7.637 0-13.851 6.214-13.851 13.852 0 7.637 6.214 13.851 13.851 13.851h112.1053c7.638 0 13.851-6.214 13.851-13.851 0-1.772-.333-3.503-.977-5.121h96.665c7.637 0 13.852-6.213 13.852-13.851 0-7.639-6.215-13.851-13.852-13.851"/><path d="m192.321 1086.767h-11.836c-.952-6.104-5.278-10.731-10.461-10.731h-3.655v3.405h3.655c4.368 0 7.922 4.42 7.922 9.854 0 5.433-3.554 9.854-7.922 9.854h-30.358c-4.368 0-7.923-4.421-7.923-9.854 0-.228.008-.453.018-.677l.085-1.585-1.567-.266h-58.2198c-4.367 0-7.921-4.423-7.921-9.855 0-5.171 3.245-9.49 7.385-9.833l-.181-3.399c-3.066.253-5.761 2.132-7.571 4.924h-36.75c-4.368 0-7.922-4.421-7.922-9.856s3.554-9.854 7.922-9.854h101.4668c4.369 0 7.923 4.419 7.923 9.854 0 1.976-.469 3.881-1.353 5.511l-.706 1.296 1.501 1.501h56.468c4.367 0 7.92 4.421 7.92 9.856 0 5.432-3.553 9.855-7.92 9.855m0-23.117h-53.926c.496-1.548.753-3.205.753-4.902 0-7.312-4.782-13.261-10.66-13.261h-101.4668c-5.878 0-10.66 5.949-10.66 13.261 0 7.314 4.782 13.261 10.66 13.261h35.139c-.489 1.522-.759 3.178-.759 4.903 0 7.311 4.781 13.261 10.658 13.261h56.9688c.365 6.905 4.997 12.384 10.638 12.384h30.358c5.64 0 10.259-5.479 10.624-12.384h11.673c5.878 0 10.658-5.95 10.658-13.261 0-7.312-4.78-13.262-10.658-13.262"/><path d="m645.636 709.007h-39.142v-20.571h-3.341v20.571h-39.142v8.444h81.625z"/><path d="m564.011 825.697h39.142v17.339c-2.905.745-5.054 3.372-5.054 6.506v27.292h5.551v-19.706h2.347v19.706h5.55v-27.292c0-3.134-2.151-5.761-5.053-6.506v-17.339h39.142v-8.442h-81.625z"/><path d="m645.325 741.452 5.521-9.565-5.521-9.563h-81.003l-5.523 9.563 5.523 9.565z"/><path d="m564.322 745.966-5.523 9.565 5.523 9.563h81.003l5.521-9.563-5.521-9.565z"/><path d="m564.322 769.609-5.523 9.565 5.523 9.563h81.003l5.521-9.563-5.521-9.565z"/><path d="m564.322 793.253-5.523 9.563 5.523 9.562h81.003l5.521-9.562-5.521-9.563z"/><path d="m298.692 371.41h-39.141v-20.57h-3.342v20.57h-39.141v8.45h81.624z"/><path d="m217.068 488.1h39.141v17.34c-2.906.743-5.055 3.372-5.055 6.506v27.291h5.552v-19.705h2.347v19.705h5.55v-27.291c0-3.134-2.151-5.763-5.052-6.506v-17.34h39.141v-8.442h-81.624z"/><path d="m298.383 403.85 5.52-9.56-5.52-9.56h-81.003l-5.523 9.56 5.523 9.56z"/><path d="m217.38 408.37-5.523 9.56 5.523 9.57h81.003l5.519-9.57-5.519-9.56z"/><path d="m217.38 432.01-5.523 9.57 5.523 9.56h81.003l5.519-9.56-5.519-9.57z"/><path d="m217.38 455.66-5.523 9.56 5.523 9.565h81.003l5.519-9.565-5.519-9.56z"/><path d="m492.185 534.195c-1.896-2.512-.187-7.004-.187-7.004s4.791-.418 6.685 2.095c1.901 2.512 1.983 5.648.186 7.005-1.794 1.353-4.786.417-6.684-2.096m16.979 16.32c2.666-2.009 6.23-2.379 10.021-1.361.078-5.206-2.077-11.456-6.324-17.086-7.455-9.868-27.51-13.079-27.51-13.079s-2.397 20.168 5.06 30.038c4.248 5.629 9.673 9.409 14.698 10.757.061-3.923 1.389-7.253 4.055-9.269"/><path d="m496.825 511.431s1.081-4.684 4.059-5.712c2.975-1.029 5.984-.139 6.718 1.986.735 2.126-1.083 4.684-4.058 5.711-2.976 1.029-6.719-1.985-6.719-1.985m34.649-2.642c-3.714-1.269-6.469-3.561-7.56-6.719-1.092-3.156-.337-6.66 1.801-9.95-4.924-1.685-11.54-1.568-18.202.733-11.691 4.043-20.942 22.125-20.942 22.125s18.438 8.509 30.13 4.472c6.666-2.306 11.937-6.293 14.773-10.661"/><path d="m483.062 490.68c2.25-.044 4.122 2.477 4.177 5.628.059 3.145-3.961 5.774-3.961 5.774s-4.122-2.477-4.181-5.627c-.058-3.146 1.716-5.732 3.965-5.775m.068 21.896s13.794-14.907 13.567-27.274c-.133-7.05-2.297-13.299-5.575-17.344-2.351 3.14-5.385 5.052-8.725 5.115-3.339.063-6.44-1.738-8.911-4.787-3.121 4.164-5.053 10.489-4.922 17.539.227 12.366 14.566 26.751 14.566 26.751"/><path d="m463.741 514.251c-3.012-.919-4.921-3.408-4.268-5.558.655-2.147 3.625-3.151 6.643-2.234 3.014.921 4.268 5.558 4.268 5.558s-3.632 3.152-6.643 2.234m-5.704-20.472c-6.744-2.055-13.357-1.927-18.217-.062 2.259 3.209 3.142 6.683 2.171 9.88-.975 3.196-3.645 5.588-7.309 6.993 2.996 4.257 8.413 8.05 15.159 10.104 11.832 3.602 29.944-5.588 29.944-5.588s-9.913-17.726-21.748-21.327"/><path d="m469.082 536.699c-1.842-1.287-1.877-4.424-.074-7.004 1.805-2.581 6.603-2.341 6.603-2.341s1.879 4.424.078 7.004c-1.809 2.587-4.764 3.631-6.607 2.341m12.075-17.629s-19.922 3.951-27.005 14.091c-4.041 5.782-5.961 12.109-5.688 17.307 3.753-1.155 7.328-.921 10.066.991s4.19 5.191 4.395 9.11c4.976-1.533 10.254-5.515 14.293-11.294 7.082-10.139 3.939-30.205 3.939-30.205"/><path d="m149.086 493.924c-1.897-2.512-.187-7.005-.187-7.005s4.79-.417 6.685 2.096c1.901 2.511 1.982 5.648.187 7.005-1.795 1.353-4.787.417-6.685-2.096m16.979 16.32c2.667-2.009 6.23-2.379 10.022-1.361.077-5.206-2.076-11.456-6.326-17.085-7.454-9.869-27.51-13.08-27.51-13.08s-2.395 20.168 5.06 30.038c4.249 5.629 9.674 9.409 14.7 10.756.06-3.922 1.388-7.252 4.054-9.268"/><path d="m153.727 471.161s1.08-4.684 4.059-5.711c2.975-1.03 5.985-.14 6.718 1.984.734 2.127-1.083 4.685-4.058 5.712-2.976 1.029-6.719-1.985-6.719-1.985m34.65-2.642c-3.715-1.269-6.469-3.559-7.562-6.719-1.091-3.16-.335-6.66 1.801-9.95-4.923-1.69-11.538-1.57-18.201.73-11.692 4.05-20.942 22.128-20.942 22.128s18.439 8.51 30.13 4.472c6.665-2.306 11.937-6.293 14.774-10.661"/><path d="m139.963 450.41c2.25-.04 4.121 2.48 4.178 5.63.058 3.14-3.963 5.77-3.963 5.77s-4.12-2.48-4.181-5.63c-.056-3.14 1.718-5.73 3.966-5.77m.07 21.896s13.792-14.906 13.565-27.276c-.132-7.05-2.297-13.3-5.574-17.34-2.353 3.14-5.385 5.05-8.725 5.11-3.339.07-6.44-1.74-8.911-4.78-3.123 4.16-5.055 10.48-4.923 17.53.228 12.37 14.568 26.756 14.568 26.756"/><path d="m120.643 473.98c-3.011-.919-4.921-3.408-4.267-5.558.655-2.148 3.625-3.152 6.643-2.234 3.013.921 4.267 5.558 4.267 5.558s-3.632 3.152-6.643 2.234m-5.704-20.47c-6.744-2.06-13.358-1.93-18.2165-.06 2.258 3.21 3.141 6.68 2.169 9.88-.974 3.191-3.644 5.584-7.307 6.988 2.996 4.258 8.413 8.051 15.1585 10.105 11.833 3.602 29.944-5.588 29.944-5.588s-9.913-17.725-21.748-21.325"/><path d="m125.983 496.428c-1.843-1.287-1.878-4.424-.074-7.004 1.805-2.581 6.603-2.341 6.603-2.341s1.878 4.425.077 7.004c-1.808 2.587-4.762 3.631-6.606 2.341m12.075-17.629s-19.921 3.951-27.006 14.091c-4.04 5.782-5.96 12.109-5.686 17.307 3.753-1.155 7.328-.922 10.066.991 2.738 1.912 4.19 5.191 4.395 9.11 4.975-1.533 10.254-5.515 14.292-11.294 7.082-10.139 3.939-30.205 3.939-30.205"/><path d="m611.554 287.83c-1.896-2.51-.187-7-.187-7s4.791-.42 6.685 2.09c1.902 2.51 1.985 5.65.188 7.01-1.794 1.35-4.786.41-6.686-2.1m16.98 16.32c2.666-2.01 6.231-2.38 10.023-1.36.077-5.21-2.077-11.46-6.327-17.08-7.453-9.88-27.51-13.09-27.51-13.09s-2.395 20.17 5.06 30.04c4.248 5.63 9.673 9.41 14.7 10.76.061-3.92 1.39-7.25 4.054-9.27"/><path d="m616.194 265.07s1.081-4.69 4.061-5.72c2.975-1.02 5.984-.13 6.718 1.99.733 2.13-1.084 4.69-4.058 5.71-2.978 1.03-6.721-1.98-6.721-1.98m34.652-2.64c-3.715-1.27-6.471-3.57-7.563-6.72-1.09-3.16-.336-6.66 1.801-9.95-4.923-1.69-11.538-1.57-18.202.73-11.691 4.04-20.94 22.12-20.94 22.12s18.438 8.51 30.128 4.48c6.666-2.31 11.938-6.3 14.776-10.66"/><path d="m602.433 244.32c2.25-.05 4.122 2.47 4.177 5.62.058 3.15-3.961 5.78-3.961 5.78s-4.122-2.48-4.183-5.63c-.056-3.15 1.717-5.73 3.967-5.77m.068 21.89s13.793-14.91 13.565-27.27c-.131-7.05-2.296-13.3-5.573-17.35-2.353 3.14-5.383 5.06-8.725 5.12-3.339.06-6.439-1.74-8.911-4.79-3.123 4.17-5.053 10.49-4.922 17.54.228 12.37 14.566 26.75 14.566 26.75"/><path d="m583.112 267.89c-3.014-.92-4.922-3.41-4.268-5.56.657-2.15 3.625-3.15 6.644-2.24 3.011.93 4.265 5.56 4.265 5.56s-3.63 3.15-6.641 2.24m-5.702-20.48c-6.748-2.05-13.36-1.92-18.221-.06 2.26 3.21 3.143 6.69 2.171 9.88-.975 3.2-3.644 5.59-7.306 7 2.995 4.25 8.412 8.05 15.158 10.1 11.832 3.6 29.944-5.59 29.944-5.59s-9.914-17.72-21.746-21.33"/><path d="m588.453 290.33c-1.844-1.28-1.879-4.42-.076-7 1.805-2.58 6.605-2.34 6.605-2.34s1.877 4.42.076 7c-1.807 2.59-4.762 3.63-6.605 2.34m12.074-17.62s-19.922 3.95-27.006 14.09c-4.039 5.78-5.96 12.11-5.685 17.3 3.752-1.15 7.327-.92 10.065.99 2.74 1.92 4.19 5.2 4.395 9.11 4.975-1.53 10.254-5.51 14.291-11.29 7.084-10.14 3.94-30.2 3.94-30.2"/><path d="m459.433 721.607-8.403-1.674-1.668 8.407 21.955 21.957z"/><path d="m475.886 717.351-7.124-4.761-4.759 7.124 11.883 28.687z"/><path d="m465.926 758.363-28.688-11.882-7.125 4.756 4.763 7.126z"/><path d="m507.358 728.337-1.672-8.404-8.401 1.674-11.884 28.686z"/><path d="m487.956 712.59-7.124 4.761v31.05l11.882-28.687z"/><path d="m517.587 741.91 1.672-8.403-8.406-1.67-21.955 21.956z"/><path d="m521.842 758.363 4.761-7.126-7.124-4.756-28.689 11.882z"/><path d="m434.874 763.307-4.761 7.124 7.124 4.759 28.689-11.883z"/><path d="m467.82 753.793-21.958-21.956-8.403 1.67 1.672 8.403z"/><path d="m480.832 804.319 7.124 4.761 4.759-7.126-11.883-28.687z"/><path d="m488.897 767.877 21.955 21.955 8.406-1.67-1.672-8.401z"/><path d="m497.285 800.062 8.401 1.67 1.672-8.401-21.957-21.955z"/><path d="m490.79 763.307 28.687 11.883 7.126-4.759-4.761-7.124z"/><path d="m449.361 793.331 1.668 8.401 8.403-1.67 11.884-28.685z"/><path d="m439.131 779.76-1.672 8.401 8.403 1.67 21.955-21.955z"/><path d="m468.762 809.08 7.124-4.761v-31.052l-11.883 28.687z"/><path d="m485.405 760.835c0-3.892-3.154-7.05-7.048-7.05-3.892 0-7.047 3.158-7.047 7.05 0 3.893 3.155 7.047 7.047 7.047 3.894 0 7.048-3.154 7.048-7.047"/><path d="m127.668 656.335 23.123 23.123-12.515-30.214-8.849-1.76zm25.641 26.893-26.601-26.601 2.023-10.183 10.181 2.026z"/><path d="m144.269 646.765 12.513 30.213v-32.702l-7.502-5.016zm13.397 34.656-14.395-34.756 5.766-8.63 8.629 5.767z"/><path d="m111.021 690.036h32.702l-30.214-12.517-7.503 5.014zm37.146.885h-37.618l-5.768-8.632 8.631-5.766z"/><path d="m181.771 649.245-12.514 30.214 23.124-23.123-1.758-8.851zm-15.03 33.979 14.394-34.753 10.182-2.026 2.023 10.181-.166.168z"/><path d="m163.267 644.276v32.7l12.514-30.213-5.01-7.503zm-.884 37.146v-37.62l8.633-5.767 5.763 8.63z"/><path d="m196.965 660.921-23.124 23.126 30.217-12.517 1.76-8.85zm-26.89 25.642 26.599-26.603 10.185 2.025-2.028 10.182z"/><path d="m176.325 690.036h32.7l5.017-7.503-7.502-5.014zm33.174.885h-37.618l34.757-14.398 8.629 5.766z"/><path d="m106.007 704.022 7.505 5.012 30.212-12.513h-32.703zm7.407 6.01-8.633-5.766 5.769-8.63h37.618z"/><path d="m115.993 671.531 30.212 12.515-23.123-23.124-8.85 1.758zm33.979 15.03-34.754-14.393-2.026-10.182 10.181-2.025.166.168z"/><path d="m163.267 742.281 7.504 5.014 5.01-7.504-12.514-30.213zm7.749 6.24-8.633-5.767v-37.62l14.396 34.753z"/><path d="m173.843 702.511 23.122 23.122 8.852-1.758-1.759-8.849zm22.831 24.081-.167-.166-26.432-26.431 34.756 14.394 2.026 10.18z"/><path d="m181.771 737.31 8.852 1.76 1.758-8.849-23.124-23.124zm9.546 2.801-10.182-2.028-14.394-34.754 26.599 26.6z"/><path d="m176.325 696.521 30.212 12.513 7.505-5.012-5.017-7.501zm30.311 13.511-34.755-14.396h37.618l5.768 8.63z"/><path d="m127.668 730.221 1.759 8.849 8.849-1.76 12.514-30.213zm1.063 9.89-2.023-10.182.167-.168 26.433-26.433-14.396 34.755z"/><path d="m114.229 723.876 8.854 1.758 23.122-23.122-30.215 12.514zm9.145 2.717-10.185-2.024 2.026-10.179 34.757-14.394z"/><path d="m144.269 739.791 5.011 7.504 7.502-5.014v-32.703zm4.768 8.73-5.766-8.633 14.395-34.754v37.62z"/><path d="m160.025 685.739c-4.157 0-7.54 3.382-7.54 7.538 0 4.159 3.383 7.54 7.54 7.54 4.156 0 7.538-3.381 7.538-7.54 0-4.156-3.382-7.538-7.538-7.538m0 15.961c-4.645 0-8.423-3.777-8.423-8.423 0-4.644 3.778-8.423 8.423-8.423s8.422 3.779 8.422 8.423c0 4.646-3.777 8.423-8.422 8.423"/><path d="m573.537 551.68-9.67-1.925-1.923 9.672 25.271 25.271z"/><path d="m592.475 546.781-8.2-5.479-5.478 8.201 13.678 33.014z"/><path d="m581.012 593.981-33.017-13.676-8.2 5.478 5.48 8.198z"/><path d="m628.697 559.426-1.925-9.671-9.672 1.925-13.674 33.014z"/><path d="m606.363 541.301-8.198 5.479v35.737l13.677-33.017z"/><path d="m640.467 575.045 1.927-9.671-9.676-1.921-25.268 25.269z"/><path d="m645.365 593.981 5.481-8.198-8.202-5.478-33.015 13.676z"/><path d="m545.274 599.672-5.479 8.198 8.2 5.478 33.016-13.676z"/><path d="m583.188 588.721-25.267-25.268-9.671 1.921 1.922 9.671z"/><path d="m598.165 646.873 8.198 5.48 5.48-8.203-13.678-33.014z"/><path d="m607.45 604.933 25.268 25.268 9.673-1.922-1.924-9.672z"/><path d="m617.101 641.973 9.672 1.925 1.925-9.672-25.271-25.269z"/><path d="m609.629 599.672 33.016 13.676 8.202-5.478-5.48-8.198z"/><path d="m561.944 634.226 1.923 9.672 9.67-1.925 13.678-33.016z"/><path d="m550.171 618.607-1.925 9.672 9.676 1.922 25.267-25.268z"/><path d="m584.274 652.353 8.2-5.48v-35.738l-13.678 33.015z"/><path d="m603.431 596.826c0-4.479-3.631-8.111-8.11-8.111-4.481 0-8.114 3.632-8.114 8.111s3.633 8.111 8.114 8.111c4.479 0 8.11-3.632 8.11-8.111"/><path d="m383.739 416.83h2.935v-11.35c.973-.54 1.603-1.57 1.603-2.69 0-1.69-1.377-3.07-3.069-3.07-1.694 0-3.07 1.38-3.07 3.07 0 1.12.63 2.15 1.601 2.69zm4.466 1.82 2.557 1.43 5.559-9.9h.041c1.109 0 2.133-.59 2.671-1.56.832-1.47.305-3.35-1.171-4.18-.46-.25-.977-.39-1.5-.39-1.111 0-2.138.6-2.679 1.57-.549.98-.506 2.19.081 3.13zm-8.862 1.43 2.558-1.43-5.56-9.9c.588-.94.631-2.15.083-3.13-.543-.97-1.57-1.57-2.68-1.57-.523 0-1.041.14-1.501.39-1.477.83-2 2.71-1.171 4.18.538.97 1.564 1.56 2.674 1.56h.038zm11.271 8.55c-1.668-1.06-3.582-1.61-5.563-1.61-1.977 0-3.886.55-5.55 1.61l-18.635-18.64c.889-12.65 11.461-22.53 24.185-22.53 12.733 0 23.307 9.88 24.19 22.55z"/><path d="m373.744 464.64c-1.109 0-2.134.6-2.672 1.563-.403.714-.5 1.543-.279 2.332.221.791.736 1.447 1.45 1.846.46.258.979.394 1.501.394 1.11 0 2.137-.6 2.68-1.567.549-.979.506-2.188-.083-3.128l5.56-9.9-2.559-1.44-5.558 9.9c-.014 0-.028 0-.04 0zm20.021 1.44c-.587.94-.631 2.149-.082 3.128.541.967 1.568 1.567 2.679 1.567.524 0 1.04-.136 1.5-.394.713-.399 1.23-1.055 1.45-1.846.224-.789.124-1.618-.279-2.332-.538-.963-1.561-1.563-2.671-1.563-.013 0-.027 0-.041 0l-5.558-9.9-2.558 1.44zm-10.333 3.271c-.973.532-1.603 1.564-1.603 2.688 0 1.692 1.376 3.07 3.067 3.07 1.695 0 3.072-1.378 3.072-3.07 0-1.124-.63-2.156-1.602-2.688v-11.351h-2.934zm1.62 18.015c-12.729-.002-23.301-9.88-24.186-22.536l18.631-18.63c1.666 1.05 3.577 1.61 5.555 1.61 1.985 0 3.897-.56 5.567-1.62l18.622 18.62c-.879 12.67-11.451 22.554-24.189 22.556z"/><path d="m402.384 431.7 1.436 2.56 9.901-5.56c.488.31 1.056.48 1.638.48.518 0 1.033-.14 1.49-.4.715-.4 1.231-1.05 1.452-1.84.222-.79.122-1.62-.277-2.34-.543-.96-1.57-1.56-2.681-1.56-.521 0-1.042.13-1.498.39-.981.55-1.571 1.61-1.563 2.71zm14.606 7.33c.535.98 1.566 1.61 2.689 1.61 1.693 0 3.069-1.38 3.069-3.07s-1.376-3.07-3.069-3.07c-1.123 0-2.154.63-2.687 1.6h-11.356v2.93zm-4.708 9.65c-.008 1.11.582 2.17 1.563 2.72.456.25.977.39 1.498.39 1.111 0 2.136-.6 2.681-1.57.399-.71.499-1.54.277-2.33-.221-.79-.737-1.45-1.452-1.85-.457-.25-.972-.39-1.49-.39-.582 0-1.15.17-1.638.47l-9.901-5.56-1.436 2.56zm-18.446-5.72c1.058-1.66 1.617-3.57 1.617-5.55s-.561-3.89-1.617-5.55l18.629-18.63c12.663.88 22.54 11.45 22.54 24.18s-9.875 23.3-22.533 24.19z"/><path d="m366.289 434.26 1.435-2.56-9.901-5.56c.013-1.1-.58-2.16-1.56-2.71-.458-.26-.976-.39-1.498-.39-1.112 0-2.137.6-2.68 1.57-.4.71-.499 1.54-.278 2.33s.738 1.44 1.452 1.84c.455.26.971.4 1.49.4.58 0 1.149-.17 1.638-.48zm-15.86-.07c-1.694 0-3.072 1.38-3.072 3.07s1.378 3.07 3.072 3.07c1.123 0 2.155-.63 2.685-1.6h11.356v-2.94h-11.356c-.53-.97-1.562-1.6-2.685-1.6zm4.32 11.46c-.521 0-1.035.14-1.491.39-.713.4-1.23 1.06-1.451 1.85s-.122 1.62.278 2.33c.543.97 1.568 1.57 2.68 1.57.522 0 1.04-.14 1.5-.39.978-.55 1.571-1.61 1.558-2.72l9.901-5.56-1.435-2.55-9.902 5.55c-.489-.3-1.058-.47-1.638-.47zm2.895 15.95c-12.663-.88-22.542-11.45-22.542-24.19 0-12.73 9.885-23.31 22.551-24.18l18.624 18.62c-1.063 1.67-1.622 3.58-1.622 5.56s.557 3.9 1.62 5.56z"/><path d="m169.88 961.683h2.199v-8.515c.731-.397 1.202-1.172 1.202-2.015 0-1.268-1.032-2.301-2.3-2.301-1.27 0-2.302 1.033-2.302 2.301 0 .842.471 1.617 1.201 2.015zm3.347 1.361 1.918 1.078 4.169-7.423h.028c.832 0 1.601-.448 2.006-1.17.622-1.107.226-2.513-.88-3.132-.344-.195-.734-.296-1.126-.296-.832 0-1.601.45-2.009 1.174-.411.734-.379 1.641.062 2.346zm-6.644 1.078 1.917-1.078-4.168-7.423c.442-.705.474-1.612.062-2.346-.408-.724-1.178-1.174-2.009-1.174-.393 0-.781.101-1.125.294-1.108.621-1.501 2.027-.88 3.134.405.722 1.173 1.17 2.005 1.17h.029zm8.45 6.411c-1.251-.796-2.684-1.213-4.17-1.213-1.482 0-2.913.416-4.163 1.21l-13.972-13.974c.667-9.489 8.593-16.894 18.135-16.894 9.546 0 17.475 7.409 18.137 16.904z"/><path d="m162.385 997.533c-.833 0-1.6.448-2.005 1.17-.301.534-.375 1.156-.208 1.748.166.594.552 1.084 1.088 1.385.344.193.732.296 1.125.296.831 0 1.602-.451 2.008-1.177.413-.734.381-1.64-.061-2.344l4.168-7.425-1.918-1.075-4.168 7.423c-.009-.001-.019-.001-.029-.001zm15.01 1.078c-.441.704-.474 1.61-.062 2.344.408.726 1.177 1.177 2.009 1.177.393 0 .782-.103 1.126-.296.535-.301.922-.791 1.09-1.385.166-.592.091-1.214-.21-1.748-.405-.722-1.174-1.17-2.004-1.17-.011 0-.021 0-.031.001l-4.168-7.423-1.918 1.075zm-7.747 2.453c-.73.398-1.202 1.172-1.202 2.014 0 1.269 1.033 2.303 2.301 2.303 1.27 0 2.302-1.034 2.302-2.303 0-.841-.472-1.616-1.201-2.014v-8.514h-2.2zm1.216 13.506c-9.545-.001-17.471-7.407-18.136-16.9l13.969-13.97c1.25.794 2.683 1.212 4.167 1.212 1.487 0 2.921-.42 4.172-1.215l13.965 13.962c-.659 9.499-8.588 16.91-18.137 16.911z"/><path d="m183.857 972.835 1.078 1.917 7.422-4.168c.367.23.793.355 1.229.355.389 0 .776-.102 1.118-.293.536-.302.923-.793 1.088-1.385.166-.593.091-1.213-.209-1.748-.407-.727-1.176-1.176-2.009-1.176-.392 0-.779.101-1.124.295-.734.412-1.179 1.202-1.169 2.034zm10.953 5.497c.4.729 1.174 1.201 2.016 1.201 1.269 0 2.301-1.032 2.301-2.302 0-1.268-1.032-2.3-2.301-2.3-.842 0-1.616.471-2.016 1.201h-8.514v2.2zm-3.529 7.232c-.01.833.435 1.623 1.17 2.036.342.192.731.296 1.123.296.833 0 1.602-.453 2.009-1.176.3-.536.375-1.157.209-1.75-.165-.591-.552-1.083-1.088-1.385-.342-.191-.729-.292-1.118-.292-.436 0-.862.124-1.229.353l-7.422-4.167-1.078 1.919zm-13.831-4.286c.793-1.249 1.209-2.681 1.209-4.162 0-1.484-.417-2.917-1.211-4.168l13.969-13.968c9.494.664 16.9 8.589 16.9 18.136 0 9.54-7.404 17.469-16.895 18.134z"/><path d="m156.792 974.752 1.078-1.917-7.424-4.169c.01-.832-.434-1.622-1.169-2.034-.342-.194-.731-.295-1.124-.295-.833 0-1.602.449-2.008 1.176-.301.535-.376 1.155-.208 1.748.165.592.55 1.083 1.087 1.384.341.192.728.294 1.118.294.435 0 .861-.125 1.228-.355zm-11.891-.053c-1.269 0-2.301 1.032-2.301 2.3 0 1.269 1.032 2.302 2.301 2.302.842 0 1.617-.472 2.016-1.201h8.513v-2.201h-8.513c-.399-.73-1.174-1.2-2.016-1.2zm3.241 8.594c-.39 0-.777.101-1.118.292-.537.302-.922.794-1.087 1.385-.168.593-.093 1.214.208 1.75.406.723 1.175 1.176 2.008 1.176.393 0 .782-.104 1.124-.296.735-.413 1.179-1.203 1.169-2.036l7.424-4.166-1.078-1.919-7.423 4.167c-.366-.229-.792-.353-1.227-.353zm2.171 11.96c-9.495-.663-16.903-8.589-16.903-18.137 0-9.551 7.411-17.478 16.909-18.137l13.964 13.963c-.796 1.252-1.217 2.686-1.217 4.174 0 1.485.419 2.918 1.215 4.168z"/><path d="m473.733 920.772h-2.582l-8.437 12.134c-.912-2.121-1.42-4.456-1.42-6.913 0-9.668 7.836-17.505 17.503-17.505.417 0 .832.021 1.244.049 1.553-8.074 8.654-14.174 17.183-14.174 2.737 0 5.327.628 7.635 1.75 4.547-7.666 12.901-12.806 22.46-12.806 14.416 0 26.103 11.687 26.103 26.102 0 11.75-7.763 21.683-18.441 24.959l11.445-16.462h-2.583l-11.957 17.2c-.984.175-1.984.295-3.002.355l12.205-17.555h-2.583l-12.218 17.576c-1.69-.066-3.339-.288-4.931-.661-1.024 8.69-8.411 15.431-17.377 15.431-.067 0-.132-.005-.198-.006l14.229-20.465h-2.582l-14.092 20.269c-.815-.123-1.611-.302-2.384-.535l13.721-19.734h-2.583l-13.192 18.974c-.698-.308-1.372-.665-2.018-1.059l12.456-17.915h-2.582l-11.612 16.7c-.597-.473-1.161-.982-1.693-1.528l10.551-15.172h-2.584l-9.394 13.512c-.49-.649-.936-1.331-1.333-2.045l7.974-11.467h-2.583l-8.612 12.386c-1.912.791-3.992 1.251-6.174 1.311l15.786-22.706h-2.581l-15.717 22.606c-.833-.095-1.648-.247-2.44-.455l15.402-22.151h-2.582l-14.915 21.453c-.713-.287-1.402-.621-2.064-.997l14.223-20.456h-2.581l-13.422 19.304c-.61-.451-1.189-.944-1.734-1.468l12.401-17.836h-2.583l-11.289 16.239c-.505-.624-.97-1.28-1.387-1.968z"/><path d="m638.708 919.92 12.139 6.638-12.139 6.635-6.636 12.135-6.639-12.135-12.133-6.635 12.133-6.638 6.639-12.137z"/><path d="m268.27 246.63 12.137 6.64-12.137 6.64-6.637 12.13-6.638-12.13-12.133-6.64 12.133-6.64 6.638-12.13z"/><path d="m179.871 845.548 12.137 6.638-12.137 6.637-6.636 12.136-6.639-12.136-12.135-6.637 12.135-6.638 6.639-12.137z"/><path d="m548.584 867.622 5.689 3.111-5.689 3.113-3.111 5.687-3.113-5.687-5.689-3.113 5.689-3.111 3.113-5.687z"/><path d="m333.006 515.098 5.098 2.788-5.098 2.788-2.787 5.096-2.789-5.096-5.097-2.788 5.097-2.788 2.789-5.097z"/><path d="m365.215 531.665 8.249 4.512-8.249 4.512-4.511 8.251-4.515-8.251-8.249-4.512 8.249-4.512 4.515-8.251z"/><path d="m59.4609 964.527 5.096 2.786-5.096 2.788-2.787 5.097-2.789-5.097-5.096-2.788 5.096-2.786 2.789-5.097z"/><path d="m91.6708 981.091 8.248 4.513-8.248 4.512-4.513 8.25-4.513-8.25-8.25-4.512 8.25-4.513 4.513-8.25z"/><path d="m242.359 630.743 6.937 3.794-6.937 3.793-3.792 6.936-3.796-6.936-6.933-3.793 6.933-3.794 3.796-6.935z"/><path d="m91.4394 644.426 6.937 3.794-6.937 3.794-3.793 6.934-3.795-6.934-6.935-3.794 6.935-3.794 3.795-6.936z"/><path d="m525.773 285.34 6.935 3.8-6.935 3.79-3.795 6.94-3.795-6.94-6.933-3.79 6.933-3.8 3.795-6.93z"/><path d="m463.927 388.5 6.935 3.79-6.935 3.8-3.793 6.93-3.795-6.93-6.935-3.8 6.935-3.79 3.795-6.94z"/><path d="m50.9599 481.453 9.438 5.164-9.438 5.161-5.162 9.44-5.163-9.44-9.439-5.161 9.439-5.164 5.163-9.437z"/><path d="m45.1334 469.004h1.327v-11.823h-1.327z"/><path d="m45.1334 516.051h1.327v-11.822h-1.327z"/><path d="m63.4104 487.28h11.822v-1.327h-11.822z"/><path d="m16.3614 487.28h11.822v-1.327h-11.822z"/><path d="m502.983 655.439 9.439 5.164-9.439 5.162-5.161 9.439-5.164-9.439-9.438-5.162 9.438-5.164 5.164-9.438z"/><path d="m497.014 642.954h1.324v-11.822h-1.324z"/><path d="m497.014 690.003h1.324v-11.821h-1.324z"/><path d="m515.289 661.229h11.821v-1.327h-11.821z"/><path d="m468.239 661.229h11.825v-1.327h-11.825z"/><path d="m326.747 255.12c0-4.05 3.294-7.35 7.346-7.35h100.848c1.677 2.08 4.177 3.49 7.02 3.67l.17-2.53c-3.841-.25-6.85-3.47-6.85-7.33 0-4.05 3.296-7.35 7.347-7.35l23.381-.01 1.369-.18-.078-1.18c-.011-.17-.018-.34-.018-.51 0-4.05 3.296-7.35 7.346-7.35h26.462c4.052 0 7.345 3.3 7.345 7.35s-3.293 7.35-7.345 7.35h-3.39v2.54h3.39c4.807 0 8.817-3.45 9.7-8.01h26.609c4.05 0 7.346 3.3 7.346 7.35s-3.296 7.35-7.346 7.35h-31.941l-1.391 1.11.654.97c.82 1.22 1.254 2.64 1.254 4.11 0 4.05-3.294 7.35-7.346 7.35h-164.536c-4.052 0-7.346-3.3-7.346-7.35"/><path d="m379.129 812.099h-129.129c-4.051 0-7.346-3.296-7.346-7.347 0-1.47.433-2.892 1.253-4.106l.655-.97-1.392-1.116h-70.571c-4.05 0-7.346-3.296-7.346-7.347 0-4.05 3.296-7.345 7.346-7.345h65.241c.882 4.551 4.892 8.002 9.698 8.002h3.39v-2.54h-3.39c-4.051 0-7.346-3.296-7.346-7.346s3.295-7.348 7.346-7.348h26.462c4.052 0 7.347 3.298 7.347 7.348 0 .17-.007.338-.018.504l-.077 1.183 1.368.186 23.381.011c4.052 0 7.347 3.295 7.347 7.345 0 3.855-3.009 7.074-6.85 7.331l.169 2.534c2.843-.19 5.344-1.59 7.021-3.671h65.441c4.054 0 7.348 3.297 7.348 7.345 0 4.051-3.294 7.347-7.348 7.347"/><path d="m667.207 157.95c0 13.26-10.747 24.01-24.009 24.01h-619.188c-13.259 0-24.01-10.75-24.01-24.01s10.751-24.01 24.01-24.01h619.188c13.262 0 24.009 10.75 24.009 24.01"/><path d="m667.207 1154.037c0 13.258-10.747 24.007-24.009 24.007h-619.188c-13.259 0-24.01-10.749-24.01-24.007 0-13.262 10.751-24.011 24.01-24.011h619.188c13.262 0 24.009 10.749 24.009 24.011"/><path d="m450.127 116.52h-6.243c0-60.81-49.472-110.28-110.279-110.28-60.811 0-110.282 49.47-110.282 110.28h-6.242c0-64.25 52.273-116.52 116.524-116.52s116.522 52.27 116.522 116.52"/><path d="m596.5 1043.014c-16.387 4.208-26.641 14.752-26.641 14.752 3.237 2.988 23.365-3.421 31.931-8.815-8.725 8.926-38.681 30.965-60.255 17.061 0 0 14.248-24.087 54.965-22.998m26.73 18.453c2.426-.463 4.75 1.044 5.191 3.363.441 2.321-1.167 4.576-3.591 5.037-2.425.462-4.748-1.045-5.189-3.365-.443-2.318 1.166-4.574 3.589-5.035m-98.052-44.96c-32.494 6.188-45.401 36.94-40.853 60.824.164.867.372 1.72.612 2.564-3.108 4.514-2.041 10.89 2.557 14.547 2.719 2.162 6.087 2.907 9.152 2.32 13.671 10.611 36.166 12.674 56.966-4.575 5.086-4.218 10.533-4.342 16.41-4.161 7.28 2.745 20.078 5.617 35.371.608 2.733-.896 5.502-4.179.653-5.806-2.1-.704-5.821-1.188-9.679-1.739 1.001-.823 2.014-1.741 3.036-2.765 5.234 2.892 11.416 4.163 17.298 3.042 14.443-2.749 27.129-17.627 25.494-26.218-2.8-14.706-19.084-28.909-33.837-28.273-.92.04-1.796.101-2.64.181-12.394-11.169-40.971-31.05-76.058-17.055 0 0 2.472 2.457 6.91 5.873-4.164-.192-8.016-.01-11.392.633"/><path d="m548.632 389.66c13.275 16.66 30.668 23.01 30.668 23.01 1.764-5.26-15.965-25.08-26.57-32.15 14.747 5.43 55.491 28.5 50.628 60.44 0 0-35.007-3.96-54.726-51.3m-27.551-10.29c-1.59-2.2-1.173-5.22.935-6.74 2.105-1.53 5.103-.97 6.694 1.23s1.169 5.22-.934 6.74c-2.107 1.52-5.104.97-6.695-1.23m107.816 109.33c14.634-17.731 20.279-45.29 2.737-69.57-10.356-14.34-36.587-28.52-59.29-36.65-.998-.36-1.989-.71-2.971-1.04 38.183 4.37 70.25-19.62 70.25-19.62-32.937-18.85-64.312-6.1-81.107 4.07-.402-.44-.814-.88-1.251-1.33-11.317-11.66-35.078-12.61-48.431-2.96-7.8 5.63-8.895 27.12.578 40.24.691.95 1.448 1.85 2.261 2.7-1.457-.65-2.758-1.18-3.794-1.46-5.423-1.51-4.922 3.19-2.981 5.69 7.546 9.72 16.339 15.23 23.795 18.35 6.584 14.29 21.278 16.91 23.004 31.05 4.733 38.782 36.997 53.113 59.27 44.473 4.125 3.821 10.304 4.466 14.799 1.218 4.711-3.404 5.946-9.903 3.131-15.161"/><path d="m91.1572 839.241s-26.596-9.149-33.769-49.452c7.461 15.28 19.915 23.239 19.915 23.239 2.286-3.789-8.098-22.308-15.141-29.646 10.553 6.781 38.3128 31.806 28.995 55.859m-60.354-26.963c-.312-.399-.624-.803-.935-1.208.329.14.659.279.992.409-.022.271-.039.533-.057.799m-7.968-23.418c-2.07 1.163-4.731.351-5.945-1.813-1.214-2.161-.521-4.858 1.547-6.02 2.071-1.161 4.732-.349 5.947 1.815 1.214 2.164.521 4.858-1.549 6.018m103.5918 39.687c-7.906-14.089-30.2298-29.684-49.9858-39.423-.867-.428-1.728-.842-2.585-1.245 34.1898 7.929 65.7798-10.494 65.7798-10.494-27.921-20.537-57.7168-12.233-74.0158-4.752-.318-.441-.646-.885-.994-1.336-9.058-11.756-30.517-15.085-43.637-7.721-7.663 4.301-10.894 23.686-3.661 36.568.47.838.993 1.64 1.559 2.408-2.212 1.714-3.839 5.673-3.483 7.489 2.515 12.848 9.49 20.654 15.659 25.202 4.142 3.054 9.331 4.95 11.958 5.785 3.682 4.17 6.768 8.333 6.815 14.631.141 19.561 8.559 33.311 19.611 40.836 3.052 11.197 9.492 27.774 22.222 37.133 20.4668 15.048 16.2528 4.214 15.0488-1.805-1.039-5.188-10.6158-15.675-13.2218-28.715 2.943-.246 5.819-.874 8.5468-1.903 1.592 8.824 4.752 18.199 10.791 25.596 16.073 19.672 14.691 8.128 15.024 1.999.316-5.764-7.649-20.166-5.262-34.739 1.624-.028 3.247-.442 4.742-1.281 5.073-2.848 6.745-9.502 3.736-14.864-.684-1.221-1.552-2.264-2.543-3.122 6.218-13.481 7.019-29.995-2.104-46.247"/><path d="m157.241 263.19c-10.723 5.51-29.5 22.26-28.401 27.39 0 0 17.029-4.12 31.283-18.37-23.576 42.41-56.914 42.41-56.914 42.41-1.174-30.55 39.59-47.9 54.032-51.43m24.256 43.56c.423-.02.847-.05 1.269-.08-.504.34-1.008.67-1.513 1 .082-.31.167-.61.244-.92m18.3-29.61c2.194-1.95 5.492-1.84 7.364.26s1.609 5.39-.586 7.35c-2.194 1.96-5.491 1.84-7.363-.26s-1.61-5.39.585-7.35m-152.1898 62.93c-1.44.58-2.815 1.41-4.051 2.52-5.441 4.85-6.133 12.95-1.544 18.1 1.353 1.52 3.013 2.6 4.822 3.27-2.943 17.25-17.422 30.32-19.291 36.91-1.989 6.99-7.988 19.4 17.612 3.54 9.622-5.96 16.777-15.25 21.963-24.52 2.66 2.2 5.643 4.01 8.848 5.42-7.948 13.61-22.726 21.68-25.889 27.09-3.671 6.28-12.571 16.81 16.173 7.83 17.874-5.59 31.484-21.69 39.2208-33.06 15.289-4.17 30.026-16.34 37.726-38.22 2.48-7.04 7.544-10.51 13.277-13.77 3.267.08 9.814-.04 15.633-1.87 8.669-2.72 19.498-8.78 27.27-22.22 1.097-1.89.802-6.96-1.018-9.73.932-.65 1.827-1.34 2.676-2.1 13.074-11.65 16.927-34.63 9.993-42.4-11.867-13.31-37.205-17.85-51.889-8.17-.565.37-1.104.74-1.629 1.12-15.387-14.67-45.584-35.47-84.7978-23.21 0 0 28.3068 32.83 69.6878 37.12-1.115.12-2.242.25-3.38.4-25.896 3.3-56.9308 12.18-71.2238 24.92-16.491 14.7-21.96 33.52-20.189 51.03"/><path d="m312.705 629.538s9.195-32.765 57.379-44.242c-17.936 10.077-26.684 25.68-26.684 25.68 4.74 2.496 26.383-11.342 34.758-20.358-7.455 13.218-35.751 48.497-65.453 38.92m73.092-34.824c-11.789 16.861-12.901 34.712-12.901 34.712 5.352.194 18.85-21.662 22.484-33.421-.982 15.144-11.168 59.206-42.089 63.463 0 0-5.929-33.51 32.506-64.754m33.24 1.545c1.871-2.347 5.21-2.797 7.455-1.007 2.243 1.79 2.546 5.144.674 7.49s-5.208 2.798-7.453 1.007c-2.245-1.79-2.546-5.145-.676-7.49m-126.645 102.632c-1.737 2.238-2.722 5.02-2.611 8.004.264 7.035 6.505 12.512 13.942 12.234 2.988-.113 5.713-1.139 7.888-2.778 5.864 3.911 12.15 7.155 18.534 8.606-.876 8.14.589 13.25 4.944 23.959 4.663 11.471 10.06 15.66 15.211 16.925 10.632 2.611 12.236-4.101 7.679-9.034-4.559-4.931-14.022-4.578-.898-24.018 8.125-12.038 14.466-34.341 18.119-49.589 1.38-4.279 2.699-8.943 3.952-14.023 2.61-10.587 11.087-14.89 18.593-21.689 12.121-.796 39.572-4.847 51.795-25.009 1.813-2.99 1.768-8.209-3.995-5.872-4.731 1.921-25.1 6.108-35.462 7.794.198-1.363.354-2.792.45-4.302 7.079-1.494 13.749-5.209 18.264-10.873 11.151-13.975 11.073-37.751 2.76-44.382-14.231-11.354-40.506-11.565-53.614.71-6.919 6.476-10.141 12.036-10.95 17.08-2.171.583-4.388 1.216-6.638 1.904-25.489 7.777-55.19 22.047-67.379 37.325-20.671 25.914-15.854 56.683-.584 77.028"/><path d="m397.142697 914.872641-39.636584 58.868394c-.641902.84947-.939243 1.911178-.830789 2.970811.107935 1.060151.612843 2.03987 1.413535 2.741967.800692.702616 1.836973 1.0752 2.901276 1.044065 1.063784-.031654 2.076714-.46547 2.834335-1.213751l39.004541-33.723296c.224692-.206374.505427-.342175.8064-.390486.301492-.048363.610248-.007161.888389.118521.27814.125682.513211.330292.676151.588454.162941.258162.246487.558513.24026.863793v105.996507c-.003114.32173-.104303.63516-.290076.89773s-.447308.46235-.749319.57237c-.302011.11001-.631005.12506-.941838.04307-.310832-.08199-.589492-.25687-.798616-.50128l-117.939892-141.216467c-1.882793-2.267104-4.238374-4.094581-6.901466-5.354356-2.663144-1.259774-5.569349-1.921333-8.51494-1.939064h-4.106828c-5.356645 0-10.49389 2.130338-14.281635 5.920984-3.787688 3.79065-5.915601 8.931892-5.915601 14.292687v149.267806c0 5.36095 2.127913 10.50188 5.915601 14.29258 3.787745 3.79071 8.92499 5.92035 14.281635 5.92035 3.451433 0 6.845215-.8858 9.857435-2.57228 3.012221-1.68597 5.542418-4.1171 7.349138-7.05989l39.636272-58.86824c.642422-.84999.939243-1.91118.831308-2.97133-.108454-1.05963-.613362-2.03935-1.414054-2.74197-.800173-.7021-1.836973-1.0752-2.900757-1.04354-1.064302.03165-2.077232.46495-2.834854 1.21375l-39.004281 33.72298c-.224899.20653-.505375.34249-.806659.39075-.301233.04826-.610093.00674-.88813-.11884-.278089-.12557-.513211-.33003-.676151-.58845-.162993-.2579-.246643-.55836-.240623-.86348v-105.891426c.003165-.321782.104458-.635001.290231-.897678s.447256-.462357.749475-.572316c.302218-.11001.630746-.125059.941734-.043122.310988.081886.589596.256813.798564.501432l117.93984 141.2161c1.897168 2.24692 4.261362 4.05224 6.928087 5.28986 2.666205 1.23762 5.570075 1.87797 8.509751 1.87641h4.212065c2.652194 0 5.278443-.52255 7.728778-1.53859 2.450854-1.01553 4.677016-2.5043 6.552908-4.38123 1.875373-1.87693 3.363114-4.10517 4.378119-6.55758 1.015006-2.45241 1.537039-5.08074 1.537039-7.73553v-149.246526c0-2.665064-.526185-5.303818-1.548974-7.76448-1.023308-2.46061-2.521946-4.694504-4.410811-6.573094s-4.130594-3.364826-6.595459-4.373153c-2.465384-1.008327-5.105124-1.518844-7.768216-1.502944-3.45133 0-6.84506.88677-9.857384 2.573012-3.012324 1.686238-5.542573 4.116906-7.34893 7.060006z"/><g transform="translate(142.497 1257.59617)"><path d="m81.812 1.3595303v95.109c-.01.746-.612 1.349-1.358 1.3590151h-9.892c-4.613.0039849-8.912-2.3370151-11.413-6.2140151l-44.892-69.384 1.54 34.655v39.584c-.009.746-.612 1.349-1.358 1.3590151h-13.08c-.746-.0100151-1.349-.6130151-1.359-1.3590151v-95.109c.01-.746.613-1.349 1.359-1.358h9.837c4.607.002 8.901 2.333 11.413 6.195l44.891 69.275-1.394-34.528v-39.584c0-.75.608-1.358 1.358-1.358h13.08c.711.055 1.261.645 1.268 1.358"/><path d="m215.49 97.8277232h-13.841c-.751-.0074929-1.353-.6214929-1.346119-1.3714929.001119-.15.028119-.299.078119-.441l36.667-94.709c.321-.814 1.119-1.335 1.993-1.305h17.337c.84.007 1.591.522 1.901 1.305l36.559 94.709c.25.708-.121 1.484-.828 1.735-.142.05-.291.076-.441.0774929h-13.84c-.567.0025071-1.078-.3434929-1.287-.8694929l-29.547-77.9c-.256-.705-1.035-1.069-1.74-.813-.379.138-.677.436-.814.813l-29.547 77.9c-.211.533-.731.88-1.304.8694929"/><path d="m390.925 95.6358303-27.5-35.127c15.525-2.936 24.602-13.406 24.602-29.476 0-18.46-12.011-31.032-33.261-31.032h-38.352c-1.121 0-2.029.908-2.029 2.03 0 7.203 5.84 13.042 13.044 13.042h25.743c12.844 0 19.003 6.577 19.003 16.07 0 9.492-6.015 16.304-19.003 16.304h-36.758c-1.124.01-2.029.923-2.029 2.047v47.102c0 .75.608 1.358 1.359 1.358h13.079c.747-.009 1.35-.612 1.36-1.358v-35.236h15.09l23.859 31.141c2.59 3.378 6.612 5.35 10.869 5.326h9.928c.749-.041 1.323-.682 1.281-1.431-.014-.277-.114-.542-.285-.76"/><path d="m174.131 82.7364303h-45.29c-.746-.01-1.349-.612-1.358-1.358v-24.53c0-.75.608-1.358 1.358-1.358h41.866c.75 0 1.359-.608 1.359-1.358v-12.464c0-.751-.609-1.36-1.359-1.36h-57.047c-1.124.011-2.029.924-2.029 2.048v53.369c0 1.121.908 2.03 2.029 2.03h60.471c.75 0 1.358-.609 1.358-1.359v-12.374c-.029-.725-.631-1.296-1.358-1.286m0-82.735h-60.688c-1.001 0-1.812.81-1.812 1.811 0 7.334 5.945 13.2792419 13.279 13.2792419h49.221c.74.0097581 1.349-.5822419 1.358562-1.3222419 0-.012 0-.024 0-.037v-12.373c0-.75-.607562-1.358-1.358562-1.358"/></g></g></svg>
'''
'''--- frontend/src/src/assets/near-logo.svg ---
<svg fill="none" height="37" viewBox="0 0 139 37" width="139" xmlns="http://www.w3.org/2000/svg"><g fill="#000"><path d="m69.5853 8.0602v21.3241c-.0011.0804-.0335.1573-.0903.2142-.0569.0569-.1337.0893-.2141.0904h-2.216c-.5086.0004-1.0092-.1269-1.4559-.3703s-.8253-.5951-1.101-1.0229l-10.0571-15.5564.3449 7.7701v8.8749c-.001.0804-.0334.1573-.0903.2142-.0568.0569-.1337.0893-.2141.0904h-2.9303c-.0804-.0011-.1572-.0335-.214-.0904-.0569-.0569-.0893-.1338-.0903-.2142v-21.3241c.001-.08047.0334-.15734.0903-.21425.0568-.0569.1336-.08933.214-.09038h2.2039c.508.00027 1.0079.12746 1.4544.37003s.8255.59285 1.1025 1.01908l10.0571 15.53202-.3125-7.7416v-8.8749c0-.0808.0321-.15828.0892-.21541.057-.05713.1345-.08922.2152-.08922h2.9303c.0768.00608.1486.04072.2011.0971.0526.05638.0822.13041.083.20753z"/><path d="m99.5335 29.6889h-3.1008c-.0484-.0005-.0961-.0125-.1389-.0351-.0429-.0226-.0798-.0551-.1075-.0948-.0278-.0398-.0457-.0856-.0523-.1336-.0065-.0481-.0015-.097.0146-.1427l8.2144-21.23469c.035-.08891.097-.16475.177-.21711.08-.05237.174-.07868.27-.07533h3.884c.092.00079.181.02904.257.08114.076.05209.135.12566.169.2113l8.19 21.23469c.016.0457.021.0946.015.1427-.007.048-.025.0938-.053.1336-.027.0397-.064.0722-.107.0948s-.091.0346-.139.0351h-3.101c-.062.0003-.123-.0182-.174-.053s-.091-.0842-.114-.142l-6.62-17.4654c-.021-.0588-.06-.1096-.111-.1455s-.112-.0552-.175-.0552c-.062 0-.123.0193-.174.0552-.052.0359-.09.0867-.112.1455l-6.6193 17.4654c-.0231.0584-.0635.1084-.1157.1432s-.1138.0529-.1765.0518z"/><path d="m138.837 29.1974-6.161-7.8757c3.478-.658 5.511-3.0056 5.511-6.6084 0-4.1389-2.691-6.95773-7.451-6.95773h-8.592c-.121 0-.236.04792-.322.13324-.085.08531-.133.20102-.133.32167 0 .38404.076.76432.223 1.11913s.362.67719.633.94879c.271.2715.594.4869.948.6339.355.147.735.2226 1.118.2226h5.768c2.877 0 4.257 1.4744 4.257 3.6028 0 2.1283-1.347 3.6555-4.257 3.6555h-8.235c-.121.0011-.237.0499-.322.1359-.085.0859-.133.2021-.133.3231v10.5605c0 .0808.032.1583.089.2154s.135.0892.216.0892h2.93c.08-.001.157-.0335.214-.0904s.089-.1337.09-.2142v-7.9001h3.381l5.345 6.9821c.287.3737.655.6759 1.078.8831.422.2071.887.3136 1.357.3111h2.224c.056-.0031.11-.0213.155-.0527.046-.0314.083-.0748.106-.1254.023-.0507.031-.1066.025-.1619-.007-.0552-.028-.1076-.062-.1515z"/><path d="m90.2677 7.75557h-13.5962c-.1076 0-.2108.04279-.287.11896-.0761.07617-.1188.17948-.1188.28721 0 .78961.3134 1.54689.8713 2.10526.5579.5583 1.3146.872 2.1036.872h11.0271c.0402.0005.08-.007.1172-.0221.0371-.0151.0709-.0375.0993-.0659s.0508-.0622.0659-.0994.0226-.0771.022-.1172v-2.7742c0-.0808-.0321-.15828-.0891-.21541-.0571-.05713-.1345-.08922-.2153-.08922zm0 18.54993h-10.1464c-.0804-.0011-.1572-.0335-.2141-.0904-.0568-.0569-.0892-.1338-.0903-.2143v-5.4995c0-.0808.0321-.1583.0892-.2154.0571-.0572.1345-.0893.2152-.0893h9.3794c.0807 0 .1581-.0321.2152-.0892s.0892-.1346.0892-.2154v-2.7945c0-.0808-.0321-.1582-.0892-.2154-.0571-.0571-.1345-.0892-.2152-.0892h-12.7805c-.1209.0011-.2365.0499-.3216.1359-.0852.0859-.1329.2021-.1329.3231v11.9658c0 .1207.0479.2364.1331.3217.0853.0853.2009.1332.3214.1332h13.5475c.0808 0 .1582-.0321.2153-.0892.057-.0571.0891-.1346.0891-.2154v-2.7741c-.0031-.0783-.0367-.1523-.0936-.2062-.0569-.0538-.1325-.0834-.2108-.0822z"/><path d="m29.4176 2.30067-7.6383 11.34443c-.1237.1637-.181.3683-.1601.5725.0208.2043.1181.3931.2724.5284.1543.1354.354.2072.5591.2012.205-.0061.4002-.0897.5462-.2339l7.5165-6.49876c.0433-.03977.0974-.06594.1554-.07525.0581-.00932.1176-.00138.1712.02284s.0989.06365.1303.1134.0475.10763.0463.16646v20.42641c-.0006.062-.0201.1224-.0559.173s-.0862.0891-.1444.1103-.1216.0241-.1815.0083-.1136-.0495-.1539-.0966l-22.728-27.21359c-.36283-.43689-.81677-.78906-1.32997-1.031829-.51321-.242769-1.07326-.370257-1.6409-.373525h-.79142c-1.03227 0-2.02226.410385-2.75219 1.140874-.729919.73049-1.1399856 1.72125-1.1399856 2.75432v28.76515c0 1.0331.4100666 2.0238 1.1399856 2.7543.72993.7305 1.71992 1.1409 2.75219 1.1409.66512-.0001 1.31913-.1707 1.89961-.4957.58048-.3249 1.06807-.7934 1.41624-1.3605l7.63824-11.3444c.1238-.1638.181-.3683.1602-.5726-.0209-.2042-.1182-.393-.2725-.5284-.1542-.1353-.354-.2072-.559-.2011-.2051.0061-.4003.0896-.5463.2339l-7.51645 6.4987c-.04334.0398-.09739.066-.15545.0753-.05805.0093-.11757.0013-.17115-.0229-.05359-.0242-.0989-.0636-.1303-.1134-.03141-.0497-.04753-.1076-.04637-.1664v-20.40616c.00061-.06201.02013-.12237.05593-.17299s.08619-.0891.14443-.11029c.05824-.0212.12155-.0241.18148-.00831.05993.01578.11362.04949.15389.09663l22.72799 27.21352c.3656.433.8212.7809 1.3351 1.0194.5138.2385 1.0734.3619 1.6399.3616h.8117c.5111 0 1.0172-.1007 1.4894-.2965.4723-.1957.9013-.4826 1.2628-.8443.3614-.3617.6481-.7911.8437-1.2637s.2962-.9791.2962-1.4907v-28.76105c.0001-.51358-.1014-1.02209-.2985-1.49628-.1972-.47418-.486-.90467-.85-1.26669s-.796-.64843-1.271-.842743c-.4751-.194313-.9838-.292694-1.497-.289481-.6651.00008-1.3191.170739-1.8996.495692-.5805.324952-1.0681.793362-1.4162 1.360522z"/></g></svg>
'''
'''--- frontend/src/src/main.js ---
/*
 * @Author: your name
 * @Date: 2021-02-26 11:37:19
 * @LastEditTime: 2021-03-04 11:08:02
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /buildlinks-near-redbag/src/main.js
 */
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import '@/assets/css/near.css'
import { initContract } from './utils/utils'
import moment from 'moment'
import VueClipboard from 'vue-clipboard2'
import 'vue-flipper/dist/vue-flipper.css'

Vue.use(VueClipboard)
Vue.config.productionTip = false

// ---------------filter
Vue.filter('changeNear', function (num) {
  const ratio = '000000000000000000000000'
  if (num === '0') return '0'
  if (num.indexOf('.') !== -1) {
    const arr = num.split('.')
    if (arr[0] !== 0) {
      return arr[0] + arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    } else {
      return arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    }
  } else {
    return num + ratio
  }
})

Vue.filter('changeTime', function (value) {
  const ts = Number((value / 1e6).toFixed(0))
  return moment(ts).format('YYYY-MM-DD HH:mm:ss')
})
// -------------------
new Vue({
  router,
  render: h => h(App),
  async created () {
    await initContract()
  }
}).$mount('#app')

'''
'''--- frontend/src/src/plugin/loading.js ---
/*
 * @Author: your name
 * @Date: 2021-03-01 21:21:29
 * @LastEditTime: 2021-03-01 21:21:40
 * @LastEditors: Please set LastEditors
 * @Description: In U/*
 * @Author: your name
 * @Date: 2020-12-24 15:49:18
 * @LastEditTime: 2020-12-24 15:49:35
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /d2-admin-start-kit/src/plugin/loading/index.js
 */
import { Loading } from 'element-ui'

let loadingCount = 0
let loading

const startLoading = () => {
  loading = Loading.service({
    lock: true,
    text: '加载中……',
    background: 'rgba(0, 0, 0, 0.2)'
  })
}

const endLoading = () => {
  loading.close()
}

export const showLoading = () => {
  if (loadingCount === 0) {
    startLoading()
  }
  loadingCount += 1
}

export const hideLoading = () => {
  if (loadingCount <= 0) {
    return
  }
  loadingCount -= 1
  if (loadingCount === 0) {
    endLoading()
  }
}

'''
'''--- frontend/src/src/router/index.js ---
/*
 * @Author: your name
 * @Date: 2021-02-26 11:37:19
 * @LastEditTime: 2021-03-02 17:44:30
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /buildlinks-near-redbag/src/router/index.js
 */
import Vue from 'vue'
import VueRouter from 'vue-router'
import Index from '../views/Index.vue'

Vue.use(VueRouter)

const routes = [
  {
    path: '/',
    name: 'Index',
    component: Index
  },
  {
    path: '/sendPacket',
    name: 'SendPacket',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/SendPacket.vue')
  }
]

const router = new VueRouter({
  routes
})

export default router

'''
'''--- frontend/src/src/utils/config.js ---
/*
 * @Author: your name
 * @Date: 2021-01-08 17:10:49
 * @LastEditTime: 2021-03-09 12:21:52
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /near-swap-front/src/utils/config.js
 */
const CONTRACT_NAME = process.env.VUE_APP_CONTRACT_NAME || 'rb01.testnet'
const MAINNET_CONTRACT_NAME = process.env.VUE_APP_MAINNET_CONTRACT_NAME || 'biudrop.near'
const MAINNET_WALLET_URL = process.env.VUE_APP_MAINNET_WALLET_URL || 'https://near-wallet.buildlinks.org'
const MAINNET_NODE_URL = process.env.MAINNET_NODE_URL || 'https://near-rpc.buildlinks.org'
const TESTNET_CONTRACT_NAME = process.env.VUE_APP_TESTNET_CONTRACT_NAME || 'rb01.testnet'
const TESTNET_WALLET_URL = process.env.VUE_APP_TESTNET_WALLET_URL || 'http://47.242.35.20'
const TESTNET_NODE_URL = process.env.VUE_APP_TESTNET_NODE_URL || 'https://rpc.testnet.near.org'

function getConfig (env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: MAINNET_NODE_URL,
        contractName: MAINNET_CONTRACT_NAME,
        walletUrl: MAINNET_WALLET_URL,
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: TESTNET_NODE_URL,
        contractName: TESTNET_CONTRACT_NAME,
        walletUrl: TESTNET_WALLET_URL,
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/src/src/utils/utils.js ---
/*
 * @Author: your name
 * @Date: 2021-01-08 17:10:49
 * @LastEditTime: 2021-03-09 14:58:38
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /swap/src/utils/utils.js
 */
import { connect, Contract, keyStores } from 'near-api-js'
import getConfig from './config'
import * as nearApi from 'near-api-js'

const nearConfig = getConfig(process.env.VUE_APP_NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract () {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  // window.walletConnection = new WalletConnection(near)
  // window.wallet = new nearApi.WalletConnection(window.near)
  window.getCurrentUser = async () => {
    // Needed to access wallet
    window.walletConnection = new nearApi.WalletConnection(near)
    window.walletAccount = new nearApi.WalletAccount(near)
    if (window.walletConnection.getAccountId()) {
      const accountId = window.walletConnection.getAccountId()
      window.currentUser = {
        accountId,
        account_id: accountId,
        balance: (await window.walletConnection.account().state()).amount
      }
    }
  }
  await window.getCurrentUser()

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: [
      'show_send_list',
      'show_recv_list',
      'show_redbag_brief',
      'show_redbag_detail',
      'show_statistic',
      'get_key_balance'
    ],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: [
      'send_redbag',
      'claim',
      'revoke'
    ]
  })
  window.baseUrl = process.env.VUE_APP_BASE_URL || 'http://47.242.35.20/redbag/'
  window.nearConfig = getConfig(process.env.VUE_APP_NODE_ENV || 'development')
  window.near = near
}

export function logout () {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login (query = 'active') {
  let url = null
  if (query === 'active') {
    url = `${window.baseUrl}?active=${query}`
  } else {
    url = null
  }
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName, 'NEAR redbag', url)
}

'''
'''--- frontend/src/vue.config.js ---
const path = require('path')// 引入path模块
const publicPath = process.env.VUE_APP_PUBLIC_PATH || '/'
function resolve (dir) {
  return path.join(__dirname, dir)// path.join(__dirname)设置绝对路径
}
module.exports = {
  productionSourceMap: false,
  publicPath,
  devServer: {
    publicPath,
    open: true,
    port: 8888
  },
  lintOnSave: true,
  chainWebpack: (config) => {
    config.resolve.alias
      .set('@', resolve('./src'))
      .set('components', resolve('./src/components'))
      .set('pages', resolve('./src/pages'))
      .set('assets', resolve('./src/assets'))
      .set('styles', resolve('./src/styles'))
      // set第一个参数：设置的别名，第二个参数：设置的路径
  }
}

'''