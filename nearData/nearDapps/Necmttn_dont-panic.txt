*GitHub Repository "Necmttn/dont-panic"*

'''--- .github/workflows/devnet-proposal.yml ---
name: Devnet Proposal

on:
  push:
    branches:
      - master
env:
  SOLANA_CLI_VERSION: 1.8.5
  NODE_VERSION: 17.0.1

jobs:
  create-bonding-proposal:
    name: Create Bonding Proposal
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/deploy-with-gov-proposal/
        id: deploy
        with:
          program: spl_token_bonding
          program-id: TBondmkCYxaPCKG4CHYfVTcwQ8on31xnJrPzk8F8WsS
          network: devnet
          keypair: ${{ secrets.DEPLOY_KEYPAIR }}
          governance: HDkW3MrrvqT9FPvuFBAVnSag1BLDx767MD2VXKfpCoCe
          name: Deploy Token Bonding ${{ github.ref_name }}
          description: https://github.com/StrataFoundation/strata/tree/${{ github.ref_name }}

  create-collective-proposal:
    name: Create Collective Proposal
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/deploy-with-gov-proposal/
        id: deploy
        with:
          program: spl_token_collective
          program-id: TCo1sfSr2nCudbeJPykbif64rG9K1JNMGzrtzvPmp3y
          network: devnet
          keypair: ${{ secrets.DEPLOY_KEYPAIR }}
          governance: 6yc2jb7LCjYXD3hbRKjYkpx13j4VXYcCBzYsZbmntdVk
          name: Deploy Token Collective ${{ github.ref_name }}
          description: https://github.com/StrataFoundation/strata/tree/${{ github.ref_name }}
'''
'''--- .github/workflows/devnet-test-contracts.yml ---
name: ci

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    container: ubuntu
    steps:
      - name: Install build environment
        run: |
          apt-get update
          apt-get install -y git curl build-essential pkg-config libssl-dev libudev-dev python3-dev
        env:
          DEBIAN_FRONTEND: noninteractive

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          default: true

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install tools
        run: |
          [ ! -f "$HOME/.cargo/bin/just" ] && curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.cargo/bin
          npm i -g @project-serum/anchor-cli
          sh -c "$(curl -sSfL https://release.solana.com/v1.8.2/install)"
          echo "$HOME/.cargo/bin:$HOME/.local/share/solana/install/active_release/bin:$PATH" >> $GITHUB_PATH

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check -q

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy

      - name: Initialize a solana account
        run: |
          solana config set --url https://api.devnet.solana.com
          mkdir -p ~/.config/solana
          echo "${{secrets.DEPLOY_KEY}}" > ~/.config/solana/id.json

      - name: Generate keypairs
        run: |
          solana-keygen new --no-passphrase -o programs/contract-skeleton/key.json

          echo "Program ID for contract-skeleton: $(solana-keygen pubkey programs/contract-skeleton/key.json)"

      - name: Deploy the program
        run: |
          just deploy contract-skeleton

      - name: Run all tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features dev
        env:
          RUST_LOG: solana_client::rpc_client=debug
          RUST_BACKTRACE: 1
          ADMIN_WALLET: ~/.config/solana/id.json

      - name: Close the program to reclaim the rent
        run: |
          just dangerously-close contract-skeleton
'''
'''--- Anchor.toml ---
[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "devnet"
wallet = "~/.config/solana/id.json"

'''
'''--- Cargo.toml ---
[workspace]
members = [
    "programs/*"
]

'''
'''--- README.md ---
# DON'T PANIC

# The Hitchhiker's Guide to the <s>Galaxy</s>  Web 3

The Hitchhiker's Guide to the <s>Galaxy</s> Web 3 was a â€œwholly remarkable book." It had been compiled and recompiled many times over many years and under many different <s>editorships</s> daos. It contained contributions from countless numbers of travellers and researchers.

<p align="center">
    <img src="https://static.wikia.nocookie.net/hitchhikers/images/e/e1/Guide.jpg/revision/latest?cb=20080505045130">
</p>

## What's inside?

This turborepo uses [pnpm](https://pnpm.io) as a packages manager. It includes the following packages/apps:

### Apps and Packages

<!-- - `docs`: a [Next.js](https://nextjs.org) app -->
- `web`: another [Next.js](https://nextjs.org) app
- `ui`: a stub React component library shared by both `web` and `docs` applications
- `config`: `eslint` configurations (includes `eslint-config-next` and `eslint-config-prettier`)
- `tsconfig`: `tsconfig.json`s used throughout the monorepo
- `mdx`: utils for the MDX compiler

## Workspaces
-- Apps.
--- `learn-next---docs`: a [Next.js](https://nextjs.org) app which host tutorials 
----- `learn` : sub route in the application which is the main page of the tutorial
------ `learn`/<tutorial-name>/<tutorial-section.> : 
----- `proposal` : sub route in the application which is the main page of the proposal
------ `proposal`/<proposal-name>: proposal page with current status. and quick actions to vote, comment, etc. 
------ `<profile/builder>/<user-name/user-wallet-address>: profile page of the user.

-- Packages.
--- `configs`: configuration files for the monorepo

### Tutorials
- [Solana Wallet Balance](/tutorials/solana-wallet-balance)
- [Near Wallet Balance](/tutorials/near-wallet-balance)

## TO-DOS
- [] https://kodiakhq.com/ Automate your GitHub Pull Requests

'''
'''--- apps/web/.eslintrc.js ---
module.exports = require("@dont-panic/config/eslint-preset");

'''
'''--- apps/web/README.md ---
## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_source=github.com&utm_medium=referral&utm_campaign=turborepo-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- apps/web/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- apps/web/next.config.js ---
const withTM = require("next-transpile-modules")([
  "@dont-panic/ui", 
  "@dont-panic/mdx"
]);

module.exports = withTM({
  domains: ['i.imgur.com'],
  reactStrictMode: true,
  webpack:(config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    if (!isServer) {
      config.resolve.fallback.fs = false;
    }
    return config
  }, 
});

'''
'''--- apps/web/package.json ---
{
  "name": "web",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev --port 3000",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@dont-panic/ui": "workspace:*",
    "@tailwindcss/typography": "^0.5.0",
    "autoprefixer": "^10.4.2",
    "next": "12.0.7",
    "next-mdx-remote": "^3.0.8",
    "react": "17.0.2",
    "react-codesandboxer": "^3.1.5",
    "react-dom": "17.0.2"
  },
  "optionalDependencies": {
    "@dont-panic/learn-near-wallet-balance": "workspace:*",
    "@dont-panic/learn-solana-wallet-balance": "workspace:*"
  },
  "devDependencies": {
    "@dont-panic/config": "workspace:*",
    "@dont-panic/mdx": "workspace:*",
    "@dont-panic/tsconfig": "workspace:*",
    "@types/react": "17.0.37",
    "eslint": "7.32.0",
    "next-transpile-modules": "9.0.0",
    "postcss": "^8.4.5",
    "tailwindcss": "^3.0.15",
    "typescript": "^4.5.3"
  }
}

'''
'''--- apps/web/postcss.config.js ---
// If you want to use other PostCSS plugins, see the following:
// https://tailwindcss.com/docs/using-with-preprocessors
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }
'''
'''--- apps/web/styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;
'''
'''--- apps/web/tailwind.config.js ---
module.exports = {
  content: [
    './components/**/*.{js,ts,jsx,tsx}',
    './pages/**/*.{js,ts,jsx,tsx}',
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
    './node_modules/@dont-panic/ui/src/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [require('@tailwindcss/typography')],
}
'''
'''--- apps/web/tsconfig.json ---
{
  "extends": "@dont-panic/tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''
'''--- package.json ---
{
  "name": "dont-panic",
  "version": "0.0.0",
  "private": true,
  "workspaces": [
    "apps/*",
    "packages/*",
    "tutorials/*"
  ],
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --parallel",
    "lint": "turbo run lint",
    "format": "prettier --write \"**/*.{ts,tsx,md}\""
  },
  "devDependencies": {
    "prettier": "^2.5.1",
    "turbo": "latest"
  },
  "turbo": {
    "pipeline": {
      "build": {
        "dependsOn": [
          "^build"
        ],
        "outputs": [
          "dist/**",
          ".next/**"
        ]
      },
      "lint": {
        "outputs": []
      },
      "dev": {
        "cache": false
      }
    }
  },
  "engines": {
    "npm": ">=7.0.0",
    "node": ">=14.0.0"
  }
}
'''
'''--- packages/config/eslint-preset.js ---
module.exports = {
  extends: ["next", "prettier"],
  settings: {
    next: {
      rootDir: ["apps/*/", "packages/*/", "boilerplates/*/", "tutorials/*/"],
    },
  },
  rules: {
    "@next/next/no-html-link-for-pages": "off",
  },
};

'''
'''--- packages/config/jest.config.js ---
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  // if using TypeScript with a baseUrl set to the root directory then you need the below for alias' to work
  moduleDirectories: ['node_modules', '<rootDir>/'],
  testEnvironment: 'jest-environment-jsdom',
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig)
'''
'''--- packages/config/jest.setup.ts ---
import '@testing-library/jest-dom/extend-expect';
'''
'''--- packages/config/next.config.js ---
const withTM = require("next-transpile-modules")([
  "@dont-panic/ui", 
  "@dont-panic/mdx"
]);

module.exports = withTM({
  reactStrictMode: true,
  webpack:(config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    if (!isServer) {
      config.resolve.fallback.fs = false;
    }
    return config
  }, 
});

'''
'''--- packages/config/package.json ---
{
  "name": "@dont-panic/config",
  "version": "0.0.0",
  "main": "index.js",
  "license": "MIT",
  "files": [
    "eslint-preset.js",
    "jest.config.js",
    "jest.setup.ts"
  ],
  "dependencies": {
    "eslint-config-next": "^12.0.7",
    "eslint-config-prettier": "^8.3.0"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^5.16.1"
  }
}

'''
'''--- packages/mdx/dist/index.d.ts ---
import { MDXRemoteSerializeResult } from 'next-mdx-remote';

declare enum PostType {
    TUTORIAL = "tutorial",
    BLOGPOST = "blogPost",
    AUTHOR = "author"
}
declare type ReadingTime = {
    text: string;
};
declare type Post = {
    colorFeatured?: string;
    cover?: string;
    date: string;
    updated: string;
    featured?: boolean;
    fontFeatured?: string;
    keywords?: string[];
    slug: string;
    subtitle: string;
    title: string;
    type: PostType.BLOGPOST;
};
declare type FrontMatterPost = {
    frontMatter: Post & {
        readingTime: ReadingTime;
    };
    tweetIDs: string[];
    mdxSource: MDXRemoteSerializeResult;
};
declare type Tutorial = {
    date: string;
    language: string;
    slug: string;
    title: string;
    description: string;
    snippetImage: string;
    type: PostType.TUTORIAL;
};
declare type FrontMatterTutorial = {
    frontMatter: Tutorial;
    mdxSource: MDXRemoteSerializeResult;
};
declare type FrontMatterPostType<T> = T extends PostType.BLOGPOST ? FrontMatterPost : FrontMatterTutorial;

declare const getFileByPath: <T extends PostType>(slug: string, pathForFile: string) => Promise<FrontMatterPostType<T>>;

export { FrontMatterPost, FrontMatterPostType, FrontMatterTutorial, Post, PostType, ReadingTime, Tutorial, getFileByPath };

'''
'''--- packages/mdx/dist/index.js ---
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/types.ts
var PostType = /* @__PURE__ */ ((PostType2) => {
  PostType2["TUTORIAL"] = "tutorial";
  PostType2["BLOGPOST"] = "blogPost";
  PostType2["AUTHOR"] = "author";
  return PostType2;
})(PostType || {});

// src/fs.tsx
import fs from "fs";
import matter from "gray-matter";
import { serialize } from "next-mdx-remote/serialize";
import readingTime from "reading-time";
import rehypeAutolinkHeadings from "remark-autolink-headings";
var TWEET_RE = /<StaticTweet\sid="[0-9]+"\s\/>/g;
var getFileByPath = async (slug, pathForFile) => {
  const source = fs.readFileSync(pathForFile, "utf8");
  const parsedFile = matter(source);
  const data = parsedFile.data;
  const content = parsedFile.content;
  const mdxSource = await serialize(content, {
    mdxOptions: {
      rehypePlugins: [rehypeAutolinkHeadings],
      remarkPlugins: []
    }
  });
  const tweetMatch = content.match(TWEET_RE);
  const tweetIDs = tweetMatch == null ? void 0 : tweetMatch.map((mdxTweet) => {
    const id = mdxTweet.match(/[0-9]+/g)[0];
    return id;
  });
  const result = {
    mdxSource,
    tweetIDs: tweetIDs || [],
    frontMatter: __spreadValues({
      readingTime: readingTime(content),
      slug
    }, data)
  };
  return result;
};
export {
  PostType,
  getFileByPath
};

'''
'''--- packages/mdx/package.json ---
{
  "name": "@dont-panic/mdx",
  "version": "0.0.0",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "source": "./src/index.ts",
  "license": "MIT",
  "type": "module",
  "files": [
    "dist/**"
  ],
  "scripts": {
    "build": "tsup src/index.tsx --format esm,cjs --dts --external react",
    "lint": "TIMING=1 eslint src --fix",
    "clean": "rm -rf .turbo && rm -rf node_modules && rm -rf dist"
  },
  "devDependencies": {
    "@types/react": "^17.0.37",
    "@types/react-dom": "^17.0.11",
    "@dont-panic/config": "workspace:*",
    "@dont-panic/tsconfig": "workspace:*",
    "tsup": "^5.11.11",
    "typescript": "^4.5.3"
  },
  "dependencies": {
    "gray-matter": "^4.0.3",
    "image-size": "^1.0.1",
    "mdx-bundler": "^8.0.1",
    "next": "^12.0.8",
    "next-mdx-remote": "^3.0.8",
    "reading-time": "^1.5.0",
    "remark-autolink-headings": "^7.0.1",
    "remark-slug": "^7.0.1",
    "unist-util-find-after": "^4.0.0",
    "unist-util-visit": "^4.1.0",
    "unist-util-visit-parents": "^5.1.0"
  }
}

'''
'''--- packages/mdx/src/remark-img-to-jsx.ts ---
import { Parent, Node, Literal } from 'unist'
import { Test, visit } from 'unist-util-visit'
import sizeOf from 'image-size'
import fs from 'fs'

type ImageNode = Parent & {
  url: string
  alt: string
  name: string
  attributes: (Literal & { name: string })[]
}

export function remarkImgToJsx() {
  // return (tree: Node) => {
  //   visit(
  //     tree,
  //     // only visit p tags that contain an img element
  //     (node: Parent): (node is Parent => 
  //       node.type === 'paragraph' && node.children.some((n) => n.type === 'image')) as Test,
  //     (node: Parent) => {
  //       const imageNode = node.children.find((n) => n.type === 'image') as ImageNode

  //       // only local files
  //       if (fs.existsSync(`${process.cwd()}/public${imageNode.url}`)) {
  //         const dimensions = sizeOf(`${process.cwd()}/public${imageNode.url}`)

  //         // Convert original node to next/image
  //         ;(imageNode.type = 'mdxJsxFlowElement'),
  //           (imageNode.name = 'Image'),
  //           (imageNode.attributes = [
  //             { type: 'mdxJsxAttribute', name: 'alt', value: imageNode.alt },
  //             { type: 'mdxJsxAttribute', name: 'src', value: imageNode.url },
  //             { type: 'mdxJsxAttribute', name: 'width', value: dimensions.width },
  //             { type: 'mdxJsxAttribute', name: 'height', value: dimensions.height },
  //           ])

  //         // Change node type from p to div to avoid nesting error
  //         node.type = 'div'
  //         node.children = [imageNode]
  //       }
  //     }
  //   )
  // }
}

'''
'''--- packages/mdx/src/remark-sectionize-fork.js ---
import { findAfter } from 'unist-util-find-after'
import { visitParents } from 'unist-util-visit-parents'

const MAX_HEADING_DEPTH = 2

function sectionize(node, ancestors) {
  const start = node
  const depth = start.depth
  const parent = ancestors[ancestors.length - 1]
  const id = node.data.id

  const isEnd = (node) => (node.type === 'heading' && node.depth <= depth) || node.type === 'export'
  const end = findAfter(parent, start, isEnd)

  const startIndex = parent.children.indexOf(start)
  const endIndex = parent.children.indexOf(end)

  const between = parent.children.slice(startIndex, endIndex > 0 ? endIndex : undefined)

  const section = {
    type: 'section',
    depth: depth,
    children: between,
    data: {
      hName: 'section',
      hProperties: {
        id: `${id}-section`,
      },
    },
  }

  parent.children.splice(startIndex, section.children.length, section)
}

function transform(tree) {
  for (let depth = MAX_HEADING_DEPTH; depth > 0; depth--) {
    visitParents(tree, (node) => node.type === 'heading' && node.depth === depth, sectionize)
  }
}

export const remarkSectionize: any = () => {
  return transform
}

'''
'''--- packages/mdx/src/remark-toc-headings.ts ---
//@ts-nocheck
import { Parent } from 'unist'
import { visit } from 'unist-util-visit'
import { slug } from 'github-slugger'
import { toString } from 'hast-util-to-string'

export default function remarkTocHeadings(options) {
  return (tree: Parent) =>
    visit(tree, 'heading', (node) => {
      const textContent = toString(node)
      options.exportRef.push({
        value: textContent,
        url: '#' + slug(textContent),
        depth: node.depth,
      })
    })
}

'''
'''--- packages/mdx/src/types.ts ---
import { MDXRemoteSerializeResult } from 'next-mdx-remote'

export enum PostType {
  TUTORIAL = 'tutorial',
  BLOGPOST = 'blogPost',
  AUTHOR = 'author',
}

export type ReadingTime = {
  text: string
}

export type Post = {
  colorFeatured?: string
  cover?: string
  date: string
  updated: string
  featured?: boolean
  fontFeatured?: string
  keywords?: string[]
  slug: string
  subtitle: string
  title: string
  type: PostType.BLOGPOST
}

export type FrontMatterPost = {
  frontMatter: Post & {
    readingTime: ReadingTime
  }
  tweetIDs: string[]
  mdxSource: MDXRemoteSerializeResult
}

export type Tutorial = {
  date: string
  language: string
  slug: string
  title: string
  description: string
  snippetImage: string
  type: PostType.TUTORIAL
}

export type FrontMatterTutorial = {
  frontMatter: Tutorial 
  mdxSource: MDXRemoteSerializeResult
}

export type FrontMatterPostType<T> = T extends PostType.BLOGPOST
  ? FrontMatterPost
  : FrontMatterTutorial
'''
'''--- packages/mdx/tsconfig.json ---
{
  "extends": "@dont-panic/tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"]
}

'''
'''--- packages/tsconfig/README.md ---
# `tsconfig`

These are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.

'''
'''--- packages/tsconfig/base.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}

'''
'''--- packages/tsconfig/nextjs.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}

'''
'''--- packages/tsconfig/package.json ---
{
  "name": "@dont-panic/tsconfig",
  "version": "0.0.0",
  "private": true,
  "main": "index.js",
  "files": [
    "base.json",
    "nextjs.json",
    "react-library.json"
  ]
}

'''
'''--- packages/tsconfig/react-library.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "lib": ["ES2015"],
    "module": "ESNext",
    "target": "ES6",
    "jsx": "react-jsx"
  }
}

'''
'''--- packages/tsconfig/theme-kit.json ---
{
  "compilerOptions": {
    "module": "esnext",
    "lib": ["dom", "esnext"],
    "importHelpers": true,
    "declaration": true,
    "sourceMap": true,
    "strict": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "moduleResolution": "node",
    "jsx": "react",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true
  }
}

'''
'''--- packages/ui/package.json ---
{
  "name": "@dont-panic/ui",
  "version": "0.0.0",
  "main": "./src/index.tsx",
  "types": "./src/index.tsx",
  "license": "MIT",
  "devDependencies": {
    "@types/react": "^17.0.37",
    "@types/react-dom": "^17.0.11",
    "@dont-panic/config": "workspace:*",
    "@dont-panic/tsconfig": "workspace:*",
    "@dont-panic/mdx": "workspace:*",
    "typescript": "^4.5.3"
  },
  "dependencies": {
    "@tailwindcss/typography": "^0.5.0",
    "next": "^12.0.8",
    "postcss": "^8.4.5",
    "tailwindcss": "^3.0.15"
  }
}

'''
'''--- packages/ui/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- packages/ui/tailwind.config.js ---
module.exports = {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
}

'''
'''--- packages/ui/tsconfig.json ---
{
  "extends": "@dont-panic/tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"]
}

'''
'''--- programs/contract-skeleton/Cargo.toml ---
[package]
description = "Created with Anchor"
edition = "2018"
name = "contract-skeleton"
version = "0.1.0"

[lib]
crate-type = ["cdylib", "lib"]
name = "contract_skeleton"

[features]
cpi = ["no-entrypoint"]
default = []
dev = []
no-entrypoint = []
no-idl = []

[dependencies]
anchor-lang = "0.18"
anchor-spl = "0.18"
fehler = "1"

[dev-dependencies]
anchor-client = {version = "0.18"}
anyhow = {version = "1"}
env_logger = "0.9"
gfx-solana-utils = "0.2"
solana-client = {version = "1"}
solana-logger = "1"
solana-sdk = {version = "1"}
spl-associated-token-account = "1"
spl-token = {version = "3", features = ["no-entrypoint"]}

[build-dependencies]
gfx-solana-utils = "0.2"
solana-sdk = "1"

'''
'''--- programs/contract-skeleton/Xargo.toml ---
[target.bpfel-unknown-unknown.dependencies.std]
features = []

'''
'''--- programs/contract-skeleton/build.rs ---
#[cfg(feature = "dev")]
fn main() {
    use gfx_solana_utils::load_keypair;
    use solana_sdk::signer::Signer;
    use std::env;
    use std::fs::OpenOptions;
    use std::io::Write;
    use std::path::Path;

    // Tell Cargo that if the given file changes, to rerun this build script.
    println!("cargo:rerun-if-changed=key.json");

    if !Path::new("./key.json").exists() {
        panic!("key.json does not exist");
    }

    let keypair = load_keypair("./key.json").unwrap();

    let pubkey = keypair.pubkey();

    let content = format!(
        r#"mod program_id {{ use anchor_lang::prelude::*; declare_id!("{}"); }}"#,
        pubkey
    );

    let out_dir = env::var("OUT_DIR").unwrap();
    let mut f = OpenOptions::new()
        .read(true)
        .write(true)
        .create(true)
        .open(&format!("{}/program_id.rs", out_dir))
        .unwrap();

    f.write(content.as_bytes()).unwrap();
}

#[cfg(not(feature = "dev"))]
fn main() {}

'''
'''--- programs/contract-skeleton/examples/create_pool.rs ---
use anchor_client::Client;
use anyhow::Error;
use contract_skeleton::{ErrorCode, PDAIdentifier, Pool};
use fehler::throws;
use gfx_solana_utils::{admin_wallet, cluster, commitment_level, AnchorClientErrorExt, Duplicate};
use solana_sdk::{signature::Keypair, signature::Signer, system_program, sysvar};

#[throws(Error)]
fn main() {
    let _ = env_logger::try_init();

    println!("program_id: {}", contract_skeleton::ID);

    let admin = admin_wallet(1.)?;

    let client = Client::new_with_options(cluster(), admin.clone(), commitment_level());
    let program = client.program(contract_skeleton::ID);

    let seed = Keypair::new().pubkey().to_bytes();

    let (pool, bump) = Pool::get_address_with_bump(&contract_skeleton::ID, &[&seed]);

    let tx = program
        .request()
        .accounts(contract_skeleton::accounts::CreatePool {
            pool,
            admin: admin.pubkey(),
            system_program: system_program::id(),
            rent: sysvar::rent::id(),
        })
        .args(contract_skeleton::instruction::CreatePool { seed, bump })
        .signer(admin)
        .send()
        .map_err(|e| e.canonicalize::<ErrorCode>())?;

    println!(
        "CreatePool: https://explorer.solana.com/tx/{}?cluster=devnet",
        tx
    );
}

'''
'''--- programs/contract-skeleton/src/constraints.rs ---
use crate::states::Pool;
use anchor_lang::prelude::*;
use fehler::throws;

#[throws(ProgramError)]
pub fn suspended(pool: &Pool) {
    require!(!pool.suspended, Suspended);
}

'''
'''--- programs/contract-skeleton/src/contexts/create_pool.rs ---
use crate::states::Pool;
use crate::utils::PDAIdentifier;
use anchor_lang::prelude::*;
use fehler::throws;

#[derive(Accounts)]
#[instruction(seed: [u8; 32], bump: u8)]
pub struct CreatePool<'info> {
    #[account(
        init,
        seeds = [Pool::IDENT, &seed],
        bump = bump,
        payer = admin
    )]
    pub pool: Account<'info, Pool>,

    #[account(mut)]
    pub admin: Signer<'info>,

    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

impl<'info> CreatePool<'info> {
    #[throws(ProgramError)]
    pub fn process(&mut self, seed: [u8; 32], bump: u8) {
        let CreatePool { pool, admin, .. } = self;

        pool.initialize(&seed, bump, admin.key());
    }
}

'''
'''--- programs/contract-skeleton/src/contexts/mod.rs ---
pub mod create_pool;
pub mod user_do_nothing;

pub use create_pool::*;
pub use user_do_nothing::*;

'''
'''--- programs/contract-skeleton/src/contexts/user_do_nothing.rs ---
use crate::states::Pool;
use crate::utils::PDAIdentifier;
use anchor_lang::prelude::*;
use fehler::throws;

#[derive(Accounts)]
pub struct UserDoNothing<'info> {
    #[account(
        seeds = [Pool::IDENT, &pool.seed],
        bump = pool.bump,
    )]
    pub pool: Account<'info, Pool>,

    #[account(mut)]
    pub user_wallet: Signer<'info>,
}

impl<'info> UserDoNothing<'info> {
    #[throws(ProgramError)]
    pub fn process(&mut self) {
        let UserDoNothing { user_wallet, .. } = self;

        emit!(UserDidNothing {
            who: user_wallet.key()
        })
    }
}

#[event]
pub struct UserDidNothing {
    pub who: Pubkey,
}

'''
'''--- programs/contract-skeleton/src/errors.rs ---
use anchor_lang::prelude::*;
use std::convert::TryInto;

// Define errors, custom error code: 300 + idx => 0x12C + 0x${idx}
#[error(offset = 300)]
pub enum ErrorCode {
    #[msg("[T001] Contract address not correct")] //0x12C (300)
    ContractAddressNotCorrect,

    #[msg("[T001] The pool is suspended")] //0x13D (301)
    Suspended,
}

impl TryInto<ErrorCode> for u32 {
    type Error = (); // Error if u32 is out of range

    fn try_into(self) -> std::result::Result<ErrorCode, ()> {
        if (300..=301).contains(&self) {
            Ok(unsafe { std::mem::transmute(self - 300) })
        } else {
            Err(())
        }
    }
}

'''
'''--- programs/contract-skeleton/src/lib.rs ---
mod constraints;
pub mod contexts;
pub mod errors;
pub mod states;
mod utils;

pub use self::{
    constraints::suspended,
    contexts::*,
    errors::{ErrorCode, Result},
    states::*,
    utils::PDAIdentifier,
};
use anchor_lang::prelude::*;
use fehler::throws;
pub use program_id::*;
pub use program_id::*;

#[cfg(not(feature = "dev"))]
mod program_id {
    use anchor_lang::prelude::*;
    declare_id!("HeX9nsXz4GUrVcSAq6bdX8S8DsvryX4FQkfk4YqSZzRF");
}

#[cfg(feature = "dev")]
include!(concat!(env!("OUT_DIR"), "/program_id.rs"));

// Be sure to keep this module clean
// Write logics in each accounts' process method.
#[program]
pub mod skeleton {
    use super::*;

    // ======== User Instructions ========
    #[throws(ProgramError)]
    #[access_control(suspended(&ctx.accounts.pool))]
    pub fn user_do_nothing(ctx: Context<UserDoNothing>) {
        ctx.accounts.process()?;
    }

    // ======== Admin Instructions ========
    #[throws(ProgramError)]
    pub fn create_pool(ctx: Context<CreatePool>, seed: [u8; 32], bump: u8) {
        ctx.accounts.process(seed, bump)?;
    }
}

'''
'''--- programs/contract-skeleton/src/states/mod.rs ---
mod pool;

pub use pool::*;

'''
'''--- programs/contract-skeleton/src/states/pool.rs ---
use crate::utils::PDAIdentifier;
use anchor_lang::prelude::*;

impl PDAIdentifier for Pool {
    const IDENT: &'static [u8] = b"POOL";
}

#[account]
#[derive(Default)]
pub struct Pool {
    pub seed: [u8; 32],
    pub bump: u8,
    pub admin: Pubkey,
    pub suspended: bool,
}

impl Pool {
    pub fn initialize(&mut self, seed: &[u8; 32], bump: u8, admin: Pubkey) {
        self.seed = *seed;
        self.bump = bump;
        self.admin = admin;
    }
}

'''
'''--- programs/contract-skeleton/src/utils.rs ---
use crate::errors::ErrorCode;
use anchor_lang::prelude::*;
use fehler::{throw, throws};

// All the PDA account of this program are derived from a same seed with `find_program_address(IDENT, seed)`.
pub trait PDAIdentifier {
    const IDENT: &'static [u8];

    fn get_address(program_id: &Pubkey, seeds: &[&[u8]]) -> Pubkey {
        Self::get_address_with_bump(program_id, seeds).0
    }

    fn get_address_with_bump(program_id: &Pubkey, seeds: &[&[u8]]) -> (Pubkey, u8) {
        // TODO: avoid heap allocation
        let mut seeds = seeds.to_vec();
        seeds.insert(0, Self::IDENT);
        Pubkey::find_program_address(&seeds, program_id)
    }

    #[throws(ProgramError)]
    fn verify_address(program_id: &Pubkey, seeds: &[&[u8]], address: &Pubkey) {
        let (expected, _) = Self::get_address_with_bump(program_id, seeds);

        if &expected != address {
            throw!(ErrorCode::ContractAddressNotCorrect);
        }
    }

    #[throws(ProgramError)]
    fn verify_address_with_bump(program_id: &Pubkey, seeds: &[&[u8]], bump: u8, address: &Pubkey) {
        // TODO: avoid heap allocation
        let mut seeds = seeds.to_vec();
        seeds.insert(0, Self::IDENT);
        let bump = &[bump];

        seeds.push(bump);

        let addr = Pubkey::create_program_address(&seeds, program_id)?;

        if &addr != address {
            throw!(ErrorCode::ContractAddressNotCorrect);
        }
    }
}

'''
'''--- programs/contract-skeleton/tests/create_pool.rs ---
mod utils;

use anchor_client::Client;
use anyhow::Error;
use fehler::throws;
use gfx_solana_utils::{admin_wallet, cluster, commitment_level, Duplicate};

#[throws(Error)]
#[test]
fn create_pool() {
    let _ = env_logger::try_init();
    println!("program_id: {}", contract_skeleton::ID);

    let admin = admin_wallet(1.)?;

    let client = Client::new_with_options(cluster(), admin.clone(), commitment_level());
    let program = client.program(contract_skeleton::ID);

    utils::create_pool(&program, admin)?;
}

'''
'''--- programs/contract-skeleton/tests/user_do_nothing.rs ---
mod utils;

use anchor_client::Client;
use anyhow::Error;
use fehler::throws;
use gfx_solana_utils::{admin_wallet, cluster, commitment_level, user_wallet, Duplicate};

#[throws(Error)]
#[test]
fn user_do_nothing() {
    let _ = env_logger::try_init();
    println!("program_id: {}", contract_skeleton::ID);

    let admin = admin_wallet(1.)?;
    let user_wallet = user_wallet(1.)?;

    let client = Client::new_with_options(cluster(), admin.clone(), commitment_level());
    let program = client.program(contract_skeleton::ID);

    let pool = utils::create_pool(&program, admin)?;
    utils::user_do_nothing(&program, pool, user_wallet)?;
}

'''
'''--- programs/contract-skeleton/tests/utils/mod.rs ---
#![allow(dead_code)]

use anchor_client::Program;
use anchor_lang::prelude::*;
use anyhow::Error;
use contract_skeleton::{ErrorCode, PDAIdentifier, Pool};
use fehler::throws;
use gfx_solana_utils::AnchorClientErrorExt;
use solana_sdk::{signature::Keypair, signature::Signer, system_program, sysvar};

#[throws(Error)]
pub fn create_pool(program: &Program, admin: &Keypair) -> Pubkey {
    let seed = Keypair::new().pubkey().to_bytes();

    let (pool, bump) = Pool::get_address_with_bump(&contract_skeleton::ID, &[&seed]);

    let tx = program
        .request()
        .accounts(contract_skeleton::accounts::CreatePool {
            pool,
            admin: admin.pubkey(),
            system_program: system_program::id(),
            rent: sysvar::rent::id(),
        })
        .args(contract_skeleton::instruction::CreatePool { seed, bump })
        .signer(admin)
        .send()
        .map_err(|e| e.canonicalize::<ErrorCode>())?;

    println!(
        "CreatePool: https://explorer.solana.com/tx/{}?cluster=devnet",
        tx
    );

    pool
}

#[throws(Error)]
pub fn user_do_nothing(program: &Program, pool: Pubkey, user_wallet: &Keypair) {
    let tx = program
        .request()
        .accounts(contract_skeleton::accounts::UserDoNothing {
            pool,
            user_wallet: user_wallet.pubkey(),
        })
        .args(contract_skeleton::instruction::UserDoNothing {})
        .signer(user_wallet)
        .send()
        .map_err(|e| e.canonicalize::<ErrorCode>())?;

    println!(
        "UserDoNothing: https://explorer.solana.com/tx/{}?cluster=devnet",
        tx
    );
}

'''
'''--- sandbox.config.json ---
{
    "template": "next",
    "view": "console",
    "startScript": "npx pnpm i -r"
}
'''
'''--- scratch_pad.md ---

```rust
struct Tutorial {
    let title: String
    let description: String
    let url: String // package-name
    // let state: 'draft' | 'in_progress' | 'completed' // TBD.
}
```

```rust
struct Proposal {
    let tutorial_id: String;
    let title: String
    let description: String
    let author: String
    let state: 'voting' | 'approved' | 'rejected'
}
```

rpc.Tutorial.get_tutorials() // returns Tutorial[]

const tutorial = rpc.Tutorial.get_tutorial(tutorial_id: String) // returns Tutorial.

rpc.tutorial.proposals({state: 'voting'}) // returns Proposal[] for the given  in state voting tutorial.

## let user publish a tutorial by creating proposal.

rpc.tutorial.create_tutorial({
    title: String,
    description: String,
    url: String,
})

### Create params for Tutorial & initial proposal //// TBD.
```rust
#[Accounts]
struct CreateTutorialParams {
    #[account(name="tutorial_author", seed, payer=author)]
    tutorial: Tutorial, // PDA 
    bounty: u128,  // Money is money bittch.
}
```

* Extension proposal.
* Update dependecy. 
  * solana ver 1.0.0
  * solana ver 2.0.0

'''
'''--- tutorials/learn-near-wallet-balance/.eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- tutorials/learn-near-wallet-balance/README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- tutorials/learn-near-wallet-balance/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- tutorials/learn-near-wallet-balance/next.config.js ---
/** @type {import('next').NextConfig} */
module.exports = {
  domains: ['i.imgur.com'],
  reactStrictMode: true,
}

'''
'''--- tutorials/learn-near-wallet-balance/package.json ---
{
  "name": "learn-near-wallet-balance",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "near-api-js": "^0.44.2",
    "next": "12.0.8",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "@dont-panic/ui": "workspace:*"
  },
  "devDependencies": {
    "@types/node": "17.0.8",
    "@types/react": "17.0.38",
    "eslint": "7",
    "eslint-config-next": "12.0.8",
    "typescript": "4.5.4"
  }
}

'''
'''--- tutorials/learn-near-wallet-balance/pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- tutorials/learn-near-wallet-balance/public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- tutorials/learn-near-wallet-balance/styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

'''
'''--- tutorials/learn-near-wallet-balance/styles/globals.css ---
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

'''
'''--- tutorials/learn-near-wallet-balance/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''
'''--- tutorials/learn-solana-wallet-balance/.eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- tutorials/learn-solana-wallet-balance/README.md ---
Remove something

'''
'''--- tutorials/learn-solana-wallet-balance/jest.config.js ---
// jest.config.js
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['@dont-panic/config/jest.setup.ts'],
  // if using TypeScript with a baseUrl set to the root directory then you need the below for alias' to work
  moduleDirectories: ['node_modules', '<rootDir>/'],
  testEnvironment: 'jest-environment-jsdom',
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig)
'''
'''--- tutorials/learn-solana-wallet-balance/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- tutorials/learn-solana-wallet-balance/next.config.js ---
const withTM = require("next-transpile-modules")([
  "@dont-panic/ui", 
  "@dont-panic/mdx"
]);

/** @type {import('next').NextConfig} */
module.exports = withTM({
  domains: ['i.imgur.com'],
  reactStrictMode: true,
  webpack:(config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    if (!isServer) {
      config.resolve.fallback.fs = false;
    }
    return config
  }, 
});

'''
'''--- tutorials/learn-solana-wallet-balance/package.json ---
{
  "name": "learn-solana-wallet-balance",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest --watch"
  },
  "dependencies": {
    "@dont-panic/mdx": "workspace:*",
    "@dont-panic/ui": "workspace:*",
    "@solana/web3.js": "^1.31.0",
    "autoprefixer": "^10.4.2",
    "next": "12.0.8",
    "next-mdx-remote": "^3.0.8",
    "postcss": "^8.4.5",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "tailwindcss": "^3.0.15"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@dont-panic/config": "workspace:*",
    "@types/node": "17.0.8",
    "@types/react": "17.0.38",
    "eslint": "7",
    "eslint-config-next": "12.0.8",
    "jest": "^27.4.7",
    "jest-dom": "^4.0.0",
    "typescript": "4.5.4"
  }
}

'''
'''--- tutorials/learn-solana-wallet-balance/pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- tutorials/learn-solana-wallet-balance/postcss.config.js ---
// If you want to use other PostCSS plugins, see the following:
// https://tailwindcss.com/docs/using-with-preprocessors
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }
'''
'''--- tutorials/learn-solana-wallet-balance/public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- tutorials/learn-solana-wallet-balance/styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

'''
'''--- tutorials/learn-solana-wallet-balance/styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;
'''
'''--- tutorials/learn-solana-wallet-balance/tailwind.config.js ---
module.exports = {
  content: [
    './components/**/*.{js,ts,jsx,tsx}',
    './pages/**/*.{js,ts,jsx,tsx}',
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [require('@tailwindcss/typography')],
}
'''
'''--- tutorials/learn-solana-wallet-balance/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''