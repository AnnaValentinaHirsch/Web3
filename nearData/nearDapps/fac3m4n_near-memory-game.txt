*GitHub Repository "fac3m4n/near-memory-game"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "near-zoo-game",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.2.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.1.3",
    "bootstrap-icons": "^1.8.1",
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-bootstrap": "^2.3.1",
    "react-dom": "^18.1.0",
    "react-router-dom": "^6.3.0",
    "react-scripts": "^4.0.3",
    "react-toastify": "^9.0.1",
    "uuid": "^8.3.2",
    "web-vitals": "^2.1.4",
    "zustand": "^4.0.0-rc.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import { useEffect } from "react";

// react-router
import { Route, Routes } from "react-router-dom";

// components and pages
import HomePage from "./components/home-page/home-page";
// import Wallet from "./components/wallet/wallet";
import { Container, Spinner } from "react-bootstrap"; // bootstrap components

// NEAR utils
import {
  // logout as destroy,
  accountBalance,
  initializeContract,
} from "./utils/near";

// store
import useAccount from "./store/account.store";
import GamePage from "./components/game-page/game-page";
import useInterval from "./hooks/use-interval";
import CollectionPage from "./components/collection-page/collection-page";

const App = () => {
  const {
    // accountId,
    // balance,
    // isWalletConnected,
    setAccount,
    setBalance,
    setPoints,
    timeRemaining,
    setTimeRemaining,
    accountLoading,
    setAccountLoading,
  } = useAccount();

  useEffect(() => {
    (async () => {
      try {
        await initializeContract();

        const acc = window.walletConnection.account();
        setAccount(acc);

        if (acc && acc.accountId) {
          const bal = await accountBalance();
          setBalance(bal);

          // TODO: Integrate with smart contract to get points owned by user, and remaining time for the points expiry
          const accountDetails = JSON.parse(
            localStorage.getItem(acc.accountId)
          );
          const totalPoints = accountDetails?.points || 0;
          // TODO: adding arbitrary time here, not storing for now, replace with API call values
          const timeRemaining = totalPoints > 0 ? 16 * 60 * 60 : 0;

          setPoints(totalPoints);
          setTimeRemaining(timeRemaining);
        }

        setAccountLoading(false);
      } catch (err) {
        console.log(err);
      }
    })();
  }, []); /* eslint-disable-line */ /* fucking BS eslint error */

  // uncomment this to see logs
  // useEffect(() => {
  //   console.log({ account, accountId, balance, isWalletConnected });
  // });

  useInterval(() => {
    if (accountLoading) {
      return;
    }

    setTimeRemaining(timeRemaining - 1);
  }, 1000);

  if (accountLoading)
    return (
      <Container>
        <Spinner />
      </Container>
    );

  return (
    <div className="main-container">
      <main>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="game" element={<GamePage />} />
          <Route path="collection" element={<CollectionPage />} />
        </Routes>
      </main>
    </div>
  );
};

export default App;

'''
'''--- src/components/back-link/back-link.module.css ---
.backLink {
  position: absolute;
  color: #fff;
  outline: none;
  text-decoration: none;
  z-index: 10;
}

.backLink:hover {
  color: #fff;
  outline: none;
  text-decoration: none;
  transform: scale(1.1);
}

'''
'''--- src/components/collection-page/collection-page.module.css ---
.collectionContainer {
  font-family: CHAWP;
  margin: 0;
  text-align: center;
  width: 100%;
  padding-top: 60%;
  max-height: 100%;
  position: relative;
  background: url("../../assets/img/collection_bg.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
  color: #fff;
}

.collectionContent {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;

  margin: 2em auto;
  padding: 0 3em;
}

.cardGrid {
  display: grid;
  width: 75%;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  /* gap: 1em; */
  margin: 0 auto;
}

@media screen and (min-width: 1400px) {
  .collectionContent {
    font-size: 18px;
  }
}

@media screen and (min-width: 1600px) {
  .collectionContent {
    font-size: 20px;
  }
}

'''
'''--- src/components/game-card/game-card.css ---
.card {
  position: relative !important;
  border: none !important;
  background: transparent !important;
  border-radius: 0 !important;
  outline: none !important;
}

.card img {
  width: 100%;
  height: 100%;
  display: block;
}

/* front card - picture */
.card .front {
  transform: rotateY(90deg);
  transition: all ease-in 0.2s;
  position: absolute;
  background: #74a7d6;
  border: 2px solid #fff;
  border-radius: 6px;
}

.flipped .front {
  transform: rotateY(0deg);
  transition-delay: 0.2s;
}

/* back card - cover */
.card .back {
  transition: all ease-in 0.2s;
  transition-delay: 0.2s;
}

.flipped .back {
  transform: rotateY(90deg);
  transition-delay: 0s;
}

'''
'''--- src/components/game-info/game-info.module.css ---
.info {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.info a {
  text-decoration: none;
  color: #fff;
}
.info a:hover {
  text-decoration: none;
  color: #fff;
}

.numWins {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 1.2em;
}

.win {
  border: 2px solid #fff;
  padding: 8px;
  border-radius: 50%;
}

'''
'''--- src/components/game-page/game-page.module.css ---
.gameBody {
  font-family: CHAWP;
  margin: 0;
  font-size: 1.5rem;
  text-align: center;
  width: 100%;
  /* min-width: 920px; */
  padding-top: 64.65%;
  max-height: 100%;
  position: relative;
  background: url("../../assets/img/game_bg.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
  color: #fff;
}

@media screen and (max-width: 900px) {
  .gameBody {
    font-size: 1rem;
  }
}

@media screen and (max-width: 640px) {
  .gameBody {
    font-size: 0.8rem;
  }
}

.game {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;

  /* max-width: 860px; */
  margin: 2rem auto;
  padding: 0 5rem;
}

.game p {
  margin-top: 0.75em;
}

.game button {
  /* position: absolute;
  bottom: 2%;
  left: 3.5%; */
  margin-top: 0.75em;
  background: none;
  border: 2px solid #fff;
  padding: 0.375rem 0.75rem;
  border-radius: 4px;
  color: #fff;
  font-weight: bold;
  cursor: pointer;
  font-size: 1em;
}

.game h2 {
  margin-top: 0.5em;
}

@media screen and (max-width: 1280px) {
  .game h2 {
    margin-top: 0.25em;
  }
  .game p,
  .game button {
    margin-top: 0.25em;
  }
}

.game button:hover {
  background: #c23866;
  color: #fff;
}

.cardGrid {
  margin-top: 40px;
  display: grid;
  margin: auto;
  width: 55%;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  /* grid-gap: 20px; */
  gap: 1.25rem;
}

.cardGrid.row5 {
  width: 65%;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  gap: 1rem;
}

'''
'''--- src/components/game-wins/game-wins.module.css ---
.numWins {
  position: absolute;
  right: 6%;
  top: 20%;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 1.2em;

  font-size: 2rem;
}

@media screen and (max-width: 780px) {
  .numWins {
    font-size: 1.5rem;
    right: 8%;
  }
}

.win {
  border: 2px solid #fff;
  padding: 0.5rem;
  border-radius: 50%;
}

'''
'''--- src/components/home-page/home-page.module.css ---
@font-face {
  font-family: CHAWP;
  src: url("../../fonts/chawp/chawp.otf") format("opentype");
}

.coverbg {
  font-family: CHAWP;
  width: 100%;
  padding-top: 70%;
  max-height: 100%;
  position: relative;
  background-image: url("../../assets/img/cover-bg.jpg");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}

.coverbgContent {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.link {
  color: white;
  font-size: 2rem;
  text-decoration: none;
}

.link:hover {
  color: white;
  transform: scale(1.1, 1.1);
}

'''
'''--- src/components/logout/logout.module.css ---
.logout {
  color: #888680;
  font-size: 1.5rem;

  position: absolute;
  top: 80px;
  right: 90px;

  z-index: 10;
}

.logout button {
  color: #f50058;
  outline: none;
  border: none;
  background: none;
  cursor: pointer;
}

'''
'''--- src/components/nft-card/nft-card.module.css ---
.nftCard {
  font-family: CHAWP;
  margin: 0;
  text-align: center;
  width: 100%;
  padding-top: 100%;
  position: relative;
}

.nftContent {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.nftCard img {
  position: absolute;
  width: 40%;
  height: 50%;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.btn {
  position: absolute;
  bottom: 10%;
  left: 50%;
  transform: translateX(-50%);
  font-size: 1.5em;

  border: none;
  outline: none;
  background: none;
}

.btn.mint {
  color: #f50058;
}
.btn.stake {
  color: #28a334;
}

.btn::after {
  content: "";
  position: absolute;
  border: 2px solid;
  width: 40%;
  bottom: -3px;
  left: 3px;
  transform: rotate(-10deg);
}

.bg0 {
  background: url("../../assets/img/collection-bgs/0.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg1 {
  background: url("../../assets/img/collection-bgs/1.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg2 {
  background: url("../../assets/img/collection-bgs/2.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg3 {
  background: url("../../assets/img/collection-bgs/3.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg4 {
  background: url("../../assets/img/collection-bgs/4.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg5 {
  background: url("../../assets/img/collection-bgs/5.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg6 {
  background: url("../../assets/img/collection-bgs/6.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg7 {
  background: url("../../assets/img/collection-bgs/7.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg8 {
  background: url("../../assets/img/collection-bgs/8.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg9 {
  background: url("../../assets/img/collection-bgs/9.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg10 {
  background: url("../../assets/img/collection-bgs/10.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}
.bg11 {
  background: url("../../assets/img/collection-bgs/11.png");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}

'''
'''--- src/components/points-counter/points-counter.module.css ---
.pointsCounter {
  position: absolute;
  /* top: 40px;
  left: 40px; */

  top: 5%;
  left: 5%;

  font-size: 2rem;
}

.game {
  color: #fff;
  /* top: 160px;
  left: 120px; */

  top: 20%;
  left: 8%;
}

.imgContainer {
  width: 3rem;
  height: 4rem;
  position: relative;
  margin-right: 0.5rem;
}

/* @media screen and (max-width: 900) {
} */

'''
'''--- src/components/wallet/wallet.module.css ---
.wallet {
  position: absolute;
  top: 0;
  right: 0;
  color: black;

  /* color: #fff; */
}

'''
'''--- src/hooks/use-interval.js ---
import { useEffect, useRef } from "react";

export const useInterval = (callback, delay) => {
  const savedCallback = useRef();

  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    const tick = () => {
      savedCallback.current();
    };
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () => clearInterval(id);
    }
  }, [delay]);
};

export default useInterval;

'''
'''--- src/hooks/use-update-effect.js ---
import { useEffect, useRef } from "react";

function useUpdateEffect(effect, deps) {
  const isFirst = useRef(true);

  useEffect(() => {
    if (isFirst.current) {
      isFirst.current = false;
      return;
    }
    return effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

export default useUpdateEffect;

'''
'''--- src/index.css ---
@font-face {
  font-family: CHAWP;
  src: url("./fonts/chawp/chawp.otf") format("opentype");
}

body {
  margin: 0;
  padding: 0;
  overflow: hidden;
  height: 100vh;
  width: 100vw;
  position: relative;
  font-family: CHAWP, -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto",
    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

.main-container {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  max-width: 1920px;
  max-height: 100vh;
  transform: translate(-50%, -50%);
}

.main-container > main {
  position: relative;
  width: 100%;
}

@media screen and (max-width: 900px) {
  :root {
    font-size: 12px;
  }
}

@media screen and (max-width: 780px) {
  :root {
    font-size: 10px;
  }
}

@media screen and (max-width: 640px) {
  :root {
    font-size: 8px;
  }
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { BrowserRouter as Router } from "react-router-dom";
import "./index.css";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>
);

reportWebVitals();

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/store/account.store.js ---
import create from "zustand";

export const useAccount = create((set) => ({
  account: null,
  accountId: "",
  isWalletConnected: false,
  balance: "0",
  balanceNumber: 0,
  totalPoints: 0,
  timeRemaining: 0,
  accountLoading: true,

  setAccount(account) {
    set({
      account,
      accountId: account.accountId,
      isWalletConnected: Boolean(account.accountId),
      // accountLoading: false,
    });
  },
  setBalance(balance) {
    set({ balance, balanceNumber: +balance });
  },
  setPoints(totalPoints) {
    set({ totalPoints });
  },
  setTimeRemaining(timeRemaining) {
    set({ timeRemaining });
  },
  setAccountLoading(accountLoading) {
    set({ accountLoading });
  },
}));

export default useAccount;

'''
'''--- src/store/index.js ---
export * from "./account.store";

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "kevo.kevo123.testnet"; // line 1

function environment(env) {
    switch (env) {
        case "mainnet": // line 5
            return {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
        case "testnet": // line 14
            return {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
        default:
            throw Error(`Unknown environment '${env}'.`);
    }
}

export default environment;
'''
'''--- src/utils/date-time.js ---
export const convertToHours = (timeInSeconds) => {
  return new Date(timeInSeconds * 1000).toISOString().substr(11, 8);
};

'''
'''--- src/utils/game-rules.js ---
export const getTimeForLevel = (level) => {
  switch (level) {
    case 0:
      return 130;
    case 1:
      return 120;
    case 2:
      return 110;
    case 3:
      return 100;
    case 4:
      return 90;
    case 5:
      return 80;
    case 6:
      return 70;
    case 7:
      return 60;
    case 8:
      return 50;
    case 9:
      return 40;
    case 10:
      return 30;
    default:
      return 0;
  }
};

export const getPointsForLevel = (level) => {
  switch (level) {
    case 0:
      return 100;
    case 1:
      return 120;
    case 2:
      return 140;
    case 3:
      return 160;
    case 4:
      return 180;
    case 5:
      return 200;
    case 6:
      return 220;
    case 7:
      return 240;
    case 8:
      return 260;
    case 9:
      return 280;
    case 10:
      return 300;
    default:
      return 0;
  }
};

export const shuffleArray = (array) => {
  let currentIndex = array.length,
    randomIndex;

  // While there remain elements to shuffle.
  while (currentIndex !== 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex],
      array[currentIndex],
    ];
  }

  return array;
};

'''
'''--- src/utils/game.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createProduct(product) {
    product.id = uuid4();
    product.price = parseNearAmount(product.price + "");
    return window.contract.setProduct({ product });
}

export function getProducts() {
    return window.contract.getProducts();
}

export async function buyProduct({ id, price }) {
    await window.contract.buyProduct({ productId: id }, GAS, price);
}
'''
'''--- src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
    const near = await connect(
        Object.assign(
            { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
            nearEnv
        )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
        window.walletConnection.account(),
        nearEnv.contractName,
        {
            viewMethods: ["getProduct", "getProducts"],
            changeMethods: ["buyProduct", "setProduct"],
        }
    );
}

export async function accountBalance() {
    return formatNearAmount(
        (await window.walletConnection.account().getAccountBalance()).total,
        2
    );
}

export async function getAccountId() {
    return window.walletConnection.getAccountId();
}

export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
}
'''