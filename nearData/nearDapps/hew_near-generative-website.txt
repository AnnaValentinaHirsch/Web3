*GitHub Repository "hew/near-generative-website"*

'''--- README.md ---
# NEAR NFT Generative Website

Demo: [near-nft-generative-website.netlify.com](https://near-nft-generative-website.netlify.com)

Blog Post: https://medium.com/@tahini/how-to-mint-climate-neutral-nfts-for-pennies-on-near-50f0a8e833b4

'''
'''--- config.js ---
export const nftaddress = "0x5c20Fc134aa111e196Fe9b42001cbDbB73dA0c62"
'''
'''--- hooks.ts ---
import {useEffect, useState} from 'react';
import crypto from 'crypto';
import BN from 'bn.js';
import {Contract, keyStores, connect, WalletConnection, utils} from 'near-api-js';
import {SEED} from './utils';

export const useInitializeNEAR = ({NFT_ID}) => {
  const [near, setNear] = useState(undefined as any);
  const [userWallet, setUserWallet] = useState(undefined as any);
  const [contract, setContract] = useState(undefined as any);

  console.log(process.env.NODE_ENV, 'node env');

  useEffect(() => {
    const initializeSite = async () => {
      const config = {
        networkId: process.env.NODE_ENV === 'development' ? 'testnet' : 'testnet',
        nodeUrl: process.env.NODE_ENV === 'development' ? 'https://rpc.testnet.near.org' : 'https://rpc.testnet.near.org',  
        walletUrl: process.env.NODE_ENV === 'development' ? 'https://wallet.testnet.near.org': 'https://wallet.testnet.near.org',
        helperUrl: process.env.NODE_ENV === 'development' ? 'https://helper.testnet.near.org' : 'https://helper.testnet.near.org',
        explorerUrl: process.env.NODE_ENV === 'development' ? 'https://explorer.testnet.near.org' : 'https://explorer.testnet.near.org',
        keyStore: new keyStores.BrowserLocalStorageKeyStore(),
        headers: {},
      };

      const methods = {
        viewMethods: ['nft_tokens', 'nft_tokens_for_owner'],
        changeMethods: ['nft_mint'],
      };

      const _near = await connect(config);
      const _wallet = new WalletConnection(_near, 'website_user');
      const _contract = new Contract(_wallet.account(), NFT_ID, methods);

      setNear(_near);
      setUserWallet(_wallet);
      setContract(_contract);
    };

    initializeSite();
  }, []);

  const connectWallet = async () => {
    userWallet.requestSignIn({
      contractId: NFT_ID,
      successUrl: process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : process.env.domain,
      failureUrl: process.env.NODE_ENV === 'development' ? 'http://localhost:3000/auth-failure' : process.env.domain + '/auth-failure',
    });
  };

  const disconnectWallet = async () => {
    await userWallet.signOut();
    location.reload();
  };

  const mint = async () => {
    const tokens = await contract.nft_tokens({
      from_index: '0',
      limit: 1000,
    });

    const {token_id} = tokens[tokens.length - 1];
    const nextId = (parseInt(token_id) + 1).toString();
    const hash = crypto.randomBytes(21).toString('hex');

    const NFTData = {
      token_id: nextId,
      receiver_id: userWallet.getAccountId(),
      metadata: {
        title: `${userWallet.getAccountId()}'s Seed Hash`,
        description: 'The seed hash is used to power the design of the website.',
        extra: hash,
      },
      account_id: userWallet.getAccountId(),
    };

    await contract.nft_mint(
      NFTData,
      new BN('300000000000000', 8), // attached GAS (optional)
      utils.format.parseNearAmount('0.01'), // attached deposit in yoctoNEAR (optional)
    );
  };

  return {
    connectWallet,
    disconnectWallet,
    near,
    userWallet,
    contract,
    utils,
    mint,
  };
};

export const useInitializeSeed = ({contract, wallet}) => {
  const [nfts, setNfts] = useState([] as any);
  const [seed, setSeed] = useState({} as any);

  useEffect(() => {
    const init = async () => {
      const tokens = await contract.nft_tokens({
        from_index: '0',
        limit: 1000,
      });

      const last = tokens[tokens.length - 1];
      const hash = last?.metadata?.extra;

      if (!hash) {
        throw new Error('No seed hash found.');
      }

      setSeed(SEED(hash));
      setNfts(tokens);
    };

    if (contract && wallet && !nfts.length) {
      init();
    }
  }, [contract, wallet]);

  return {
    nfts,
    seed,
  };
};

export const useInitializeOwnerTokens = ({contract, wallet}) => {
  const [nfts, setNfts] = useState([] as any);
  const [seed, setSeed] = useState({} as any);

  useEffect(() => {
    const init = async () => {
      const tokens = await contract.nft_tokens_for_owner({
        account_id: wallet.getAccountId(),
        from_index: '0',
        limit: 1000,
      });

      const last = tokens[tokens.length - 1];
      const hash = last?.metadata?.extra;

      if (!hash) {
        throw new Error('No seed hash found.');
      }

      setSeed(SEED(hash));
      setNfts(tokens);
    };

    if (contract && wallet && !nfts.length) {
      init();
    }
  }, [contract, wallet]);

  return {
    nfts,
    seed,
  };
};

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/types/global" />
/// <reference types="next/image-types/global" />

'''
'''--- next.config.js ---
module.exports = {
  reactStrictMode: true,
}

'''
'''--- package.json ---
{
  "name": "nft-website",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@types/react": "^17.0.26",
    "crypto": "^1.0.1",
    "framer-motion": "^4.1.17",
    "near-api-js": "^0.44.2",
    "next": "11.0.1",
    "number-to-words": "^1.2.4",
    "random-hash": "^4.0.1",
    "react": "17.0.2",
    "react-dom": "17.0.2"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.2",
    "prettier": "^2.4.1",
    "tailwindcss": "^2.2.4",
    "ts-node": "^10.3.0",
    "typescript": "^4.4.4"
  }
}

'''
'''--- pages/_app.js ---
import '../styles/globals.css'

function Gitdenza({ Component, pageProps }) {
  return (
    <div>
      <Component {...pageProps} />
    </div>
  )
}

export default Gitdenza

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- styles/globals.css ---
/* ./styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

.square {
  width: 100%;
  height: 35vh;
  display: flex;
  justify-content: center;
  align-items: center;
  /* will-change: opacity; */
  /* -webkit-filter: url("#filter"); */
  /* -moz-filter: url("#filter"); */
  /* filter: url("/#filter"); */
}

.svg-filters {
  position: absolute;
}

div[data-border="true"] {
  /* border: 1px solid; */
  /* border-color: inherit; */
}

'''
'''--- tailwind.config.js ---
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}

'''
'''--- test/sample-test.js ---
describe("NFTMarket", function() {
  it("Should create and execute market sales", async function() {
    const Market = await ethers.getContractFactory("NFTMarket")
    const market = await Market.deploy()
    await market.deployed()
    const marketAddress = market.address

    const NFT = await ethers.getContractFactory("NFT")
    const nft = await NFT.deploy(marketAddress)
    await nft.deployed()
    const nftContractAddress = nft.address

    let listingPrice = await market.getListingPrice()
    listingPrice = listingPrice.toString()

    const auctionPrice = ethers.utils.parseUnits('1', 'ether')

    await nft.createToken("https://www.mytokenlocation.com")
    await nft.createToken("https://www.mytokenlocation2.com")
  
    await market.createMarketItem(nftContractAddress, 1, auctionPrice, { value: listingPrice })
    await market.createMarketItem(nftContractAddress, 2, auctionPrice, { value: listingPrice })
    
    const [_, buyerAddress] = await ethers.getSigners()

    await market.connect(buyerAddress).createMarketSale(nftContractAddress, 1, { value: auctionPrice})

    items = await market.fetchMarketItems()
    items = await Promise.all(items.map(async i => {
      const tokenUri = await nft.tokenURI(i.tokenId)
      let item = {
        price: i.price.toString(),
        tokenId: i.price.toString(),
        seller: i.seller,
        owner: i.owner,
        tokenUri
      }
      return item
    }))
    console.log('items: ', items)
  })
})

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

'''