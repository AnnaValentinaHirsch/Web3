*GitHub Repository "Made-For-Gamers/game-jam-webgl-template"*

'''--- Assets/Scripts/0xcord/Chainlink_API.cs ---
using System.Collections;
using TMPro;
using UnityEngine;
using UnityEngine.Networking;
using Newtonsoft.Json;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

//0xford - Chainlink VRF
// https://docs.chain.link/vrf/v2/introduction/
// See below link on how to obtain your own API key
// https://www.notion.so/How-to-use-0xCord-s-Chainlink-VRF-API-in-your-unity-game-c5b508a63a094b90b46f5843e45df000

public class Chainlink_API : MonoBehaviour
{
    //UI objects
    [SerializeField] private TextMeshProUGUI txtHeading;
    [SerializeField] private Button BtnCallApi;
    [SerializeField] private string apiKey;

    public void CallVRF()
    {
        StartCoroutine(RequestRandomNumber());
    }

    private IEnumerator RequestRandomNumber()
    {
        BtnCallApi.enabled = false;
        txtHeading.text = "Requesting random number from VRF.  Please wait...";

        string url = "https://0xcord.com/api/vrfv2/requestRandomNumber?network=fuji&numWords=1";
        string authToken = apiKey;

        UnityWebRequest request = UnityWebRequest.Post(url, "");

        request.SetRequestHeader("Authorization", authToken);
        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            string json = request.downloadHandler.text;
            RandomNumberResponse response = JsonConvert.DeserializeObject<RandomNumberResponse>(json);

            if (response != null && response != null && response.data.randomNumber != null && response.data.randomNumber.Length > 0)
            {
                string randomNumber = response.data.randomNumber[0];
                txtHeading.text = "Random number: " + randomNumber;

                Debug.Log("requestId: " + response.data.requestId);
                Debug.Log("transactionHash: " + response.data.transactionHash);
                Debug.Log("url: " + response.data.url);
                Debug.Log("randomNumber: " + randomNumber);
            }
            else
            {
                Debug.Log("Failed to parse response");
            }
        }
        else
        {
            Debug.Log("Error: " + request.error);
        }
        BtnCallApi.enabled = true;
    }

    public void NearScene()
    {
        SceneManager.LoadScene("WalletLogin");
    }
}

'''
'''--- Assets/Scripts/0xcord/Return Data/RandomNumberResponse.cs ---
using System;

[Serializable]
public class RandomNumberResponse 
{   
     public Data data;

    [Serializable]
    public class Data
    {
        public bool success;
        public string requestId;
        public string transactionHash;
        public string url;
        public string[] randomNumber;
    }
}

'''
'''--- Assets/Scripts/Auth/WalletAuthenticate.cs ---
using UnityEngine;
using TMPro;
using UnityEngine.SceneManagement;
using Near;
using UnityEngine.UI;
using Newtonsoft.Json;
using Unity.VisualScripting.Antlr3.Runtime;
using System;
using Unity.VisualScripting.FullSerializer;

public class WalletAuthenticate : MonoBehaviour
{
    //UI objects
    [SerializeField] private TextMeshProUGUI txtHeading;
    [SerializeField] private TextMeshProUGUI btnLoginText;
    [SerializeField] private TMP_Dropdown ddNetwork;
    [SerializeField] private TMP_InputField inputContract;
    [SerializeField] private TMP_InputField inputMethod;
    [SerializeField] private TMP_InputField inputArgs;
    [SerializeField] private Toggle toggleChange;
    [SerializeField] private Toggle toggleNFTMint;
    [SerializeField] private Toggle toggleNFTMFG;
    [SerializeField] private TextMeshProUGUI txtContract;
    [SerializeField] private Image nftImage;

    /// <summary>
    /// Once authenticated with the Near wallet, the user is redirected back here.
    /// Near passes 2 perameters in the URL needed for the session (account_id and allKeys)
    /// </summary>

    #region Scene Methods

    private void Start()
    {
        //Set the network drop down
        CurrentNetwork();
        LoginStatus();
    }

    private void OnEnable()
    {
        ddNetwork.onValueChanged.AddListener(delegate { UpdateNetwork(); });
        toggleNFTMFG.onValueChanged.AddListener(delegate { UpdateMFGToggle(); });
        toggleNFTMint.onValueChanged.AddListener(delegate { UpdateMintToggle(); });
    }

    private void UpdateMintToggle()
    {
        inputContract.text = "paxstore.mintspace2.testnet";
        inputMethod.text = "nft_token";
        inputArgs.text = "{\"token_id\": \"0\"}";
    }

    private void UpdateMFGToggle()
    {
        inputContract.text = "mfg.testnet";
        inputMethod.text = "get_nft";
        inputArgs.text = "{\"token_id\": \"1\"}";
    }

    private void OnDisable()
    {
        ddNetwork.onValueChanged.RemoveListener(delegate { UpdateNetwork(); });
    }

    //Update dropdown selection at start
    private void CurrentNetwork()
    {
        if (PlayerPrefs.GetString("networkId") == "")
        {
            PlayerPrefs.SetString("networkId", ddNetwork.options[ddNetwork.value].text);
        }
        else
        {
            switch (PlayerPrefs.GetString("networkId"))
            {
                case "mainnet":
                    ddNetwork.SetValueWithoutNotify(1);
                    break;
                case "testnet":
                    ddNetwork.SetValueWithoutNotify(0);
                    break;
                case "betanet":
                    ddNetwork.SetValueWithoutNotify(2);
                    break;
            }
        }
    }

    //Update the network from any network dropdown change
    private void UpdateNetwork()
    {
        PlayerPrefs.SetString("networkId", ddNetwork.options[ddNetwork.value].text);
    }

    //Log messages to the heading label
    public void ChangeText(string message)
    {
        if (message == "")
        {
            message = "No Account";
        }
        txtHeading.text = message;
    }

    //Change the login button text and stored isLogged variable with each login/logout action
    public void ChangeLoginStatus(string status)
    {
        if (status == "true")
        {
            Near_API.isLoggedIn = true;
            btnLoginText.text = "Logout";
        }
        else
        {
            Near_API.isLoggedIn = false;
            btnLoginText.text = "Login";
        }
        ChangeText("Login Status: " + status);
    }

    //Update the stored accountId vriable
    public void UpdateAccountId(string accountId)
    {
        if (accountId == "")
        {
            accountId = "Zero";
        }
        txtHeading.text = accountId;
        Near_API.accountId = accountId;
    }

    //Load the RPC example scene
    public void RPCScene()
    {
        SceneManager.LoadScene("RPC");
    }

    //Load the 0xcord - Chainlink VRF scene
    public void ChainlinkScene()
    {
        SceneManager.LoadScene("0xcord");
    }

    //Display returned contract metadata and NFT image if selected
    public async void DisplayContract(string json)
    {       
        if (toggleNFTMint.isOn)
        {
            NearNFTMeta.Root nft = JsonConvert.DeserializeObject<NearNFTMeta.Root>(json);
            ArweaveNFTMeta nftData = await GetArweaveNFTMeta.GetNftData(nft.metadata.reference);
            Texture texture = await GetNFTImage.GetImage(nftData.media.ToString());
            if (texture != null)
            {
                nftImage.sprite = Sprite.Create((Texture2D)texture, new Rect(0, 0, texture.width, texture.height), Vector2.zero);
            }
        }
        else if (toggleNFTMFG.isOn)
        {
            MFGNFTMeta nft = JsonConvert.DeserializeObject<MFGNFTMeta>(json);
            Texture texture = await GetNFTImage.GetImage(nft.metadata.media.ToString());
            
            if (texture != null)
            {
                nftImage.sprite = Sprite.Create((Texture2D)texture, new Rect(0, 0, texture.width, texture.height), Vector2.zero);
            }
        }
        txtContract.text = json;
    }

    #endregion

    #region API Calls

    //Login to Near Wallet
    public void Login()
    {
        if (!Near_API.isLoggedIn)
        {
            Near_API.Login("", PlayerPrefs.GetString("networkId"));
        }
        else
        {
            Near_API.Logout(PlayerPrefs.GetString("networkId"));
        }
        LoginStatus();
    }

    //Ask Near for the login status
    public void LoginStatus()
    {
        Near_API.LoginStatus(PlayerPrefs.GetString("networkId"));
    }

    //Get the account ID
    public void AccountId()
    {
        Near_API.AccountId(PlayerPrefs.GetString("networkId"));
    }

    //Get the total account balance
    public void AccountBalance()
    {
        Near_API.AccountBalance(PlayerPrefs.GetString("networkId"), Near_API.accountId);
    }

    //Call contract
    public void CallContract()
    {
        Near_API.CallContract(inputContract.text, inputMethod.text, inputArgs.text, Near_API.accountId, PlayerPrefs.GetString("networkId"), toggleChange.isOn);
    }

    #endregion

}
'''
'''--- Assets/Scripts/JS API/Near_API.cs ---
using System.Runtime.InteropServices;

namespace Near
{

    public class Near_API
    {
        //JSLIB plugin - functions to interact the Near JavaScript API
#if UNITY_WEBGL 

        [DllImport("__Internal")]
        public static extern void Login(string contractId, string networkId);

        [DllImport("__Internal")]
        public static extern void Logout(string networkId);

        [DllImport("__Internal")]
        public static extern void LoginStatus(string networkId);

        [DllImport("__Internal")]
        public static extern void AccountId(string networkId);

        [DllImport("__Internal")]
        public static extern void AccountBalance(string networkId, string accountId);

        [DllImport("__Internal")]
        public static extern void CallContract(string contractId, string methodName,string arg, string accountId, string networkbool, bool isChange = false);

#endif

        public static bool isLoggedIn;
        public static string accountId;

    }
}

'''
'''--- Assets/Scripts/NFT/GetArweaveNFTMeta.cs ---
using System.Threading.Tasks;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;

//Get the the Minbase NFT metadata from an NFT stored on arweave.net
public class GetArweaveNFTMeta : MonoBehaviour
{
    private const string ipfsUrl = "https://arweave.net/";

    async static public Task<ArweaveNFTMeta> GetNftData(string urlRef)
    {
        urlRef = ipfsUrl + urlRef;
        using (UnityWebRequest request = UnityWebRequest.Get(urlRef))
        {
            try
            {
                await request.SendWebRequest();
                ArweaveNFTMeta nftData = JsonConvert.DeserializeObject<ArweaveNFTMeta>(request.downloadHandler.text);
                return nftData;
            }
            catch
            {
                Debug.Log("Error: " + urlRef);
                return null;
            }
        }
    }
}

'''
'''--- Assets/Scripts/NFT/GetMFGNFTMeta.cs ---
using System.Threading.Tasks;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;

//Get the the MFG NFT metadata from an NFT stored on IPFS
public class GetMFGNFTMeta : MonoBehaviour
{
    private const string ipfsUrl = "";

    async static public Task<MFGNFTMeta> GetNftData(string urlRef)
    {
        urlRef = ipfsUrl + urlRef;
        using (UnityWebRequest request = UnityWebRequest.Get(urlRef))
        {
            try
            {
                await request.SendWebRequest();
                MFGNFTMeta nftData = JsonConvert.DeserializeObject<MFGNFTMeta>(request.downloadHandler.text);
                return nftData;
            }
            catch
            {
                Debug.Log("Error: " + urlRef);
                return null;
            }
        }
    }
}

'''
'''--- Assets/Scripts/NFT/GetNFTImage.cs ---
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Networking;

//Get an image from a URL and return as a texture
public class GetNFTImage : MonoBehaviour
{
    async static public Task<Texture> GetImage(string url)
    {
        using (UnityWebRequest webRequest = UnityWebRequestTexture.GetTexture(url))
        {
            try
            {
                await webRequest.SendWebRequest();
                Texture texture = DownloadHandlerTexture.GetContent(webRequest);
                return texture;
            }
            catch (System.Exception)
            {
                Debug.Log("Error: " + url);
                return null;
            }
        }
    }
}

'''
'''--- Assets/Scripts/NFT/NFT Data/ArweaveNFTMeta.cs ---

public class ArweaveNFTMeta 
{
    public string title { get; set; }
    public string description { get; set; }
    public string media { get; set; }
    public int value { get; set; }
    public string display_type { get; set; }

}

'''
'''--- Assets/Scripts/NFT/NFT Data/MFGNFTMeta.cs ---

public class MFGNFTMeta
{
    public string token_id { get; set; }
    public string owner_id { get; set; }
    public Metadata metadata { get; set; }

    public class Metadata
    {
        public string title { get; set; }
        public string description { get; set; }
        public string media { get; set; }
        public string custom_fields { get; set; }
    }

}

'''
'''--- Assets/Scripts/NFT/NFT Data/NearNFTMeta.cs ---
using Newtonsoft.Json;

public class NearNFTMeta
{

    public class ApprovedAccountIds
    {
       
    }

    public class ComposeableStats
    {
        public int local_depth { get; set; }
        public int cross_contract_children { get; set; }
    }

    public class Metadata
    {
        public object title { get; set; }
        public object description { get; set; }
        public object media { get; set; }
        public object media_hash { get; set; }
        public int copies { get; set; }
        public object issued_at { get; set; }
        public object expires_at { get; set; }
        public object starts_at { get; set; }
        public object updated_at { get; set; }
        public string extra { get; set; }
        public string reference { get; set; }
        public object reference_hash { get; set; }
    }

    public class Nearcon2Near
    {
        public int numerator { get; set; }
    }

    public class Percentage
    {
        public int numerator { get; set; }
    }

    public class Root
    {
        public string token_id { get; set; }
        public string owner_id { get; set; }
        public ApprovedAccountIds approved_account_ids { get; set; }
        public Metadata metadata { get; set; }
        public Royalty royalty { get; set; }
        public object split_owners { get; set; }
        public string minter { get; set; }
        public object loan { get; set; }
        public ComposeableStats composeable_stats { get; set; }
        public object origin_key { get; set; }
    }

    public class Royalty
    {
        public SplitBetween split_between { get; set; }
        public Percentage percentage { get; set; }
    }

    public class SplitBetween
    {
      
    }

}

'''
'''--- Assets/Scripts/NFT/UnityAsyncOperationAwaiter.cs ---
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using UnityEngine;

//Extension providing async/await for UnityWebRequest
public static class ExtensionMethods
{
    public static TaskAwaiter GetAwaiter(this AsyncOperation asyncOp)
    {
        var tcs = new TaskCompletionSource<object>();
        asyncOp.completed += obj => { tcs.SetResult(null); };
        return ((Task)tcs.Task).GetAwaiter();
    }
}
'''
'''--- Assets/Scripts/RPC API/Near_RPC.cs ---
using Newtonsoft.Json;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;
using TMPro;
using UnityEngine.SceneManagement;
using Near;

public class Near_RPC : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI resultText;
    
    public static string nodeUrl;
    public static string walletUrl;

    private UnityWebRequest request;
    private Post_ViewAccount account;

    //Base URLs
    private Dictionary<string, string> baseNodeUrl = new Dictionary<string, string>()
    {
        {"mainnet", "https://rpc.mainnet.near.org"},
        {"testnet", "https://rpc.testnet.near.org"},
        {"betanet", "https://rpc.betanet.near.org"},
    };

    private Dictionary<string, string> baseWalletUrl = new Dictionary<string, string>()
    {
        {"mainnet", "https://wallet.mainnet.near.org"},
        {"testnet", "https://wallet.testnet.near.org"},
        {"betanet", "https://wallet.betanet.near.org"},
    };

    private Dictionary<string, string> baseNetworkId = new Dictionary<string, string>()
    {
        {"mainnet", "mainnet"},
        {"testnet", "testnet"},
        {"betanet", "betanet"},
    }; 

    private void Start()
    {
        StartCoroutine(ViewAccount());
    }

    private IEnumerator ViewAccount()
    {
        //Init Near RPC post request
        account = new Post_ViewAccount();
        account.@params.account_id = Near_API.accountId;
        byte[] rawData = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(account));

        using (request = new UnityWebRequest(baseNodeUrl[PlayerPrefs.GetString("networkId")], "POST"))
        {
            request.SetRequestHeader("Content-Type", "application/json");
            request.uploadHandler = new UploadHandlerRaw(rawData);
            request.downloadHandler = new DownloadHandlerBuffer();
            yield return request.SendWebRequest();

            //Returned result
            if (request.result == UnityWebRequest.Result.Success)
            {
                ViewAccount viewAccount = JsonConvert.DeserializeObject<ViewAccount>(request.downloadHandler.text);
                resultText.text = "<< NEAR RPC API >>" + "\n"
                    + "Amount: " + viewAccount.result.amount + "\n"
                     + "Block Hash: " + viewAccount.result.block_hash + "\n"
                      + "Block Height: " + viewAccount.result.block_height + "\n"
                       + "Code Hash: " + viewAccount.result.code_hash + "\n"
                        + "Locked: " + viewAccount.result.locked + "\n"
                         + "Storage Paid At: " + viewAccount.result.storage_paid_at + "\n"
                          + "Storage Usage: " + viewAccount.result.storage_usage + "\n";
            }
            else
            {
                Debug.LogError(string.Format("API post error: {0}", request.error));
            }
        }
    }

    public void LoginScene()
    {
        SceneManager.LoadScene("WalletLogin");
    }
}

'''
'''--- Assets/Scripts/RPC API/Post Data/Post_ViewAccount.cs ---

public class Post_ViewAccount 
{
    public string jsonrpc = "2.0";
    public string id = "mfg.testnet";
    public string method = "query";
    public Param @params = new Param();

    public class Param
    {
        public string request_type = "view_account";
        public string finality = "final";
        public string account_id;
    }
}

'''
'''--- Assets/Scripts/RPC API/Return Data/ViewAccount.cs ---
using System;

[Serializable]
public class ViewAccount 
{
    public string jsonrpc;
    public Result result = new Result();
    public string id;

    public class Result
    {
        public string amount;
        public string block_hash;
        public int block_height;
        public string code_hash;
        public string locked;
        public int storage_paid_at;
        public int storage_usage;
    }
}

'''
'''--- Assets/TextMesh Pro/Fonts/LiberationSans - OFL.txt ---
Digitized data copyright (c) 2010 Google Corporation
	with Reserved Font Arimo, Tinos and Cousine.
Copyright (c) 2012 Red Hat, Inc.
	with Reserved Font Name Liberation.

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL

-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.

The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the copyright statement(s).

"Original Version" refers to the collection of Font Software components as distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.

"Author" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.

5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.
'''
'''--- Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt ---
﻿)]｝〕〉》」』】〙〗〟’”｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、%,.:;。！？］）：；＝}¢°"†‡℃〆％，．
'''
'''--- Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt ---
﻿([｛〔〈《「『【〘〖〝‘“｟«$—…‥〳〴〵\［（{£¥"々〇＄￥￦ #
'''
'''--- Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt ---
This sample of beautiful emojis are provided by EmojiOne https://www.emojione.com/

Please visit their website to view the complete set of their emojis and review their licensing terms.
'''
'''--- Assets/TextMesh Pro/Sprites/EmojiOne.json ---
{"frames": [

{
	"filename": "1f60a.png",
	"frame": {"x":0,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f60b.png",
	"frame": {"x":128,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f60d.png",
	"frame": {"x":256,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f60e.png",
	"frame": {"x":384,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f600.png",
	"frame": {"x":0,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f601.png",
	"frame": {"x":128,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f602.png",
	"frame": {"x":256,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f603.png",
	"frame": {"x":384,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f604.png",
	"frame": {"x":0,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f605.png",
	"frame": {"x":128,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f606.png",
	"frame": {"x":256,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f609.png",
	"frame": {"x":384,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f618.png",
	"frame": {"x":0,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f923.png",
	"frame": {"x":128,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "263a.png",
	"frame": {"x":256,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "2639.png",
	"frame": {"x":384,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
}],
"meta": {
	"app": "http://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "EmojiOne.png",
	"format": "RGBA8888",
	"size": {"w":512,"h":512},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:196a26a2e149d875b91ffc8fa3581e76:fc928c7e275404b7e0649307410475cb:424723c3774975ddb2053fd5c4b85f6e$"
}
}

'''
'''--- Assets/WebGLSupport/WebGLInput/Detail/RebuildChecker.cs ---
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace WebGLSupport.Detail
{
    public class RebuildChecker
    {
        IInputField input;

        string beforeString;
        int beforeCaretPosition;
        int beforeSelectionFocusPosition;
        int beforeSelectionAnchorPosition;
        //Vector2 anchoredPosition;

        public RebuildChecker(IInputField input)
        {
            this.input = input;
        }

        public bool NeedRebuild(bool debug = false)
        {
            var res = false;

            // any not same
            if (beforeString != input.text)
            {
                if(debug) Debug.Log(string.Format("beforeString : {0} != {1}", beforeString, input.text));
                beforeString = input.text;
                res = true;
            }

            if (beforeCaretPosition != input.caretPosition)
            {
                if (debug) Debug.Log(string.Format("beforeCaretPosition : {0} != {1}", beforeCaretPosition, input.caretPosition));
                beforeCaretPosition = input.caretPosition;
                res = true;
            }

            if (beforeSelectionFocusPosition != input.selectionFocusPosition)
            {
                if (debug) Debug.Log(string.Format("beforeSelectionFocusPosition : {0} != {1}", beforeSelectionFocusPosition, input.selectionFocusPosition));
                beforeSelectionFocusPosition = input.selectionFocusPosition;
                res = true;
            }

            if (beforeSelectionAnchorPosition != input.selectionAnchorPosition)
            {
                if (debug) Debug.Log(string.Format("beforeSelectionAnchorPosition : {0} != {1}", beforeSelectionAnchorPosition, input.selectionAnchorPosition));
                beforeSelectionAnchorPosition = input.selectionAnchorPosition;
                res = true;
            }

            //if (anchoredPosition != input.TextComponentRectTransform().anchoredPosition)
            //{
            //    if (debug) Debug.Log(string.Format("anchoredPosition : {0} != {1}", anchoredPosition, input.TextComponentRectTransform().anchoredPosition));
            //    anchoredPosition = input.TextComponentRectTransform().anchoredPosition;
            //    res = true;
            //}
            return res;
        }
    }
}

'''
'''--- Assets/WebGLSupport/WebGLInput/Mobile/WebGLInputMobile.cs ---
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using System.Runtime.InteropServices; // for DllImport
using AOT;
using System;

namespace WebGLSupport
{
    class WebGLInputMobilePlugin
    {
#if UNITY_WEBGL && !UNITY_EDITOR
        [DllImport("__Internal")]
        public static extern int WebGLInputMobileRegister(Action<int> OnTouchEnd);

        [DllImport("__Internal")]
        public static extern void WebGLInputMobileOnFocusOut(int id, Action<int> OnFocusOut);
#else
        /// <summary>
        /// ID を割り振り
        /// </summary>
        /// <returns></returns>
        public static int WebGLInputMobileRegister(Action<int> OnTouchEnd) { return 0; }

        public static void WebGLInputMobileOnFocusOut(int id, Action<int> OnFocusOut) {}
#endif
    }

    public class WebGLInputMobile : MonoBehaviour, IPointerDownHandler
    {
        static Dictionary<int, WebGLInputMobile> instances = new Dictionary<int, WebGLInputMobile>();

        int id = -1;

        private void Awake()
        {
#if !(UNITY_WEBGL && !UNITY_EDITOR)
            // WebGL 以外、更新メソッドは動作しないようにします
            enabled = false;
#endif
        }

        /// <summary>
        /// 押されたら、touchend イベントを登録する
        /// </summary>
        /// <param name="eventData"></param>
        public void OnPointerDown(PointerEventData eventData)
        {
            if (id != -1) return;
            id = WebGLInputMobilePlugin.WebGLInputMobileRegister(OnTouchEnd);
            instances[id] = this;
        }

        [MonoPInvokeCallback(typeof(Action<int>))]
        static void OnTouchEnd(int id)
        {
            var @this = instances[id];
            @this.GetComponent<WebGLInput>().OnSelect();
            @this.StartCoroutine(RegisterOnFocusOut(id));
        }

        static IEnumerator RegisterOnFocusOut(int id)
        {
            yield return null;  // wait one frame.
            WebGLInputMobilePlugin.WebGLInputMobileOnFocusOut(id, OnFocusOut);
        }

        [MonoPInvokeCallback(typeof(Action<int>))]
        static void OnFocusOut(int id)
        {
            var @this = instances[id];
            @this.StartCoroutine(ExecFocusOut(id));
        }

        static IEnumerator ExecFocusOut(int id)
        {
            yield return null;  // wait one frame.
            var @this = instances[id];
            @this.GetComponent<WebGLInput>().DeactivateInputField();
            // release
            @this.id = -1;
            instances.Remove(id);
        }
    }
}

'''
'''--- Assets/WebGLSupport/WebGLInput/WebGLInput.cs ---
﻿#if UNITY_2018_2_OR_NEWER
#define TMP_WEBGL_SUPPORT
#endif

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using AOT;
using System.Runtime.InteropServices; // for DllImport
using System.Collections;
using UnityEngine.EventSystems;

namespace WebGLSupport
{
    internal class WebGLInputPlugin
    {
#if UNITY_WEBGL && !UNITY_EDITOR
        [DllImport("__Internal")]
        public static extern void WebGLInputInit();
        [DllImport("__Internal")]
        public static extern int WebGLInputCreate(string canvasId, int x, int y, int width, int height, int fontsize, string text, string placeholder, bool isMultiLine, bool isPassword, bool isHidden, bool isMobile);

        [DllImport("__Internal")]
        public static extern void WebGLInputEnterSubmit(int id, bool flag);

        [DllImport("__Internal")]
        public static extern void WebGLInputTab(int id, Action<int, int> cb);

        [DllImport("__Internal")]
        public static extern void WebGLInputFocus(int id);

        [DllImport("__Internal")]
        public static extern void WebGLInputOnFocus(int id, Action<int> cb);

        [DllImport("__Internal")]
        public static extern void WebGLInputOnBlur(int id, Action<int> cb);

        [DllImport("__Internal")]
        public static extern void WebGLInputOnValueChange(int id, Action<int, string> cb);
        
        [DllImport("__Internal")]
        public static extern void WebGLInputOnEditEnd(int id, Action<int, string> cb);

        [DllImport("__Internal")]
        public static extern int WebGLInputSelectionStart(int id);

        [DllImport("__Internal")]
        public static extern int WebGLInputSelectionEnd(int id);

        [DllImport("__Internal")]
        public static extern int WebGLInputSelectionDirection(int id);

        [DllImport("__Internal")]
        public static extern void WebGLInputSetSelectionRange(int id, int start, int end);

        [DllImport("__Internal")]
        public static extern void WebGLInputMaxLength(int id, int maxlength);

        [DllImport("__Internal")]
        public static extern void WebGLInputText(int id, string text);

        [DllImport("__Internal")]
        public static extern bool WebGLInputIsFocus(int id);

        [DllImport("__Internal")]
        public static extern void WebGLInputDelete(int id);

        [DllImport("__Internal")]
        public static extern void WebGLInputForceBlur(int id);

#if WEBGLINPUT_TAB
        [DllImport("__Internal")]
        public static extern void WebGLInputEnableTabText(int id, bool enable);
#endif
#else
        public static void WebGLInputInit() {}
        public static int WebGLInputCreate(string canvasId, int x, int y, int width, int height, int fontsize, string text, string placeholder, bool isMultiLine, bool isPassword, bool isHidden, bool isMobile) { return 0; }
        public static void WebGLInputEnterSubmit(int id, bool flag) { }
        public static void WebGLInputTab(int id, Action<int, int> cb) { }
        public static void WebGLInputFocus(int id) { }
        public static void WebGLInputOnFocus(int id, Action<int> cb) { }
        public static void WebGLInputOnBlur(int id, Action<int> cb) { }
        public static void WebGLInputOnValueChange(int id, Action<int, string> cb) { }
        public static void WebGLInputOnEditEnd(int id, Action<int, string> cb) { }
        public static int WebGLInputSelectionStart(int id) { return 0; }
        public static int WebGLInputSelectionEnd(int id) { return 0; }
        public static int WebGLInputSelectionDirection(int id) { return 0; }
        public static void WebGLInputSetSelectionRange(int id, int start, int end) { }
        public static void WebGLInputMaxLength(int id, int maxlength) { }
        public static void WebGLInputText(int id, string text) { }
        public static bool WebGLInputIsFocus(int id) { return false; }
        public static void WebGLInputDelete(int id) { }
        public static void WebGLInputForceBlur(int id) { }

#if WEBGLINPUT_TAB
        public static void WebGLInputEnableTabText(int id, bool enable) { }
#endif

#endif
    }

    public class WebGLInput : MonoBehaviour, IComparable<WebGLInput>
    {
        static Dictionary<int, WebGLInput> instances = new Dictionary<int, WebGLInput>();
        public static string CanvasId { get; set; }

#if WEBGLINPUT_TAB
        public bool enableTabText = false;
#endif

        static WebGLInput()
        {
#if UNITY_2020_1_OR_NEWER
            WebGLInput.CanvasId = "unity-container";
#elif UNITY_2019_1_OR_NEWER
            WebGLInput.CanvasId = "unityContainer";
#else
            WebGLInput.CanvasId = "gameContainer";
#endif
            WebGLInputPlugin.WebGLInputInit();
        }
        public int Id { get { return id; } }
        internal int id = -1;
        public IInputField input;
        bool blurBlock = false;

        [TooltipAttribute("show input element on canvas. this will make you select text by drag.")]
        public bool showHtmlElement = false;

        private IInputField Setup()
        {
            if (GetComponent<InputField>()) return new WrappedInputField(GetComponent<InputField>());
#if TMP_WEBGL_SUPPORT
            if (GetComponent<TMPro.TMP_InputField>()) return new WrappedTMPInputField(GetComponent<TMPro.TMP_InputField>());
#endif // TMP_WEBGL_SUPPORT
            throw new Exception("Can not Setup WebGLInput!!");
        }

        private void Awake()
        {
            input = Setup();
#if !(UNITY_WEBGL && !UNITY_EDITOR)
            // WebGL 以外、更新メソッドは動作しないようにします
            enabled = false;
#endif
            // モバイルの入力対応
            if (Application.isMobilePlatform)
            {
                gameObject.AddComponent<WebGLInputMobile>();
            }
        }

        /// <summary>
        /// Get the element rect of input
        /// </summary>
        /// <returns></returns>
        RectInt GetElemetRect()
        {
            var rect = GetScreenCoordinates(input.RectTransform());
            // モバイルの場合、強制表示する
            if (showHtmlElement || Application.isMobilePlatform)
            {
                var x = (int)(rect.x);
                var y = (int)(Screen.height - (rect.y + rect.height));
                return new RectInt(x, y, (int)rect.width, (int)rect.height);
            }
            else
            {
                var x = (int)(rect.x);
                var y = (int)(Screen.height - (rect.y));
                return new RectInt(x, y, (int)rect.width, (int)1);
            }
        }
        /// <summary>
        /// 対象が選択されたとき
        /// </summary>
        /// <param name="eventData"></param>
        public void OnSelect()
        {
            if (id != -1) throw new Exception("OnSelect : id != -1");

            var rect = GetElemetRect();
            bool isPassword = input.contentType == ContentType.Password;

            var fontSize = Mathf.Max(14, input.fontSize); // limit font size : 14 !!

            // モバイルの場合、強制表示する
            var isHidden = !(showHtmlElement || Application.isMobilePlatform);
            id = WebGLInputPlugin.WebGLInputCreate(WebGLInput.CanvasId, rect.x, rect.y, rect.width, rect.height, fontSize, input.text, input.placeholder, input.lineType != LineType.SingleLine, isPassword, isHidden, Application.isMobilePlatform);

            instances[id] = this;
            WebGLInputPlugin.WebGLInputEnterSubmit(id, input.lineType != LineType.MultiLineNewline);
            WebGLInputPlugin.WebGLInputOnFocus(id, OnFocus);
            WebGLInputPlugin.WebGLInputOnBlur(id, OnBlur);
            WebGLInputPlugin.WebGLInputOnValueChange(id, OnValueChange);
            WebGLInputPlugin.WebGLInputOnEditEnd(id, OnEditEnd);
            WebGLInputPlugin.WebGLInputTab(id, OnTab);
            // default value : https://www.w3schools.com/tags/att_input_maxlength.asp
            WebGLInputPlugin.WebGLInputMaxLength(id, (input.characterLimit > 0) ? input.characterLimit : 524288);
            WebGLInputPlugin.WebGLInputFocus(id);
#if WEBGLINPUT_TAB
            WebGLInputPlugin.WebGLInputEnableTabText(id, enableTabText);
#endif
            if (input.OnFocusSelectAll)
            {
                WebGLInputPlugin.WebGLInputSetSelectionRange(id, 0, input.text.Length);
            }

            WebGLWindow.OnBlurEvent += OnWindowBlur;
        }

        void OnWindowBlur()
        {
            blurBlock = true;
        }

        /// <summary>
        /// 画面内の描画範囲を取得する
        /// </summary>
        /// <param name="uiElement"></param>
        /// <returns></returns>
        Rect GetScreenCoordinates(RectTransform uiElement)
        {
            var worldCorners = new Vector3[4];
            uiElement.GetWorldCorners(worldCorners);

            // try to support RenderMode:WorldSpace
            var canvas = uiElement.GetComponentInParent<Canvas>();
            var useCamera = (canvas.renderMode != RenderMode.ScreenSpaceOverlay);
            if (canvas && useCamera)
            {
                var camera = canvas.worldCamera;
                if (!camera) camera = Camera.main;

                for (var i = 0; i < worldCorners.Length; i++)
                {
                    worldCorners[i] = camera.WorldToScreenPoint(worldCorners[i]);
                }
            }

            var min = new Vector3(float.MaxValue, float.MaxValue);
            var max = new Vector3(float.MinValue, float.MinValue);
            for (var i = 0; i < worldCorners.Length; i++)
            {
                min.x = Mathf.Min(min.x, worldCorners[i].x);
                min.y = Mathf.Min(min.y, worldCorners[i].y);
                max.x = Mathf.Max(max.x, worldCorners[i].x);
                max.y = Mathf.Max(max.y, worldCorners[i].y);
            }

            return new Rect(min.x, min.y, max.x - min.x, max.y - min.y);
        }

        internal void DeactivateInputField()
        {
            if (!instances.ContainsKey(id)) return;

            WebGLInputPlugin.WebGLInputDelete(id);
            input.DeactivateInputField();
            instances.Remove(id);
            id = -1;    // reset id to -1;
            WebGLWindow.OnBlurEvent -= OnWindowBlur;
        }

        [MonoPInvokeCallback(typeof(Action<int>))]
        static void OnFocus(int id)
        {
#if UNITY_WEBGL && !UNITY_EDITOR
            Input.ResetInputAxes(); // Inputの状態リセット
            UnityEngine.WebGLInput.captureAllKeyboardInput = false;
#endif
        }

        [MonoPInvokeCallback(typeof(Action<int>))]
        static void OnBlur(int id)
        {
#if UNITY_WEBGL && !UNITY_EDITOR
            UnityEngine.WebGLInput.captureAllKeyboardInput = true;
            Input.ResetInputAxes(); // Inputの状態リセット
#endif
            instances[id].StartCoroutine(Blur(id));
        }

        static IEnumerator Blur(int id)
        {
            yield return null;
            if (!instances.ContainsKey(id)) yield break;

            var block = instances[id].blurBlock;    // get blur block state
            instances[id].blurBlock = false;        // reset instalce block state
            if (block) yield break;                 // if block. break it!!
            instances[id].DeactivateInputField();
        }

        [MonoPInvokeCallback(typeof(Action<int, string>))]
        static void OnValueChange(int id, string value)
        {
            if (!instances.ContainsKey(id)) return;

            var instance = instances[id];
            if (!instance.input.ReadOnly)
            {
                instance.input.text = value;
            }

            // InputField.ContentType.Name が Name の場合、先頭文字が強制的大文字になるため小文字にして比べる
            if (instance.input.contentType == ContentType.Name)
            {
                if (string.Compare(instance.input.text, value, true) == 0)
                {
                    value = instance.input.text;
                }
            }

            // InputField の ContentType による整形したテキストを HTML の input に再設定します
            if (value != instance.input.text)
            {
                var start = WebGLInputPlugin.WebGLInputSelectionStart(id);
                var end = WebGLInputPlugin.WebGLInputSelectionEnd(id);
                // take the offset.when char remove from input.
                var offset = instance.input.text.Length - value.Length;

                WebGLInputPlugin.WebGLInputText(id, instance.input.text);
                // reset the input element selection range!!
                WebGLInputPlugin.WebGLInputSetSelectionRange(id, start + offset, end + offset);
            }
        }
        [MonoPInvokeCallback(typeof(Action<int, string>))]
        static void OnEditEnd(int id, string value)
        {
            if (!instances[id].input.ReadOnly)
            {
                instances[id].input.text = value;
            }
        }
        [MonoPInvokeCallback(typeof(Action<int, int>))]
        static void OnTab(int id, int value)
        {
            WebGLInputTabFocus.OnTab(instances[id], value);
        }

        void Update()
        {
            if (input == null || !input.isFocused)
            {
                CheckOutFocus();
                return;
            }

            // 未登録の場合、選択する
            if (!instances.ContainsKey(id))
            {
                if (Application.isMobilePlatform)
                {
                    return;
                } else
                {
                    OnSelect();
                }
            }
            else if (!WebGLInputPlugin.WebGLInputIsFocus(id))
            {
                if (Application.isMobilePlatform)
                {
                    //input.DeactivateInputField();
                    return;
                }
                else
                {
                    // focus this id
                    WebGLInputPlugin.WebGLInputFocus(id);
                }
            }

            var start = WebGLInputPlugin.WebGLInputSelectionStart(id);
            var end = WebGLInputPlugin.WebGLInputSelectionEnd(id);
            // 選択方向によって設定します
            if (WebGLInputPlugin.WebGLInputSelectionDirection(id) == -1)
            {
                input.selectionFocusPosition = start;
                input.selectionAnchorPosition = end;
            }
            else
            {
                input.selectionFocusPosition = end;
                input.selectionAnchorPosition = start;
            }

            input.Rebuild();
        }

        private void OnDestroy()
        {
            if (!instances.ContainsKey(id)) return;

#if UNITY_WEBGL && !UNITY_EDITOR
            UnityEngine.WebGLInput.captureAllKeyboardInput = true;
            Input.ResetInputAxes(); // Inputの状態リセット
#endif
            DeactivateInputField();
        }

        private void OnEnable()
        {
            WebGLInputTabFocus.Add(this);
        }
        private void OnDisable()
        {
            WebGLInputTabFocus.Remove(this);
        }
        public int CompareTo(WebGLInput other)
        {
            var a = GetScreenCoordinates(input.RectTransform());
            var b = GetScreenCoordinates(other.input.RectTransform());
            var res = b.y.CompareTo(a.y);
            if (res == 0) res = a.x.CompareTo(b.x);
            return res;
        }

        public void CheckOutFocus()
        {
            if (!Application.isMobilePlatform) return;
            if (!instances.ContainsKey(id)) return;
            var current = EventSystem.current.currentSelectedGameObject;
            if (current != null) return;
            WebGLInputPlugin.WebGLInputForceBlur(id);   // Input ではないし、キーボードを閉じる
        }

        /// <summary>
        /// to manage tab focus
        /// base on scene position
        /// </summary>
        static class WebGLInputTabFocus
        {
            static List<WebGLInput> inputs = new List<WebGLInput>();

            public static void Add(WebGLInput input)
            {
                inputs.Add(input);
                inputs.Sort();
            }

            public static void Remove(WebGLInput input)
            {
                inputs.Remove(input);
            }

            public static void OnTab(WebGLInput input, int value)
            {
                if (inputs.Count <= 1) return;
                var index = inputs.IndexOf(input);
                index += value;
                if (index < 0) index = inputs.Count - 1;
                else if (index >= inputs.Count) index = 0;
                inputs[index].input.ActivateInputField();
            }
        }
    }
}

'''
'''--- Assets/WebGLSupport/WebGLInput/Wrapper/IInputField.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace WebGLSupport
{
    public enum ContentType
    {
        Standard = 0,
        Autocorrected = 1,
        IntegerNumber = 2,
        DecimalNumber = 3,
        Alphanumeric = 4,
        Name = 5,
        EmailAddress = 6,
        Password = 7,
        Pin = 8,
        Custom = 9
    }
    public enum LineType
    {
        SingleLine = 0,
        MultiLineSubmit = 1,
        MultiLineNewline = 2
    }
    public interface IInputField
    {
        ContentType contentType { get; }
        LineType lineType { get; }
        int fontSize { get; }
        string text { get; set; }
        string placeholder { get; }
        int characterLimit { get; }
        int caretPosition { get; }
        bool isFocused { get; }
        int selectionFocusPosition { get; set; }
        int selectionAnchorPosition { get; set; }
        bool ReadOnly { get; }
        bool OnFocusSelectAll { get; }

        RectTransform RectTransform();
        void ActivateInputField();
        void DeactivateInputField();
        void Rebuild();
    }
}

'''
'''--- Assets/WebGLSupport/WebGLInput/Wrapper/WrappedInputField.cs ---
﻿using UnityEngine;
using UnityEngine.UI;
using WebGLSupport.Detail;

namespace WebGLSupport
{
    /// <summary>
    /// Wrapper for UnityEngine.UI.InputField
    /// </summary>
    class WrappedInputField : IInputField
    {
        InputField input;
        RebuildChecker checker;

        public bool ReadOnly { get { return input.readOnly; } }

        public string text
        {
            get { return input.text; }
            set { input.text = value; }
        }

        public string placeholder
        {
            get
            {
                if (!input.placeholder) return "";
                var text = input.placeholder.GetComponent<Text>();
                return text ? text.text : "";
            }
        }

        public int fontSize
        {
            get { return input.textComponent.fontSize; }
        }

        public ContentType contentType
        {
            get { return (ContentType)input.contentType; }
        }

        public LineType lineType
        {
            get { return (LineType)input.lineType; }
        }

        public int characterLimit
        {
            get { return input.characterLimit; }
        }

        public int caretPosition
        {
            get { return input.caretPosition; }
        }

        public bool isFocused
        {
            get { return input.isFocused; }
        }

        public int selectionFocusPosition
        {
            get { return input.selectionFocusPosition; }
            set { input.selectionFocusPosition = value; }
        }

        public int selectionAnchorPosition
        {
            get { return input.selectionAnchorPosition; }
            set { input.selectionAnchorPosition = value; }
        }

        public bool OnFocusSelectAll
        {
            get { return true; }
        }

        public WrappedInputField(InputField input)
        {
            this.input = input;
            checker = new RebuildChecker(this);
        }

        public RectTransform RectTransform()
        {
            return input.GetComponent<RectTransform>();
        }

        public void ActivateInputField()
        {
            input.ActivateInputField();
        }

        public void DeactivateInputField()
        {
            input.DeactivateInputField();
        }

        public void Rebuild()
        {
            if (checker.NeedRebuild())
            {
                input.textComponent.SetAllDirty();
                input.Rebuild(CanvasUpdate.LatePreRender);
            }
        }
    }
}
'''
'''--- Assets/WebGLSupport/WebGLInput/Wrapper/WrappedTMPInputField.cs ---
﻿#if UNITY_2018_2_OR_NEWER
#define TMP_WEBGL_SUPPORT
#endif

#if TMP_WEBGL_SUPPORT
using UnityEngine;
using TMPro;
using WebGLSupport.Detail;
using UnityEngine.UI;
using System;

namespace WebGLSupport
{
    /// <summary>
    /// Wrapper for TMPro.TMP_InputField
    /// </summary>
    class WrappedTMPInputField : IInputField
    {
        TMP_InputField input;
        RebuildChecker checker;
        Coroutine delayedGraphicRebuild;

        public bool ReadOnly { get { return input.readOnly; } }

        public string text
        {
            get { return input.text; }
            set { input.text = FixContentTypeByInputField(value); }
        }

        /// <summary>
        /// workaround!!
        /// when use TMP_InputField.text = "xxx"; is will set the text directly.
        /// so, use InputField for match the ContentType!
        /// </summary>
        /// <param name="inText"></param>
        /// <returns></returns>
        private string FixContentTypeByInputField(string inText)
        {
            var go = new GameObject("FixContentTypeByInputField for WebGLInput");
            go.SetActive(false);
            var i = go.AddComponent<InputField>();
            i.contentType = (InputField.ContentType)Enum.Parse(typeof(InputField.ContentType), input.contentType.ToString());
            i.lineType = (InputField.LineType)Enum.Parse(typeof(InputField.LineType), input.lineType.ToString());
            i.inputType = (InputField.InputType)Enum.Parse(typeof(InputField.InputType), input.inputType.ToString());
            i.keyboardType = input.keyboardType;
            i.characterValidation = (InputField.CharacterValidation)Enum.Parse(typeof(InputField.CharacterValidation), input.characterValidation.ToString());
            i.characterLimit = input.characterLimit;
            i.text = inText;
            var res = i.text;
            GameObject.Destroy(go);
            return res;
        }

        public string placeholder
        {
            get
            {
                if (!input.placeholder) return "";
                var text = input.placeholder.GetComponent<TMP_Text>();
                return text ? text.text : "";
            }
        }

        public int fontSize
        {
            get { return (int)input.textComponent.fontSize; }
        }

        public ContentType contentType
        {
            get { return (ContentType)input.contentType; }
        }

        public LineType lineType
        {
            get { return (LineType)input.lineType; }
        }

        public int characterLimit
        {
            get { return input.characterLimit; }
        }

        public int caretPosition
        {
            get { return input.caretPosition; }
        }

        public bool isFocused
        {
            get { return input.isFocused; }
        }

        public int selectionFocusPosition
        {
            get { return input.selectionStringFocusPosition; }
            set { input.selectionStringFocusPosition = value; }
        }

        public int selectionAnchorPosition
        {
            get { return input.selectionStringAnchorPosition; }
            set { input.selectionStringAnchorPosition = value; }
        }

        public bool OnFocusSelectAll
        {
            get { return input.onFocusSelectAll; }
        }

        public WrappedTMPInputField(TMP_InputField input)
        {
            this.input = input;
            checker = new RebuildChecker(this);
        }

        public RectTransform RectTransform()
        {
            // 表示範囲
            // MEMO :
            //  TMP では textComponent を移動させてクリッピングするため、
            //  表示範囲外になる場合があるので、自分の範囲を返す
            return input.GetComponent<RectTransform>();
        }

        public void ActivateInputField()
        {
            input.ActivateInputField();
        }

        public void DeactivateInputField()
        {
            input.DeactivateInputField();
        }

        public void Rebuild()
        {
#if UNITY_2020_1_OR_NEWER
            if (checker.NeedRebuild())
            {
                input.textComponent.SetVerticesDirty();
                input.textComponent.SetLayoutDirty();
                input.Rebuild(CanvasUpdate.LatePreRender);
            }
#else
            if (input.textComponent.enabled && checker.NeedRebuild())
            {
                //================================
                // fix bug for tmp
                // TMPの不具合で、正しく座標を設定されてなかったため、試しに対応する
                var rt = input.textComponent.GetComponent<RectTransform>();
                var size = input.textComponent.GetPreferredValues();
                if (size.x < rt.rect.xMax)
                {
                    // textComponent の座標を更新
                    var pos = rt.anchoredPosition;
                    pos.x = 0;
                    rt.anchoredPosition = pos;

                    // caret の座標更新
                    var caret = input.GetComponentInChildren<TMP_SelectionCaret>();
                    var caretRect = caret.GetComponent<RectTransform>();
                    caretRect.anchoredPosition = rt.anchoredPosition;
                }
                //==============================

                // HACK : 1フレーム無効にする
                // MEMO : 他にいい方法Rebuildがあれば対応する
                // LayoutRebuilder.ForceRebuildLayoutImmediate(); で試してダメでした
                input.textComponent.enabled = rectOverlaps(input.textComponent.rectTransform, input.textViewport);
                input.textComponent.SetAllDirty();
                input.Rebuild(CanvasUpdate.LatePreRender);
                //Debug.Log(input.textComponent.enabled);
            }
            else
            {
                input.textComponent.enabled = true;
            }
#endif
        }

        bool rectOverlaps(RectTransform rectTrans1, RectTransform rectTrans2)
        {
            Rect rect1 = new Rect(rectTrans1.localPosition.x, rectTrans1.localPosition.y, rectTrans1.rect.width, rectTrans1.rect.height);
            Rect rect2 = new Rect(rectTrans2.localPosition.x, rectTrans2.localPosition.y, rectTrans2.rect.width, rectTrans2.rect.height);

            return rect1.Overlaps(rect2);
        }
    }
}

#endif // TMP_WEBGL_SUPPORT

'''
'''--- Assets/WebGLSupport/WebGLWindow/WebGLWindow.cs ---
﻿using System;
using AOT;
using System.Runtime.InteropServices; // for DllImport
using UnityEngine;

namespace WebGLSupport
{
    static class WebGLWindowPlugin
    {
#if UNITY_WEBGL && !UNITY_EDITOR
        [DllImport("__Internal")]
        public static extern void WebGLWindowInit();
        [DllImport("__Internal")]
        public static extern void WebGLWindowOnFocus(Action cb);

        [DllImport("__Internal")]
        public static extern void WebGLWindowOnBlur(Action cb);

        [DllImport("__Internal")]
        public static extern void WebGLWindowOnResize(Action cb);

        [DllImport("__Internal")]
        public static extern void WebGLWindowInjectFullscreen();
#else
        public static void WebGLWindowInit() { }
        public static void WebGLWindowOnFocus(Action cb) { }
        public static void WebGLWindowOnBlur(Action cb) { }
        public static void WebGLWindowOnResize(Action cb) { }
        public static void WebGLWindowInjectFullscreen() { }
#endif

    }

    public static class WebGLWindow
    {
        static WebGLWindow()
        {
            WebGLWindowPlugin.WebGLWindowInit();
        }
        public static bool Focus { get; private set; }
        public static event Action OnFocusEvent = () => { };
        public static event Action OnBlurEvent = () => { };
        public static event Action OnResizeEvent = () => { };

        static string ViewportContent;
        static void Init()
        {
            Focus = true;
            WebGLWindowPlugin.WebGLWindowOnFocus(OnWindowFocus);
            WebGLWindowPlugin.WebGLWindowOnBlur(OnWindowBlur);
            WebGLWindowPlugin.WebGLWindowOnResize(OnWindowResize);
            WebGLWindowPlugin.WebGLWindowInjectFullscreen();
        }

        [MonoPInvokeCallback(typeof(Action))]
        static void OnWindowFocus()
        {
            Focus = true;
            OnFocusEvent();
        }

        [MonoPInvokeCallback(typeof(Action))]
        static void OnWindowBlur()
        {
            Focus = false;
            OnBlurEvent();
        }

        [MonoPInvokeCallback(typeof(Action))]
        static void OnWindowResize()
        {
            OnResizeEvent();
        }

        [RuntimeInitializeOnLoadMethod]
        static void RuntimeInitializeOnLoadMethod()
        {
            Init();
        }
    }
}

'''
'''--- Assets/WebGLTemplates/NEAR/TemplateData/style.css ---
html {
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

html, body {
    height: 100%;
}

canvas {
    display: block;
}

body {
    margin: 0;
}

#unity-container {
    width: 100%;
    height: 100%;
}

#unity-canvas {
    width: 100%;
    height: 100%;
    background: #181818
}

.loading-text {
    font-family: Arial;
    color: white;
}

.loading-heading {
    font-family: Arial;
    font-weight:600;
    font-size: 60px;
    color: lawngreen;
}

#loading-cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

#unity-loading-bar {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: grey;
    height: 40%;
}

#unity-logo {
    text-align: center;
}

#unity-logo img {
    max-width: 80%;
}

#unity-progress-bar-empty {
    width: 60%;
    height: 26px;
    margin: 10px 20px 20px 10px;
    text-align: left;
    border: 2px solid black;
    padding: 4px;
}

#unity-progress-bar-full {
    width: 0%;
    height: 100%;
    background-color: lawngreen;
}

.light #unity-progress-bar-empty {
    border-color: lawngreen;
}

.light #unity-progress-bar-full {
    background-color: red;
}

#unity-fullscreen-button {
    position: absolute;
    right: 10px;
    bottom: 10px;
    width: 38px;
    height: 38px;
    background: url('fullscreen-button.png') no-repeat center;
    background-size: contain;
}

.spinner,
.spinner:after {
  border-radius: 50%;
  width: 5em;
  height: 5em;
}

.spinner {
  margin: 10px;
  font-size: 10px;
  position: relative;
  text-indent: -9999em;
  border-top: 1.1em solid rgba(255, 255, 255, 0.2);
  border-right: 1.1em solid rgba(255, 255, 255, 0.2);
  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
  border-left: 1.1em solid #ffffff;
  transform: translateZ(0);
  animation: spinner-spin 1.1s infinite linear;
}
@keyframes spinner-spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- Assets/WebGLTemplates/NEAR/index.html ---
<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>{{{ PRODUCT_NAME }}}</title>
    <link rel="shortcut icon" href="TemplateData/favicon.ico">
    <link rel="stylesheet" href="TemplateData/style.css">

    <!--Near API-->
    <script src="https://cdn.jsdelivr.net/npm/near-api-js@1.1.0/dist/near-api-js.js"></script>
    <script>
        const { connect, keyStores, WalletConnection, Contract } = nearApi;
        const myKeys = new keyStores.BrowserLocalStorageKeyStore()
        const connectionConfig = function (network) {
            switch (network) {
                case "mainnet":
                    return {
                        networkId: "mainnet",
                        keyStore: myKeys,
                        nodeUrl: "https://rpc.mainnet.near.org",
                        walletUrl: "https://wallet.mainnet.near.org",
                        helperUrl: "https://helper.mainnet.near.org",
                        explorerUrl: "https://explorer.mainnet.near.org",
                    };
                case "testnet":
                    return {
                        networkId: "testnet",
                        keyStore: myKeys,
                        nodeUrl: "https://rpc.testnet.near.org",
                        walletUrl: "https://wallet.testnet.near.org",
                        helperUrl: "https://helper.testnet.near.org",
                        explorerUrl: "https://explorer.testnet.near.org",
                    };
                case "betanet":
                    return {
                        networkId: "betanet",
                        keyStore: myKeys,
                        nodeUrl: "https://rpc.betanet.near.org",
                        walletUrl: "https://wallet.betanet.near.org",
                        helperUrl: "https://helper.betanet.near.org",
                        explorerUrl: "https://explorer.betanet.near.org",
                    };
            }
        }
    </script>

</head>

<body class="{{{ SPLASH_SCREEN_STYLE.toLowerCase() }}}">

    <div id="unity-container" class="unity-desktop">
        <canvas id="unity-canvas"></canvas>
    </div>
    <div id="loading-cover" style="display:none;">
        <div id="unity-loading-bar">
            <div align="center" class="loading-heading" ;">MFG Game JAM</div>
            <div align="center"><h2 class="loading-text" ;"><<< LOADING >>></h2></div>
            <div align="center"><h3 class="loading-text" ;">RECEIVING AN UPDATE ERROR:   PRESS CONTROL + F5   OR   COMMAND + SHIFT + R on MAC</></h3></div>
            <div id="unity-progress-bar-empty" style="display: none;">
                <div id="unity-progress-bar-full"></div>
            </div>
            <div class="spinner"></div>
        </div>
    </div>
    <div id="unity-fullscreen-button" style="display: none;"></div>

    <script>
          const hideFullScreenButton = "{{{ HIDE_FULL_SCREEN_BUTTON }}}";
          const buildUrl = "Build";
          const loaderUrl = buildUrl + "/{{{ LOADER_FILENAME }}}";
          const config = {
            dataUrl: buildUrl + "/{{{ DATA_FILENAME }}}",
            frameworkUrl: buildUrl + "/{{{ FRAMEWORK_FILENAME }}}",
            codeUrl: buildUrl + "/{{{ CODE_FILENAME }}}",
    #if MEMORY_FILENAME
            memoryUrl: buildUrl + "/{{{ MEMORY_FILENAME }}}",
    #endif
    #if SYMBOLS_FILENAME
            symbolsUrl: buildUrl + "/{{{ SYMBOLS_FILENAME }}}",
    #endif
            streamingAssetsUrl: "StreamingAssets",
            companyName: "{{{ COMPANY_NAME }}}",
            productName: "{{{ PRODUCT_NAME }}}",
            productVersion: "{{{ PRODUCT_VERSION }}}",
          };

          const container = document.querySelector("#unity-container");
          const canvas = document.querySelector("#unity-canvas");
          const loadingCover = document.querySelector("#loading-cover");
          const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
          const progressBarFull = document.querySelector("#unity-progress-bar-full");
          const fullscreenButton = document.querySelector("#unity-fullscreen-button");
          const spinner = document.querySelector('.spinner');

          const canFullscreen = (function() {
            for (const key of [
                'exitFullscreen',
                'webkitExitFullscreen',
                'webkitCancelFullScreen',
                'mozCancelFullScreen',
                'msExitFullscreen',
              ]) {
              if (key in document) {
                return true;
              }
            }
            return false;
          }());

          if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            container.className = "unity-mobile";
            config.devicePixelRatio = 1;
          }
          loadingCover.style.display = "";

          const script = document.createElement("script");
          script.src = loaderUrl;
          script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
              spinner.style.display = "none";
              progressBarEmpty.style.display = "";
              progressBarFull.style.width = `${100 * progress}%`;
            }).then((unityInstance) => {

                //Unity WebGL Instance
                window.mfgInstance = unityInstance;

              loadingCover.style.display = "none";
              if (canFullscreen) {
                if (!hideFullScreenButton) {
                  fullscreenButton.style.display = "";
                }
                fullscreenButton.onclick = () => {
                  unityInstance.SetFullscreen(1);
                };
              }
            }).catch((message) => {
              alert(message);
            });
          };
          document.body.appendChild(script);
    </script>

</body>
</html>

'''
'''--- NFTMetadata.cs ---
using Newtonsoft.Json;

public class NFTJson
{

    public class ApprovedAccountIds
    {
       
    }

    public class ComposeableStats
    {
        public int local_depth { get; set; }
        public int cross_contract_children { get; set; }
    }

    public class Metadata
    {
        public object title { get; set; }
        public object description { get; set; }
        public object media { get; set; }
        public object media_hash { get; set; }
        public int copies { get; set; }
        public object issued_at { get; set; }
        public object expires_at { get; set; }
        public object starts_at { get; set; }
        public object updated_at { get; set; }
        public string extra { get; set; }
        public string reference { get; set; }
        public object reference_hash { get; set; }
    }

    public class Nearcon2Near
    {
        public int numerator { get; set; }
    }

    public class Percentage
    {
        public int numerator { get; set; }
    }

    public class Root
    {
        public string token_id { get; set; }
        public string owner_id { get; set; }
        public ApprovedAccountIds approved_account_ids { get; set; }
        public Metadata metadata { get; set; }
        public Royalty royalty { get; set; }
        public object split_owners { get; set; }
        public string minter { get; set; }
        public object loan { get; set; }
        public ComposeableStats composeable_stats { get; set; }
        public object origin_key { get; set; }
    }

    public class Royalty
    {
        public SplitBetween split_between { get; set; }
        public Percentage percentage { get; set; }
    }

    public class SplitBetween
    {
      
    }

}

'''
'''--- Packages/manifest.json ---
{
  "dependencies": {
    "com.unity.collab-proxy": "2.0.1",
    "com.unity.feature.development": "1.0.1",
    "com.unity.ide.rider": "3.0.18",
    "com.unity.ide.visualstudio": "2.0.17",
    "com.unity.ide.vscode": "1.2.5",
    "com.unity.inputsystem": "1.5.0",
    "com.unity.nuget.newtonsoft-json": "3.1.0",
    "com.unity.render-pipelines.universal": "12.1.10",
    "com.unity.test-framework": "1.1.31",
    "com.unity.textmeshpro": "3.0.6",
    "com.unity.timeline": "1.6.4",
    "com.unity.ugui": "1.0.0",
    "com.unity.visualscripting": "1.8.0",
    "com.unity.modules.ai": "1.0.0",
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.modules.animation": "1.0.0",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.cloth": "1.0.0",
    "com.unity.modules.director": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.imgui": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.particlesystem": "1.0.0",
    "com.unity.modules.physics": "1.0.0",
    "com.unity.modules.physics2d": "1.0.0",
    "com.unity.modules.screencapture": "1.0.0",
    "com.unity.modules.terrain": "1.0.0",
    "com.unity.modules.terrainphysics": "1.0.0",
    "com.unity.modules.tilemap": "1.0.0",
    "com.unity.modules.ui": "1.0.0",
    "com.unity.modules.uielements": "1.0.0",
    "com.unity.modules.umbra": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
    "com.unity.modules.unitywebrequestaudio": "1.0.0",
    "com.unity.modules.unitywebrequesttexture": "1.0.0",
    "com.unity.modules.unitywebrequestwww": "1.0.0",
    "com.unity.modules.vehicles": "1.0.0",
    "com.unity.modules.video": "1.0.0",
    "com.unity.modules.vr": "1.0.0",
    "com.unity.modules.wind": "1.0.0",
    "com.unity.modules.xr": "1.0.0"
  }
}

'''
'''--- Packages/packages-lock.json ---
{
  "dependencies": {
    "com.unity.burst": {
      "version": "1.8.2",
      "depth": 1,
      "source": "registry",
      "dependencies": {
        "com.unity.mathematics": "1.2.1"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.collab-proxy": {
      "version": "2.0.1",
      "depth": 0,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.editorcoroutines": {
      "version": "1.0.0",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.ext.nunit": {
      "version": "1.0.6",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.feature.development": {
      "version": "1.0.1",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.ide.visualstudio": "2.0.17",
        "com.unity.ide.rider": "3.0.18",
        "com.unity.ide.vscode": "1.2.5",
        "com.unity.editorcoroutines": "1.0.0",
        "com.unity.performance.profile-analyzer": "1.2.2",
        "com.unity.test-framework": "1.1.31",
        "com.unity.testtools.codecoverage": "1.2.2"
      }
    },
    "com.unity.ide.rider": {
      "version": "3.0.18",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ext.nunit": "1.0.6"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.visualstudio": {
      "version": "2.0.17",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.test-framework": "1.1.9"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.vscode": {
      "version": "1.2.5",
      "depth": 0,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.inputsystem": {
      "version": "1.5.0",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.uielements": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.mathematics": {
      "version": "1.2.6",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.nuget.newtonsoft-json": {
      "version": "3.1.0",
      "depth": 0,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.performance.profile-analyzer": {
      "version": "1.2.2",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.render-pipelines.core": {
      "version": "12.1.10",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.render-pipelines.universal": {
      "version": "12.1.10",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.mathematics": "1.2.1",
        "com.unity.burst": "1.8.2",
        "com.unity.render-pipelines.core": "12.1.10",
        "com.unity.shadergraph": "12.1.10"
      }
    },
    "com.unity.searcher": {
      "version": "4.9.1",
      "depth": 2,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.settings-manager": {
      "version": "1.0.3",
      "depth": 2,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.shadergraph": {
      "version": "12.1.10",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.render-pipelines.core": "12.1.10",
        "com.unity.searcher": "4.9.1"
      }
    },
    "com.unity.test-framework": {
      "version": "1.1.31",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ext.nunit": "1.0.6",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.testtools.codecoverage": {
      "version": "1.2.2",
      "depth": 1,
      "source": "registry",
      "dependencies": {
        "com.unity.test-framework": "1.0.16",
        "com.unity.settings-manager": "1.0.1"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.textmeshpro": {
      "version": "3.0.6",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.timeline": {
      "version": "1.6.4",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.director": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ugui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0"
      }
    },
    "com.unity.visualscripting": {
      "version": "1.8.0",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.modules.ai": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.androidjni": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.animation": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.assetbundle": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.audio": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.cloth": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      }
    },
    "com.unity.modules.director": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.animation": "1.0.0"
      }
    },
    "com.unity.modules.imageconversion": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.imgui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.jsonserialize": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.particlesystem": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.physics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.physics2d": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.screencapture": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.subsystems": {
      "version": "1.0.0",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.terrain": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.terrainphysics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.terrain": "1.0.0"
      }
    },
    "com.unity.modules.tilemap": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics2d": "1.0.0"
      }
    },
    "com.unity.modules.ui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.uielements": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.uielementsnative": "1.0.0"
      }
    },
    "com.unity.modules.uielementsnative": {
      "version": "1.0.0",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.umbra": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.unityanalytics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequest": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.unitywebrequestassetbundle": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequestaudio": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.audio": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequesttexture": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequestwww": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
        "com.unity.modules.unitywebrequestaudio": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.vehicles": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      }
    },
    "com.unity.modules.video": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      }
    },
    "com.unity.modules.vr": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      }
    },
    "com.unity.modules.wind": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.xr": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.subsystems": "1.0.0"
      }
    }
  }
}

'''
'''--- ProjectSettings/BurstAotSettings_StandaloneWindows.json ---
{
  "MonoBehaviour": {
    "Version": 4,
    "EnableBurstCompilation": true,
    "EnableOptimisations": true,
    "EnableSafetyChecks": false,
    "EnableDebugInAllBuilds": false,
    "EnableArmv9SecurityFeatures": false,
    "CpuMinTargetX32": 0,
    "CpuMaxTargetX32": 0,
    "CpuMinTargetX64": 0,
    "CpuMaxTargetX64": 0,
    "CpuTargetsX32": 6,
    "CpuTargetsX64": 72,
    "OptimizeFor": 0
  }
}

'''
'''--- ProjectSettings/BurstAotSettings_WebGL.json ---
{
  "MonoBehaviour": {
    "Version": 4,
    "EnableBurstCompilation": true,
    "EnableOptimisations": true,
    "EnableSafetyChecks": false,
    "EnableDebugInAllBuilds": false,
    "EnableArmv9SecurityFeatures": false,
    "CpuMinTargetX32": 0,
    "CpuMaxTargetX32": 0,
    "CpuMinTargetX64": 0,
    "CpuMaxTargetX64": 0,
    "OptimizeFor": 0
  }
}

'''
'''--- ProjectSettings/CommonBurstAotSettings.json ---
{
  "MonoBehaviour": {
    "Version": 4,
    "DisabledWarnings": ""
  }
}

'''
'''--- ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json ---
{
    "m_Name": "Settings",
    "m_Path": "ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json",
    "m_Dictionary": {
        "m_DictionaryValues": []
    }
}
'''
'''--- ProjectSettings/ProjectVersion.txt ---
m_EditorVersion: 2021.3.21f1
m_EditorVersionWithRevision: 2021.3.21f1 (1b156197d683)

'''
'''--- ProjectSettings/SceneTemplateSettings.json ---
{
    "templatePinStates": [],
    "dependencyTypeInfos": [
        {
            "userAdded": false,
            "type": "UnityEngine.AnimationClip",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Animations.AnimatorController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.AnimatorOverrideController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Audio.AudioMixerController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ComputeShader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Cubemap",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.GameObject",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.LightingDataAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.LightingSettings",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Material",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.MonoScript",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicMaterial",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicsMaterial2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessResources",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.VolumeProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.SceneAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Shader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ShaderVariantCollection",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Timeline.TimelineAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        }
    ],
    "defaultDependencyTypeInfo": {
        "userAdded": false,
        "type": "<default_scene_template_dependencies>",
        "ignore": false,
        "defaultInstantiationMode": 1,
        "supportsModification": true
    },
    "newSceneOverride": 0
}
'''
'''--- README.md ---
# Near WebGL API for Unity
Example scenes of how to do Near JavaScript API calls and Near RPC calls using the included but currently limited Near_API class.

<p>&nbsp;</p>

## Unity Project 

	Ø Unity version: 2021.3.21f1
	Ø Make sure you install 2 Unity Editor modules - WebGL Build Support & Windows Build Support (IL2CPP)
	Ø Build platform: WebGL
	Ø Newtonsoft.JSON
	Ø New Input sytem
	Ø Render Pipeline: URP

<p>&nbsp;</p>

## Installation

	1) Register a Near wallet on Testnet and/or Mainnet
	2) Fork this repo to your local machine, make sure LFS is also installed
	3) Open local repo folder from Unity Hub
	4) Unity will report that their are compile errors, click Ignore
	5) File / Build Settings - Set platform to WebGL
	6) Edit / Project Settings / Player / Resolution and Presentation - Select Near WebGL template
	7) File / Build And Run - set your own build directory
	8) When the WebGL application opens in your browser you will see a screen with the login button.
	9) Select the relevant Near network testnet/mainnet from the dropdown and click the Login button
	10) Sign in using your relevant Near wallet.
	11) Use the interface to test various Near API calls, including calling a contract method and passing an argument. 

<p>&nbsp;</p>

## Classes

### Near_API class 
Class with a Near namespace that contains static methods that mainly calls JavaScript funtions in the JSLIB file (Plugin). Has static variables that stores the user account ID and login status.

<p>&nbsp;</p>

### WalletAuthenticate MonoBehavior Class
Used by the WalletLogin scene to calls the Near_API methods.

<p>&nbsp;</p>

### Near_RPC MonoBehavior Class
Example of posting json to the Near RPC API and returning a user's account details. Uses 2 other classes to handle the JSON fields.

	1) Post_ViewAccount class - JSON post fields
	2) ViewAccount class - Returned JSON fields
 
<p>&nbsp;</p>

## Scenes

### WalletLogin scene

Default scene with the following functions.

	1) Login
	2) Logout
	3) Check login status
	4) Get account ID
	5) Get account balance
	6) Navigate to the RPC scene
	7) Call a method on a contract passing in a JSON argument (Examples of retrieving a Mintbase NFT and the MFG NFT)

### RPC scene

Displays the user account details called from the RPC API.

<p>&nbsp;</p>

## Other Resources

### NEAR
> Near JavaScript API documentation - https://docs.near.org/tools/near-api-js/quick-reference

> Near testnet wallet - https://wallet.testnet.near.org/

> Near testnet explorer - https://explorer.testnet.near.org/

> Near Fungible Tokens docs - https://docs.near.org/tutorials/fts/simple-fts

> Near GitHub - https://github.com/orgs/near/repositories?type=all

> Near Client for Unity (Android / 3 year old repo) - https://github.com/near/near-api-unity

<p>&nbsp;</p>

### Morgan Page of Rogues
> Near API for Unity - GitHub https://github.com/morganpage/near-api-unity

> Adding blobkchain toUnity (video tutorial) https://youtu.be/vssV5ALChUM

> Near / Unity API Plugin (video tutorial) https://youtu.be/02_dk_gGePk

<p>&nbsp;</p>

### Mintbase
> Create NFTs on the Near testnet using a visual interface - https://testnet.mintbase.xyz/

'''