*GitHub Repository "NearDeFi/brrr-marketcap"*

'''--- .github/workflows/fetch-brrr-cs.yml ---
name: Fetch Brrr Circulating Supply
on:
  workflow_dispatch:
  schedule:
    - cron:  '*/10 * * * *'

jobs:
  updateStats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare        
        uses: actions/setup-node@v3
        with:
            node-version: 16
      - run: npm i      
      - name: Update Circulating Supply
        run: node marketcap > brrr-cs.json              
        env:
          EXPORT_MODE: CS
      - uses: EndBug/add-and-commit@v9 
        with: 
          author_name: "Brrr Circulating Supply Updater"
          add: 'brrr-cs.json --force'
          message: "Circulating Supply fetching"

'''
'''--- .github/workflows/fetch-brrr-stats.yml ---
name: Fetch Brrr Stats

on:
  workflow_dispatch:
  schedule:
    - cron:  '*/10 * * * *'

jobs:
  updateStats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare        
        uses: actions/setup-node@v3
        with:
            node-version: 16
      - run: npm i      
      - name: Update stats
        run: node marketcap > brrr-stats.json              
      - uses: EndBug/add-and-commit@v9 
        with: 
          author_name: "Brrr Stats Updater"
          add: 'brrr-stats.json --force'
          message: "Stats fetching"

'''
'''--- README.md ---
# Token statistics for NEAR native tokens

An example with a github action and a simple node.js script to calculate circulating supply, market cap, etc. It creates a json file for services like `coingecko` or `coinmarketcap`.

The Ref.finance feed is used as the price source

Example output: https://raw.githubusercontent.com/NearDeFi/brrr-marketcap/main/brrr-stats.json

'''
'''--- brrr-cs.json ---
602820223.0587223

'''
'''--- brrr-stats.json ---
{
  lockedBalances: [
    {
      address: 'lockup.burrow.near',
      balance: 67006135.49594115,
      value: 0
    },
    {
      address: 'burrow.sputnik-dao.near',
      balance: 330173641.4453366,
      value: 0
    }
  ],
  circulatingSupply: 602820223.0587223,
  lastUpdate: 1715730622459
}

'''
'''--- marketcap.js ---
const {getConfig} = require('./near');
const nearAPI = require('near-api-js');

const config = getConfig(process.env.NODE_ENV || 'production');
const mode = process.env.EXPORT_MODE || 'JSON';

// token account  
let brrrToken = 'token.burrow.near';
// set all accounts with locked tokens
const brrrLockedHolders = ['lockup.burrow.near', 'burrow.sputnik-dao.near'];
// token max supply
const maxSupply = Math.pow(10, 9);

const getTokenPrice = async (tokenId) => {
    return fetch("https://indexer.ref-finance.net/list-token-price")
        .then(res => res.json())
        .then(json => json[tokenId].price || 0)
        .catch(err => {
            console.error(err);
            return 0;
        });
}

const updateMarketcap = async () => {
    let marketCap = {
        lockedBalances: [],
        circulatingSupply: 0,
        lastUpdate: 0
    }

    let tokenPrice = await getTokenPrice("token.burrow.near");
    const near = await nearAPI.connect(config);

    const lockedBalances = await Promise.all(
        brrrLockedHolders.map(async (address) => {
            const account = await near.account(address);
            const ft_balance = await account.viewFunction(brrrToken, 'ft_balance_of', {account_id: address})
            const parsedBalance = Number(ft_balance)/Math.pow(10,18);
            return {
                address,
                balance: parsedBalance,
                value: parsedBalance * tokenPrice
            };
        })
    )
    const sumLocked = lockedBalances.reduce((acc, value) => acc+value.balance, 0);
    const circulatingSupply = maxSupply-sumLocked;
    if(!isNaN(circulatingSupply)) {
        marketCap.lockedBalances = lockedBalances;
        marketCap.circulatingSupply = circulatingSupply;
        marketCap.lastUpdate = new Date().getTime();
    }

    return(marketCap);
}

updateMarketcap().then((marketCap)=> {
    if (mode === "JSON"){
        console.log(marketCap)
    }
    else if (mode === "CS"){
        console.log(marketCap.circulatingSupply.toString())
    }
});

'''
'''--- near.js ---
function getConfig(env) {
    switch (env) {
        case 'production':
        case 'mainnet':
            return {
                networkId: 'mainnet',
                nodeUrl: 'https://rpc.mainnet.near.org',
                headers: { },
                walletUrl: 'https://wallet.near.org',
                helperUrl: 'https://helper.mainnet.near.org',
                explorerUrl: 'https://explorer.mainnet.near.org',
            }
        case 'development':
        case 'testnet':
            return {
                networkId: 'testnet',
                nodeUrl: 'https://rpc.testnet.near.org',
                headers: { },
                walletUrl: 'https://wallet.testnet.near.org',
                helperUrl: 'https://helper.testnet.near.org',
                explorerUrl: 'https://explorer.testnet.near.org',
            }
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
    }
}

module.exports = {getConfig}
'''
'''--- package.json ---
{
  "name": "brrr-marketcap",
  "version": "1.0.0",
  "description": "",
  "main": "marketcap.js",
  "scripts": {
    "get": "node marketcap",
    "get-cs": "export EXPORT_MODE=CS && node marketcap",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zavodil/brrr-marketcap.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/zavodil/brrr-marketcap/issues"
  },
  "homepage": "https://github.com/zavodil/brrr-marketcap#readme",
  "dependencies": {
    "near-api-js": "^0.45.1"
  }
}

'''