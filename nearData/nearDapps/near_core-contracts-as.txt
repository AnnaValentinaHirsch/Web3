*GitHub Repository "near/core-contracts-as"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .github/ISSUE_TEMPLATE/bounty-template.md ---
---
name: Bounty Template
about: contract bounty
title: "[Bounty]"
labels: Bounty
assignees: willemneal

---

# NEAR Bounty Terms

Before beginning work on the bounty, you must submit a proposal. Only if your proposal is accepted will you be able to claim the reward of the bounty. *In particular for this bounty you need to detail the testing you will use other than unit testing.*

## Description

For this bounty you will need to rewrite the [voting contract](https://github.com/near/core-contracts/tree/master/voting) into AssemblyScript making sure that they have the same API.

## Context

With the new addition of `includeBytes` function in AssemblyScript, near-sdk-as should have enough parity with near-sdk-rs that the core smart contracts should be able to be written in AS. The trickiest part of the contracts are the cross contract calls. Rust provides a high level abstraction for working with promises. For an example for batch promise calls in AS see the [sdk's repo here](https://github.com/near/near-sdk-as/blob/master/assembly/__tests__/sentences.ts).

## Relevant repos or issues

[Core Contracts](https://github.com/near/core-contracts)

## API
Same as rust contracts.

# Acceptance Criteria
* [  ] Including the unit tests
* [  ] Test contracts another way

# Bounty
200 DAI

'''
'''--- .github/ISSUE_TEMPLATE/bounty.md ---
# NEAR Bounty Terms

Before beginning work on the bounty, you must submit a proposal. Only if your proposal is accepted will you be able to claim the reward of the bounty. *In particular for this bounty you need to detail the testing you will use other than unit testing.*

## Description

For this bounty you will need to rewrite the []() into AssemblyScript making sure that they have the same API.

## Context

With the new addition of `includeBytes` function in AssemblyScript, near-sdk-as should have enough parity with near-sdk-rs that the core smart contracts should be able to be written in AS. The trickiest part of the contracts are the cross contract calls. Rust provides a high level abstraction for working with promises. For an example for batch promise calls in AS see the [sdk's repo here](https://github.com/near/near-sdk-as/blob/master/assembly/__tests__/sentences.ts).

## Relevant repos or issues

[Core Contracts](https://github.com/near/core-contracts)

## API
Same as rust contracts.

# Acceptance Criteria
* [  ] Including the unit tests
* [  ] Test contracts another way

# Bounty
200 DAI

'''
'''--- .github/workflows/test.yml ---
name: Test
on:
  push:
    branches:
    - master
  pull_request:
jobs:
  test:
    runs-on: ${{ matrix.platform }}
    name: "${{ matrix.platform }}"
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install dependencies
        env:
          YARN_GPG: no 
        run: yarn --frozen-lockfile
      - name: build
        run: yarn build
      - name: test
        run: yarn test

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - "13"
  - "14"
  - "15"

jobs:
  include:
    - name: yarn
      script:
      - yarn test

    - name: fossa
      before_script:
        - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/fc60c6631a5d372d5a45fea35e31665b338f260d/install.sh | sudo bash"
      script:
        - fossa init
        - fossa analyze --server-scan
        - fossa test

'''
'''--- README.md ---
# core-contracts-as

The [core contracts](https://github.com/near/core-contracts) implemented in AssemblyScript.

## build

```bash
yarn build
# or
npm run build
```

Add `--target debug` for a debug build.

## test

### setup

To setup the repo for testing using the Rust contracts and for reference use `yarn setup` or `node setup.sh`

To run all the tests:

```bash
yarn test
# or
npm run test
```

To run just one test, `yarn asp -f <file_pattern>` or `yarn jest -f <file_pattern>`
'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');

module.exports.include = ["*/assembly/__tests__/**/*.spec.ts"];

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "./exchange-deposit-receiver",
    "./lockup",
    "./multisig",
    "./staking-pool",
    "./staking-pool-factory",
    "./voting",
    "./whitelist"
  ]
}
'''
'''--- exchange-deposit-receiver/__tests__/exchange.spec.ts ---
import { Runtime, Account, stateSize } from "near-sdk-as/runtime";
import { DEFAULT_GAS } from "near-sdk-as/runtime/dist/types";

let runtime: Runtime;
let exchange: Account;
const INPUT = "USER123";
const DEPOSIT = "42";

describe("cross contract calls", () => {
  beforeEach(() => {
    runtime = new Runtime();
    exchange = runtime.newAccount("exchange",
    __dirname + "/../../build/debug/exchange-deposit-receiver.wasm");
  });

  test("single promise", () => {
    let res = exchange.call_other("exchange", "exchange_deposit", INPUT, DEFAULT_GAS, DEPOSIT);
    let call = res.calls["0"];
    expect(call.input).toBe(`"${INPUT}"`);
    expect(call.attached_deposit).toBe(DEPOSIT);
  });

});

'''
'''--- exchange-deposit-receiver/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- exchange-deposit-receiver/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- exchange-deposit-receiver/assembly/__tests__/exchange.spec.ts ---
import { u128, VMContext, Context, env, util } from "near-sdk-as";

const INPUT = "USER123";
const DEPOSIT = u128.from(10);

beforeEach(() => {
  VMContext.setAttached_deposit(DEPOSIT);
  VMContext.setInput(INPUT);
});

describe("Function call", () => {
  it("should contain input", () => {
    env.input(0);
    let len = env.register_len(0);
    let expected = new Uint8Array(len as u32);
    // @ts-ignore;
    env.read_register(0, expected.dataStart);
    expect(expected).toStrictEqual(util.stringToBytes(INPUT))
  });

  it("should have correct deposit", () => {
    expect(Context.attachedDeposit).toStrictEqual(DEPOSIT);
  });
});
'''
'''--- exchange-deposit-receiver/assembly/index.ts ---

export function exchange_deposit(): void {}
'''
'''--- exchange-deposit-receiver/package.json ---
{
  "version": "0.0.0",
  "name": "exchange-deposit-receiver",
  "license": "MIT"
}

'''
'''--- jest.config.js ---
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ["**/__tests__/**/*.spec.ts"],
  testPathIgnorePatterns: ["/assembly/", "/node_modules/"],
  globals: {
    "ts-jest": {
      tsConfig: false
    }
  }
};

'''
'''--- lockup/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- lockup/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- lockup/assembly/index.ts ---

'''
'''--- lockup/package.json ---
{
  "version": "0.0.0",
  "name": "lockup",
  "license": "MIT"
}

'''
'''--- multisig/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- multisig/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- multisig/assembly/index.ts ---

'''
'''--- multisig/package.json ---
{
  "version": "0.0.0",
  "name": "multisig",
  "license": "MIT"
}

'''
'''--- package.json ---
{
  "version": "0.0.0",
  "name": "core-contracts",
  "license": "MIT",
  "scripts": {
    "build": "asb",
    "build:test": "asb --target debug",
    "asp": "asp",
    "jest": "jest",
    "test": "yarn build:test && yarn asp && yarn jest",
    "setup": "node setup.js"
  },
  "devDependencies": {
    "@types/jest": "^26.0.10",
    "@types/node": "^14.6.2",
    "jest": "^26.4.2",
    "near-sdk-as": "^1.2.0",
    "shelljs": "^0.8.4",
    "ts-jest": "^26.3.0",
    "typescript": "^4.0.2"
  }
}

'''
'''--- setup.js ---
#!/usr/bin/env node

var shell = require('shelljs');
var fs = require("fs");

if (!shell.which('git')) {
  shell.echo('Sorry, this script requires git');
  shell.exit(1);
}

if (!fs.existsSync("core-contracts")) {
  shell.exec('git clone https://github.com/near/core-contracts.git');
} else {
  shell.cd("core-contracts");
  shell.exit("git pull");
}
'''
'''--- staking-pool-factory/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- staking-pool-factory/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- staking-pool-factory/assembly/index.ts ---

'''
'''--- staking-pool-factory/package.json ---
{
  "version": "0.0.0",
  "name": "staking-pool-factory",
  "license": "MIT",
  "scripts": {
    "test": "ts-node .. -- --showConfig"
  }
}

'''
'''--- staking-pool/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- staking-pool/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- staking-pool/assembly/index.ts ---
 
'''
'''--- staking-pool/package.json ---
{
  "version": "0.0.0",
  "name": "staking-pool",
  "license": "MIT"
}

'''
'''--- tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/assembly/**/*.ts"
  ]
}
'''
'''--- voting/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- voting/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- voting/assembly/index.ts ---
if (!ASC_NO_ASSERT) {
  assert(false, "noAssert should be true");
}
'''
'''--- voting/package.json ---
{
  "version": "0.0.0",
  "name": "voting",
  "license": "MIT"
}

'''
'''--- whitelist/as-pect.config.js ---
module.exports = require('near-sdk-as/imports');
'''
'''--- whitelist/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- whitelist/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- whitelist/assembly/index.ts ---
if (!ASC_NO_ASSERT) {
  assert(false, "noAssert should be true");
}
'''
'''--- whitelist/package.json ---
{
  "version": "0.0.0",
  "name": "whitelist",
  "license": "MIT"
}

'''