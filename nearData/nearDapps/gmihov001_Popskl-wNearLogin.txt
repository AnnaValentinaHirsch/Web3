*GitHub Repository "gmihov001/Popskl-wNearLogin"*

'''--- .expo-shared/assets.json ---
{
  "12bb71342c6255bbf50437ec8f4441c083f47cdb74bd89160c15e4f43e52a1cb": true,
  "40b842e832070c58deac6aa9e08fa459302ee3f9da492c7e77d93d2fbf4a56fd": true
}

'''
'''--- .vscode/settings.json ---
{
    "search.exclude": {
        "": true,
        "**/*.code-search": false,
        "**/node_modules": false
    }
}
'''
'''--- App.js ---
import { StyleSheet, Text, View, TouchableOpacity, LogBox } from "react-native";
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { SignIn } from "./SignIn";
import { Main } from "./Main";
import { GenerateQR } from "./GenerateQR";
import { ReadQR } from "./ReadQR";
import { initContract, login, logout } from "./initContract";
import { useEffect } from "react";

LogBox.ignoreLogs(["Warning: ..."]);
LogBox.ignoreAllLogs();
const { utils } = nearAPI;
const Stack = createNativeStackNavigator();

// window.localStorageData = {};

// window.localStorage = {
//   getItem: (key) => localStorageData[key],

//   removeItem: (key) => localStorageData[key],
//   setItem: (key, value) => {
//     localStorageData[key] = value;
//   },
//   clear: () => {
//     localStorageData = {};
//   },
// };

const localStorageMock = (() => {
  let store = {};

  return {
    getItem(key) {
      return store[key] || null;
    },
    setItem(key, value) {
      store[key] = value.toString();
    },
    removeItem(key) {
      delete store[key];
    },
    clear() {
      store = {};
    },
  };
})();

Object.defineProperty(window, "localStorage", {
  value: localStorageMock,
});

// window.location.replace({ ...window.location, href: "" });

export default function App() {
  console.log("Object.keys(window): ", Object.keys(window));
  console.log("window.localStorage: ", window.localStorage);
  console.log("window.location: ", window.location);

  useEffect(() => {}, []);

  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="SignIn">
        <Stack.Screen name="SignIn" component={SignIn} />
        <Stack.Screen name="Main" component={Main} />
        <Stack.Screen name="Generate QR" component={GenerateQR} />
        <Stack.Screen name="Read QR" component={ReadQR} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});

'''
'''--- GenerateQR.js ---
import React, { useState, useEffect } from "react";
import { StyleSheet, Text, View, TouchableOpacity, Switch } from "react-native";
import SvgQRCode from "react-native-qrcode-svg";
import * as Location from "expo-location";

export function GenerateQR({ route, navigation }) {
  const [user, setUser] = useState(route.params.user);
  const [dataObj, setDataObj] = useState(null);

  const uri =
    "https://3000-4geeksacademy-flaskresth-t8qn0i28cw9.ws-us30.gitpod.io/reading";

  useEffect(() => {
    let isCancelled = false;

    if (!isCancelled) {
      (async () => {
        let { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== "granted") {
          alert("Permission to access location was denied");
          return;
        }
        let location = await Location.getCurrentPositionAsync({});
        // setLocation(location);
        if (location) {
          setDataObj({
            claimant: user,
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
          });
        }
      })();
    }

    return () => (isCancelled = true);
  }, []);

  if (dataObj) {
    alert(
      `QR generated for claimant: ${dataObj.claimant}, coordinates: ${dataObj.latitude}, ${dataObj.longitude}`
    );
  }

  return (
    <View style={styles.container}>
      {dataObj ? (
        <SvgQRCode size={180} value={JSON.stringify(dataObj)} />
      ) : (
        <Text style={{ fontSize: 20, color: "royalblue", textAlign: "center" }}>
          Generating... Please hold
        </Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
  qr: {
    width: 150,
    height: 150,
  },
});

'''
'''--- Main.js ---
import { StatusBar } from "expo-status-bar";
import React from "react";
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  Switch,
  Button,
} from "react-native";

export function Main({ route, navigation }) {
  let [isEnabled, setIsEnabled] = React.useState(false);
  // let params = navigation.getParam("user");
  console.log(route.params.user);

  return (
    <View style={styles.container}>
      <Text style={{ fontSize: 20, textAlign: "left" }}>
        Use my current location
      </Text>

      <Switch
        style={{ marginBottom: "40%" }}
        trackColor={{ false: "#767577", true: "#81b0ff" }}
        thumbColor={isEnabled ? "#f5dd4b" : "#f4f3f4"}
        ios_backgroundColor="#3e3e3e"
        onValueChange={() => setIsEnabled((previousState) => !previousState)}
        value={isEnabled}
      />
      <TouchableOpacity
        onPress={() => navigation.navigate("Generate QR", route.params)}
        style={{
          backgroundColor: "royalblue",
          borderRadius: 15,
          width: "90%",
          margin: "5%",
          padding: "5%",
          display: "flex",
          justifyContents: "center",
        }}
      >
        <Text style={{ fontSize: 20, color: "#fff", textAlign: "center" }}>
          Generate QR
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={() => navigation.navigate("Read QR", route.params)}
        style={{
          backgroundColor: "royalblue",
          borderRadius: 15,
          width: "90%",
          padding: "5%",
          display: "flex",
          justifyContents: "center",
        }}
      >
        <Text style={{ fontSize: 20, color: "#fff", textAlign: "center" }}>
          Read QR
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});

'''
'''--- ReadQR.js ---
import React, { useState, useEffect } from "react";
import { StyleSheet, Text, View, TouchableOpacity, Switch } from "react-native";
import { BarCodeScanner } from "expo-barcode-scanner";

export function ReadQR({ route, navigation }) {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);
  const [thisUser, setThisUser] = useState(route.params.user);

  const uri =
    "https://3000-4geeksacademy-flaskresth-t8qn0i28cw9.ws-us30.gitpod.io/reading";

  useEffect(() => {
    (async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === "granted");
    })();
  }, []);

  const handleBarCodeScanned = ({ type, data }) => {
    let dataJson = JSON.parse(data);
    dataJson.timestamp = new Date();
    dataJson.verifier = thisUser;
    console.log(dataJson);
    alert(
      `QR data received by verifier: ${dataJson.verifier}, date/time: ${dataJson.timestamp}`
    );

    fetch(uri, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify(dataJson),
    })
      .then((res) => res.json())
      .then((resJson) => {
        console.log(`QR data saved for: `, resJson);
        alert("QR data saved");
      })
      .catch((err) => {
        console.log(err);
      });

    setScanned(true);
  };

  if (hasPermission === null) {
    return <Text>Requesting for camera permission</Text>;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }

  return (
    <View style={styles.container}>
      <BarCodeScanner
        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
        style={StyleSheet.absoluteFillObject}
      />
      {scanned ? (
        <TouchableOpacity
          onPress={() => setScanned(false)}
          style={{
            backgroundColor: "royalblue",
            borderRadius: 15,
            width: "90%",
            margin: "5%",
            padding: "5%",
            display: "flex",
            justifyContents: "center",
          }}
        >
          <Text style={{ fontSize: 20, color: "#fff", textAlign: "center" }}>
            Tap to Scan Again
          </Text>
        </TouchableOpacity>
      ) : null}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});

'''
'''--- SignIn.js ---
import { StatusBar } from "expo-status-bar";
import React, { useState, useEffect } from "react";
import { StyleSheet, Text, View, TouchableOpacity } from "react-native";
import "regenerator-runtime/runtime";
import { initContract, login, logout } from "./initContract";
// import { showMessage } from "react-native-flash-message";
// import { ColorDotsLoader } from "react-native-indicator/index";

export function SignIn({ navigation }) {
  const [signedIn, setSignedIn] = React.useState(false);
  const [userData, setUserData] = React.useState("Georgi Mihov"); //auth fetch in a useEffect will feed this var with auth info

  useEffect(() => {
    initContract()
      .then(async () => {
        console.log("window.walletConnection: ", window.walletConnection);
        console.log("window.currentUser: ", window.currentUser);
        console.log("window.contract: ", window.contract);
        console.log("signedIn(): ", window.walletConnection.isSignedIn());
      })
      .catch((err) => console.log("initContract error: ", err));
  }, []);

  if (window.walletConnection.isSignedIn()) {
    return (
      <View style={styles.container}>
        <Text
          style={{
            fontSize: 24,
            color: "white",
            fontWeight: "600",
            textAlign: "center",
          }}
        >
          POPSKL
        </Text>
        <Text
          style={{
            fontSize: 48,
            color: "white",
            fontWeight: "800",
            textAlign: "center",
          }}
        >
          WELCOME
        </Text>
      </View>
    );
  } else {
    return (
      <View style={styles.container}>
        <Text
          style={{
            fontSize: 24,
            color: "white",
            fontWeight: "600",
            textAlign: "center",
          }}
        >
          POPSKL
        </Text>
        <Text
          style={{
            fontSize: 48,
            color: "white",
            fontWeight: "800",
            textAlign: "center",
          }}
        >
          WELCOME
        </Text>
        <TouchableOpacity
          onPress={() => navigation.navigate("Main", { user: userData })}
          style={{
            backgroundColor: "white",
            borderRadius: 15,
            width: "90%",
            margin: "5%",
            padding: "5%",
            display: "flex",
            justifyContents: "center",
          }}
        >
          <Text
            style={{ fontSize: 20, color: "darkblue", textAlign: "center" }}
          >
            Sign In
          </Text>
        </TouchableOpacity>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "royalblue",
    alignItems: "center",
    justifyContent: "center",
  },
});

'''
'''--- app.json ---
{
  "expo": {
    "name": "PopsiklProj",
    "slug": "PopsiklProj",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "infoPlist": {
        "UIBackgroundModes": [
          "location",
          "fetch"
        ]
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#FFFFFF"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png"
    }
  }
}

'''
'''--- asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json"
  }
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- assembly/__tests__/main.spec.ts ---
import { setGreeting } from '..'
import { storage, Context } from 'near-sdk-as'

describe('Greeting ', () => {
  it('should be set and read', () => {
    setGreeting('hello world')
    storage.get<string>(Context.sender)
  })
})

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/index.ts ---
/*
 * This is an example of an AssemblyScript smart contract with two simple,
 * symmetric functions:
 *
 * 1. setGreeting: accepts a greeting, such as "howdy", and records it for the
 *    user (account_id) who sent the request
 * 2. getGreeting: accepts an account_id and returns the greeting saved for it,
 *    defaulting to "Hello"
 *
 * Learn more about writing NEAR smart contracts with AssemblyScript:
 * https://docs.near.org/docs/develop/contracts/as/intro
 *
 */

import { Context, logging, storage } from 'near-sdk-as'

const DEFAULT_MESSAGE = 'Hello'

// Exported functions will be part of the public interface for your smart contract.
// Feel free to extract behavior to non-exported functions!
export function getGreeting(accountId: string): string | null {
  // This uses raw `storage.get`, a low-level way to interact with on-chain
  // storage for simple contracts.
  // If you have something more complex, check out persistent collections:
  // https://docs.near.org/docs/concepts/data-storage#assemblyscript-collection-types
  return storage.get<string>(accountId, DEFAULT_MESSAGE)
}

export function setGreeting(message: string): void {
  const accountId = Context.sender
  // Use logging.log to record logs permanently to the blockchain!
  logging.log(`Saving greeting "${message}" for account "${accountId}"`)
  storage.set(accountId, message)
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

'''
'''--- config.js ---
const CONTRACT_NAME = "gmihov001.testnet";

function getConfig(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case "production":
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- initContract.js ---
import {
  connect,
  Contract,
  WalletConnection,
  keyStores,
  KeyPair,
  utils,
} from "near-api-js";
import * as nearAPI from "near-api-js";

import { LogBox } from "react-native";
import getConfig from "./config";
LogBox.ignoreLogs(["Warning: ..."]); // Ignore log notification by message
LogBox.ignoreAllLogs(); //Ignore all log notifications

// const { keyStores, KeyPair, utils } = nearAPI;

const nearConfig = getConfig(process.env.NODE_ENV || "testnet");

export async function initContract(accountName, publicKey, privateKey) {
  //get config details for testnet for given contract defined in the config.js file

  //   // creating a inMemoryKey keystore
  //   const keyStore = new keyStores.InMemoryKeyStore();
  //   // format key
  //   const PRIVATE_KEY = privateKey.split(":")[1];
  //   // creates a public / private key pair using the provided private key
  //   const keyPair = KeyPair.fromString(PRIVATE_KEY);

  //   // // adds the keyPair you created to keyStore
  //   await keyStore.setKey("testnet", accountName, keyPair);

  //   // This is a key that stores the private key in storage
  //   const obj2Key = "near-api-js:keystore:" + accountName + ":testnet";
  //   //Setting the public key in storage
  //   localStorage.setItem("undefined_wallet_auth_key", publicKey);
  //   //Setting private key in storage
  //   localStorage.setItem(obj2Key, privateKey);

  //   //Connect to near
  //   const config = {
  //     networkId: "testnet",
  //     keyStore: keyStore,
  //     nodeUrl: "https://rpc.testnet.near.org",
  //     walletUrl: "https://wallet.testnet.near.org",
  //     helperUrl: "https://helper.testnet.near.org",
  //     explorerUrl: "https://explorer.testnet.near.org",
  //   };
  //   const near = await connect(config);

  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearConfig
    )
  );

  // // Wallet connection is created by using near connection already established

  window.walletConnection = new WalletConnection(near);

  // Once we get the wallet details , we save the user details like account it and balance in currentUser object

  if (window.walletConnection.getAccountId()) {
    window.currentUser = {
      accountId: window.walletConnection.getAccountId(),
      balance: (await window.walletConnection.account().state()).amount,
    };
  }

  //   // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      //send token is our contract change method that sends token
      changeMethods: ["saveUserSubAccounts", "sendToken"],
      viewMethods: ["checkUserVideoWatchHistory"],
      //sender is required for signing in
      sender: window.walletConnection.account(),
    }
  );

  //     //Returns necessary details that will be used in App.js
  return { nearConfig };
}

export function logout() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- package.json ---
{
  "name": "popsiklproj",
  "version": "1.0.0",
  "main": "node_modules/expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "eject": "expo eject",
    "build": "npm run build:contract ",
    "build:contract": "asb",
    "deploy": "yarn build && near deploy"
  },
  "dependencies": {
    "@expo/vector-icons": "^12.0.0",
    "@react-native-async-storage/async-storage": "^1.15.7",
    "@react-native-clipboard/clipboard": "^1.8.4",
    "@react-native-community/art": "^1.2.0",
    "@react-native-community/clipboard": "^1.5.1",
    "@react-navigation/native": "^6.0.8",
    "@react-navigation/native-stack": "^6.4.1",
    "@types/jest": "^27.4.1",
    "@types/node": "^17.0.20",
    "@types/react": "^17.0.39",
    "@types/react-dom": "^17.0.11",
    "@types/react-native": "^0.66.16",
    "@types/react-test-renderer": "^17.0.1",
    "typescript": "^4.5.5",
    "axios": "^0.21.4",
    "big.js": "^6.1.1",
    "buffer": "^6.0.3",
    "config.js": "^0.1.0",
    "expo": "~44.0.0",
    "expo-barcode-scanner": "~11.2.0",
    "expo-location": "~14.0.1",
    "expo-status-bar": "~1.2.0",
    "metro-react-native-babel-preset": "^0.66.0",
    "near-api-js": "^0.42.0",
    "near-sdk-as": "^3.2.3",
    "nodemon": "~2.0.3",
    "react": "17.0.1",
    "react-dom": "17.0.1",
    "react-native": "0.64.3",
    "react-native-codegen": "^0.0.7",
    "react-native-flash-message": "^0.1.23",
    "react-native-indicator": "^1.2.2",
    "react-native-qrcode-svg": "^6.1.2",
    "react-native-safe-area-context": "3.3.2",
    "react-native-screens": "~3.10.1",
    "react-native-svg": "12.1.1",
    "react-native-video": "^5.1.1",
    "react-native-web": "0.17.1",
    "react-native-webview": "^11.13.0",
    "react-router-native": "^6.2.1",
    "react-test-renderer": "17.0.2",
    "regenerator-runtime": "^0.13.9",
    "whatwg-url": "^9.1.0",
    "prop-types": "^15.0 || ^16.0"
  },
  "devDependencies": {
    "@babel/core": "^7.12.9",
    "@babel/runtime": "^7.12.5",
    "@babel/preset-env": "^7.1.6"
  },
  "private": true
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {},
  "extends": "expo/tsconfig.base"
}

'''