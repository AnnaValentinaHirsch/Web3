*GitHub Repository "kdysq/example-subgraph"*

'''--- .vscode/settings.json ---
{
    "cSpell.words": [
        "assemblyscript",
        "graphprotocol",
        "isset",
        "jsoneditor",
        "Nanosec",
        "prismjs"
    ]
}
'''
'''--- README.md ---
# Example NEAR Blocks Subgraph

An example to help you get started with NEAR indexing with The Graph. For more information see the docs on https://thegraph.com/docs/supported-networks/near.

## Dev

```
yarn

yarn codegen

yarn build

export GRAPH_TOKEN=your_access_token_of_graph

yarn deploy:test
```

'''
'''--- abis/Gravity.json ---
[{"constant":false,"inputs":[{"name":"_imageUrl","type":"string"}],"name":"updateGravatarImage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"setMythicalGravatar","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"getGravatar","outputs":[{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"gravatarToOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"ownerToGravatar","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_displayName","type":"string"}],"name":"updateGravatarName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_displayName","type":"string"},{"name":"_imageUrl","type":"string"}],"name":"createGravatar","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"gravatars","outputs":[{"name":"owner","type":"address"},{"name":"displayName","type":"string"},{"name":"imageUrl","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"owner","type":"address"},{"indexed":false,"name":"displayName","type":"string"},{"indexed":false,"name":"imageUrl","type":"string"}],"name":"NewGravatar","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"owner","type":"address"},{"indexed":false,"name":"displayName","type":"string"},{"indexed":false,"name":"imageUrl","type":"string"}],"name":"UpdatedGravatar","type":"event"}]

'''
'''--- browser-example/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

'''
'''--- browser-example/package.json ---
{
  "name": "browser-example",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@apollo/client": "^3.5.6",
    "@emotion/react": "^11.7.1",
    "@emotion/styled": "^11.6.0",
    "@mui/icons-material": "^5.2.5",
    "@mui/material": "^5.2.6",
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.0.3",
    "@types/node": "^16.11.17",
    "@types/react": "^17.0.38",
    "@types/react-dom": "^17.0.11",
    "graphql": "^16.2.0",
    "jsoneditor": "^9.5.9",
    "prismjs": "^1.25.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "5.0.0",
    "react-simple-code-editor": "^0.11.0",
    "typescript": "^4.5.4",
    "web-vitals": "^2.1.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {}
}

'''
'''--- browser-example/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <meta
      name="viewport"
      content="minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
    />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jsoneditor@9.5.9/dist/jsoneditor.min.css">
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="https://cdn.jsdelivr.net/npm/jsoneditor@9.5.9/dist/jsoneditor.min.js"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- browser-example/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- browser-example/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- browser-example/src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- browser-example/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: #E7EBF0;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- browser-example/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- browser-example/src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- browser-example/src/reportWebVitals.ts ---
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- browser-example/src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- browser-example/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

'''
'''--- doc/how-to-and-what's-internal.md ---
## TheGraph 介绍

假设有一个合约 A 的具备简单的记账功能，对应两个合约方法：

- income，记录收入的方法
- expense，记录支出的方法

合约上已经具备的功能是：

- 用户可以调用 income 方法，传入 amount，表示一次记录的动作
- 针对每次记录收入的动作，合约可以发出 income 事件，订阅该事件的外部应用 B 会接收到通知，从而进行各自细分的工作

合约上不具备（不方便）的功能是：

- 查询以往的操作记录

TheGraph 就是为了解决链上数据查询难的问题，它的位置就类似上述过程中的应用 B：

1. 它作为外部应用，订阅所有合约上的事件
2. 接收合约的事件通知，并将通知的内容进行一些自定义的转换后记录
3. 记录的方式可以理解成，每个事件对应一张表，并不一定是物理表，但是对外呈现出数据库表的形式
4. 对外提供基于 GraphQL 的查询接口，用于组合查询表中的数据

TheGraph 是相对合约而言的外部应用，这样和合约一对一的外部应用，在 TheGraph 中称之为 Subgraph

合约上的时间数据通常需要经过一些转换后再存储。因为从事件发送方的角度，可能的消费方不光是 Subgraph。转换的内容通过 `mapping.ts` 自定自定义，下文会介绍

上面的 4 步内容，需要我们参与的是 2 部分：

- 实现 Subgraph
- 在 `mapping.ts` 编写我们需要的转换

## 实现 Subgraph

我们不必从零实现 Subgraph，可以从 Clone 一个演示项目开始：

```
git clone https://github.com/graphprotocol/example-subgraph.git
```

切换到 `near-receipts-example` 分支

运行 `yarn` 安装依赖

## subgraph.yaml

我们的 Subgraph 将以托管的方式运行，所以需要 `subgraph.yaml` 对 Subgraph 的规格进行描述和说明，方便 TheGraph 帮我们运行服务

```yaml
specVersion: 0.0.4
description: Good Morning NEAR
repository: https://github.com/graphprotocol/example-subgraph/tree/near-receipts-example
schema:
  file: ./schema.graphql # 定义 GraphQL 的数据结构
dataSources:
  - kind: near
    name: receipts
    network: near-mainnet # 1. 当前尚不支持 near 的测试网络
    source:
      account: "app.good-morning.near" # 2. 替换为 ref-finance.near
      startBlock: 50736511 # 3. 其实区块高度，替换为 32010735
    mapping:
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      file: ./src/mapping.ts
      entities: # 4. 增加我们自己的实体，类似数据库表
        - BlockEvent
        - BlockAction
        - WithdrawAction
      blockHandlers: # 5. 接收区块事件
        - handler: handleBlock # 对应 `./src/mapping.ts` 中的方法名
      receiptHandlers: # 6. 接收合约事件
        - handler: handleReceipt # 对应 `./src/mapping.ts` 中的方法名
```

需要做的更改已经通过注释进行了标记和解释

## schema.graphql

上面我们在 `subgraph.yaml` 中列举了我们的实体，接下来我们需要给出实体的定义，实体的定义是写在 `schema.graphql` 中的：

```graphql
type BlockEvent @entity {
  id: ID!
  account: String!
  number: BigInt
  hash: Bytes
  timestampNanosec: BigInt
  gasPrice: BigInt
}

type BlockAction @entity {
  id: ID!
  methodName: String!
}

type WithdrawAction @entity {
  id: ID!
  account: String!
  amount: BigInt!
}

type UserWithdraw @entity {
  id: ID!
  accumulated: BigInt!
}
```

这里和定义数据库的表没有实质的差别，需要注意的是字段的类型，未来在 `mapping.ts` 中需要将数据处理为正确的类型

`!` 表示该字段一定有非空值，更多支持的类型可以参考 [graphql-supported-scalars](https://thegraph.com/docs/developer/create-subgraph-hosted#graphql-supported-scalars)

## yarn codegen

下面会介绍的 `mapping.ts` 文件中包含了接收合约事件，并转换成上面定义的实体所需的数据结构

如何让 `mapping.ts` 能够感知到上面实体定义的数据结构呢？

答案就是根据上面定义的实体信息，生成对应的 TypeScript 代码，这样不论是 JavaScript Runtime 还是 TypeScript 类型系统都可以感知实体的内容了

运行 `yarn codegen` 就可以进行代码的生成

**未来如果对 schema.graphql 的定义有变更，都需要运行 `yarn codegen`**

## mapping.ts

`schema.graphql` 中是我们定义的实体，它的内容是跟随我们对数据的需求而定的，因此会和合约事件携带的时间有所差异。通过在 `mapping.ts` 中编写对数据转换的代码，可以弥补这些差异

我们在 `subgraph.yaml` 中声明了 `handleBlock` 和 `handleReceipt` 分别用于接收新增区块事件，以及合约事件

这两个方法都必须在 `mapping.ts` 中定义，并且导出为外部使用：

```ts
export function handleBlock(block: near.Block): void {}

export function handleReceipt(receipt: near.ReceiptWithOutcome): void {}
```

当接收到链上的事件通知时，上面的两个方法都会被自动调用：

- 执行我们预定的转换逻辑
- 将转换后的数据存储

[handleBlock](/src/mapping.ts#L18) 的内容就是直观的数据转换，就不赘述了。不过注意需要显式地调用 `save` 方法来存储数据

[handleReceipt](/src/mapping.ts#L29) 需要简单解释一下

receipt 中包含的 actions 才是合约上的事件，receipt 可以理解为事件的打包。所以需要有解包逻辑并处理每条事件：

```ts
export function handleReceipt(receipt: near.ReceiptWithOutcome): void {
  const actions = receipt.receipt.actions;
  for (let i = 0; i < actions.length; i++) {
    handleAction(actions[i], receipt.receipt, receipt.block.header);
  }
}
```

通过 `for` 循环处理 receipt 中的每条事件，`handleAction` 为实际的处理方法

为了进一步对不同的事件采取不同的处理逻辑，在 `handleAction` 内部还有一段路由逻辑：

```ts
if (call.methodName == "withdraw") {
}
```

> `handleReceipt` 同时演示了将数据保存为实体，和利用 [store api](https://thegraph.com/docs/developer/assemblyscript-api#store-api) 保存中间结果

另一个需要注意的问题是，需要正确的操作合约事件中的参数名和参数类型，比如：

```ts
if (call.methodName == "withdraw") {
  const act = new WithdrawAction(receipt.id.toHexString());
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  act.account = args.get("token_id")!.toString(); // 如何知道参数名是 `token_id` 以及其类型是 `String`
}
```

可以通过查看合约源码的方式 [ref-contracts](https://github.com/ref-finance/ref-contracts)：

- `call.methodName` 对应合约中的 `#[payable]` 修饰的方法名
- 参数名即为合约的形参名称
- 参数类型对应合约形参的类型，不过需要换成它们在 [graphql-supported-scalars](https://thegraph.com/docs/developer/create-subgraph-hosted#graphql-supported-scalars) 对应的名称

## 部署

可以认为 Subgraph 中需要我们编写的部分，实际就是：

- 实体定义
- 数据转换

编写完 Subgraph 后，需要将其部署到 TheGraph 上，以托管的方式运行

首先申请一个 TheGraph 的账号，打开 [Dashboard](https://thegraph.com/hosted-service/dashboard) 页面点击右上的 `Sign In` 使用 Github 账号登录记录

还是在 [Dashboard](https://thegraph.com/hosted-service/dashboard)，注意下页面中的 `Access Token`，随后的部署会用到

在进行实际的部署动作之前，还行需要完成两件事情：

1. 在 [Dashboard](https://thegraph.com/hosted-service/dashboard) 中新增一个 Subgraph
2. 将我们的 Subgraph 代码上传到 Github

新增 Subgraph 点击页面中的 `Add Subgraph` 后按页面提示填写表单即可，需要注意的是 `Subgraph name`，当输入名称后，输入框下面会有一行小字比如：

> `thegraph.com/hosted-service/your_account_name/your_subgraph_name`

其中 `your_account_name/your_subgraph_name` 就是下文将用到的 `SUBGRAPH_NAME` 的内容

上传代码到 Github 的步骤也不赘述了

下面是实际的部署操作：

在项目中 `package.json` 的 `scripts` 中新增 `deploy:subgraph` 字段：

```json
{
  "deploy:subgraph": "graph deploy SUBGRAPH_NAME --node https://api.thegraph.com/deploy/ --ipfs https://api.thegraph.com/ipfs/ --access-token $GRAPH_TOKEN"
}
```

将 `SUBGRAPH_NAME` 替换为上文提到的 `your_account_name/your_subgraph_name` 内容

运行下面的命令即可部署：

```
export GRAPH_TOKEN=your_access_token && yarn deploy:subgraph
```

> 替换 your_access_token 为实际的令牌内容

## 查询

Subgraph 部署后，需要经过一段时间的索引，然后才能显示出查询结果，在此期间我们需要关注它是否正确

索引操作简单说就是调用 `mapping.ts` 内的方法，因此如果出错也大致在这个文件涉及的范围内

如果下面出现 `indexing_error` 则需要使用下面提到的调试方法，找到问题并重新部署

查询的方式就是在 GraphQL 客户端中输入查询语句即可，有两个途径：

- 直接在 [Dashboard](https://thegraph.com/hosted-service/dashboard) 中找到对应的 Subgraph 的 Playground 中传入查询内容
- 根据 [querying-from-your-app](https://thegraph.com/docs/developer/querying-from-your-app) 中的描述，通过编程的方式查询

查询语句的语法可以参考 [graphql-api](https://thegraph.com/docs/developer/graphql-api#queries)

## 调试

尚未发现很好的本地调试方法，需要将 Subgraph 部署后，查看它的运行日志。运行日志的查看也比较不直观

如果在 dashboard 中显示 `indexing_error` 时，可以使用下面的方法查看报错内容

- 打开 [graphiql-online](https://graphiql-online.com/)
- Endpoint 输入 `https://api.thegraph.com/index-node/graphql`
- 左边查询内容中输入

  ```graphql
  {
    indexingStatuses(subgraphs: ["Qm..."]) {
      subgraph
      synced
      health
      entityCount
      fatalError {
        handler
        message
        deterministic
        block {
          hash
          number
        }
      }
      chains {
        chainHeadBlock {
          number
        }
        earliestBlock {
          number
        }
        latestBlock {
          number
        }
      }
    }
  }
  ```

- 将上面查询语句中 `Qm...` 的部分替换为部署后的 subgraph ID，在 [Dashboard](https://thegraph.com/hosted-service/dashboard) 中对应的 Subgraph 详情页面可以找到
- 点击查询按钮即可看到错误内容

## 前端使用

可以参考演示工程 [browser-example](/browser-example)

通过下面的方式启动演示工程：

```bash
# 安装依赖
yarn

# 启动本地开发
yarn start
```

工程演示了如下内容:

- 列出给定账号下调用的合约方法
- 列出给定账号下添加/移除的 Pools

## Links

- [在 Graph 上部署 Subgraph](https://thegraph.com/docs/supported-networks/near#subgraph-manifest-definition)，部署前必读的官方指南
- [Near Explore](https://explorer.near.org/)，用于查看区块高度
- [docs.ref.finance](https://docs.ref.finance/)

'''
'''--- doc/ref.md ---
## 部署资料

[在 Graph 上部署 Subgraph](https://thegraph.com/docs/supported-networks/near#subgraph-manifest-definition)，部署前必读的官方指南

[Near Explore](https://explorer.near.org/)，用于查看区块高度

[near-receipts-example](https://github.com/graphprotocol/example-subgraph/tree/near-receipts-example)，官方的演示项目，演示了如何收集事件，但未演示如何解析参数，本项目增加的演示内容：

- 参数的解析可以参考 [mapping.ts#L55](/src/mapping.ts#L55)
- 内置 store 的使用 [mapping.ts#L55](/src/mapping.ts#L62)，内置 store 为简单的 key-value store

### 调试方式

仅有的调试方式如下，如果在 dashboard 中显示 `indexing_error` 时，可以使用下面的方法查看报错内容

- 打开 [graphiql-online](https://graphiql-online.com/)
- Endpoint 输入 `https://api.thegraph.com/index-node/graphql`
- 左边查询内容中输入

  ```graphql
  {
    indexingStatuses(subgraphs: ["Qm..."]) {
      subgraph
      synced
      health
      entityCount
      fatalError {
        handler
        message
        deterministic
        block {
          hash
          number
        }
      }
      chains {
        chainHeadBlock {
          number
        }
        earliestBlock {
          number
        }
        latestBlock {
          number
        }
      }
    }
  }
  ```
- 将上面查询语句中 `Qm...` 的部分替换为部署后的 subgraph ID，在 dashboard 中可以找到
- 点击查询按钮即可看到错误内容

### Sub Account

example.near
sub.example.near

目前 Graph 上不支持同时监听 sub account 的事件，影响范围未知

### Implicit Account

Human readable account 底层依然是公私钥账号，在 near 体系中称之为 implicit account

## Ref finance

[docs.ref.finance](https://docs.ref.finance/)

[Contract on mainnet](https://explorer.near.org/accounts/ref-finance.near)

[The contract source code](https://github.com/ref-finance/ref-contracts)

合约的源码比较重要，其中的 `payable` 方法需要对应到 Graph 上的 Entity

## 一些问题

- 不支持 near testnet
- My dashboard 里面的日志一直显示「Failed to load logs, sorry about that」

'''
'''--- docker-compose.yml ---
version: '3'
services:
  graph-node:
    image: graphprotocol/graph-node:v0.22.0
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - ipfs
      - postgres
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      # Change next line if you want to connect to a different JSON-RPC endpoint
      ethereum: 'mainnet:http://host.docker.internal:8545'
      GRAPH_LOG: info
  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    ports:
      - '5001:5001'
    volumes:
      - ./data/ipfs:/data/ipfs
  postgres:
    image: postgres
    ports:
      - '5432:5432'
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

'''
'''--- migrations/1_initial_migration.js ---
var Migrations = artifacts.require('./Migrations.sol')

module.exports = function(deployer) {
  deployer.deploy(Migrations)
}

'''
'''--- migrations/2_deploy_contract.js ---
const GravatarRegistry = artifacts.require('./GravatarRegistry.sol')

module.exports = async function(deployer) {
  await deployer.deploy(GravatarRegistry)
}

'''
'''--- migrations/3_create_gravatars.js ---
const GravatarRegistry = artifacts.require('./GravatarRegistry.sol')

module.exports = async function(deployer) {
  const registry = await GravatarRegistry.deployed()

  console.log('Account address:', registry.address)

  let accounts = await web3.eth.getAccounts()
  await registry.createGravatar('Carl', 'https://thegraph.com/img/team/team_04.png', {
    from: accounts[0],
  })
  await registry.createGravatar('Lucas', 'https://thegraph.com/img/team/bw_Lucas.jpg', {
    from: accounts[1],
  })
}

'''
'''--- package.json ---
{
  "name": "example",
  "version": "0.1.0",
  "repository": "https://github.com/graphprotocol/example-subgraph",
  "license": "MIT",
  "scripts": {
    "build-contract": "solc contracts/Gravity.sol --abi -o abis --overwrite && solc contracts/Gravity.sol --bin -o bin --overwrite",
    "create": "graph create example --node https://api.thegraph.com/deploy/",
    "create-local": "graph create example --node http://127.0.0.1:8020",
    "codegen": "graph codegen",
    "build": "graph build",
    "deploy": "graph deploy example --ipfs https://api.thegraph.com/ipfs/ --node https://api.thegraph.com/deploy/",
    "deploy-local": "graph deploy example --ipfs http://localhost:5001 --node http://127.0.0.1:8020",
    "deploy:test": "graph deploy hsiaosiyuan0/Ref --node https://api.thegraph.com/deploy/ --ipfs https://api.thegraph.com/ipfs/ --access-token $GRAPH_TOKEN"
  },
  "devDependencies": {
    "@graphprotocol/graph-cli": "0.23.1",
    "@graphprotocol/graph-ts": "0.23.1"
  },
  "dependencies": {
    "babel-polyfill": "^6.26.0",
    "babel-register": "^6.26.0",
    "truffle": "^5.0.4",
    "truffle-contract": "^4.0.5",
    "truffle-hdwallet-provider": "^1.0.4"
  }
}

'''
'''--- src/mapping.ts ---
import {
  near,
  BigInt,
  log,
  json,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";
import {
  ActionAct,
  AddLiquidityAct,
  AddSimplePoolAct,
  BlockAct,
  BlockEvent,
  ExecuteActsAct,
  MftRegisterAct,
  MftTransferAct,
  MftTransferCallAct,
  RegisterTokensAct,
  RemoveLiquidityAct,
  StorageDepositAct,
  StorageUnregisterAct,
  StorageWithdrawAct,
  SwapAct,
  UnregisterTokensAct,
  WithdrawAct,
} from "../generated/schema";

export function handleBlock(block: near.Block): void {
  const header = block.header;
  const event = new BlockEvent(header.hash.toHexString());
  event.number = BigInt.fromI32(header.height as i32);
  event.hash = header.hash;
  event.sender = block.author;
  event.timestampNanosec = BigInt.fromU64(header.timestampNanosec);
  event.gasPrice = header.gasPrice;
  event.save();
}

export function handleReceipt(receipt: near.ReceiptWithOutcome): void {
  const actions = receipt.receipt.actions;
  for (let i = 0; i < actions.length; i++) {
    handleAction(actions[i], receipt.receipt, receipt.block.header);
  }
}

function handleAction(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  blockHeader: near.BlockHeader
): void {
  if (action.kind != near.ActionKind.FUNCTION_CALL) {
    log.info("Early return: {}", ["Not a function call"]);
    return;
  }
  const call = action.toFunctionCall();

  const event = new BlockAct(blockHeader.hash.toHexString());
  event.methodName = call.methodName;
  event.sender = receipt.signerId;
  event.save();

  if (call.methodName == "register_tokens") {
    register_tokens(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "unregister_tokens") {
    unregister_tokens(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "withdraw") {
    withdraw(action, receipt, blockHeader.timestampNanosec);
    return;
  }

  if (call.methodName == "add_simple_pool") {
    add_simple_pool(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "execute_actions") {
    execute_actions(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "swap") {
    swap(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "add_liquidity") {
    add_liquidity(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "remove_liquidity") {
    remove_liquidity(action, receipt, blockHeader.timestampNanosec);
    return;
  }

  if (call.methodName == "mft_register") {
    mft_register(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "mft_transfer") {
    mft_transfer(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "mft_transfer_call") {
    mft_transfer_call(action, receipt, blockHeader.timestampNanosec);
    return;
  }

  if (call.methodName == "storage_deposit") {
    storage_deposit(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "storage_withdraw") {
    storage_withdraw(action, receipt, blockHeader.timestampNanosec);
    return;
  }
  if (call.methodName == "storage_unregister") {
    storage_unregister(action, receipt, blockHeader.timestampNanosec);
    return;
  }
}

function isset(obj: TypedMap<string, JSONValue>, key: string): boolean {
  if (!obj.isSet(key)) return false;
  if (obj.get(key)!.isNull()) return false;
  return true;
}

function register_tokens(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const act = new RegisterTokensAct(receipt.id.toHexString());
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  act.sender = receipt.signerId;
  act.token_ids = args
    .get("token_ids")!
    .toArray()
    .map<string>((r: JSONValue) => r.toString());
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function unregister_tokens(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const act = new UnregisterTokensAct(receipt.id.toHexString());
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  act.sender = receipt.signerId;
  act.token_ids = args
    .get("token_ids")!
    .toArray()
    .map<string>((r: JSONValue) => r.toString());
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function withdraw(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const act = new WithdrawAct(receipt.id.toHexString());
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  act.sender = receipt.signerId;
  act.token_id = args.get("token_id")!.toString();
  act.amount = BigInt.fromString(args.get("amount")!.toString());
  if (isset(args, "unregister")) {
    act.unregister = args.get("unregister")!.toBool();
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function add_simple_pool(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const act = new AddSimplePoolAct(receipt.id.toHexString());
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  act.sender = receipt.signerId;
  act.tokens = args
    .get("tokens")!
    .toArray()
    .map<string>((r) => r.toString());
  act.fee = BigInt.fromU64(args.get("fee")!.toU64());
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function execute_actions(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const baseId = receipt.id.toHexString();
  const acts = args.get("actions")!.toArray();
  const actions = new Array<string>(acts.length);
  for (let i = 0, len = acts.length; i < len; i++) {
    const o = acts[i].toObject();
    const a = new ActionAct(baseId + i.toString());
    a.pool_id = BigInt.fromU64(o.get("pool_id")!.toU64());
    a.token_in = o.get("token_in")!.toString();
    if (isset(o, "amount_in")) {
      a.amount_in = BigInt.fromString(o.get("amount_in")!.toString());
    }
    a.token_out = o.get("token_out")!.toString();
    a.min_amount_out = BigInt.fromString(o.get("min_amount_out")!.toString());
    a.timestampNanosec = BigInt.fromU64(timestampNanosec);
    a.save();

    actions[i] = a.id;
  }
  const act = new ExecuteActsAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.actions = actions;
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function swap(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const baseId = receipt.id.toHexString();
  const acts = args.get("actions")!.toArray();
  const actions = new Array<string>(acts.length);
  for (let i = 0, len = acts.length; i < len; i++) {
    const o = acts[i].toObject();
    const a = new ActionAct(baseId + i.toString());
    if (isset(o, "pool_id")) {
      a.pool_id = BigInt.fromU64(o.get("pool_id")!.toU64());
    }
    a.token_in = o.get("token_in")!.toString();
    if (isset(o, "amount_in")) {
      a.amount_in = BigInt.fromString(o.get("amount_in")!.toString());
    }
    a.token_out = o.get("token_out")!.toString();
    a.min_amount_out = BigInt.fromString(o.get("min_amount_out")!.toString());
    a.timestampNanosec = BigInt.fromU64(timestampNanosec);
    a.save();

    actions[i] = a.id;
  }

  const act = new SwapAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.actions = actions;
  if (isset(args, "referral_id")) {
    act.referral_id = args.get("referral_id")!.toString();
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function add_liquidity(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new AddLiquidityAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.pool_id = BigInt.fromU64(args.get("pool_id")!.toU64());
  act.amounts = args
    .get("amounts")!
    .toArray()
    .map<BigInt>((r) => {
      return BigInt.fromString(r.toString());
    });
  if (isset(args, "min_amounts")) {
    act.amounts = args
      .get("min_amounts")!
      .toArray()
      .map<BigInt>((r) => {
        return BigInt.fromString(r.toString());
      });
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function remove_liquidity(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new RemoveLiquidityAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.pool_id = BigInt.fromU64(args.get("pool_id")!.toU64());
  act.shares = BigInt.fromString(args.get("shares")!.toString());
  act.min_amounts = args
    .get("min_amounts")!
    .toArray()
    .map<BigInt>((r) => {
      return BigInt.fromString(r.toString());
    });
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function mft_register(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new MftRegisterAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.token_id = args.get("token_id")!.toString();
  act.account_id = args.get("account_id")!.toString();
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function mft_transfer(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new MftTransferAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.token_id = args.get("token_id")!.toString();
  act.receiver_id = args.get("receiver_id")!.toString();
  act.amount = BigInt.fromString(args.get("amount")!.toString());
  if (isset(args, "memo")) {
    act.memo = args.get("memo")!.toString();
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function mft_transfer_call(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new MftTransferCallAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  act.token_id = args.get("token_id")!.toString();
  act.receiver_id = args.get("receiver_id")!.toString();
  act.amount = BigInt.fromString(args.get("amount")!.toString());
  if (isset(args, "memo")) {
    act.memo = args.get("memo")!.toString();
  }
  act.msg = args.get("msg")!.toString();
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function storage_deposit(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new StorageDepositAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  if (isset(args, "account_id")) {
    act.account_id = args.get("account_id")!.toString();
  }
  if (isset(args, "registration_only")) {
    act.registration_only = args.get("registration_only")!.toBool();
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function storage_withdraw(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new StorageWithdrawAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  if (isset(args, "amount")) {
    act.amount = BigInt.fromString(args.get("amount")!.toString());
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

function storage_unregister(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  timestampNanosec: u64
): void {
  const args = json.fromBytes(action.toFunctionCall().args).toObject();
  const act = new StorageUnregisterAct(receipt.id.toHexString());
  act.sender = receipt.signerId;
  if (isset(args, "force")) {
    act.force = args.get("force")!.toBool();
  }
  act.timestampNanosec = BigInt.fromU64(timestampNanosec);
  act.save();
}

'''
'''--- truffle.js ---
require('babel-register')
require('babel-polyfill')
const HDWalletProvider = require('truffle-hdwallet-provider')

module.exports = {
  networks: {
    development: {
      host: '127.0.0.1',
      port: 8545,
      network_id: '*',
    },
    ropsten: {
      provider: function() {
        return new HDWalletProvider(
          process.env.MNEMONIC,
          `https://ropsten.infura.io/v3/${process.env.ROPSTEN_INFURA_API_KEY}`
        )
      },
      network_id: '3',
    },
  },
  compilers: {
    solc: {
      version: '0.4.25'    // Fetch exact version from solc-bin (default: truffle's version)
    }
  }
}

'''
'''--- tsconfig.json ---
{
    "extends": "@graphprotocol/graph-ts/types/tsconfig.base.json",
    "include": ["src"]
}
'''