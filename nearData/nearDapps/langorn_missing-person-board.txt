*GitHub Repository "langorn/missing-person-board"*

'''--- Cargo.toml ---
[package]
name = "rust-mpb"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
rand = "0.8.5"
rand_chacha = "=0.2.2"
rand_seeder = "=0.2.1"
getrandom = { version = "0.2", features = ["js"] }
serde = "*"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- mpb-react/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- mpb-react/package.json ---
{
  "name": "mpb-react",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^12.1.4",
    "@testing-library/user-event": "^13.5.0",
    "buffer": "^6.0.3",
    "Buffer": "^0.0.0",
    "near-api-js": "^0.44.2",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- mpb-react/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- mpb-react/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- mpb-react/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- mpb-react/src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- mpb-react/src/App.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import PropTypes from 'prop-types';

import logo from './logo.svg';
import './App.css';
import CreateBulletin from './components/CreateBulletin';
import BulletinList from './components/BulletinList';

const App = ({ contract, currentUser, nearConfig, wallet}) => {

    const signIn = async () => {
     await wallet.requestSignIn(
        nearConfig.contractName,
        'NEAR toDo List'
      );
    };

    const signOut = () => {
      wallet.signOut();
      window.location.replace(window.location.origin + window.location.pathname);
    }

    return (
      <>
      <h1>Near</h1>
      {
        currentUser 
        ? <div>
          <h2>
            Account ID : { currentUser.accountId }
            {" "}
            <button onClick={signOut}> Log out </button>
            <CreateBulletin contract={contract} />
            <BulletinList contract={contract}/>
          </h2>
        </div>
        :
        <div>
          Sign In 
          {" "}
          <button onClick={signIn}>Login</button>
        </div>
      }
      
      </>

    );

};
// function App() {
//   return (
//     <div className="App">
//       <header className="App-header">
//         <img src={logo} className="App-logo" alt="logo" />
//         <p>
//           Edit <code>src/App.js</code> and save to reload.
//         </p>
//         <a
//           className="App-link"
//           href="https://reactjs.org"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Learn React
//         </a>
//       </header>
//     </div>
//   );
// }
// App.propTypes = {
//   contract: PropTypes.shape({
//     create: PropTypes.func.isRequired,
//     get: PropTypes.func.isRequired,
//     update: PropTypes.func.isRequired,
//     del: PropTypes.func.isRequired,
//   }).isRequired,
//   currentUser: PropTypes.shape({
//     accountId: PropTypes.string.isRequired,
//     balance: PropTypes.string.isRequired
//   }),
//   nearConfig: PropTypes.shape({
//     contractName: PropTypes.string.isRequired
//   }).isRequired,
//   wallet: PropTypes.shape({
//     requestSignIn: PropTypes.func.isRequired,
//     signOut: PropTypes.func.isRequired
//   }).isRequired
// };
export default App;

'''
'''--- mpb-react/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- mpb-react/src/components/Bulletin.js ---
import { useState } from "react";

export function Bulletin({ id, sender, img_url, location, description, contact, done }) {
  return (
    <>
      <div className="border">
        <div>{id}</div>
        <div>{sender}</div>
        <div>{img_url}</div>
        <div>{location}</div>
        <div>{description}</div>
        <div>{contact}</div>
      </div>
    </> 

  );
}
export default Bulletin;
'''
'''--- mpb-react/src/components/BulletinList.js ---
import { useEffect, useState } from "react";
import { Bulletin } from "./Bulletin";

const PER_PAGE_LIMIT = 1;

const BullentinList = ({ contract }) => {
    const [bulletins, setBulletins] = useState([]);
    const [page, setPage] = useState(1);

    useEffect(() => {
        let offset;
        if (page <1) {
            setPage(1);
            offset = 0;
        } else {
            offset = (page - 1) * PER_PAGE_LIMIT;
        }
        offset = String(offset);
            contract
            .get_bulletins({from_index: offset, limit: PER_PAGE_LIMIT})
            .then((bulletins) => { 
                console.log(bulletins);
                setBulletins(bulletins)});
    }, [page, contract]);

    return (
        <ul>
          <div className="flex">
          Current Page: {page}
          </div>
          <button onClick={() => setPage((page) => page - 1)}>&lt;</button>
          {" "}
          <button onClick={() => setPage((page) => page + 1)}>&gt;</button>
          {bulletins.map((bulletin) => (
            <li key={bulletin.id}>
              <Bulletin contract={contract} {...bulletin} />
            </li>
          ))}
        </ul>
      );

}

export default BullentinList;
'''
'''--- mpb-react/src/components/CreateBulletin.js ---
import { useState } from "react";

const CreateBulletin = ({ contract }) => {
    const [task, setTask] = useState({});
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (event) => {
        event.preventDefault();
        setLoading(true);

        const createBulletin = await contract.new_bulletinpost({...task});
        setTask({img_url: "", location: "", description: "", contact:""});
        setLoading(false);
        console.log('my bulletin', createBulletin);
    };

    var handleChange = ( itemName, e) => {
        console.log('handlechange');
        let updateValue = {};
        updateValue[itemName] = e.target.value ;
        setTask(task => ({
            ...task,
            ...updateValue
        }));
    }

    return (
        <form onSubmit={handleSubmit}>
            <input
                type="text"
                placeholder="Image Url"
                value={task.img_url}
                onChange ={({target}) => setTask({...task, 'img_url': target.value})}
            />
            <input
                type="text"
                placeholder="Location"
                value={task.location}
                onChange ={({target}) =>  setTask({...task, 'location': target.value})}
            />
            <input
                type="text"
                placeholder="Description"
                value={task.description}
                onChange ={({target}) =>  setTask({...task, 'description': target.value})}
            />
            <input
                type="text"
                placeholder="Contact"
                value={task.contact}
                onChange ={({target}) =>  setTask({...task, 'contact': target.value})}
            />

            <button disabled={loading}> Create </button>            
        </form>
    )
}

export default CreateBulletin;

'''
'''--- mpb-react/src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'test3.zhro2.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;
'''
'''--- mpb-react/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- mpb-react/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';
import reportWebVitals from './reportWebVitals';
import { createRoot } from 'react-dom/client';
import { Buffer } from "buffer"; global.Buffer = Buffer;

// initializing contract
async function initContract() {
  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');
  const near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  })

  // needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // load in account data
  let currentUser;
  if (walletConnection.getAccountId()) {
      currentUser = {
        accountId: walletConnection.getAccountId(),
        balance: (await walletConnection.account().state()).amount
      }
  }

  // initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName,{
    viewMethods: ["get_bulletin", "get_bulletins"],
    changeMethods: ["new_bulletinpost"],
    sender: walletConnection.getAccountId()
  })

  return { contract, currentUser, nearConfig, walletConnection };

}

window.nearInitPromise = initContract()
.then(({ contract, currentUser, nearConfig, walletConnection}) => {
  const container = document.getElementById('root');
  const root = createRoot(container);
  root.render(<App contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}/>)
});

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- mpb-react/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- mpb-react/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- mpb-react/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- package.json ---
{
  "name": "rust-mpb",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build": "asb --verbose",
    "dev:deploy:contract": "near dev-deploy --wasmFile=\"./out/main.wasm\" && echo \"# This file used by parcel\nCONTRACT_NAME=$(cat neardev/dev-account)\" > .env.local",
    "deploy:contract": "near deploy && rm -f .env.local",
    "deploy": "yarn build && yarn deploy:contract",
    "prestart": "yarn build && yarn deploy:contract",
    "start": "parcel src/index.html",
    "asp": "asp --verbose",
    "test": "asp && yarn jest",
    "jest": "yarn build && jest test --env=near-cli/test_environment",
    "dev": "parcel",
    "diss": "parcel serve",
    "pbuild": "parcel build"
  },
  "devDependencies": {
    "jest": "^27.3.1",
    "jest-environment-node": "^27.3.1",
    "near-sdk-as": "3.2.3",
    "near-cli": "^2.2.0",
    "parcel-bundler": "^1.12.5",
    "parcel": "latest"
  },
  "dependencies": {
    "near-api-js": "^0.43.1",
    "regenerator-runtime": "^0.13.9"
  },
  "author": "",
  "license": "ISC"
}

'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedSet;
use near_sdk::collections::UnorderedMap;
use near_sdk::collections::LookupMap;
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::{env, near_bindgen, AccountId};
use std::fmt;
use near_sdk::serde::{Serialize, Deserialize};

use near_sdk::PanicOnDefault;
// extern crate rand;
// use crate::rand::Rng;

// use rand::prelude::*;
// use rand_chacha::ChaCha8Rng;
// use rand_chacha::rand_core::SeedableRng;
// use rand_chacha::rand_core::RngCore;

// use rand_seeder::{Seeder};

near_sdk::setup_alloc!();

pub type TokenId = String;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct BulletinBoard {

    // pub owner_id: AccountId,
    
    pub post_per_owner: UnorderedMap<AccountId, UnorderedSet<TokenId>>,

    pub post_by_id: UnorderedMap<TokenId, BulletinPost>,

}

#[derive(BorshSerialize,Copy, Clone)]
pub enum StorageKey {
    PostPerOwner,
    PostById
}

#[near_bindgen]
impl BulletinBoard {
    #[init]
    pub fn new() -> Self {
         let this = Self {
            // owner_id,
            post_per_owner: UnorderedMap::new(StorageKey::PostPerOwner.try_to_vec().unwrap()),
            post_by_id: UnorderedMap::new(StorageKey::PostById.try_to_vec().unwrap())
            
        };
        this
    }
}

pub trait BulletinBoards {
    fn new_bulletinpost(&mut self, img_url: String, location: String, description: String, contact: String) -> BulletinPost;
    fn get_bulletins(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<BulletinPost>;
    fn get_bulletin(&self, id: String)-> Option<BulletinPost>;
    fn add_post_by_owner( &mut self, account_id: &AccountId, post_id: &TokenId); 
}

#[near_bindgen]
impl BulletinBoards for BulletinBoard { 
    fn new_bulletinpost(&mut self, img_url: String, location: String, description: String, contact: String) -> BulletinPost{
        // env::log(b"before everything...");
        // let mut rng = rand::thread_rng();

        // const CHARSET: &[u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\
        //                         abcdefghijklmnopqrstuvwxyz\
        //                         0123456789)(*&^%$#@!~";
        // const PRIMARYKEY_LEN: usize = 30;

        // let primary_key: String = (0..PRIMARYKEY_LEN)
        //     .map(|_| {
        //         let idx = rng.gen_range(0..CHARSET.len());
        //         CHARSET[idx] as char
        //     })
        //     .collect();

        // let primary_key: Vec<u64> = (0..100).map(|_| gen.next_u64()).collect(); 
        // let mut gen = rand_chacha::ChaCha8Rng::seed_from_u64(10);
        // let primary_key = gen.next_u64();
        let primary_key:u8 = *env::random_seed().get(0).unwrap();

        // println!(".................");
        // println!("{:?}", primary_key);

        // let primary_key:String = "IJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw".to_string();
        let new_post:BulletinPost = BulletinPost {
            id: primary_key.to_string(),
            sender: env::signer_account_id(),
            img_url: img_url,
            location: location,
            description: description,
            contact: contact
        };

        // println!(".................");
        // println!("{:?}", new_post);
        // env::log(b"new_post.id");
        let new_post_id = &new_post.id;
        // self.post_per_owner.insert(&AccountId, &new_post_id);
        self.add_post_by_owner(&env::current_account_id(), &new_post_id);
        self.post_by_id.insert(&new_post.id, &new_post);
        // self.get_bulletins( Some(U128(0)), Some(50));
        return new_post
    }

    fn get_bulletins(&self, from_index: Option<U128>, limit: Option<u64>) ->Vec<BulletinPost>{
        // return self.post_per_owner.get(&id); //cloned();
        // return self.post_per_owner;
        let start = u128::from(from_index.unwrap_or(U128(0)));
        let result =  self.post_by_id.keys()
        .skip(start as usize)
        .take(limit.unwrap_or(50) as usize)
        .map(|post_id| self.get_bulletin(post_id.clone()).unwrap())
        .collect();

        return result;

    }

    fn get_bulletin(&self, id: String) -> Option<BulletinPost> {
        return self.post_by_id.get(&id);
    }
        
    fn add_post_by_owner(
        &mut self,
        account_id: &AccountId,
        post_id: &TokenId
    ) {
        let mut post_set = self.post_per_owner.get(account_id).unwrap_or_else(|| {
            UnorderedSet::new(
                StorageKey::PostPerOwner
                .try_to_vec()
                .unwrap(),
            )
        });
        post_set.insert(post_id);
        self.post_per_owner.insert(account_id, &post_set);
    }

}
#[derive(Serialize, Deserialize, BorshSerialize, BorshDeserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct BulletinPost {
    pub id: String,
    pub sender: AccountId,
    pub img_url: String,
    pub location: String,
    pub description: String,
    pub contact: String

}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>) -> VMContext {
        VMContext {
            current_account_id: "alice.testnet".to_string(),
            signer_account_id: "robert.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "jane.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn create_post() {
        let context = get_context(vec![]);
        testing_env!(context);
        let mut contract = BulletinBoard::new();
        let result = contract.new_bulletinpost("http://wwww.u.com".to_string(), "malaysia".to_string(), "missing...".to_string(), "+60128193931".to_string());
        let contact = contract.get_bulletin(result.id);
        // println!("{:?}", contact.as_ref().unwrap().contact);
        assert_eq!("+60128193931".to_string(), contact.unwrap().contact);
        // assert_eq!(vec!(result), contract.get_bulletins( Some(U128(0)), Some(50)));

    }
    #[test]
    fn posts() {
        let context = get_context(vec![]);
        testing_env!(context);
        let contract = BulletinBoard::new();
        let result = contract.get_bulletins( Some(U128(0)), Some(50));
    }

}
'''