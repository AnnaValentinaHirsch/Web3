*GitHub Repository "mesh-chat/chat-contract"*

'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/chat-contract.iml" filepath="$PROJECT_DIR$/.idea/chat-contract.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
'''
'''--- README.md ---
# chat-contract
'''
'''--- chat/.gitpod.yml ---
tasks:
  - init: npm start
    command: npm i && npm run deploy && npm run start
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- chat/contract/Cargo.toml ---
[package]
name = "chat-contract"
version = "1.0.0"
authors = ["yurii.stolbetskyi@nure.ua"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- chat/contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- chat/contract/deploy.sh ---
#!/bin/sh

./build.sh

echo ">> Deploying contract"

near deploy zvyazok.testnet --wasmFile ./target/wasm32-unknown-unknown/release/chat_contract.wasm
'''
'''--- chat/contract/src/lib.rs ---
extern crate core;

use near_sdk::{BorshStorageKey, PanicOnDefault};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{AccountId, env, near_bindgen};
use near_sdk::collections::{UnorderedMap};
use near_sdk::env::predecessor_account_id;

pub type PhoneNumber = String;

#[derive(BorshSerialize, BorshStorageKey)]
enum KeyStore {
    IdPerNumber
}

#[near_bindgen]
#[derive(PanicOnDefault, BorshDeserialize, BorshSerialize)]
pub struct Contract {
    // number_per_id: UnorderedMap<PhoneNumber, AccountId>,
}

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new() -> Self {
        assert!(!env::state_exists(), "Already initialized");
        Self {
            // number_per_id: UnorderedMap::new(KeyStore::IdPerNumber)
        }
    }

    pub fn register_account(&mut self, phone_number: PhoneNumber) {
        // let account_id = predecessor_account_id();
        //
        // if self.number_per_id.get(&phone_number).is_some() {
        //     panic!("Phone number {} already registered", phone_number)
        // }
        //
        // self.number_per_id.insert(&phone_number, &account_id);
    }

    pub fn send_message(
        &self,
        message: String,
        sender_phone_number: PhoneNumber,
        receiver_phone_number: PhoneNumber
    )
    {
        // if self.number_per_id.get(&receiver_phone_number).is_none() {
        //     panic!("Receiver phone number {} not registered", receiver_phone_number)
        // }

        // let account_id = predecessor_account_id();
        // let sender_account_id = self.number_per_id.get(&sender_phone_number)
        //     .expect("Your number is not registered");
        //
        // if account_id != sender_account_id {
        //     panic!("You are not the owner of this number: {}", sender_phone_number)
        // }
    }
}

#[cfg(test)]
mod tests {
}
'''
'''--- package.json ---
{
  "name": "chat",
  "version": "1.0.0",
  "scripts": {
    "deploy": "cd chat/contract && ./deploy.sh",
    "build": "npm run build:contract",
    "build:contract": "cd chat/contract && ./build.sh",
    "test": "npm run build:contract && npm run test:unit && npm run test:integration",
    "test:unit": "cd chat/contract && cargo test",
    "test:integration": "cd integration-tests && npm test -- -- \"./contract/target/wasm32-unknown-unknown/release/contract.wasm\"",
    "postinstall": "cd frontend && npm install && cd  && cd integration-tests && npm install && cd .. && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}
'''