*GitHub Repository "LTcolombo/near-hackaton"*

'''--- README.md ---
# near-hackaton

The repo contains 3 projects:
1. The game client,
2. The escrow service (inc NFT)
3. NFT contract

Pre-created wallets with registered escrow deposits and minted nfts - 

- beeswax_client_1.testnet
`right virtual hover distance tissue entry simple this clever flip ostrich surround`

- beeswax_client_2.testnet
`slush tackle shield dice lamp suggest eight crash short announce vocal round`
'''
'''--- bees-wax-client/Assets/BootstrapApi.cs ---
﻿using System.Runtime.InteropServices;
using api;
using service;
using utils.injection;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class BootstrapApi : InjectableBehaviour
{
    [Inject] private NakamaApi _nakama;

    [Inject] private MultiplayerService _multiplayer;

    [Inject] private NFTSelectionService _selection;

    [Inject] private WalletService _wallet;

    [Inject] private EscrowApi _escrow;

    public Text Status;

    [DllImport("__Internal")]
    private static extern void SignIn();

    private void Start()
    {
#if UNITY_EDITOR
        HandleWalletId("beeswax_client_1.testnet");
#elif UNITY_WEBGL
//this should do into wallet
        SignIn();
#else
        HandleWalletId("beeswax_client_2.testnet");
#endif
        
        _escrow.Connect();
    }

    public void HandleWalletId(string value)
    {
        _wallet.WalletId = value;
        
        UnityMainThreadDispatcher.Instance().Enqueue(Connect);
    }

    private async void Connect()
    {
        Status.text = "Startup..";
        _nakama.CreateClient();

        Status.text = "Authenticating..";
        await _nakama.CreateSession(_wallet.WalletId);
        
        Status.text = "Getting user..";
        await _nakama.GetUser();
        
        Status.text = "Creating socket..";
        await _nakama.CreateSocket();
        
        //possibly thsi should be in _multiplayer Awake()? todo
        //todo make resolution recursive
        Injector.Instance.Resolve(_multiplayer);
        Injector.Instance.Resolve(_selection);
        Injector.Instance.Resolve(_escrow);
        
        _multiplayer.InitApi();
        
        SceneManager.LoadScene("TierSelection");
    }
}
'''
'''--- bees-wax-client/Assets/DisplayBalance.cs ---
using service;
using UnityEngine.UI;
using utils.injection;

public class DisplayBalance : InjectableBehaviour
{
    [Inject]
    private WalletService _wallet;
    
    public Text text;
    
    void Start()
    {
        Refresh();
        _wallet.Update.Add(Refresh);
    }

    async void Refresh()
    {
        text.text = await _wallet.GetBalance() + " yN";
    }
}

'''
'''--- bees-wax-client/Assets/DisplayNFTEffect.cs ---
﻿using System.Collections.Generic;
using api;
using service;
using UnityEngine.UI;
using utils.injection;

public class DisplayNFTEffect : InjectableBehaviour
{
    public Text label;

    [Inject] private NFTApi _nft;
    
    [Inject] private NFTSelectionService _selectionService;

    private void Start()
    {
        Redraw();
        _selectionService.Selected.Add(Redraw);
    }

    private void Redraw()
    {
        var text = new List<string>();

        if (_selectionService.Effect.harvest > 1)
            text.Add($"Harvest: +{_selectionService.Effect.harvest - 1:P0}");

        if (_selectionService.Effect.damage > 1)
            text.Add($"Damage: +{_selectionService.Effect.damage - 1:P0}");

        if (_selectionService.Effect.armour > 1)
            text.Add($"Armour: +{_selectionService.Effect.armour - 1:P0}");

        if (_selectionService.Effect.build > 1)
            text.Add($"Build: +{_selectionService.Effect.build - 1:P0}");

        if (_selectionService.Effect.hp > 1)
            text.Add($"HP: +{_selectionService.Effect.hp - 1:P0}");
        
        if (_selectionService.Effect.hatch > 1)
            text.Add($"Hatch: +{_selectionService.Effect.hatch - 1:P0}");
        
        if (_selectionService.Effect.feed > 1)
            text.Add($"Feed: +{_selectionService.Effect.feed - 1:P0}");

        label.text = string.Join("\n", text);
    }
}
'''
'''--- bees-wax-client/Assets/DisplayWalletId.cs ---
using service;
using UnityEngine.UI;
using utils.injection;

public class DisplayWalletId : InjectableBehaviour
{
    
    [Inject]
    private WalletService _wallet;
    
    public Text text;
    void Start()
    {
        text.text = _wallet.WalletId;
    }
}

'''
'''--- bees-wax-client/Assets/EscrowNotify.cs ---
﻿using api;
using model;
using model.data;
using UnityEngine;
using UnityEngine.UI;
using utils.injection;

public class EscrowNotify : InjectableBehaviour
{
    [Inject]
    private EscrowApi _escrow;
    
    
    [Inject]
    private ResourceModel _resource;
    
    [Inject]
    private SelectedTierModel _tier;

    public GameObject MatchEndPopup;

    public Text MatchResult;
    
    void Start()
    {
        _escrow.Start(_tier.value);
        _escrow.MatchEnd.Add(OnMatchEnd);
    }

    private void OnMatchEnd()
    {
        MatchEndPopup.SetActive(true);
        MatchResult.text = $"yN COLLECTED: {_resource.Get(Faction.Player)}";
    }

    private void OnDestroy()
    {
        _escrow.MatchEnd.Remove(OnMatchEnd);
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Input/BaseTouchBehaviour.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Input
{
    public class BaseTouchBehaviour : InjectableStateMachineBehaviour
    {
        [Inject]
        private InputModel _input;
        
        // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);
            animator.SetFloat("Time", 0);
        }

        // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
        public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            _input.MakeSnapshot();
                
            animator.SetFloat("Time", animator.GetFloat("Time") + Time.deltaTime);
            animator.SetInteger("TouchCount", InputModel.ActiveTouchCount());
            animator.SetBool("Moved", !_input.LastTouch.deltaPosition.Equals(default(Vector2)));
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Input/TouchInputMove.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Input
{
    public class TouchInputMove : InjectableStateMachineBehaviour
    {
        [Inject]
        protected InputModel _input;
        
        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);
            _input.RegisterDrag();
        }

        public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateUpdate(animator, stateInfo, layerIndex);
            _input.RegisterDrag();
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Input/TouchInputTap.cs ---
﻿using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace FSM.Input
{
    public class TouchInputTap : InjectableStateMachineBehaviour
    {
        [Inject]
        SelectionModel _selection;

        [Inject]
        InputModel _input;

        [Inject]
        FactionModel _faction;

        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);

            var ray = Camera.main.ScreenPointToRay(_input.LastTouch.position);
            RaycastHit hit;
            if (Physics.Raycast(ray, out hit, ray.origin.magnitude))
            {
                var hitId = hit.collider.gameObject.GetInstanceID();
                if (_faction.Get(hitId) == Faction.Neutral)
                {
                    _selection.ToggleSelection(Faction.Player, hitId);
                }
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Input/TouchInputZoom.cs ---
﻿using System;
using model;
using utils.injection;
using UnityEngine;

namespace FSM.Input
{
    public class TouchInputZoom : InjectableStateMachineBehaviour
    {
        [Inject]
        private InputModel _input;
        
        float _oldMagnitude;

        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);
            if (InputModel.ActiveTouchCount() >= 2)
            {
                var pinchVector = InputModel.GetActiveTouch(1).position - InputModel.GetActiveTouch(0).position;
                _oldMagnitude = pinchVector.magnitude;
            }
        }

        public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            if (InputModel.ActiveTouchCount() < 2) return; //this will be handled by base input behavious and exit state

            var magnitude = (InputModel.GetActiveTouch(1).position - InputModel.GetActiveTouch(0).position).magnitude;
            _input.Zoom += (magnitude - _oldMagnitude) / Math.Min(Screen.height, Screen.width);
            _oldMagnitude = magnitude;
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/Common/CheckTargetReached.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Common
{
    public class CheckTargetReached : InjectableStateMachineBehaviour
    {
        [Inject]
        TargetModel _targets;

        private Animator _animator;
        private Collider _targetCollider;
        private LayerMask _layerMask;
        private bool _enabled;

        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);

            var target = _targets.GetTarget(animator.gameObject.GetInstanceID());
            if (target != null)
            {
                _targetCollider = target.GetComponent<Collider>();
                _layerMask = 1 << _targetCollider.gameObject.layer;
                _enabled = true;
            }
            else
            {
                animator.SetTrigger("NoTargetFound");
            }
        }

        public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            if (!_enabled)
                return;

            if (_targetCollider == null)
            {
                animator.SetTrigger("NoTargetFound");
                return;
            }

//            RaycastHit hit;
//            var pos = animator.transform.position;
//            
//            Debug.DrawRay(pos * 1.5f, -pos);
//            if (!Physics.Raycast(new Ray(pos * 1.5f, -pos), out hit, pos.magnitude, _layerMask))
//                return;
//            if (hit.collider != _targetCollider)
//                return;

            foreach (var hit in Physics.OverlapCapsule(animator.transform.position, Vector3.zero, 0.1f, _layerMask))
            {
                if (hit != _targetCollider)
                    continue;

                animator.SetTrigger("TargetReached");
                _enabled = false;
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/Common/RefreshTargetIn.cs ---
﻿using UnityEngine;

namespace FSM.Unit.Common
{
    public class RefreshTargetIn : StateMachineBehaviour
    {
        private float _accumulated;

        public float Time = 1f;

        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            _accumulated = 0f;
        }

        public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            _accumulated += UnityEngine.Time.deltaTime;
            if (_accumulated >= Time) 
                animator.SetTrigger("RefreshTarget");
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/Common/SetMoveParams.cs ---
﻿using model;
using utils.customUI;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Common
{

	public class SetMoveParams : InjectableStateMachineBehaviour {

		public MovementType Type = MovementType.Wander;
		
		[MinMaxRange (0f, 30f)]
		public MinMaxRange Inertia;
		
		[Range(0f, 10f)]
		public float Velocity = 5;
		
		[Inject]
		MoveParamsModel _moveParams;

		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {
			base.OnStateEnter(animator, stateInfo, layerIndex);
			_moveParams.SetMoveParams(Type, Velocity, Inertia);
		}
	}
}

'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/Build.cs ---
﻿using model;
using model.data;
using service;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Speciality
{
	public class Build : ContiniousAction
	{
		[Inject]
		private SelectionModel _selection;

		[Inject]
		private MultiplayerService _multiplayer;
		
		[Inject]
		private NFTSelectionService _nftSelection;
		
		protected override ActionType _actionType => ActionType.Build;

		protected override void OnComplete(GameObject owner, Faction ownerFaction)
		{
			
//todo synchonise
			_multiplayer.AssignFaction(_id);
			_faction.Set(_id, ownerFaction);

			if (_selection.IsSelected(ownerFaction, _id))
				_selection.ToggleSelection(ownerFaction, _id);
		}
		
		protected override bool IsComplete(Faction objFaction)
		{
			return objFaction == _faction.Get(_id);
		}
		
		protected override float DeltaTime()
		{
			return Time.deltaTime * _nftSelection?.Effect?.build ?? 1;
		}
	}
}

'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/CollectResource.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Speciality
{
    public class CollectResource : InjectableStateMachineBehaviour
    {   
        [Inject]
        private CollectionModel _collected;
        
        [Inject]
        private TargetModel _target;
        
        public int Limit;
        public float Rate;
        
        public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            var target = _target.GetTarget(animator.gameObject.GetInstanceID());

            if (target == null) return;
            
            var source = target.GetComponent<Source>();

            if (source == null) return; //this means we are transitioning to a different state and target is no onger a source
            
            var toCollect = Rate * Time.deltaTime;
            if (source.Reduce(toCollect))
            {
                _collected.Inc(toCollect);
                if (_collected.Get() >= Limit)
                    animator.SetTrigger("ActionCompleted");
            }
            else
            {
                animator.SetTrigger("ActionCompleted");
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/ContiniousAction.cs ---
﻿using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Speciality
{
	public abstract class ContiniousAction : InjectableStateMachineBehaviour
	{

		[Inject]
		private ActionProgressModel _progress;
		
		[Inject]
		protected FactionModel _faction;
	
		[Inject]
		protected TargetModel _target;
        

		protected abstract ActionType _actionType { get; }

		protected int _id;
	 
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			base.OnStateEnter(animator, stateInfo, layerIndex);
			var target = _target.GetTarget(animator.gameObject.GetInstanceID());
			if (target == null)
			{
				_id = 0;
				animator.SetTrigger("ActionCompleted");
				return;
			}

			_id = target.GetInstanceID();
		}
	
		// OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			base.OnStateUpdate(animator, stateInfo, layerIndex);
			if (_id == 0)
				return;
		
			var objFaction = _faction.Get(animator.gameObject.GetInstanceID());
			
			//todo return if slave
			if (objFaction == Faction.Enemy)
				return;
			
			if (!_progress.Contribute(_id, objFaction, _actionType, DeltaTime()))
			{
				OnComplete(animator.gameObject, objFaction);
			}
				
			if (IsComplete(objFaction))
			{
				animator.SetTrigger("ActionCompleted");
				_id = 0;
			}
			
		}

		protected virtual float DeltaTime()
		{
			return Time.deltaTime;
		}

		protected abstract bool IsComplete(Faction objFaction);

		protected abstract void OnComplete(GameObject owner, Faction ownerFaction);
	}
}

'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/Damage.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Speciality
{
    public class Damage : InjectableStateMachineBehaviour
    {
        [Inject]
        private TargetModel _target;
    
        [Inject]
        private HealthModel _health;
    
        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);

            var target = _target.GetTarget(animator.gameObject.GetInstanceID());
            if (target != null)
                _health.Apply(target.GetInstanceID(), -1);
        
            animator.SetTrigger("ActionCompleted");
        }
    }
}

'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/Feed.cs ---
﻿using model;
using model.data;
using service;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Speciality
{
    public class Feed : ContiniousAction
    {
        [Inject]
        private LayedEggsModel _eggs;
        
        [Inject]
        private MultiplayerService _multiplayer;
        
        [Inject]
        private NFTSelectionService _nftSelection;

        protected override ActionType _actionType => ActionType.Feed;

        protected override void OnComplete(GameObject owner, Faction ownerFaction)
        {
            //check  other possible reasons of Contribute returning false except competion
            if (!_eggs.HasLayedEgg(_id)) return;
            
            var obj = _eggs.GetLayedEgg(_id);
            
            //todo synchonise create
            _multiplayer.Create(obj);
            obj.SetActive(true);
            _eggs.RemoveLayedEgg(_id);
        }
		
        protected override bool IsComplete(Faction objFaction)
        {
            return !_eggs.HasLayedEgg(_id);
        }
        
        protected override float DeltaTime()
        {
            return Time.deltaTime * _nftSelection?.Effect?.feed ?? 1;
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/Hatch.cs ---
﻿using model;
using model.data;
using service;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.Speciality
{
    
    public class Hatch : ContiniousAction
    {
        [Inject]
        private LayedEggsModel _eggs;
        
        [Inject]
        private UnitQueueModel _queue;
        
        [Inject]
        private NFTSelectionService _nftSelection;

        private GameObject _currentTarget;

        protected override ActionType _actionType => ActionType.Hatch;

        private void OnStateEnter(Animator animator, AnimatorStateInfo animatorStateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, animatorStateInfo, layerIndex);
            _currentTarget = _target.GetTarget(animator.gameObject.GetInstanceID());
        }

        protected override void OnComplete(GameObject owner, Faction ownerFaction)
        {
            var egg = Instantiate(_queue.Roll(), 
                _currentTarget.transform.position, Quaternion.identity, owner.transform.parent); 
                
            _faction.Set(egg.GetInstanceID(), _faction.Get(_currentTarget.GetInstanceID()));
            egg.SetActive(false);
                
            _eggs.SetLayedEgg(_currentTarget.GetInstanceID(), egg);
        }
		
        protected override bool IsComplete(Faction objFaction)
        {
            return _eggs.HasLayedEgg(_id);
        }
        
        protected override float DeltaTime()
        {
            return Time.deltaTime * _nftSelection?.Effect?.hatch ?? 1;
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/Speciality/ReleaseResource.cs ---
﻿using api;
using model;
using model.data;
using utils.injection;
using UnityEngine;
using view.behaviours.UI;

namespace FSM.Unit.Speciality
{
	public class ReleaseResource : InjectableStateMachineBehaviour {

		[Inject]
		ResourceModel _resources;
        
		[Inject]
		FactionModel _faction;
        
		[Inject]
		CollectionModel _collected;
        
		[Inject]
		EscrowApi _escrow;
        
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			base.OnStateEnter(animator, stateInfo, layerIndex);

			var value = _collected.Get();
			if (value > 0)
			{
				_collected.Reset();

				var faction = _faction.Get(animator.gameObject.GetInstanceID());
				if (faction == Faction.Player)
				{
					//todo static access
					ShowResourceCollected.ShowCollectionEffect((int) value, animator.gameObject.transform.position);
					_escrow.SubmitResource(value);
				}
			}
			animator.SetTrigger("ActionCompleted");
		}
	}
}

'''
'''--- bees-wax-client/Assets/FSM/Unit/TargetSearch/FindEnemyUnit.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.TargetSearch
{
    public class FindEnemyUnit : FindTarget
    {
        [Inject]
        FactionModel _faction;
        
        protected override int GetLayer()
        {
            return LayerMask.GetMask("Units");
        }

        protected override bool IsRelevant(GameObject owner, GameObject candidate)
        {
            return _faction.IsOpposite(owner.GetInstanceID(), candidate.GetInstanceID()); 
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/TargetSearch/FindFreeCells.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.TargetSearch
{
    public class FindFreeCells : FindFriendlyObject
    {
        [Inject]
        LayedEggsModel _eggs;

        [Inject]
        FactionModel _faction;

        public bool Occupied;
        
        protected override bool IsRelevant(GameObject owner, GameObject candidate)
        {
            if (!base.IsRelevant(owner, candidate))
                return false;

            return Occupied == _eggs.HasLayedEgg(candidate.GetInstanceID());
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/TargetSearch/FindFriendlyObject.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.TargetSearch
{
    public class FindFriendlyObject : FindTarget
    {
        [Inject]
        FactionModel _faction;
        
        protected override int GetLayer()
        {
            return LayerMask.GetMask("Cells");
        }

        protected override bool IsRelevant(GameObject owner, GameObject candidate)
        {
            //todo teams and is same/opposite
            return base.IsRelevant(owner, candidate) && _faction.IsSame(owner.GetInstanceID(), candidate.GetInstanceID()); 
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/TargetSearch/FindNeutralObject.cs ---
﻿using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.TargetSearch
{
    public class FindNeutralObject : FindTarget
    {
        [Inject]
        FactionModel _faction;
        
        protected override int GetLayer()
        {
            return LayerMask.GetMask("Cells");
        }

        protected override bool IsRelevant(GameObject owner, GameObject candidate)
        {
            //todo teams and is same/opposite
            return base.IsRelevant(owner, candidate) && _faction.Get(candidate.GetInstanceID()) == Faction.Neutral; 
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/TargetSearch/FindSource.cs ---
﻿using UnityEngine;

namespace FSM.Unit.TargetSearch
{
    public class FindSource : FindTarget
    {
        protected override int GetLayer()
        {
            return LayerMask.GetMask("Default");
        }

        protected override bool IsRelevant(GameObject owner, GameObject candidate)
        {
            return base.IsRelevant(owner, candidate) && candidate.CompareTag("Source");
        }
    }
}
'''
'''--- bees-wax-client/Assets/FSM/Unit/TargetSearch/FindTarget.cs ---
﻿using model;
using model.data;
using service;
using utils.injection;
using UnityEngine;

namespace FSM.Unit.TargetSearch
{
    public abstract class FindTarget : InjectableStateMachineBehaviour
    {
        [Inject]
        private TargetModel _targets;

        [Inject]
        private SelectionModel _selection;

        [Inject]
        private FactionModel _faction;
        
        [Inject]
        private MultiplayerService _multiplayer;
        
        public float Sight = 3;

        protected bool SelectedOnly;

        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            base.OnStateEnter(animator, stateInfo, layerIndex);

            if (_faction.Get(animator.gameObject.GetInstanceID()) == Faction.Enemy)
                return;//todo target will come via network
            
            GameObject nearest = null;
            var nearestDistance = float.MaxValue;

            foreach (var hit in Physics.OverlapSphere(animator.transform.position, Sight, GetLayer()))
            {
                var collided = hit.gameObject;

                if (!IsRelevant(animator.gameObject, collided))
                    continue;

                var distance = (animator.transform.position - collided.transform.position).sqrMagnitude;
                if (!(distance < nearestDistance))
                    continue;

                nearestDistance = distance;
                nearest = collided;
            }
            
//todo synchonise
            if (nearest != null && _faction.Get(animator.gameObject.GetInstanceID()) == Faction.Player)
                _multiplayer.AssignTarget(animator.gameObject, nearest);
            
            if (nearest != null)
            {
                animator.SetTrigger("TargetFound");
                _targets.SetTarget(animator.gameObject.GetInstanceID(), nearest);
            }
            else
            {
                animator.SetTrigger("NoTargetFound");
                _targets.SetTarget(animator.gameObject.GetInstanceID(), null);
            }
        }

        protected abstract int GetLayer();

        protected virtual bool IsRelevant(GameObject owner, GameObject candidate)
        {
            return !SelectedOnly ||
                   _selection.IsSelected(
                       _faction.Get(owner.GetInstanceID()),
                       candidate.GetInstanceID());
        }
    }
}
'''
'''--- bees-wax-client/Assets/HandleDisconnect.cs ---
﻿using service;
using utils.injection;
using UnityEngine.SceneManagement;

public class HandleDisconnect : InjectableBehaviour
{
    [Inject]
    private MultiplayerService _multiplayer;
    
    private bool _disconnect;

    // Start is called before the first frame update
    void Start()
    {
        _multiplayer.UsersUpdated.Add(OnUsersUpdated);
        _multiplayer.Disconnect.Add(OnDisconnect);
    }

    private void OnUsersUpdated()
    {
        if (_multiplayer.Users.Count < 2)
            _disconnect = true;
    }

    private void OnDisconnect()
    {
        _disconnect = true;
    }

    // Update is called once per frame
    void Update()
    {
        if (_disconnect)
            SceneManager.LoadScene("Loading");
    }

    private void OnDestroy()
    {
        _multiplayer.UsersUpdated.Remove(OnUsersUpdated);
        _multiplayer.Disconnect.Remove(OnDisconnect);
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Editor/InitHexUI.cs ---
﻿using UnityEngine;
using UnityEditor;

public class InitHexUI : MonoBehaviour
{
    [InitializeOnLoad]
    public class InitOnLoad
    {
        static InitOnLoad()
        {
            if (!EditorPrefs.HasKey("HexUI.Installed"))
            {
                EditorPrefs.SetInt("HexUI.Installed", 1);
                EditorUtility.DisplayDialog("Hello there!", "Thank you for purchasing Hexart UI.\r\rYou can check Documentation and Read Me file for help, or contact me at isa.steam@outlook.com", "Got it!");
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Read Me.txt ---
Hexart - Complete Main Menu UI (v1.1.4)
-----------------------------------------
If you're going to use Loading Screen feature and don't know how, check page 8 of this PDF:
https://docs.wixstatic.com/ugd/a8f640_f9bfb3d52d4a4c4e87cb348af38ec881.pdf

Important: Blur shaders doesn't work with LWRP & HDRP.
Disable all of the blur object to work with SRP.

Contact me via:
E-mail: isa.steam@outlook.com
Website: https://www.michsky.com
Discord: https://discord.gg/VXpHyUt
YouTube: https://www.youtube.com/c/michsky
Unity Connect: https://connect.unity.com/u/isa-kocak
Steam: https://steamcommunity.com/id/geezjesus/
-----------------------------------------

Changes v1.1.4
---------------------
• 2019.1 compatibility
• New customizable blur system
• Improved horizontal slider
• Optimized some animations
• Minor bugs fixed
---------------------

Changes v1.1.0
---------------------
• Added HUD scene
• Added smooth loading screen system
• Added borders, icons and more sprites
• Fixed animation bug that causes flickering
---------------------
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/BlurManager.cs ---
﻿using System.Collections;
using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class BlurManager : MonoBehaviour
    {
        [Header("RESOURCES")]
        public Material blurMaterial;

        [Header("SETTINGS")]
        [Range(0.0f, 10)] public float blurValue = 5.0f;
        [Range(0.1f, 50)] public float animationSpeed = 25;
        public string customProperty = "_Size";

        float currentBlurValue;

        void Start()
        {
            if(customProperty == null)
            {
                customProperty = "_Size";
            }

            blurMaterial.SetFloat("_Size", 0);
        }

        IEnumerator BlurIn()
        {
            currentBlurValue = blurMaterial.GetFloat("_Size");

            while (currentBlurValue <= blurValue)
            {
                currentBlurValue += Time.deltaTime * animationSpeed;
                blurMaterial.SetFloat("_Size", currentBlurValue);
                yield return null;
            }
            StopCoroutine("BlurIn");
        }

        IEnumerator BlurOut()
        {
            currentBlurValue = blurMaterial.GetFloat("_Size");

            while (currentBlurValue >= 0)
            {
                currentBlurValue -= Time.deltaTime * animationSpeed;
                blurMaterial.SetFloat("_Size", currentBlurValue);
                yield return null;
            }
            StopCoroutine("BlurOut");
        }

        public void BlurInAnim()
        {
            StopCoroutine("BlurOut");
            StartCoroutine("BlurIn");
        }

        public void BlurOutAnim()
        {
            StopCoroutine("BlurIn");
            StartCoroutine("BlurOut");
        }

        public void SetBlurValue(float cbv)
        {
            blurValue = cbv;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/CustomInputField.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class CustomInputField : MonoBehaviour
    {
        [Header("ANIMATORS")]
        public Animator inputFieldAnimator;

        [Header("OBJECTS")]
        public GameObject fieldTrigger;
        public Text inputText;

        // [Header("SETTINGS")]
        private bool isEmpty = true;
        private bool isClicked = false;
        private string inAnim = "In";
        private string outAnim = "Out";

        void Start()
        {
            // Check if text is empty or not
            if (inputText.text.Length == 0 || inputText.text.Length <= 0)
            {
                isEmpty = true;
            }

            else
            {
                isEmpty = false;
            }

            // Animate if it's empty
            if (isEmpty == true)
            {
                inputFieldAnimator.Play(outAnim);
            }

            else
            {
                inputFieldAnimator.Play(inAnim);
            }
        }

        void Update()
        {
            if (inputText.text.Length == 1 || inputText.text.Length >= 1)
            {
                isEmpty = false;
                inputFieldAnimator.Play(inAnim);
            }

            else if (isClicked == false)
            {
                inputFieldAnimator.Play(outAnim);
            }
        }

        public void Animate()
        {
            isClicked = true;
            inputFieldAnimator.Play(inAnim);
            fieldTrigger.SetActive(true);
        }

        public void FieldTrigger()
        {
            if (isEmpty == true)
            {
                inputFieldAnimator.Play(outAnim);
                fieldTrigger.SetActive(false);
                isClicked = false;
            }

            else
            {
                fieldTrigger.SetActive(false);
                isClicked = false;
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/ExitToSystem.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class ExitToSystem : MonoBehaviour
    {
        public void ExitGame()
        {
            Debug.Log("It's working :)");
            Application.Quit();
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/FeedbackSystem.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class FeedbackSystem : MonoBehaviour
    {
        public void SendFeedback()
        {
            string email = "isa.steam@outlook.com";
            string subject = MyEscapeURL("Hexart UI - Feedback");
            string body = MyEscapeURL("Please enter your message here\n\n" +
             "------------------------------------------" +
             "\nPlease Do Not Modify This Area\n\n" +
             "Unity: " + Application.unityVersion + "\n" +
             "OS: " + SystemInfo.operatingSystem + "\n" +
             "Platform: " + Application.platform + "\n" +
             "GPU: " + SystemInfo.graphicsDeviceName + "\n" +
             "CPU: " + SystemInfo.processorType + "\n" +
             "---------------------------------------------------------------------\n\n");
 
            Application.OpenURL("mailto:" + email + "?subject=" + subject + "&body=" + body);
        }

        string MyEscapeURL(string url)
        {
            return WWW.EscapeURL(url).Replace("+", "%20");
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/FocusOnCanvasObject.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class FocusOnCanvasObject : MonoBehaviour
    {
        private GameObject focusedObj;

        public void FocusButton(Button focusedObject)
        {
            focusedObject.Select();
            focusedObj = focusedObject.GetComponent<GameObject>();
        //    EventSystem.current.SetSelectedGameObject(focusedObj, null);
        }

        public void FocusIP(InputField inputFieldSelect)
        {
            inputFieldSelect.Select();
            focusedObj = inputFieldSelect.GetComponent<GameObject>();
        //    EventSystem.current.SetSelectedGameObject(focusedObj, null);
        }

        public void FocusToggle(Toggle toggleSelect)
        {
            toggleSelect.Select();
            focusedObj = toggleSelect.GetComponent<GameObject>();
        //    EventSystem.current.SetSelectedGameObject(focusedObj, null);
        }

        public void FocusScrollBar(Scrollbar scrollSelect)
        {
            scrollSelect.Select();
            focusedObj = scrollSelect.GetComponent<GameObject>();
        //    EventSystem.current.SetSelectedGameObject(focusedObj, null);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/HUDManager.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
	public class HUDManager : MonoBehaviour 
	{
		[Header("RESOURCES")]
		public Animator pauseMenu;
		public Animator pausePanel;

        private BlurManager bManager;

		bool isOpen;

        void Start()
        {
            bManager = gameObject.GetComponent<BlurManager>();
        }

		public void OpenCloseMenu () 
		{
			if(isOpen == false)
			{
				pauseMenu.Play("Pause Menu Opening");
				pausePanel.Play("Pause Menu In");
				isOpen = true;
                bManager.BlurInAnim();
			}

			else
			{
				pauseMenu.Play("Pause Menu Closing");
				pausePanel.Play("MP Fade-out");
				isOpen = false;
                bManager.BlurOutAnim();
            }
		}
	}
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/HorizontalSelector.cs ---
﻿using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class HorizontalSelector : MonoBehaviour
    {
        private Text label;
        private Text labeHelper;
        private Animator selectorAnimator;

        [Header("SETTINGS")]
        private int index = 0;
        public int defaultIndex = 0;

        [Header("ELEMENTS")]
        public List<string> elements = new List<string>();

        [Header("EVENT")]
        public UnityEvent onValueChanged;

        void Start()
        {
            selectorAnimator = gameObject.GetComponent<Animator>();
            label = transform.Find("Text").GetComponent<Text>();
            labeHelper = transform.Find("Text Helper").GetComponent<Text>();
            label.text = elements[defaultIndex];
            labeHelper.text = label.text;
        }

        public void PreviousClick()
        {
            labeHelper.text = label.text;

            if (index == 0)
            {
                index = elements.Count - 1;
            }

            else
            {
                index--;
            }

            onValueChanged.Invoke();
            label.text = elements[index];

            selectorAnimator.Play(null);
            selectorAnimator.StopPlayback();
            selectorAnimator.Play("Previous");
        }

        public void ForwardClick()
        {
            labeHelper.text = label.text;

            if ((index + 1) >= elements.Count)
            {
                index = 0;
            }

            else
            {
                index++;
            }

            onValueChanged.Invoke();
            label.text = elements[index];

            selectorAnimator.Play(null);
            selectorAnimator.StopPlayback();
            selectorAnimator.Play("Forward");
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/LayoutGroupPositionFix.cs ---
﻿using System.Collections;
using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class LayoutGroupPositionFix : MonoBehaviour
    {
        public LayoutGroup layoutGroup;

        void Start()
        {
            StartCoroutine(ExecuteAfterTime(0.5f));
        }

        public void ManualStart()
        {
            StartCoroutine(ExecuteAfterTime(0.5f));
        }

        IEnumerator ExecuteAfterTime(float time)
        {
            yield return new WaitForSeconds(time);
            layoutGroup.enabled = false;
            layoutGroup.enabled = true;
            Destroy(GetComponent<LayoutGroupPositionFix>());
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/ListContentSizeFix.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class ListContentSizeFix : MonoBehaviour
    {
        public Scrollbar scrollbar;
        public bool isReversed;

        void Start()
        {
            if (isReversed == true)
            {
                scrollbar.value = 1;
            }

            else
            {
                scrollbar.value = 0;
            }
        }

        public void FixListSize()
        {
            if (isReversed == true)
            {
                scrollbar.value = 1;
            }

            else
            {
                scrollbar.value = 0;
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/ListTabsManager.cs ---
﻿using System.Collections.Generic;
using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class ListTabsManager : MonoBehaviour
    {
        [Header("PANEL LIST")]
        public List<GameObject> panels = new List<GameObject>();

        [Header("BUTTON LIST")]
        public List<GameObject> buttons = new List<GameObject>();

        // [Header("PANEL ANIMS")]
        private string panelFadeIn = "MP Fade-in";
        private string panelFadeInHex = "MP Fade-in Hexagon";
        private string panelFadeOut = "MP Fade-out";

        // [Header("BUTTON ANIMS")]
        private string buttonFadeIn = "TPB Pressed";
        private string buttonFadeOut = "TPB Dissolve";

        private GameObject currentPanel;
        private GameObject nextPanel;

        private GameObject currentButton;

        [Header("SETTINGS")]
        public int currentPanelIndex = 0;
        private int currentButtonIndex = 0;

        private bool isHexagonAnimEnabled;

        private Animator currentPanelAnimator;
        private Animator nextPanelAnimator;

        private Animator currentButtonAnimator;

        void Start()
        {
            currentPanel = panels[currentPanelIndex];
            currentPanelAnimator = currentPanel.GetComponent<Animator>();
            currentPanelAnimator.Play(panelFadeIn);

            currentButton = buttons[currentPanelIndex];
            currentButtonAnimator = currentButton.GetComponent<Animator>();
            currentButtonAnimator.Play(buttonFadeIn);
        }

        public void PanelAnim(int newPanel)
        {
            if (isHexagonAnimEnabled == true)
            {
                if (newPanel != currentPanelIndex)
                {
                    currentPanel = panels[currentPanelIndex];

                    currentPanelIndex = newPanel;
                    nextPanel = panels[currentPanelIndex];

                    currentPanelAnimator = currentPanel.GetComponent<Animator>();
                    nextPanelAnimator = nextPanel.GetComponent<Animator>();

                    currentPanelAnimator.Play(panelFadeOut);
                    nextPanelAnimator.Play(panelFadeInHex);
                }
            }

            else
            {
                if (newPanel != currentPanelIndex)
                {
                    currentPanel = panels[currentPanelIndex];

                    currentPanelIndex = newPanel;
                    nextPanel = panels[currentPanelIndex];

                    currentPanelAnimator = currentPanel.GetComponent<Animator>();
                    nextPanelAnimator = nextPanel.GetComponent<Animator>();

                    currentPanelAnimator.Play(panelFadeOut);
                    nextPanelAnimator.Play(panelFadeIn);
                }
            }
        }

        public void HexagonAnim(bool hexAnimEnabled)
        {
            if (hexAnimEnabled == true)
            {
                isHexagonAnimEnabled = true;
            }

            else
            {
                isHexagonAnimEnabled = false;
            }
        }

        public void ButtonAnimIn(int newButton)
        {
            currentButton = buttons[newButton];
            currentButtonAnimator = currentButton.GetComponent<Animator>();
            currentButtonAnimator.Play(buttonFadeIn);
        }

        public void ButtonAnimOut(int newButton)
        {
            currentButton = buttons[newButton];
            currentButtonAnimator = currentButton.GetComponent<Animator>();
            currentButtonAnimator.Play(buttonFadeOut);
        }

        public void ModalAnim(bool isOn)
        {
            currentPanel = panels[currentPanelIndex];

            if (isOn == true)
            {
                currentPanelAnimator = currentPanel.GetComponent<Animator>();
                currentPanelAnimator.Play("MP Modal Out");
            }

            else
            {
                currentPanelAnimator = currentPanel.GetComponent<Animator>();
                currentPanelAnimator.Play("MP Modal In");
            }
        }
    }
}

'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/LoadScene.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class LoadScene : MonoBehaviour
    {
        public void ChangeToScene(string sceneName)
        {
            LoadingScreen.LoadScene(sceneName);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/LoadingScreen.cs ---
﻿using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class LoadingScreen : MonoBehaviour
    {
        private static LoadingScreen instance = null;

        [Header("RESOURCES")]
        public CanvasGroup canvasAlpha;
        public Text status;
        public Text title;
        public Text titleDescription;
        public static string prefabName = "Stock_Style";

        [Header("RANDOM HINTS")]
        public Text hintsText;
        public List<string> HintList = new List<string>();
        public bool changeHintWithTimer;
        public float hintTimerValue = 5;
        // [Range(0.1f, 1)] public float hintFadingSpeed = 1;
        private float htvTimer;

        [Header("RANDOM IMAGES")]
        public Image imageObject;
        public Animator fadingAnimator;
        public List<Sprite> ImageList = new List<Sprite>();
        public bool changeImageWithTimer;
        public float imageTimerValue = 5;
        [Range(0.1f, 5)] public float imageFadingSpeed = 1;
        private float itvTimer;

        [Header("SETTINGS")]
        public bool enableTitleDesc = true;
        public bool enableRandomHints = true;
        public bool enableRandomImages = true;
        public string titleText;
        public string titleDescText;
        [Range(0.1f, 10)] public float fadingAnimationSpeed = 2.0f;

        private bool isHintAlphaZero;

        void Start()
        {
            // If this is disabled, then disable Title Description object
            if (enableTitleDesc == false)
            {
                titleDescription.enabled = false;
            }

            // If this is enabled, generate random hints
            if (enableRandomHints == true)
            {
                string hintChose = HintList[Random.Range(0, HintList.Count)];
                hintsText.text = hintChose;
            }

            // If this is enabled, generate random images
            if (enableRandomImages == true)
            {
                Sprite imageChose = ImageList[Random.Range(0, ImageList.Count)];
                imageObject.sprite = imageChose;
            }

            // Set up title text
            title.text = titleText;
            titleDescription.text = titleDescText;

            // Set up Random Image fading anim speed
            fadingAnimator.speed = imageFadingSpeed;
            // fadingAnimator.SetFloat("Fade Out", imageFadingSpeed);
        }
        // Scene loading process
        private AsyncOperation loadingProcess;

        // Load a new scene
        public static void LoadScene(string sceneName)
        {
            // If there isn't a LoadingScreen, then create a new one
            instance = Instantiate(Resources.Load<GameObject>(prefabName)).GetComponent<LoadingScreen>();
            // Don't destroy loading screen while it's loading
            DontDestroyOnLoad(instance.gameObject);

            // Enable loading screen
            instance.gameObject.SetActive(true);
            // Start loading between scenes
            instance.loadingProcess = SceneManager.LoadSceneAsync(sceneName);
            // Don't allow scene switching
            instance.loadingProcess.allowSceneActivation = false;
        }

        void Awake()
        {
            // Set loading screen invisible at first (panel alpha color)
            canvasAlpha.alpha = 0f;
        }

        void Update()
        {
            // Update loading status
            if (status != null)
            {
                status.text = Mathf.Round(loadingProcess.progress * 100f).ToString() + "%";
            }

            // If loading is complete
            if (loadingProcess.isDone)
            {
                // Fade out
                canvasAlpha.alpha -= fadingAnimationSpeed * Time.deltaTime;

                // If fade out is complete, then disable the object
                if (canvasAlpha.alpha <= 0)
                {
                    Destroy(gameObject);
                }
            }

            else // If loading proccess isn't completed
            {
                // Start Fade in
                canvasAlpha.alpha += fadingAnimationSpeed * Time.deltaTime;

                // If loading screen is visible
                if (canvasAlpha.alpha >= 1)
                {
                    // We're good to go. New scene is on! :)
                    loadingProcess.allowSceneActivation = true;
                }
            }

            // Check if random images are enabled
            if (enableRandomImages == true)
            {
                itvTimer += Time.deltaTime;

                if (itvTimer >= imageTimerValue && fadingAnimator.GetCurrentAnimatorStateInfo(0).IsName("Start"))
                {
                    fadingAnimator.Play("Fade In");
                }

                else if (itvTimer >= imageTimerValue && fadingAnimator.GetCurrentAnimatorStateInfo(0).IsName("Fade Out"))
                {
                    Sprite imageChose = ImageList[Random.Range(0, ImageList.Count)];
                    imageObject.sprite = imageChose;
                    itvTimer = 0.0f;
                }
            }

            // Check if random hints are enabled
            if (enableRandomHints == true)
            {
                htvTimer += Time.deltaTime;

                if (htvTimer >= hintTimerValue && isHintAlphaZero == false)
                {
                    string hintChose = HintList[Random.Range(0, HintList.Count)];
                    hintsText.text = hintChose;
                    htvTimer = 0.0f;
                }
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/LoadingStyle.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class LoadingStyle : MonoBehaviour
    {
        public void SetStyle(string prefabToLoad)
        {
            LoadingScreen.prefabName = prefabToLoad;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/PressKey.cs ---
﻿using UnityEngine;
using UnityEngine.Events;

namespace Hexart_UI.Scripts
{
    public class PressKey : MonoBehaviour
    {
        [Header("KEY")]
        [SerializeField]
        public KeyCode hotkey;

        [Header("KEY ACTION")]
        [SerializeField]
        public UnityEvent pressAction;

        void Update()
        {
            if (Input.GetKeyDown(hotkey))
            {
                pressAction.Invoke();
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/SettingsTabManager.cs ---
﻿using System.Collections.Generic;
using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class SettingsTabManager : MonoBehaviour
    {
        [Header("PANEL LIST")]
        public List<GameObject> panels = new List<GameObject>();

        [Header("BUTTON LIST")]
        public List<GameObject> buttons = new List<GameObject>();

        // [Header("PANEL ANIMS")]
        private string panelFadeIn = "MP Fade-in";
        private string panelFadeOut = "MP Fade-out";

        // [Header("BUTTON ANIMS")]
        private string buttonFadeIn = "TPS Hover to Pressed";
        private string buttonFadeOut = "TPS Pressed to Normal";

        private GameObject currentPanel;
        private GameObject nextPanel;

        private GameObject currentButton;
        private GameObject nextButton;

        [Header("SETTINGS")]
        public int currentPanelIndex = 0;
        private int currentButtonlIndex = 0;

        private Animator currentPanelAnimator;
        private Animator nextPanelAnimator;

        private Animator currentButtonAnimator;
        private Animator nextButtonAnimator;

        void Start()
        {
            currentPanel = panels[currentPanelIndex];
            currentPanelAnimator = currentPanel.GetComponent<Animator>();
            currentPanelAnimator.Play(panelFadeIn);

            currentButton = buttons[currentPanelIndex];
            currentButtonAnimator = currentButton.GetComponent<Animator>();
            currentButtonAnimator.Play(buttonFadeIn);
        }

        public void OpenFirstTab()
        {
            currentPanel = panels[currentPanelIndex];
            currentPanelAnimator = currentPanel.GetComponent<Animator>();
            currentPanelAnimator.Play(panelFadeIn);

            currentButton = buttons[currentPanelIndex];
            currentButtonAnimator = currentButton.GetComponent<Animator>();
            currentButtonAnimator.Play(buttonFadeIn);
        }

        public void PanelAnim(int newPanel)
        {
            if (newPanel != currentPanelIndex)
            {
                currentPanel = panels[currentPanelIndex];

                currentPanelIndex = newPanel;
                nextPanel = panels[currentPanelIndex];

                currentPanelAnimator = currentPanel.GetComponent<Animator>();
                nextPanelAnimator = nextPanel.GetComponent<Animator>();

                currentPanelAnimator.Play(panelFadeOut);
                nextPanelAnimator.Play(panelFadeIn);

                currentButton = buttons[currentButtonlIndex];

                currentButtonlIndex = newPanel;
                nextButton = buttons[currentButtonlIndex];

                currentButtonAnimator = currentButton.GetComponent<Animator>();
                nextButtonAnimator = nextButton.GetComponent<Animator>();

                currentButtonAnimator.Play(buttonFadeOut);
                nextButtonAnimator.Play(buttonFadeIn);
            }
        }

        public void NextPage()
        {
            if (currentPanelIndex <= panels.Count - 2)
            {
                currentPanel = panels[currentPanelIndex];              
                currentButton = buttons[currentButtonlIndex];
                nextButton = buttons[currentButtonlIndex + 1];

                currentPanelAnimator = currentPanel.GetComponent<Animator>();
                currentButtonAnimator = currentButton.GetComponent<Animator>(); 

                currentButtonAnimator.Play(buttonFadeOut);
                currentPanelAnimator.Play(panelFadeOut);

                currentPanelIndex += 1;
                currentButtonlIndex += 1;
                nextPanel = panels[currentPanelIndex];

                nextPanelAnimator = nextPanel.GetComponent<Animator>();  
                nextButtonAnimator = nextButton.GetComponent<Animator>();          
                nextPanelAnimator.Play(panelFadeIn);               
                nextButtonAnimator.Play(buttonFadeIn);
            }
        }

        public void PrevPage()
        {
             if (currentPanelIndex >= 1)
            {
                currentPanel = panels[currentPanelIndex];              
                currentButton = buttons[currentButtonlIndex];
                nextButton = buttons[currentButtonlIndex - 1];

                currentPanelAnimator = currentPanel.GetComponent<Animator>();
                currentButtonAnimator = currentButton.GetComponent<Animator>(); 

                currentButtonAnimator.Play(buttonFadeOut);
                currentPanelAnimator.Play(panelFadeOut);

                currentPanelIndex -= 1;
                currentButtonlIndex -= 1;
                nextPanel = panels[currentPanelIndex];

                nextPanelAnimator = nextPanel.GetComponent<Animator>();  
                nextButtonAnimator = nextButton.GetComponent<Animator>();          
                nextPanelAnimator.Play(panelFadeIn);               
                nextButtonAnimator.Play(buttonFadeIn);
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/SliderManager.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class SliderManager : MonoBehaviour
    {
        [Header("TEXTS")]
        public Text valueText;
        public Text popupValueText;

        [Header("SETTINGS")]
        public bool usePercent = false;
        public bool showValue = true;
        public bool showPopupValue = true;
        public bool useRoundValue = false;

        private Slider mainSlider;

        void Start()
        {
            mainSlider = this.GetComponent<Slider>();

            if (showValue == false)
            {
                valueText.enabled = false;
            }

            if (showPopupValue == false)
            {
                popupValueText.enabled = false;
            }
        }

        void Update()
        {
            if (useRoundValue == true)
            {
                if (usePercent == true)
                {
                    valueText.text = Mathf.Round(mainSlider.value * 1.0f).ToString() + "%";
                    popupValueText.text = Mathf.Round(mainSlider.value * 1.0f).ToString() + "%";
                }

                else
                {
                    valueText.text = Mathf.Round(mainSlider.value * 1.0f).ToString();
                    popupValueText.text = Mathf.Round(mainSlider.value * 1.0f).ToString();
                }
            }
            else
            {
                if (usePercent == true)
                {
                    valueText.text = mainSlider.value.ToString("F1") + "%";
                    popupValueText.text = mainSlider.value.ToString("F1") + "%";
                }

                else
                {
                    valueText.text = mainSlider.value.ToString("F1");
                    popupValueText.text = mainSlider.value.ToString("F1");
                }
            }
        }   
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/SplashScreenManager.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class SplashScreenManager : MonoBehaviour
    {
        [Header("RESOURCES")]
        public GameObject splashScreen;
        public GameObject mainPanels;
        public GameObject homePanel;
        private Animator mainPanelsAnimator;
        private Animator homePanelAnimator;
        private BlurManager bManager;

        [Header("SETTINGS")]
        public bool disableSplashScreen;

        void Start()
        {
            bManager = gameObject.GetComponent<BlurManager>();

            if (disableSplashScreen == true)
            {
                splashScreen.SetActive(false);
                mainPanels.SetActive(true);

                mainPanelsAnimator = mainPanels.GetComponent<Animator>();
                mainPanelsAnimator.Play("Main Panel Opening");
                homePanelAnimator = homePanel.GetComponent<Animator>();
                homePanelAnimator.Play("MP Fade-in Start");
                bManager.BlurInAnim();
            }

            else
            {
                splashScreen.SetActive(true);
                mainPanels.SetActive(false);
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/SwitchAnim.cs ---
﻿using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class SwitchAnim : MonoBehaviour
    {
        [Header("SWITCH")]
        public Animator switchAnimator;

        [Header("SETTINGS")]
        [Tooltip("IMPORTANT! EVERY SWITCH MUST HAVE A DIFFERENT ID")]
        public int switchID = 0;
        public bool isOn;
        public bool saveValue;
        [Tooltip("Use it if you're using this switch first time. 1 = ON, and 0 = OFF")]
        [Range(0, 1)] public int playerPrefsHelper;

        public UnityEvent OffEvents;
        public UnityEvent OnEvents;

        private Button offButton;
        private Button onButton;

        private string onTransition = "Switch On";
        private string offTransition = "Switch Off";

        void Start()
        {
            playerPrefsHelper = PlayerPrefs.GetInt(switchID + "Switch");

            if (saveValue == true)
            {
                if (playerPrefsHelper == 1)
                {
                    OnEvents.Invoke();
                    switchAnimator.Play(onTransition);
                    isOn = true;
                }

                else
                {
                    OffEvents.Invoke();
                    switchAnimator.Play(offTransition);
                    isOn = false;
                }
            }

            else
            {
                if (isOn == true)
                {
                    switchAnimator.Play(onTransition);
                    OnEvents.Invoke();
                    isOn = true;
                }

                else
                {
                    switchAnimator.Play(offTransition);
                    OffEvents.Invoke();
                    isOn = false;
                }
            }
        }

        public void AnimateSwitch()
        {
            if (isOn == true)
            {
                OffEvents.Invoke();
                switchAnimator.Play(offTransition);
                isOn = false;
                playerPrefsHelper = 0;
            }

            else
            {
                OnEvents.Invoke();
                switchAnimator.Play(onTransition);
                isOn = true;
                playerPrefsHelper = 1;
            }

            if (saveValue == true)
            {
                PlayerPrefs.SetInt(switchID + "Switch", playerPrefsHelper);
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/TiltWindow.cs ---
using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class TiltWindow : MonoBehaviour
    {
        public Vector2 range = new Vector2(5f, 3f);

        Transform mTrans;
        Quaternion mStart;
        Vector2 mRot = Vector2.zero;

        void Start()
        {
            mTrans = transform;
            mStart = mTrans.localRotation;
        }

        void Update()
        {
            Vector3 pos = Input.mousePosition;

            float halfWidth = Screen.width * 0.5f;
            float halfHeight = Screen.height * 0.5f;
            float x = Mathf.Clamp((pos.x - halfWidth) / halfWidth, -1f, 1f);
            float y = Mathf.Clamp((pos.y - halfHeight) / halfHeight, -1f, 1f);
            mRot = Vector2.Lerp(mRot, new Vector2(x, y), Time.deltaTime * 5f);

            mTrans.localRotation = mStart * Quaternion.Euler(-mRot.y * range.y, mRot.x * range.x, 0f);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/TimedAction.cs ---
﻿using System.Collections;
using UnityEngine;
using UnityEngine.Events;

namespace Hexart_UI.Scripts
{
    public class TimedAction : MonoBehaviour
    {
        [Header("TIMING (SECONDS)")]
        public float timer = 4;

        [Header("END ACTION")]
        public UnityEvent timerAction;

        void Start()
        {
            StartCoroutine(TimedEvent());
        }

        IEnumerator TimedEvent()
        {
            yield return new WaitForSeconds(timer);
            timerAction.Invoke();
        }
    }
}

'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/ToggleAnim.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class ToggleAnim : MonoBehaviour
    {
        [Header("TOGGLE")]
        public Toggle toggleObject;

        [Header("ANIMATORS")]
        public Animator toggleAnimator;

        [Header("ANIM NAMES")]
        public string toggleOn;
        public string toggleOff;

        void Start()
        {
            this.toggleObject.GetComponent<Toggle>();
            toggleObject.onValueChanged.AddListener(TaskOnClick);

            if (toggleObject.isOn)
            {
                toggleAnimator.Play(toggleOn);
            }

            else
            {
                toggleAnimator.Play(toggleOff);
            }
        }

        void TaskOnClick(bool value)
        {
            if (toggleObject.isOn)
            {
                toggleAnimator.Play(toggleOn);
            }

            else
            {
                toggleAnimator.Play(toggleOff);
            }
        }

        public void AnimateToggle()
        {
            if (toggleObject.isOn)
            {
                toggleAnimator.Play(toggleOff);
                toggleObject.isOn = false;
            }

            else
            {
                toggleAnimator.Play(toggleOn);
                toggleObject.isOn = true;
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/TopPanelButton.cs ---
﻿using UnityEngine;
using UnityEngine.EventSystems;

namespace Hexart_UI.Scripts
{
    public class TopPanelButton : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler
    {
        private Animator buttonAnimator;

        void Start()
        {
            buttonAnimator = this.GetComponent<Animator>();
        }

        public void OnPointerEnter(PointerEventData eventData)
        {
            if (buttonAnimator.GetCurrentAnimatorStateInfo(0).IsName("TPS Hover to Pressed"))
            {
                // do nothing because it's clicked
            }

            else
            {
                buttonAnimator.Play("TPS Hover");
            }
        }

        public void OnPointerExit(PointerEventData eventData)
        {
            if (buttonAnimator.GetCurrentAnimatorStateInfo(0).IsName("TPS Hover to Pressed"))
            {
                // do nothing because it's clicked
            }

            else
            {
                buttonAnimator.Play("TPS Normal");
            }
        }
    }
}

'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/UIElementInFront.cs ---
﻿using UnityEngine;

namespace Hexart_UI.Scripts
{
    public class UIElementInFront : MonoBehaviour
    {
        void Start()
        {
            this.transform.SetAsFirstSibling();
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/UIElementSound.cs ---
﻿using UnityEngine;
using UnityEngine.EventSystems;

namespace Hexart_UI.Scripts
{
    public class UIElementSound : MonoBehaviour, IPointerClickHandler, IPointerEnterHandler
    {
        [Header("RESOURCES")]
        public AudioClip hoverSound;
        public AudioClip clickSound;
        public AudioClip notificationSound;

        [Header("SETTINGS")]
        public bool enableHoverSound = true;
        public bool enableClickSound = true;
        public bool isNotification = false;

        private AudioSource HoverSource { get { return GetComponent<AudioSource>(); } }
        private AudioSource ClickSource { get { return GetComponent<AudioSource>(); } }
        private AudioSource NotificationSource { get { return GetComponent<AudioSource>(); } }

        void Start()
        {
            gameObject.AddComponent<AudioSource>();
            HoverSource.clip = hoverSound;
            ClickSource.clip = clickSound;

            HoverSource.playOnAwake = false;
            ClickSource.playOnAwake = false;
        }

        public void OnPointerEnter(PointerEventData eventData)
        {
            if (enableHoverSound == true)
            {
                HoverSource.PlayOneShot(hoverSound);
            }
        }

        public void OnPointerClick(PointerEventData eventData)
        {
            if (enableClickSound == true)
            {
                ClickSource.PlayOneShot(clickSound);
            }
        }

        public void Notification()
        {
            if (isNotification == true)
            {
                NotificationSource.PlayOneShot(notificationSound);
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/UIGradient.cs ---
/// Modified Gradient effect script from http://answers.unity3d.com/questions/1086415/gradient-text-in-unity-522-basevertexeffect-is-obs.html
/// <summary>
/// -Uses Unity's Gradient class to define the color
/// -Offset is now limited to -1,1
/// -Multiple color blend modes
/// 
/// Remember that the colors are applied per-vertex so if you have multiple points on your gradient where the color changes and there aren't enough vertices, you won't see all of the colors.
/// </summary>

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

namespace Hexart_UI.Scripts
{
    public class UIGradient : BaseMeshEffect
    {
        [Header("GRADIENT")]
        [SerializeField]
        UnityEngine.Gradient _effectGradient = new UnityEngine.Gradient() { colorKeys = new GradientColorKey[] { new GradientColorKey(Color.black, 0), new GradientColorKey(Color.white, 1) } };

        [Header("SETTINGS")]
        [SerializeField]
        Type _gradientType;

        [SerializeField]
        Blend _blendMode = Blend.Multiply;

        [SerializeField]
        [Range(-1, 1)]
        float _offset = 0f;

        #region Properties
        public Blend BlendMode
        {
            get { return _blendMode; }
            set
            {
                _blendMode = value;
                graphic.SetVerticesDirty();
            }
        }

        public UnityEngine.Gradient EffectGradient
        {
            get { return _effectGradient; }
            set
            {
                _effectGradient = value;
                graphic.SetVerticesDirty();
            }
        }

        public Type GradientType
        {
            get { return _gradientType; }
            set
            {
                _gradientType = value;
                graphic.SetVerticesDirty();
            }
        }

        public float Offset
        {
            get { return _offset; }
            set
            {
                _offset = value;
                graphic.SetVerticesDirty();
            }
        }
        #endregion

        public override void ModifyMesh(VertexHelper helper)
        {
            if (!IsActive() || helper.currentVertCount == 0)
                return;

            List<UIVertex> _vertexList = new List<UIVertex>();

            helper.GetUIVertexStream(_vertexList);

            int nCount = _vertexList.Count;
            switch (GradientType)
            {
                case Type.Horizontal:
                    {
                        float left = _vertexList[0].position.x;
                        float right = _vertexList[0].position.x;
                        float x = 0f;

                        for (int i = nCount - 1; i >= 1; --i)
                        {
                            x = _vertexList[i].position.x;

                            if (x > right) right = x;
                            else if (x < left) left = x;
                        }

                        float width = 1f / (right - left);
                        UIVertex vertex = new UIVertex();

                        for (int i = 0; i < helper.currentVertCount; i++)
                        {
                            helper.PopulateUIVertex(ref vertex, i);

                            vertex.color = BlendColor(vertex.color, EffectGradient.Evaluate((vertex.position.x - left) * width - Offset));

                            helper.SetUIVertex(vertex, i);
                        }
                    }
                    break;

                case Type.Vertical:
                    {
                        float bottom = _vertexList[0].position.y;
                        float top = _vertexList[0].position.y;
                        float y = 0f;

                        for (int i = nCount - 1; i >= 1; --i)
                        {
                            y = _vertexList[i].position.y;

                            if (y > top) top = y;
                            else if (y < bottom) bottom = y;
                        }

                        float height = 1f / (top - bottom);
                        UIVertex vertex = new UIVertex();

                        for (int i = 0; i < helper.currentVertCount; i++)
                        {
                            helper.PopulateUIVertex(ref vertex, i);

                            vertex.color = BlendColor(vertex.color, EffectGradient.Evaluate((vertex.position.y - bottom) * height - Offset));

                            helper.SetUIVertex(vertex, i);
                        }
                    }
                    break;

                case Type.Diamond:
                    {

                        float bottom = _vertexList[0].position.y;
                        float top = _vertexList[0].position.y;
                        float y = 0f;

                        for (int i = nCount - 1; i >= 1; --i)
                        {
                            y = _vertexList[i].position.y;

                            if (y > top) top = y;
                            else if (y < bottom) bottom = y;
                        }

                        float height = 1f / (top - bottom);

                        helper.Clear();
                        for (int i = 0; i < nCount; i++) helper.AddVert(_vertexList[i]);

                        float center = (bottom + top) / 2f;
                        UIVertex centralVertex = new UIVertex();
                        centralVertex.position = (Vector3.right + Vector3.up) * center + Vector3.forward * _vertexList[0].position.z;
                        centralVertex.normal = _vertexList[0].normal;
                        centralVertex.color = Color.white;
                        helper.AddVert(centralVertex);

                        for (int i = 1; i < nCount; i++) helper.AddTriangle(i - 1, i, nCount);
                        helper.AddTriangle(0, nCount - 1, nCount);

                        UIVertex vertex = new UIVertex();

                        for (int i = 0; i < helper.currentVertCount; i++)
                        {
                            helper.PopulateUIVertex(ref vertex, i);

                            vertex.color = BlendColor(vertex.color, EffectGradient.Evaluate(
                                Vector3.Distance(vertex.position, centralVertex.position) * height - Offset));

                            helper.SetUIVertex(vertex, i);
                        }
                    }
                    break;

                case Type.Radial:
                    {

                        float left = _vertexList[0].position.x;
                        float right = _vertexList[0].position.x;
                        float bottom = _vertexList[0].position.y;
                        float top = _vertexList[0].position.y;

                        float x = 0f;
                        float y = 0f;

                        for (int i = nCount - 1; i >= 1; --i)
                        {
                            x = _vertexList[i].position.x;

                            if (x > right) right = x;
                            else if (x < left) left = x;

                            y = _vertexList[i].position.y;

                            if (y > top) top = y;
                            else if (y < bottom) bottom = y;
                        }

                        float width = 1f / (right - left);
                        float height = 1f / (top - bottom);

                        helper.Clear();

                        float centerX = (right + left) / 2f;
                        float centerY = (bottom + top) / 2f;
                        float radiusX = (right - left) / 2f;
                        float radiusY = (top - bottom) / 2f;
                        UIVertex centralVertex = new UIVertex();
                        centralVertex.position = Vector3.right * centerX + Vector3.up * centerY + Vector3.forward * _vertexList[0].position.z;
                        centralVertex.normal = _vertexList[0].normal;
                        centralVertex.color = Color.white;

                        int steps = 64;
                        for (int i = 0; i < steps; i++)
                        {
                            UIVertex curVertex = new UIVertex();
                            float angle = (float)i * 360f / (float)steps;
                            float curX = Mathf.Cos(Mathf.Deg2Rad * angle) * radiusX;
                            float curY = Mathf.Sin(Mathf.Deg2Rad * angle) * radiusY;

                            curVertex.position = Vector3.right * curX + Vector3.up * curY + Vector3.forward * _vertexList[0].position.z;
                            curVertex.normal = _vertexList[0].normal;
                            curVertex.color = Color.white;
                            helper.AddVert(curVertex);
                        }

                        helper.AddVert(centralVertex);

                        for (int i = 1; i < steps; i++) helper.AddTriangle(i - 1, i, steps);
                        helper.AddTriangle(0, steps - 1, steps);

                        UIVertex vertex = new UIVertex();

                        for (int i = 0; i < helper.currentVertCount; i++)
                        {
                            helper.PopulateUIVertex(ref vertex, i);

                            vertex.color = BlendColor(vertex.color, EffectGradient.Evaluate(
                                Mathf.Sqrt(
                                    Mathf.Pow(Mathf.Abs(vertex.position.x - centerX) * width, 2f) +
                                    Mathf.Pow(Mathf.Abs(vertex.position.y - centerY) * height, 2f)) * 2f - Offset));

                            helper.SetUIVertex(vertex, i);
                        }
                    }
                    break;
            }
        }

        Color BlendColor(Color colorA, Color colorB)
        {
            switch (BlendMode)
            {
                default: return colorB;
                case Blend.Add: return colorA + colorB;
                case Blend.Multiply: return colorA * colorB;
            }
        }

        public enum Type
        {
            Horizontal,
            Vertical,
            Radial,
            Diamond
        }

        public enum Blend
        {
            Override,
            Add,
            Multiply
        }
    }
}
'''
'''--- bees-wax-client/Assets/Hexart UI/Scripts/VideoEndCheck.cs ---
﻿using UnityEngine;
using UnityEngine.Video;

namespace Hexart_UI.Scripts
{
    public class VideoEndCheck : MonoBehaviour
    {
        [Header("RESOURCES")]
        public Animator backgroundAnimator;
        public VideoPlayer loopVideo;
        private VideoPlayer vidPlayer;

        void Start()
        {
            vidPlayer = this.GetComponent<VideoPlayer>();
            vidPlayer.Prepare();
            vidPlayer.loopPointReached += CheckOver;
            loopVideo.Prepare();
        }

        void CheckOver(UnityEngine.Video.VideoPlayer vp)
        {
            loopVideo.Play();
            backgroundAnimator.Play("Plexus Loop");
        }
    }
}
'''
'''--- bees-wax-client/Assets/Nakama/CHANGELOG.md ---
# Change Log
All notable changes to this project are documented below.

The format is based on [keep a changelog](http://keepachangelog.com/) and this project uses [semantic versioning]
(http://semver.org/).

## [3.1.1] - 2021-08-11
### Changed
- Removed `autoRefreshSession` from overloaded `Client` constructors. This can still be customized with the base `Client`
constructor. This is a workaround for an internal compiler error in Unity's WebGL toolchain.

### Fixed
- Removed use of deprecated WWW fields in newer versions of Unity.

## [3.1.0] - 2021-08-11
### Added
- Added ability for user to retry requests if they fail due to a transient network error.
- Added ability for user to cancel requests that are in-flight.

## [3.0.0] - 2021-07-14
### Added
- The language tag for the user can be configured with the socket on connect.

### Changed
- An `IPartyMatchmakerTicket` is now received by the party leader when they add their party to the matchmaker via `AddMatchmakerPartyAsync`.
- Renamed `PromotePartyMember` to `PromotePartyMemberAsync`.

## [2.9.5] - 06-18-21
### Fixed
- Fixed issue where UnityLogger did not implement a Debug log method.

## [2.9.4] - 06-17-21
### Fixed
- Fixed issue where refreshing a session with metadata threw an exception due to the key already existing.

## [2.9.3] - 05-21-21
### Fixed
Fixed issue where `IUserPresence` objects were not being deserialized properly by the client as part
of the `IParty` object.

## [2.9.2] 05-19-21

### Added
- The `Socket.ReceivedParty` event can now be subscribed to in order to listen for acceptance events
from the leader of a closed party.

## [2.9.1] 05-18-21

### Fixed
- Fixed incorrect .DLL version being pulled in from nakama-dotnet.

## [2.9.0] 05-17-21

### Added
- A session can be refreshed on demand with "SessionRefreshAsync" method.
- Session and/or refresh tokens can now be disabled with a client logout.
- The client now supports session auto-refresh using refresh tokens. This is enabled by default.
- New socket RPC and MatchSend methods using ArraySegment to allow developers to manage memory re-use.
- Add IAP validation APIs for purchase receipts with Apple App Store, Google Play Store, and Huawei AppGallery.
- Add Realtime Parties feature.

### Changed
- Use lock object with socket operations instead of ConcurrentDictionary as a workaround for a Unity engine WebGL regression.
- Avoid use of extension methods as a workaround for a Unity engine WebGL regression.
- Unity sockets now dispatch events on Unity's main thread by default. If you have been using code to move socket message
to the main thread (e.g., UnityMainThreadDispatcher) you may now remove that code. This new default behavior can overridden
by passing `useMainThread: false` to `client.NewSocket`. When passed this way, sockets default to their pre-2.9 behavior
by dispatching messages in a separate thread.

### Fixed
- Parse HTTP responses defensively in case of bad load balancer configurations.

## [2.8.1] - 2021-03-16
### Fixed
- Fixed a bug with parsing error responses that did not contain a message or grpc code.
### Changed
- Made names of asmdef files more specific for easier searching inside the Unity editor.

## [2.8.0] - 2021-02-19
### Changed
- Listing tournaments can now be done without providing start or end time filters.
- Can now import Steam friends after authenticating or linking to a Steam account.

## [2.7.1] - 2021-02-18
### Fixed
- HTTP Client now properly reads off timeout value.

## [2.7.0] - 2020-10-19
### Changed
Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.7.0.
Added namespace to JavaScript web socket adapter internals.

## [2.6.0] - 2020-09-21
### Changed
Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.6.0.

## [2.5.0] - 2020-08-14
### Added
- Add support for the Unity Package Manager. See the README for usage.

### Changed
- Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.5.0.
- Update minimum required Unity version to 2018.4.26f1 LTS. While older releases may work YMMV.

## [2.4.0] - 2020-05-04 :star:
### Added
- Add new scene as an example for WebGL basics. Thanks @humbertodias.

### Changed
- Add a default error handler to the socket adapter to make common errors more visible.
- Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.4.0.

### Fixed
- UnityWebRequest downloadHandler is null on DELETE methods. Thanks @hasbean.

## [2.3.2] - 2019-10-23
### Fixed
- Update interface impl signatures with JS socket adapter.

## [2.3.1] - 2019-09-21
### Changed
- Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.3.1.

## [2.3.0] - 2019-09-02
### Changed
- Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.3.0.

## [2.2.2] - 2019-07-02
### Changed
- Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.2.2.

## [2.2.1] - 2019-06-21
### Added
- New example on how to manage the client/socket/session as a singleton.
- Various improvements to existing code examples.

### Changed
- Update Nakama .NET dependency. See release notes: heroiclabs/nakama-dotnet@2.2.1.

## [2.2.0] - 2019-06-12
### Added
- Support WebGL builds.
- Add new Leaderboard and Tournament API methods.

### Changed
- Use new socket library instead of WebSocketListener.
- Update socket event names to match csharp style guide.
- Update TinyJson dependency.

### Fixed
- Socket logger must not disable the socket events.
- Deserialize data in stream messages correctly.

## [2.1.0] - 2018-08-17
### Added
- Linker instructions to preserve code in dependent DLLs.
- New code snippets for multiplayer and matchmaker examples.

### Changed
- Update dependent DLLs for lowlevel websocket driver and .NET client.

## [2.0.0] - 2018-06-18
### Added
- New documentation on the client.
- Many new features and APIs.
- Support for Nakama 2 release.

### Changed
- Rewrite client with async/await sockets.
- New project structure for simpler Unity builds.

---

## [0.10.2] - 2017-11-27
### Fixed
- Use correct JS transport listener bindings.
- Correctly calculate session expiry client-side.

### Changed
- MatchmakeAddMessage correctly follows C# naming scheme.
- Improve memory allocation profile when using UDP transport.

## [0.10.1] - 2017-11-11
### Fixed
- Build system now includes `BCCrypto.dll` in `.unitypackage`.

## [0.10.0] - 2017-11-06
### Added
- New experimental rUDP socket protocol option.

### Changed
- Use string identifiers instead of byte arrays for compatibility across Lua, JSON, and client representations.

## [0.9.0] - 2017-10-17
### Added
- Advanced Matchmaking with custom filters and user properties.
- Expose Collation ID when client operations result in an error.

## [0.8.0] - 2017-08-01
### Added
- A paging cursor can now be serialized and restored.
- New storage partial update feature.
- New storage list feature.
- A new Unity code example which shows how to dispatch actions on the main thread.
- A session now exposes `.ExpiresAt` and `.Handle` from the token.

### Changed
- Add default builder for notification list and remove messages.
- A group self list operation now return the user's membership state with each group.
- A group leave operation now return a specific error code when the last admin attempts to leave.
- The client interface now uses action delegates instead of event handlers to support a proxy pattern.

## [0.7.0] - 2017-07-18
### Added
- A new Unity example scene which shows how to matchmake users.
- New `NIds` helper class and extension methods to compare byte arrays.
- Add new In-App Notification feature.
- Add new In-App Purchase Validation feature.

### Changed
- Update client to support the new batch-orientated server protocol.

### Fixed
- Accept SSL certificates.
- Improve handling transport errors.
- Improve fetching global storage records.

## [0.6.1] - 2017-05-30
### Changed
- Remove unnecessary headers from HTTP requests.
- Update user fetch add handle method name to avoid a type cast.

### Fixed
- Accept SSL certificates on Android devices.
- Improve leaderboard list message to handle multiple filters.

## [0.6.0] - 2017-05-29
### Added
- New matchmaking feature.
- Optionally send match data to a subset of match participants.
- Expose a way to toggle `TCP_NODELAY` socket option.
- Send RPC messages to run custom code.
- Fetch users by handle.
- Add friend by handle.
- Filter by IDs in leaderboard list message.
- Storage messages can now set records with public read permission.

### Fixed
- Dispatch callbacks when sending match data.

## [0.5.1] - 2017-03-28
### Added
- Support for fetching groups by name.

## [0.5.0] - 2017-03-19
### Added
- Add support for dynamic leaderboards.
- Add error codes for error messages in server protocol.

### Changed
- Use preprocessor directive to skip WebGL specific code with other build profiles.
- Update session token parse code for user's handle.
- Update user presence protocol message to contain user handles.

## [0.4.2] - 2017-02-27
### Added
- Repackage client with Unity 5.4.0 support.

### Changed
- Setup logger in client transport.

## [0.4.1] - 2017-02-26
### Fixed
- Add '.jslib' files to Unity package builds.

## [0.4.0] - 2017-02-26
### Added
- Add WebGL support.

### Changed
- Update the package structure generated by the build system for simpler Asset Store submissions.

## [0.3.0] - 2017-02-18
### Added
- Add new impl of realtime match entities.

### Changed
- Merge match entities into single `INMatch`.

### Fixed
- Incoming realtime messages do not need collation.
- Add event handlers to `INClient` interface.

## [0.2.0] - 2017-02-12
### Added
- Add new impl and test cases for storage, friends, and groups.
- Add new impl for realtime and chat messages.

### Changed
- Do not close the connection on logout. It will be closed by the server.
- Update client usages for friend messages due to changes in server protocol.

### Fixed
- Fix various small test cases caused by changes in the server.

## [0.1.0] - 2017-01-14
### Added
- Initial public release.

'''
'''--- bees-wax-client/Assets/Nakama/Documentation/Nakama 2 + Unity Engine.md ---
footer: © Heroic Labs, 2019
slidenumbers: true

# Nakama 2 + Unity Engine

### Heroic Labs

---

# Setup Server

* Local development use Docker or native binaries.

    ```shell
    docker-compose -f ./docker-compose.yml up
    ```

* Always run Nakama servers and databases on dedicated hardware at launch.

* Production-ready server environments with our [Managed Cloud](https://heroiclabs.com/managed-cloud) service.

---

# Development Configuration

* `"--logger.level=debug"`

   Enable additional logs (can be noisy).

* `"--socket.max_message_size_bytes=8192"`

   Increase message size limits to match max packet size.

* `"--session.token_expiry_sec=604800"`

   Adjust session lifetime to fit gameplay sessions.

---

# Unity / .NET Client

```csharp
// using Nakama;
var client = new Client("http", "127.0.0.1", 7350, "defaultkey");
```

* Updated for Unity 2018 or newer.
* Requires [.NET4.6 scripting runtime](https://docs.unity3d.com/Manual/ScriptingRuntimeUpgrade.html) compatibility level.
* Uses `async/await` for simple asynchronous code.
* Divided into "low level" client and Unity wrapper.
* Unity wrapper contains features specific to the engine.

---

# Sessions

* Authenticate to register/login. Many sign-in options.

```csharp
var deviceId = SystemInfo.deviceUniqueIdentifier;
var session = await client.AuthenticateDeviceAsync(deviceId);
```

* Sessions can be cached on device and restored.

```csharp
PlayerPrefs.SetString("nakama.session", session.AuthToken);
// Restore.
var authtoken = PlayerPrefs.GetString("nakama.session");
var session = Session.Restore(authtoken);
```

* Session used to authenticate all requests.

---

# Users & Accounts

* Sessions contain essential user details.

```csharp
Debug.Log(session.UserId);   // "ea1e7609-372a-4d67-a495-58f955f3328b"
Debug.Log(session.Username); // "wRkuUTbKmY"
```

* Each player has an account (private) and a user profile.

```csharp
var account = await client.GetAccountAsync(session);
Debug.Log(account.User.Id); // "ea1e7609-372a-4d67-a495-58f955f3328b"
```

---

# Social Accounts

* A user account can "link" additional sign-in options.
* Useful to enable users to sign-in across multiple devices.

```csharp
// using Facebook.Unity;
var perms = new List<string>(){"public_profile", "email"};
FB.LogInWithReadPermissions(perms, async (ILoginResult result) => {
    if (FB.IsLoggedIn) {
        var accessToken = Facebook.Unity.AccessToken.CurrentAccessToken;
        await client.LinkFacebookAsync(session, accessToken);
    }
});
```

---

# Friends

* Create a social graph of friends within the server.

```csharp
// Both users must add each other to become friends. Double opt-in.
await client.AddFriendsAsync(session, new[] { "user id" });
var result = await client.ListFriendsAsync(session);

foreach (var f in result.Friends) {
    Debug.Log("Friend name {0}", f.User.DisplayName);
    // State one of: friend(0), invite_sent(1), invite_received(2), blocked(3)
    Debug.Log("Friend state {0}", f.State);
}
```

---

# Groups

* Groups have 3 membership levels: superadmin, admin, and member.
* Use groups for guilds, clans, or any kind of team-based gameplay.

```csharp
const string name = "heroic";
const string desc = "game server devs";
var group = await client.CreateGroupAsync(session, name, desc);
Debug.Log("New group {0}", group.Id);
```

---

# Rpc Functions

* Define functions on the server in Lua or Go.

```lua
-- in lua
local nk = require("nakama")
local function some_action(context, payload)
  return nk.json_encode({ message = "PONG" })
end
nk.register_rpc(some_action, "<function id>")
```

* Execute them with the client.

```csharp
var rpc = await client.RpcAsync(session, "<function id>");
// using Nakama.TinyJson;
var content = rpc.Payload.FromJson<Dictionary<string, string>>();
Debug.Log("Response content {0}", content);
```

---

# Leaderboards

* Create unlimited leaderboards.
* A record can have a score and subscore.
* Build friend or guild leaderboards with a filter on user ids.

```csharp
var result = await client.ListLeaderboardRecordsAsync(session, "<id>", null, 100);
foreach (var r in result.Records) {
    Debug.Log("Score '{0}' for user '{1}'", r.Score, r.Username);
}
```

---

# In-app Notifications

* Send notifications which can be received in realtime.
* Notifications must be sent authoritatively (Lua or Go).

```lua
-- in lua
local nk = require("nakama")
local notification = { code = 1, content = {}, persistent = true,
    sender_id = "someid", subject = "Match winner!", user_id = "userid" }
nk.notifications_send({ notification })
```

* List notifications received while offline.

```csharp
var result = await client.ListNotificationsAsync(session, 100);
Debug.Log("Received {0} notifications", result.Notifications.Count());
```

---

# Sockets

* Power chat, multiplayer, status events, in-app notifications, etc.
* Create a socket from a client object.

```csharp
var socket = client.NewSocket();
socket.Connected += () => Debug.Log("Socket connected.");
socket.Closed += () => Debug.Log("Socket closed.");
await socket.ConnectAsync(session);
Debug.Log("After socket connected.");
await socket.CloseAsync();
```

* Have separate sockets for multiplayer and chat or,
* Share a single socket for all realtime communication.

---

# Lots more APIs

* Realtime chat
* Status events
* Authoritative multiplayer
* Realtime multiplayer
* Matchmaker
* Storage engine
* Remote configuration, etc...

---

# Summary

* Designed as production-ready infrastructure.
* Minimal database or other external dependencies.
* First-class Unity engine support.
* Modern client designed for asynchronous code.
* Built for scale by Heroic Labs.

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/AccountAndUsers.cs ---
/**
 * Copyright 2018 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using UnityEngine;

namespace Nakama.Snippets
{
    public class AccountAndUsers : MonoBehaviour
    {
        private readonly IClient _client = new Client("defaultkey");

        private async void Awake()
        {
            var deviceid = SystemInfo.deviceUniqueIdentifier;
            const string username = "myusername";
            var session = await _client.AuthenticateDeviceAsync(deviceid, username);

            var account = await _client.GetAccountAsync(session);
            // Account properties.
            Debug.LogFormat("Account devices: [{0}]", string.Join(",", account.Devices));
            Debug.LogFormat("Account custom id: '{0}'", account.CustomId);
            Debug.LogFormat("Account email: '{0}'", account.Email);
            Debug.LogFormat("Account verify time: '{0}'", account.VerifyTime);
            Debug.LogFormat("Account wallet: '{0}'", account.Wallet);

            // User properties.
            Debug.LogFormat("User id: '{0}'", account.User.Id);
            Debug.LogFormat("User metadata: '{0}'", account.User.Metadata);
            Debug.LogFormat("User username: '{0}'", account.User.Username);
            Debug.LogFormat("User online: {0}", account.User.Online);

            var result = await _client.GetUsersAsync(session, new[] {session.UserId});
            Debug.LogFormat("Users: [{0}]", string.Join(",\n", result.Users));
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/DeviceAuthentication.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using UnityEngine;

namespace Nakama.Snippets
{
    public class DeviceAuthentication : MonoBehaviour
    {
        private const string SessionTokenKey = "nksession";
        private const string UdidKey = "udid";

        private readonly IClient _client = new Client("defaultkey");

        private async void Awake()
        {
            var deviceId = SystemInfo.deviceUniqueIdentifier;

            // Restore session from PlayerPrefs if possible.
            var sessionToken = PlayerPrefs.GetString(SessionTokenKey);
            var session = Session.Restore(sessionToken);
            // Add a day so we check whether the token is within a day of expiration to refresh it.
            var expiredDate = DateTime.UtcNow.AddDays(1);
            if (session == null || session.HasExpired(expiredDate))
            {
                session = await _client.AuthenticateDeviceAsync(deviceId);
                PlayerPrefs.SetString(UdidKey, deviceId);
                PlayerPrefs.SetString(SessionTokenKey, session.AuthToken);
            }

            Debug.LogFormat("Session user id: '{0}'", session.UserId);
            Debug.LogFormat("Session username: '{0}'", session.Username);
            Debug.LogFormat("Session expired: {0}", session.IsExpired);
            Debug.LogFormat("Session expires: '{0}'", session.ExpireTime); // in seconds.

            var unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            Debug.LogFormat("Session expires on: '{0}'", unixEpoch.AddSeconds(session.ExpireTime).ToLocalTime());
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/MatchmakerWithRelayedMultiplayer.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

namespace Nakama.Snippets
{
    public class MatchmakerWithRelayedMultiplayer : MonoBehaviour
    {
        private readonly IClient _client = new Client("defaultkey");
        private ISocket _socket;

        private async void Start()
        {
            var deviceId = SystemInfo.deviceUniqueIdentifier;
            var session = await _client.AuthenticateDeviceAsync(deviceId);
            Debug.Log(session);

            _socket = _client.NewSocket();
            _socket.Connected += () => Debug.Log("Socket connected.");
            _socket.Closed += () => Debug.Log("Socket closed.");
            _socket.ReceivedError += Debug.LogError;

            IUserPresence self = null;
            var connectedOpponents = new List<IUserPresence>(2);
            _socket.ReceivedMatchmakerMatched += async matched =>
            {
                Debug.LogFormat("Matched result: {0}", matched);
                var match = await _socket.JoinMatchAsync(matched);

                self = match.Self;
                Debug.LogFormat("Self: {0}", self);
                connectedOpponents.AddRange(match.Presences);
            };
            _socket.ReceivedMatchPresence += presenceEvent =>
            {
                foreach (var presence in presenceEvent.Leaves)
                {
                    connectedOpponents.Remove(presence);
                }
                connectedOpponents.AddRange(presenceEvent.Joins);
                // Remove yourself from connected opponents.
                connectedOpponents.Remove(self);
                Debug.LogFormat("Connected opponents: [{0}]", string.Join(",\n  ", connectedOpponents));
            };
            await _socket.ConnectAsync(session);
            Debug.Log("After socket connected.");
            await _socket.AddMatchmakerAsync("*", 2, 2);

            // NOTE As an example create a second user and socket to matchmake against.
            var deviceId2 = Guid.NewGuid().ToString();
            var session2 = await _client.AuthenticateDeviceAsync(deviceId2);
            var socket2 = _client.NewSocket();
            socket2.ReceivedMatchmakerMatched += async matched => await socket2.JoinMatchAsync(matched);
            await socket2.ConnectAsync(session2);
            await socket2.AddMatchmakerAsync("*", 2, 2);
            await Task.Delay(TimeSpan.FromSeconds(10)); // disconnect after 10 seconds.
            Debug.Log("After delay socket2 closed.");
            await socket2.CloseAsync();
        }

        private void OnApplicationQuit()
        {
            _socket?.CloseAsync();
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/NakamaManager.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Threading.Tasks;
using UnityEngine;

namespace Nakama.Snippets
{
    /// <summary>
    /// Manages a Nakama client and optional socket connection.
    /// </summary>
    /// <seealso cref="NakamaManagerUsage"/>
    public class NakamaManager : MonoBehaviour
    {
        private const string SessionPrefName = "nakama.session";
        private const string SingletonName = "/[NakamaManager]";

        private static readonly object Lock = new object();
        private static NakamaManager _instance;

        /// <summary>
        /// The singleton instance of the Nakama sdk manager.
        /// </summary>
        public static NakamaManager Instance
        {
            get
            {
                lock (Lock)
                {
                    if (_instance != null) return _instance;
                    var go = GameObject.Find(SingletonName);
                    if (go == null)
                    {
                        go = new GameObject(SingletonName);
                    }

                    if (go.GetComponent<NakamaManager>() == null)
                    {
                        go.AddComponent<NakamaManager>();
                    }
                    DontDestroyOnLoad(go);
                    _instance = go.GetComponent<NakamaManager>();
                    return _instance;
                }
            }
        }

        public IClient Client { get; }
        public ISocket Socket { get; }

        public Task<ISession> Session { get; private set; }

        private NakamaManager()
        {
            Client = new Client("http", "127.0.0.1", 7350, "defaultkey")
            {
#if UNITY_EDITOR
                Logger = new UnityLogger()
#endif
            };
            Socket = Client.NewSocket();
        }

        private Task<ISession> AuthenticateAsync()
        {
            // Modify to fit the authentication strategy you want within your game.
            // EXAMPLE:
            const string deviceIdPrefName = "deviceid";
            var deviceId = PlayerPrefs.GetString(deviceIdPrefName, SystemInfo.deviceUniqueIdentifier);
#if UNITY_EDITOR
            Debug.LogFormat("Device id: {0}", deviceId);
#endif
            // With device IDs save it locally in case of OS updates which can change the value on device.
            PlayerPrefs.SetString(deviceIdPrefName, deviceId);
            return Client.AuthenticateDeviceAsync(deviceId);
        }

        private void Awake()
        {
            // Restore session or create a new one.
            var authToken = PlayerPrefs.GetString(SessionPrefName);
            var session = Nakama.Session.Restore(authToken);
            var expiredDate = DateTime.UtcNow.AddDays(-1);
            if (session == null || session.HasExpired(expiredDate))
            {
                var sessionTask = AuthenticateAsync();
                Session = sessionTask;
                sessionTask.ContinueWith(t =>
                {
                    if (t.IsCompleted)
                    {
                        PlayerPrefs.SetString(SessionPrefName, t.Result.AuthToken);
                    }
                }, TaskScheduler.FromCurrentSynchronizationContext());
            }
            else
            {
                Session = Task.FromResult(session);
            }
        }

        private void OnApplicationQuit() => Socket?.CloseAsync();
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/NakamaManagerUsage.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using UnityEngine;

namespace Nakama.Snippets
{
    /// <seealso cref="NakamaManager"/>
    public class NakamaManagerUsage : MonoBehaviour
    {
        private async void Start()
        {
            var session = await NakamaManager.Instance.Session;
            Debug.LogFormat("Active Session: {0}", session);
            var account = await NakamaManager.Instance.Client.GetAccountAsync(session);
            Debug.LogFormat("Account id: {0}", account.User.Id);

            NakamaManager.Instance.Socket.Closed += () => Debug.Log("Socket closed.");
            NakamaManager.Instance.Socket.Connected += () => Debug.Log("Socket connected.");
            NakamaManager.Instance.Socket.ReceivedError += Debug.LogError;
            await NakamaManager.Instance.Socket.ConnectAsync(session);
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/RealtimeChatRoom.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections.Generic;
using Nakama.TinyJson;
using UnityEngine;

namespace Nakama.Snippets
{
    public class RealtimeChatRoom : MonoBehaviour
    {
        private const string RoomName = "heroes";

        private IClient _client;
        private ISocket _socket;

        private async void Start()
        {
            _client =  new Client("defaultkey", UnityWebRequestAdapter.Instance);

            var deviceId = SystemInfo.deviceUniqueIdentifier;
            var session = await _client.AuthenticateDeviceAsync(deviceId);
            Debug.LogFormat("Session user id: '{0}'", session.UserId);

            _socket = _client.NewSocket();
            _socket.Connected += () => Debug.Log("Socket connected.");
            _socket.Closed += () => Debug.Log("Socket closed.");
            _socket.ReceivedError += Debug.LogError;

            var roomUsers = new List<IUserPresence>(10);
            _socket.ReceivedChannelPresence += presenceEvent =>
            {
                foreach (var presence in presenceEvent.Leaves)
                {
                    roomUsers.Remove(presence);
                }

                roomUsers.AddRange(presenceEvent.Joins);
                Debug.LogFormat("Room users: [{0}]", string.Join(",\n  ", roomUsers));
            };

            var messageList = new List<IApiChannelMessage>(100);
            _socket.ReceivedChannelMessage += message =>
            {
                Debug.LogFormat("Received message: '{0}'", message);
                AddListSorted(messageList, message);
                Debug.LogFormat("Message list: {0}", string.Join(",\n  ", messageList));
            };
            await _socket.ConnectAsync(session);
            Debug.Log("After socket connected.");

            // Join chat channel.
            var channel = await _socket.JoinChatAsync(RoomName, ChannelType.Room);
            roomUsers.AddRange(channel.Presences);
            Debug.LogFormat("Joined chat channel: {0}", channel);

            // Send many chat messages.
            var content = new Dictionary<string, string> {{"hello", "world"}}.ToJson();
            _ = _socket.WriteChatMessageAsync(channel, content);
            _ = _socket.WriteChatMessageAsync(channel, content);
            _ = _socket.WriteChatMessageAsync(channel, content);
            _ = _socket.WriteChatMessageAsync(channel, content);
            _ = _socket.WriteChatMessageAsync(channel, content);
            _ = _socket.WriteChatMessageAsync(channel, content);
        }

        private void OnApplicationQuit()
        {
            _socket?.CloseAsync();
        }

        private static void AddListSorted(List<IApiChannelMessage> messageList, IApiChannelMessage message)
        {
            messageList.Add(message);
            messageList.Sort((a, b) =>
            {
                var ordinal = string.CompareOrdinal(a.CreateTime, b.CreateTime);
                return ordinal == 0 ? string.CompareOrdinal(a.MessageId, b.MessageId) : ordinal;
            });
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/RejoinChatAfterDisconnect.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

namespace Nakama.Snippets
{
    public class RejoinChatAfterDisconnect : MonoBehaviour
    {
        private const string RoomName = "heroes";

        private readonly IClient _client = new Client("defaultkey");
        private ISocket _socket;

        private async void Start()
        {
            var deviceId = SystemInfo.deviceUniqueIdentifier;
            var session = await _client.AuthenticateDeviceAsync(deviceId);
            Debug.LogFormat("Session user id: '{0}'", session.UserId);

            var roomUsers = new List<IUserPresence>(10);
            _socket = _client.NewSocket();
            _socket.Connected += () => Debug.Log("Socket connected.");
            _socket.ReceivedError += Debug.LogError;
            _socket.Closed += () =>
            {
                Debug.Log("Socket closed.");
                roomUsers.Clear();
            };
            _socket.ReceivedChannelPresence += presenceEvent =>
            {
                foreach (var presence in presenceEvent.Leaves)
                {
                    roomUsers.Remove(presence);
                }

                roomUsers.AddRange(presenceEvent.Joins);
                Debug.LogFormat("Room users: [{0}]", string.Join(",\n  ", roomUsers));
            };
            _socket.ReceivedChannelMessage += message => Debug.LogFormat("Received message: '{0}'", message);
            await _socket.ConnectAsync(session);

            // Join chat channel.
            var channel = await _socket.JoinChatAsync(RoomName, ChannelType.Room);
            roomUsers.AddRange(channel.Presences);

            // Simulate a disconnect.
            await Task.Delay(TimeSpan.FromSeconds(3));
            await _socket.CloseAsync();
            await Task.Delay(TimeSpan.FromSeconds(3));

            // Reconnect and rejoin chat channel(s).
            await _socket.ConnectAsync(session);
            var channel2 = await _socket.JoinChatAsync(RoomName, ChannelType.Room);
            roomUsers.AddRange(channel2.Presences);
            Debug.Log("Rejoined chat!");
        }

        private void OnApplicationQuit()
        {
            _socket?.CloseAsync();
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/SocketConnect.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using UnityEngine;

namespace Nakama.Snippets
{
    public class SocketConnect : MonoBehaviour
    {
        private readonly IClient _client = new Client("defaultkey");
        private ISocket _socket;

        private async void Awake()
        {
            _socket = _client.NewSocket();
            _socket.Closed += () => Debug.Log("Socket closed.");
            _socket.Connected += () => Debug.Log("Socket connected.");
            _socket.ReceivedError += e => Debug.LogErrorFormat("Socket error: {0}", e.Message);

            var deviceId = SystemInfo.deviceUniqueIdentifier;
            var session = await _client.AuthenticateDeviceAsync(deviceId);
            await _socket.ConnectAsync(session);
            Debug.Log("After socket connected.");
        }

        private void OnApplicationQuit()
        {
            _socket?.CloseAsync();
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Editor/Snippets/WebGLConnect.cs ---
using System;
using System.Threading.Tasks;
using UnityEngine;

namespace Nakama.Snippets
{
    // ReSharper disable once InconsistentNaming
    public class WebGLConnect : MonoBehaviour
    {
        private const string SessionTokenKey = "nksession";
        private const string UdidKey = "udid";

        private IClient _client;
        private ISocket _socket;

        public string serverText;
        public string serverPortText;

        public async void Awake()
        {
            try
            {
                const string scheme = "http";
                string host = serverText;
                int port = Int32.Parse(serverPortText);
                const string serverKey = "test-key";

                _client = new Client(scheme, host, port, serverKey, UnityWebRequestAdapter.Instance);
                _socket = _client.NewSocket();
                _socket.Closed += () => Debug.Log("Socket closed.");
                _socket.Connected += () => Debug.Log("Socket connected.");
                _socket.ReceivedError += e => Debug.Log("Socket error: " + e.Message);

                // Cant use SystemInfo.deviceUniqueIdentifier with WebGL builds.
                var udid = PlayerPrefs.GetString(UdidKey, Guid.NewGuid().ToString());
                Debug.Log("Unique Device ID: " + udid);

                ISession session;
                var sessionToken = PlayerPrefs.GetString(SessionTokenKey);
                if (string.IsNullOrEmpty(sessionToken) || (session = Session.Restore(sessionToken)).IsExpired)
                {
                    session = await _client.AuthenticateDeviceAsync(udid);
                    PlayerPrefs.SetString(UdidKey, udid);
                    PlayerPrefs.SetString(SessionTokenKey, session.AuthToken);
                }

                Debug.Log("Session Token: " + session.AuthToken);
                await _socket.ConnectAsync(session, true);
                Debug.Log("Connected ");
                var match = await _socket.CreateMatchAsync();
                Debug.Log("Created match: " + match.Id);

                await _socket.CloseAsync();
            }
            catch (Exception e)
            {
                Debug.LogError(e.ToString());
            }
        }

        private void OnApplicationQuit()
        {
            _socket?.CloseAsync();
        }
    }
}
'''
'''--- bees-wax-client/Assets/Nakama/Editor/link.xml ---
<!--
 Copyright 2019 The Nakama Authors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->
<linker>
    <assembly fullname="Nakama" ignoreIfMissing="0" preserve="all" />

    <!-- NOTE: Do not code strip cryptographic utilities. -->
    <!--
    <assembly fullname="mscorlib">
        <namespace fullname="System.Security.Cryptography" preserve="all" />
    </assembly>
    -->
</linker>

'''
'''--- bees-wax-client/Assets/Nakama/LICENSE.md ---

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''
'''--- bees-wax-client/Assets/Nakama/README.md ---
Nakama Unity
===

> Unity client for Nakama server.

[Nakama](https://github.com/heroiclabs/nakama) is an open-source server designed to power modern games and apps. Features include user accounts, chat, social, matchmaker, realtime multiplayer, and much [more](https://heroiclabs.com).

This client is built on the [.NET client](https://github.com/heroiclabs/nakama-dotnet) with extensions for Unity Engine. It requires the .NET4.6 scripting runtime version to be set in the editor.

Full documentation is online - https://heroiclabs.com/docs/unity-client-guide

## Getting Started

You'll need to setup the server and database before you can connect with the client. The simplest way is to use Docker but have a look at the [server documentation](https://github.com/heroiclabs/nakama#getting-started) for other options.

### Installing the SDK

1. Install and run the servers. Follow these [instructions](https://heroiclabs.com/docs/install-docker-quickstart).

2. Install the Unity SDK. You have three options for this.

   1. To use an official release, you may download either the .unitypackage or .tar from the [releases page](https://github.com/heroiclabs/nakama-unity/releases) and import it into your project. If you chose the .tar option, you can import it from a dropdown in the Unity Package Manager window.

   2. Alternatively, if you'd like to checkout a specific release or commit from Github and are using Unity 2019.4.1 or later, you can add the following to the `manifest.json` file in your project's `Packages` folder:

      ```json
          "com.heroiclabs.nakama-unity": "https://github.com/heroiclabs/nakama-unity.git?path=/Packages/Nakama#<commit | tag>"
      ```

   3. Your final option is to download prebuilt binaries from the [Asset Store](https://assetstore.unity.com/packages/tools/network/nakama-81338).

3. Use the connection credentials to build a client object.

    ```csharp
    // using Nakama;
    const string scheme = "http";
    const string host = "127.0.0.1";
    const int port = 7350;
    const string serverKey = "defaultkey";
    var client = new Client(scheme, host, port, serverKey);
    ```

## Usage

The client object has many methods to execute various features in the server or open realtime socket connections with the server.

### Authenticate

There's a variety of ways to [authenticate](https://heroiclabs.com/docs/authentication) with the server. Authentication can create a user if they don't already exist with those credentials. It's also easy to authenticate with a social profile from Google Play Games, Facebook, Game Center, etc.

```csharp
var deviceId = SystemInfo.deviceUniqueIdentifier;
var session = await client.AuthenticateDeviceAsync(deviceId);
Debug.Log(session);
```

### Sessions

When authenticated the server responds with an auth token (JWT) which contains useful properties and gets deserialized into a `Session` object.

```csharp
Debug.Log(session.AuthToken); // raw JWT token
Debug.LogFormat("Session user id: '{0}'", session.UserId);
Debug.LogFormat("Session user username: '{0}'", session.Username);
Debug.LogFormat("Session has expired: {0}", session.IsExpired);
Debug.LogFormat("Session expires at: {0}", session.ExpireTime); // in seconds.
```

It is recommended to store the auth token from the session and check at startup if it has expired. If the token has expired you must reauthenticate. The expiry time of the token can be changed as a setting in the server.

```csharp
const string prefKeyName = "nakama.session";
ISession session;
var authToken = PlayerPrefs.GetString(prefKeyName);
if (string.IsNullOrEmpty(authToken) || (session = Session.Restore(authToken)).IsExpired)
{
    Debug.Log("Session has expired. Must reauthenticate!");
};
Debug.Log(session);
```

### Requests

The client includes lots of builtin APIs for various features of the game server. These can be accessed with the async methods. It can also call custom logic as RPC functions on the server. These can also be executed with a socket object.

All requests are sent with a session object which authorizes the client.

```csharp
var account = await client.GetAccountAsync(session);
Debug.LogFormat("User id: '{0}'", account.User.Id);
Debug.LogFormat("User username: '{0}'", account.User.Username);
Debug.LogFormat("Account virtual wallet: '{0}'", account.Wallet);
```

Requests can be supplied with a retry configurations in cases of transient network or server errors.

A single configuration can be used to control all request retry behavior:

```csharp
var retryConfiguration = new RetryConfiguration(baseDelay: 1, maxRetries: 5, delegate { System.Console.Writeline("about to retry."); });

client.GlobalRetryConfiguration = retryConfiguration;
var account = await client.GetAccountAsync(session);
```

Or, the configuration can be supplied on a per-request basis:

```csharp

var retryConfiguration = new RetryConfiguration(baseDelay: 1, maxRetries: 5, delegate { System.Console.Writeline("about to retry."); });

var account = await client.GetAccountAsync(session, retryConfiguration);

```
Per-request retry configurations override the global retry
configuration.

Requests also can be supplied with a cancellation token if you need to cancel them mid-flight:

```csharp
var canceller = new CancellationTokenSource();
var account = await client.GetAccountAsync(session, retryConfiguration: null, canceller);

await Task.Delay(25);

canceller.Cancel(); // will raise a TaskCanceledException
```

### Socket

The client can create one or more sockets with the server. Each socket can have it's own event listeners registered for responses received from the server.

```csharp
var socket = client.NewSocket();
socket.Connected += () => Debug.Log("Socket connected.");
socket.Closed += () => Debug.Log("Socket closed.");
await socket.ConnectAsync(session);
```

If you'd like socket handlers to execute outside Unity's main thread, pass the `useMainThread: false` argument:

```csharp
var socket = client.NewSocket(useMainThread: false);
```

### Unity WebGL

For WebGL builds you should switch the `IHttpAdapter` to use the `UnityWebRequestAdapter` and use the `NewSocket()` extension method to create the socket OR manually set the right `ISocketAdapter` per platform.

```csharp
var client = new Client("defaultkey", UnityWebRequestAdapter.Instance);
var socket = client.NewSocket();

// or
#if UNITY_WEBGL && !UNITY_EDITOR
    ISocketAdapter adapter = new JsWebSocketAdapter();
#else
    ISocketAdapter adapter = new WebSocketAdapter();
#endif
var socket = Socket.From(client, adapter);
```

### Errors

You can capture errors when you use `await` scaffolding with Tasks in C#.

```csharp
try
{
    var account = await client.GetAccountAsync(session);
    Debug.LogFormat("User id: '{0}'", account.User.Id);
}
catch (ApiResponseException e)
{
    Debug.LogFormat("{0}", e);
}
```

### Error Callbacks

You can avoid the use of `await` where exceptions will need to be caught and use `Task.ContinueWith(...)` as a callback style with standard C# if you prefer.

```csharp
client.GetAccountAsync(session).ContinueWith(t =>
{
    if (t.IsFaulted || t.IsCanceled)
    {
        Debug.LogFormat("{0}", t.Exception);
        return;
    }
    var account = t.Result;
    Debug.LogFormat("User id: '{0}'", account.User.Id);
});
```

## Contribute

The development roadmap is managed as GitHub issues and pull requests are welcome. If you're interested to enhance the code please open an issue to discuss the changes or drop in and discuss it in the [community forum](https://forum.heroiclabs.com).

This project can be opened in Unity to create a ".unitypackage".

### License

This project is licensed under the [Apache-2 License](https://github.com/heroiclabs/nakama-unity/blob/master/LICENSE).

'''
'''--- bees-wax-client/Assets/Nakama/Runtime/ClientExtensions.cs ---
/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using UnityEngine;

namespace Nakama
{
    /// <summary>
    /// A set of client extensions to help with conditional Unity engine code.
    /// </summary>
    public static class ClientExtensions
    {
        /// <summary>
        /// Build a new socket with conditional compilation on the adapter.
        /// </summary>
        /// <param name="client">The client object.</param>
        /// <param name="useMainThread">Whether or not socket events should be dispatched on Unity's main thread.</param>
        /// <returns>A new socket.</returns>
        public static ISocket NewSocket(this IClient client, bool useMainThread = false)
        {
            ISocketAdapter threadedAdapter;
#if UNITY_WEBGL && !UNITY_EDITOR
            threadedAdapter = new JsWebSocketAdapter();
#else
            threadedAdapter = new WebSocketAdapter();
#endif

            ISocketAdapter adapter = useMainThread ? UnitySocket.Create(threadedAdapter) : threadedAdapter;
            var socket = Socket.From(client, adapter);
#if UNITY_EDITOR
            socket.ReceivedError += Debug.LogError;
#endif
            return socket;
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Runtime/JsWebSocketAdapter.cs ---
/**
 * Copyright 2020 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if UNITY_WEBGL && !UNITY_EDITOR

using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using UnityEngine;

namespace Nakama
{
    /// <summary>
    /// An adapter which uses the WebSocket protocol with Nakama server on a JavaScript bridge with Unity engine.
    /// </summary>
    public class JsWebSocketAdapter : ISocketAdapter
    {
        /// <inheritdoc cref="ISocketAdapter.Connected"/>
        public event Action Connected;

        /// <inheritdoc cref="ISocketAdapter.Closed"/>
        public event Action Closed;

        /// <inheritdoc cref="ISocketAdapter.ReceivedError"/>
        public event Action<Exception> ReceivedError;

        /// <inheritdoc cref="ISocketAdapter.Received"/>
        public event Action<ArraySegment<byte>> Received;

        /// <summary>
        /// If the WebSocket is connected.
        /// </summary>
        public bool IsConnected { get; private set; }

        /// <summary>
        /// If the WebSocket is connecting.
        /// </summary>
        public bool IsConnecting { get; private set; }

        private int Ref { get; set; } // unique jslib socket ref
        private Uri _uri;

        public JsWebSocketAdapter()
        {
            Ref = -1;
        }

        /// <inheritdoc cref="ISocketAdapter.Close"/>
        public void Close()
        {
            UnityWebGLSocketBridge.Instance.Close(Ref);
            Ref = -1;
            IsConnecting = false;
            IsConnected = false;
        }

        /// <inheritdoc cref="ISocketAdapter.Connect"/>
        public void Connect(Uri uri, int timeout)
        {
            // TODO will need to use window.setTimeout to implement timeouts on DOM WebSocket.
            if (Ref > -1)
            {
                ReceivedError?.Invoke(new SocketException((int) SocketError.IsConnected));
                return;
            }

            _uri = uri;
            IsConnecting = true;

            Action open = () =>
            {
                IsConnected = true;
                IsConnecting = false;
                Connected?.Invoke();
            };
            Action<int, string> close = (code, reason) =>
            {
                IsConnected = false;
                IsConnecting = false;
                Ref = -1;
                Closed?.Invoke();
            };
            Action<string> error = reason =>
            {
                IsConnected = false;
                Ref = -1;
                ReceivedError?.Invoke(new Exception(reason));
            };
            Action<string> handler = message =>
            {
                Received?.Invoke(new ArraySegment<byte>(Encoding.UTF8.GetBytes(message)));
            };
            Ref = UnityWebGLSocketBridge.Instance.CreateSocket(uri.AbsoluteUri, open, close, error, handler);
        }

        public void Dispose()
        {
        }

        /// <inheritdoc cref="ISocketAdapter.Send"/>
        public void Send(ArraySegment<byte> buffer, CancellationToken cancellationToken,
            bool reliable = true)
        {
            if (Ref == -1)
            {
                ReceivedError?.Invoke(new SocketException((int) SocketError.NotConnected));
                return;
            }

            var payload = Encoding.UTF8.GetString(buffer.Array, buffer.Offset, buffer.Count);
            UnityWebGLSocketBridge.Instance.Send(Ref, payload);
        }

        public override string ToString()
        {
            return
                $"JsWebSocketAdapter(IsConnected={IsConnected}, IsConnecting={IsConnecting}, Uri='{_uri}')";
        }
    }

    // ReSharper disable once InconsistentNaming
    public class UnityWebGLSocketBridge : MonoBehaviour
    {
        private static readonly IDictionary<int, string> CloseErrorMessages = new Dictionary<int, string>
        {
            {1000, "Normal"},
            {1001, "Away"},
            {1002, "ProtocolError"},
            {1003, "UnsupportedData"},
            {1004, "Undefined"},
            {1005, "NoStatus"},
            {1006, "Abnormal"},
            {1007, "InvalidData"},
            {1008, "PolicyViolation"},
            {1009, "TooBig"},
            {1010, "MandatoryExtension"},
            {1011, "ServerError"},
            {1015, "TlsHandshakeFailure"}
        };

        private static int _globalSocketRef;

        private readonly Dictionary<int, UnityWebGLSocketBridgeHandler> _handlers =
            new Dictionary<int, UnityWebGLSocketBridgeHandler>();

        private static readonly object Lock = new object();
        private static UnityWebGLSocketBridge _instance;

        public static UnityWebGLSocketBridge Instance
        {
            get
            {
                lock (Lock)
                {
                    if (_instance != null) return _instance;

                    var go = GameObject.Find("/[Nakama]");
                    if (go == null)
                    {
                        go = new GameObject("[Nakama]");
                    }

                    if (go.GetComponent<UnityWebGLSocketBridge>() == null)
                    {
                        go.AddComponent<UnityWebGLSocketBridge>();
                    }

                    DontDestroyOnLoad(go);
                    _instance = go.GetComponent<UnityWebGLSocketBridge>();
                    return _instance;
                }
            }
        }

        private UnityWebGLSocketBridge()
        {
        }

        public int CreateSocket(string address, Action socketOpenHandle, Action<int, string> socketCloseHandle,
            Action<string> socketErrorHandle, Action<string> socketMessageHandle)
        {
            var handler = new UnityWebGLSocketBridgeHandler
            {
                OnOpen = socketOpenHandle,
                OnClose = socketCloseHandle,
                OnMessage = socketMessageHandle,
                OnError = socketErrorHandle
            };

            var socketRef = _globalSocketRef++;
            _handlers.Add(socketRef, handler);
            NKCreateSocket(socketRef, address);
            return socketRef;
        }

        public void Close(int socketRef)
        {
            NKCloseSocket(socketRef);
            _handlers.Remove(socketRef);
        }

        public void Send(int socketRef, string payload)
        {
            NKSendData(socketRef, payload);
        }

        private UnityWebGLSocketBridgeHandler GetHandler(int socketRef)
        {
            UnityWebGLSocketBridgeHandler handler;
            _handlers.TryGetValue(socketRef, out handler);
            return handler;
        }

        [DllImport("__Internal")]
        private static extern void NKCreateSocket(int socketRef, string address);

        [DllImport("__Internal")]
        private static extern void NKCloseSocket(int socketRef);

        [DllImport("__Internal")]
        private static extern void NKSendData(int socketRef, string data);

        [DllImport("__Internal")]
        private static extern int NKSocketState();

        // called by jslib
        private void NKBridgeOnOpen(string bridgeMsg)
        {
            var index = bridgeMsg.IndexOf('_');
            if (index < 0)
            {
                return;
            }

            var socketRef = Convert.ToInt32(bridgeMsg.Substring(0, index));
            GetHandler(socketRef)?.OnOpen?.Invoke();
        }

        // called by jslib
        private void NKBridgeOnMessage(string bridgeMsg)
        {
            var index = bridgeMsg.IndexOf('_');
            if (index < 0 || index + 1 >= bridgeMsg.Length)
            {
                return;
            }
            var socketRef = Convert.ToInt32(bridgeMsg.Substring(0, index));
            var msg = bridgeMsg.Substring(index + 1);
            GetHandler(socketRef)?.OnMessage?.Invoke(msg);
        }

        // called by jslib
        private void NKBridgeOnClose(string bridgeMsg)
        {
            var index = bridgeMsg.IndexOf('_');
            if (index < 0 || index + 1 >= bridgeMsg.Length)
            {
                return;
            }

            var socketRef = Convert.ToInt32(bridgeMsg.Substring(0, index));
            var code = Convert.ToInt32(bridgeMsg.Substring(index + 1));
            GetHandler(socketRef)?.OnClose?.Invoke(code, CloseErrorMessages[code]);
            _handlers.Remove(socketRef);
        }

        // called by jslib
        private void NKBridgeOnError(string bridgeMsg)
        {
            var index = bridgeMsg.IndexOf('_');
            if (index >= 0 && index + 1 < bridgeMsg.Length)
            {
                var socketRef = Convert.ToInt32(bridgeMsg.Substring(0, index));
                var msg = bridgeMsg.Substring(index + 1);

                GetHandler(socketRef)?.OnError?.Invoke(msg);
                _handlers.Remove(socketRef);
            }
        }

        // ReSharper disable once InconsistentNaming
        private class UnityWebGLSocketBridgeHandler
        {
            public Action OnOpen;
            public Action<int, string> OnClose;
            public Action<string> OnError;
            public Action<string> OnMessage;
        }
    }
}

#endif

'''
'''--- bees-wax-client/Assets/Nakama/Runtime/UnityLogger.cs ---
/**
 * Copyright 2018 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using UnityEngine;

namespace Nakama
{
    /// <summary>
    /// A logger which captures using Unity Engine.
    /// </summary>
    public class UnityLogger : ILogger
    {
        /// <inheritdoc cref="ILogger"/>
        public void DebugFormat(string format, params object[] args) => Debug.LogFormat(format, args);

        /// <inheritdoc cref="ILogger"/>
        public void ErrorFormat(string format, params object[] args) => Debug.LogErrorFormat(format, args);

        /// <inheritdoc cref="ILogger"/>
        public void InfoFormat(string format, params object[] args) => Debug.LogFormat(format, args);

        /// <inheritdoc cref="ILogger"/>
        public void WarnFormat(string format, params object[] args) => Debug.LogWarningFormat(format, args);

    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Runtime/UnitySocket.cs ---
﻿/**
 * Copyright 2021 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;

namespace Nakama
{
    /// <summary>
    /// A WebSocket adapter for Unity that dispatches events to the main thread.
    /// </summary>
    public class UnitySocket : MonoBehaviour, ISocketAdapter
    {
        event Action ISocketAdapter.Connected
        {
            add
            {
                _connectedHandlers.Add(value);
            }

            remove
            {
                _connectedHandlers.Remove(value);
            }
        }

        event Action ISocketAdapter.Closed
        {
            add
            {
                _closedHandlers.Add(value);
            }

            remove
            {
                _closedHandlers.Remove(value);
            }
        }

        event Action<Exception> ISocketAdapter.ReceivedError
        {
            add
            {
                _errorHandlers.Add(value);
            }

            remove
            {
                _errorHandlers.Remove(value);
            }
        }

        event Action<ArraySegment<byte>> ISocketAdapter.Received
        {
            add
            {
                _receivedHandlers.Add(value);
            }

            remove
            {
                _receivedHandlers.Remove(value);
            }
        }

        bool ISocketAdapter.IsConnected => _socketAdapter.IsConnected;
        bool ISocketAdapter.IsConnecting => _socketAdapter.IsConnecting;

        private readonly ConcurrentQueue<QueuedEvent> _eventQueue = new ConcurrentQueue<QueuedEvent>();
        private readonly List<Action> _connectedHandlers = new List<Action>();
        private readonly List<Action> _closedHandlers = new List<Action>();
        private readonly List<Action<Exception>> _errorHandlers = new List<Action<Exception>>();
        private readonly List<Action<ArraySegment<byte>>> _receivedHandlers = new List<Action<ArraySegment<byte>>>();

        private ISocketAdapter _socketAdapter;

        public static UnitySocket Create(ISocketAdapter adapter)
        {
            var adapterGO = new GameObject("[Nakama Socket]");
            DontDestroyOnLoad(adapterGO);
            var unityAdapter = adapterGO.AddComponent<UnitySocket>();
            unityAdapter._socketAdapter = adapter;
            unityAdapter._socketAdapter.Closed += unityAdapter.OnClosed;
            unityAdapter._socketAdapter.Connected += unityAdapter.OnConnected;
            unityAdapter._socketAdapter.Received += unityAdapter.OnReceived;
            unityAdapter._socketAdapter.ReceivedError += unityAdapter.OnReceivedError;
            return unityAdapter;
        }

        void ISocketAdapter.Close()
        {
            _socketAdapter.Close();
        }

        void ISocketAdapter.Connect(Uri uri, int timeout)
        {
            _socketAdapter.Connect(uri, timeout);
        }

        void IDisposable.Dispose()
        {
            _socketAdapter.Dispose();
        }

        void ISocketAdapter.Send(ArraySegment<byte> buffer, CancellationToken cancellationToken, bool reliable)
        {
            _socketAdapter.Send(buffer, cancellationToken, reliable);
        }

        private void OnClosed()
        {
            _eventQueue.Enqueue(new QueuedEvent(_closedHandlers));
        }

        private void OnConnected()
        {
            _eventQueue.Enqueue(new QueuedEvent(_connectedHandlers));
        }

        private void OnReceivedError(Exception obj)
        {
            _eventQueue.Enqueue(new QueuedEvent(_errorHandlers, obj));
        }

        private void OnReceived(ArraySegment<byte> obj)
        {
            // copy the segment into a new segment with a new backing array
            // this avoids threading issues with the socket and unity main thread
            // accessing the same range within the same backing array.

            byte[] copy = new byte[obj.Count];

            int j = 0;
            for (int i = obj.Offset; i < obj.Offset + obj.Count; i++)
            {
                copy[j] = obj.Array[i];
                j++;

            }
            _eventQueue.Enqueue(new QueuedEvent(_receivedHandlers, new ArraySegment<byte>(copy)));
        }

        private void Update()
        {
            while (_eventQueue.Count > 0)
            {
                QueuedEvent evt;

                if (_eventQueue.TryDequeue(out evt))
                {
                    evt.Dispatch();
                }
            }
        }

        class QueuedEvent
        {
            private readonly IEnumerable<Delegate> _listeners;
            private readonly object[] _eventArgs;

            public QueuedEvent(IEnumerable<Delegate> listeners, params object[] eventArgs)
            {
                this._listeners = listeners;
                this._eventArgs = eventArgs;
            }

            public void Dispatch()
            {
                var listenersCopy = new List<Delegate>(_listeners);
                foreach (Delegate listener in listenersCopy)
                {
                    listener.DynamicInvoke(_eventArgs);
                }
            }
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/Runtime/UnityWebRequestAdapter.cs ---
﻿/**
 * Copyright 2019 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Nakama.TinyJson;
using UnityEngine;
using UnityEngine.Networking;

namespace Nakama
{
    /// <summary>
    /// Unity web request adapter which uses the UnityWebRequest to send requests.
    /// </summary>
    /// <remarks>
    /// Note Content-Type header is always set as 'application/json'.
    /// </remarks>
    public class UnityWebRequestAdapter : MonoBehaviour, IHttpAdapter
    {
        /// <inheritdoc cref="IHttpAdapter.Logger"/>
        public ILogger Logger { get; set; }

        private static readonly object Lock = new object();
        private static UnityWebRequestAdapter _instance;

        public static UnityWebRequestAdapter Instance
        {
            get
            {
                lock (Lock)
                {
                    if (_instance != null) return _instance;

                    var go = GameObject.Find("/[Nakama]");
                    if (go == null)
                    {
                        go = new GameObject("[Nakama]");
                    }

                    if (go.GetComponent<UnityWebRequestAdapter>() == null)
                    {
                        go.AddComponent<UnityWebRequestAdapter>();
                    }

                    DontDestroyOnLoad(go);
                    _instance = go.GetComponent<UnityWebRequestAdapter>();
                    return _instance;
                }
            }
        }

        private UnityWebRequestAdapter()
        {
        }

        /// <inheritdoc cref="IHttpAdapter"/>
        public Task<string> SendAsync(string method, Uri uri, IDictionary<string, string> headers, byte[] body,
            int timeout, CancellationToken? cancellationToken)
        {
            var www = BuildRequest(method, uri, headers, body, timeout);
            var tcs = new TaskCompletionSource<string>();
            cancellationToken?.Register(() => tcs.SetCanceled());
            StartCoroutine(SendRequest(www, resp => tcs.SetResult(resp), err => tcs.SetException(err)));
            return tcs.Task;
        }

        private static UnityWebRequest BuildRequest(string method, Uri uri, IDictionary<string, string> headers,
            byte[] body, int timeout)
        {
            UnityWebRequest www;
            if (string.Equals(method, "POST", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(method, "PUT", StringComparison.OrdinalIgnoreCase))
            {
                www = new UnityWebRequest(uri, method)
                {
                    uploadHandler = new UploadHandlerRaw(body),
                    downloadHandler = new DownloadHandlerBuffer()
                };
            }
            else if (string.Equals(method, "DELETE", StringComparison.OrdinalIgnoreCase))
            {
                www = UnityWebRequest.Delete(uri);
            }
            else
            {
                www = UnityWebRequest.Get(uri);
            }

            www.SetRequestHeader("Content-Type", "application/json");
            foreach (var kv in headers)
            {
                www.SetRequestHeader(kv.Key, kv.Value);
            }

            www.timeout = timeout;
            return www;
        }

        private static IEnumerator SendRequest(UnityWebRequest www, Action<string> callback,
            Action<ApiResponseException> errback)
        {
            yield return www.SendWebRequest();
            if (IsNetworkError(www))
            {
                errback(new ApiResponseException(www.error));
            }
            else if (IsHttpError(www))
            {
                var decoded = www.downloadHandler.text.FromJson<Dictionary<string, object>>();

                ApiResponseException e = new ApiResponseException(www.downloadHandler.text);

                if (decoded != null)
                {
                    string msg = decoded.ContainsKey("message") ? decoded["message"].ToString() : string.Empty;
                    int grpcCode = decoded.ContainsKey("code") ? (int) decoded["code"] : -1;

                    e = new ApiResponseException(www.responseCode, msg, grpcCode);

                    if (decoded.ContainsKey("error"))
                    {
                        IHttpAdapterUtil.CopyResponseError(Instance, decoded["error"], e);
                    }
                }

                errback(e);
            }
            else
            {
                callback?.Invoke(www.downloadHandler?.text);
            }
        }

        private static bool IsNetworkError(UnityWebRequest www)
        {
#if UNITY_2020_2_OR_NEWER
            return www.result == UnityWebRequest.Result.ConnectionError;
#else
            return www.isNetworkError;
#endif
        }

        private static bool IsHttpError(UnityWebRequest www)
        {
#if UNITY_2020_2_OR_NEWER
            return www.result == UnityWebRequest.Result.ProtocolError;
#else
            return www.isHttpError;
#endif
        }
    }
}

'''
'''--- bees-wax-client/Assets/Nakama/package.json ---
{
    "name": "com.heroiclabs.nakama-unity",
    "version": "3.1.1",
    "unity": "2018.4",
    "displayName": "Nakama Unity",
    "description": "Unity3D client for Nakama server written in C#.",
    "keywords": [
        "app server",
        "client library",
        "game server",
        "nakama",
        "realtime",
        "realtime chat"
    ],
    "author": {
        "name": "Heroic Labs",
        "email": "chris@heroiclabs.com",
        "url": "https://www.heroiclabs.com"
    },
    "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0"
    }
}

'''
'''--- bees-wax-client/Assets/NetworkId.cs ---
﻿using service;
using utils.injection;

public class NetworkId : InjectableBehaviour
{
    [Inject]
    private MultiplayerService _multiplayer;
    
    public int Id;
    
    // Start is called before the first frame update
    void Start()
    {
        _multiplayer.RegisterObject(gameObject, Id);
        Destroy (this);
    }
}

'''
'''--- bees-wax-client/Assets/Resources/BillingMode.json ---
{"androidStore":"GooglePlay"}
'''
'''--- bees-wax-client/Assets/Scripts/Demo/Demo.cs ---
﻿using UnityEngine;
using KyleDulce.SocketIo;

public class Demo : MonoBehaviour
{
    Socket s;
    // Start is called before the first frame update
    void Start()
    {
        s = SocketIo.establishSocketConnection("ws://localhost:3000");
        s.connect();
        s.on("testEvent", call);
    }

    void call(string d) {
        Debug.Log("RECIEVED EVENT: " + d);
        s.emit("testEvent", "test");
    }
}

'''
'''--- bees-wax-client/Assets/Scripts/SetupInjections.cs ---
﻿using utils.injection;
using UnityEngine;

public class SetupInjections : MonoBehaviour
{
    private void Awake()
    {
        Injector.Setup(GetType().Assembly);
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/Unity-SocketIO/Socket.cs ---
﻿using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace KyleDulce.SocketIo {
    public class Socket 
    {
        private int _id = -1;
        public int id {
            get {
                return _id;
            }
            private set {
                _id = value;
            }
        }
        public string connectionId {
            get {
                #if UNITY_WEBGL && !UNITY_EDITOR
                    return Socket_Get_Conn_Id(id);
                #else
                    return client.Id;
                #endif
            }
        }
        public bool connected {
            get {
                #if UNITY_WEBGL && !UNITY_EDITOR
                    return Socket_IsConnected(id);
                #else
                    return client.Connected;
                #endif
            }
        }
        public bool disconnected {
            get {
                return !connected;
            }
        }
        private bool _disabled = false;
        public bool disabled {
            get {
                return _disabled;
            }
            private set {
                _disabled = value;
            }
        }

        private event Action<string> Action_AnyEvents;
        private Dictionary<string, List<Action<string>>> ActionEvents = new Dictionary<string, List<Action<string>>>();

        #if UNITY_WEBGL && !UNITY_EDITOR
            protected internal Socket(int id) {
                this.id = id;
            }
        #else
            private SocketIOClient.SocketIO client;
            protected internal Socket(int id, SocketIOClient.SocketIO client) {
                this.id = id;
                this.client = client;
                client.OnAny((string eventname,SocketIOClient.SocketIOResponse res) => {
                    InvokeEvent(eventname, res.GetValue<string>());
                }); 
            }
        #endif

        public Socket connect() {
            #if UNITY_WEBGL && !UNITY_EDITOR
                Socket_Connect(id);
            #else
                client.ConnectAsync();   
            #endif
            
            return this;
        }

        public Socket open() {
            return connect();
        }

        public Socket disconnect() {
            #if UNITY_WEBGL && !UNITY_EDITOR
                Socket_Disconnect(id);
            #else
                client.DisconnectAsync();
            #endif
            return this;
        }

        public Socket close() {
            return disconnect();
        }

        // public Socket send(string data) {
        //     #if UNITY_WEBGL
        //         Socket_Send(id, data);
        //     #else
        //     #endif
        //     client.send
        //     return this;
        // }

        public Socket emit(string ev, string data) {
            #if UNITY_WEBGL && !UNITY_EDITOR
                if(data == null)
                    Socket_Emit(id, ev, null);
                else
                    Socket_Emit(id, ev, data);
            #else
                client.EmitAsync(ev, data);
            #endif
            return this;
        }

        public Socket on(string ev, Action<string> callback) {
                if(!ActionEvents.ContainsKey(ev)) {
                    ActionEvents.Add(ev, new List<Action<string>>());
                }
                ActionEvents[ev].Add(callback);
            
            return this;
        }

        public Socket off(string ev, Action<string> callback = null) {
                if(callback != null) {
                    if(ActionEvents.TryGetValue(ev, out List<Action<string>> value)) {
                        value.Remove(callback);
                    }
                } else {
                    ActionEvents = new Dictionary<string, List<Action<string>>>();
                }           
            return this;
        }

        public Socket onAny(Action<string> callback) {
            Action_AnyEvents += callback;
            return this;
        }

        public Socket offAny(Action<string> callback = null) {
            if(callback == null) {
                Action_AnyEvents = null;
            } else {
                Action_AnyEvents -= callback;
            }
            return this;
        }

        public void disableSocket() {
            disconnect();
            disabled = true;
        }

        public void InvokeEvent(string ev, string data) {
            Action_AnyEvents?.Invoke(data);

            //invoke event specific events
            if(ActionEvents.TryGetValue(ev, out List<Action<string>> value)) {
                foreach(Action<string> act in value) {
                    act.Invoke(data);
                }
            }
        }

        #if UNITY_WEBGL && !UNITY_EDITOR
            //external methods
            [DllImport("__Internal")]
            private static extern bool Socket_IsConnected(int id);

            [DllImport("__Internal")]
            private static extern string Socket_Get_Conn_Id(int id);

            [DllImport("__Internal")]
            private static extern void Socket_Connect(int id);
            
            [DllImport("__Internal")]
            private static extern void Socket_Disconnect(int id);
            
            // [DllImport("__Internal")]
            // private static extern void Socket_Send(int id, string data);

            [DllImport("__Internal")]
            private static extern void Socket_Emit(int id, string ev, string data);
        #endif

    }
}
'''
'''--- bees-wax-client/Assets/Scripts/Unity-SocketIO/SocketIo.cs ---
﻿using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;

namespace KyleDulce.SocketIo {
    public class SocketIo 
    {

        //only needed for webgl
        private static readonly string SOCKET_GAMEOBJECT_NAME = "SocketIo_Ref";

        private static byte _protocol = 0;
        public static byte protocol {
            get {
                if(_protocol == 0) {
                    #if UNITY_WEBGL && !UNITY_EDITOR
                        _protocol = GetProtocol();
                    #else
                        _protocol = 5;
                    #endif
                }
                return _protocol;
            }
        }

        private static Dictionary<int, Socket> EnabledSockets = new Dictionary<int, Socket>();

        public static Socket establishSocketConnection(string Url) => establishSocketConnection(Url, "");

        public static Socket establishSocketConnection(string Url, string options) {

            #if UNITY_WEBGL && !UNITY_EDITOR
                //check for gameobject
                if(GameObject.Find(SOCKET_GAMEOBJECT_NAME) == null) {
                    Debug.Log("Generating SocketIO Object");

                    GameObject SocGObj = new GameObject(SOCKET_GAMEOBJECT_NAME);
                    SocGObj.AddComponent<SocketIoInterface>();
                    
                    GameObject.DontDestroyOnLoad(SocGObj);

                    SetupGameObjectName(SOCKET_GAMEOBJECT_NAME);
                }

                int newSocketId = EstablishSocket(Url, options);

                Socket soc = new Socket(newSocketId);
                EnabledSockets.Add(newSocketId, soc);

                return soc;
            #else
                //generate local id
                int id = -1;
                do{
                    id = (int) Random.Range(1,10000);
                } while(EnabledSockets.ContainsKey(id));
                SocketIOClient.SocketIO client = new SocketIOClient.SocketIO(Url);

                Socket soc = new Socket(id, client);
                EnabledSockets.Add(id ,soc);
                
                return soc;
            #endif
        }

        public static void removeSocket(int id) {
            if(EnabledSockets.TryGetValue(id, out Socket value)) {
                value.disableSocket();
                EnabledSockets.Remove(id);
            } else {
                Debug.LogWarning("Tried to remove a socket but it does not exist, Id: " + id);
            }
        }

        public static bool TryGetSocketById(int id, out Socket soc) {
            return EnabledSockets.TryGetValue(id, out soc);
        }

        public static Socket findSocketWithConnId(string id) {
            foreach(Socket soc in EnabledSockets.Values) {
                if(soc.connectionId == id) {
                    return soc;
                }
            }
            return null;
        }

        //external methods

        #if UNITY_WEBGL && !UNITY_EDITOR
            [DllImport("__Internal")]
            private static extern byte GetProtocol();

            [DllImport("__Internal")]
            private static extern int EstablishSocket(string url, string options);

            [DllImport("__Internal")]
            private static extern string SetupGameObjectName(string name);

            //gameobject for webgl
            public class SocketIoInterface : MonoBehaviour {
                public void callSocketEvent(string data) {
                    SocketEvent ev = JsonUtility.FromJson<SocketEvent>(data);
                    if(EnabledSockets.TryGetValue(ev.SocketId, out Socket soc)) {
                        soc.InvokeEvent(ev.EventName, ev.JsonData);
                    } else {
                        throw new System.NullReferenceException("socket does not exist");
                    }
                }
            }

            private struct SocketEvent {
                public string EventName;
                public int SocketId;
                public string JsonData;
            }
        #endif

    }
}
'''
'''--- bees-wax-client/Assets/Scripts/api/EscrowApi.cs ---
﻿using System;
using System.Collections.Generic;
using KyleDulce.SocketIo;
using model;
using model.data;
using Newtonsoft.Json;
using UnityEngine;
using utils.injection;
using utils.signal;

namespace api
{
    [Serializable]
    internal struct ResourceData
    {
        public Dictionary<string, float> players;
        public float remainingResource;
    }
    
    [Singleton]
    public class EscrowApi
    {
        [Inject] private ResourceModel _resources;
        
        [Inject] private NakamaApi _nakamaApi;

        public readonly Signal MatchEnd = new Signal();
        
        Socket _socket;
        
        public void Connect()
        {
            _socket = SocketIo.establishSocketConnection("ws://localhost:8083");
            _socket.connect();
            _socket.on("start", OnStart);
            _socket.on("res", OnResourceUpdated);
            _socket.on("end", OnEnd);
        }
        
        public void Start(int tier)
        {
            _socket.emit("start", JsonConvert.SerializeObject(new {matchId = _nakamaApi.MatchmakerResult?.MatchId ??"test", tier}));
        }

        public void SubmitResource(float value)
        {
            _socket.emit("collection", value.ToString());
        }

        void OnStart(string value) {
            _resources.remaining = _resources.total = float.Parse(value);
        }
        
        void OnResourceUpdated(string value)
        {
            var data = JsonConvert.DeserializeObject<ResourceData>(value);

            _resources.remaining = data.remainingResource;
            
            foreach (var key in data.players.Keys)
                _resources.Set(key == _socket.connectionId? Faction.Player:Faction.Enemy, data.players[key]);
        }
        
        void OnEnd(string value) {
            MatchEnd.Dispatch();
        }
    }
}

'''
'''--- bees-wax-client/Assets/Scripts/api/NFTApi.cs ---
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using UnityEngine.Networking;
using utils;
using utils.injection;
using utils.signal;

namespace api
{
    // public class NestedJsonConverter : JsonConverter
    // {
    //     public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    //     {
    //         serializer.Serialize(writer, value);
    //     }
    //
    //     public override object ReadJson(JsonReader reader, Type objectType, object existingValue,
    //         JsonSerializer serializer)
    //     {
    //         return null;
    //         try
    //         {
    //             return reader.Value is string stringObj
    //                 ? JsonConvert.DeserializeObject(Cleanup(stringObj), objectType)
    //                 : serializer.Deserialize(reader, objectType);
    //         }
    //         catch (Exception e)
    //         {
    //             Debug.LogWarning(e.Message);
    //         }
    //
    //         return null;
    //     }
    //
    //     public override bool CanConvert(Type objectType)
    //     {
    //         return true;
    //     }
    //
    //     private string Cleanup(string value)
    //     {
    //         value = value.Replace("\\", "");
    //         value = value.Replace("\"{", "{");
    //         value = value.Replace("}\"", "}");
    //         Debug.Log(value);
    //         return value;
    //     }
    // }

    [Serializable]
    public struct Token
    {
        [JsonProperty(PropertyName = "token_id")]
        public string Id;

        [JsonProperty(PropertyName = "metadata")]
        public NFT Metadata;
    }

    public struct NFT
    {
        public string Id;

        [JsonProperty(PropertyName = "title")] public string Title;

        [JsonProperty(PropertyName = "description")]
        public string Description;

        [JsonProperty(PropertyName = "media")] public string Media;

        // [JsonConverter(typeof(NestedJsonConverter))]
        [JsonProperty(PropertyName = "extra")] public GameplayEffect Extra;
    }

    public class GameplayEffect
    {
        public float harvest = 1;
        public float feed = 1;
        public float damage = 1;
        public float armour = 1;
        public float build = 1;
        public float hp = 1;
        public float hatch = 1;

        public void Merge(GameplayEffect other)
        {
            harvest *= other.harvest;
            damage *= other.damage;
            armour *= other.armour;
            build *= other.build;
            hp *= other.hp;
            hatch *= other.hatch;
        }
    }

    [Singleton]
    public class NFTApi
    {
        private const string ApiNftBaseURL = "http://localhost:8084/api/nft";
        private List<NFT> _owned;
        
        public Signal updated = new Signal();

        public async Task<List<NFT>> GetNFTs(string walletId)
        {
            if (_owned == null)
            {
                var request = UnityWebRequest.Get(ApiNftBaseURL + "?id=" + walletId);
                await request.SendWebRequest();

                _owned = JsonConvert.DeserializeObject<Token[]>(Cleanup(request.downloadHandler.text)).Select(t =>
                {
                    var result = t.Metadata;
                    result.Id = t.Id;
                    return result;
                }).Where(e=>e.Extra!=null).ToList();
            }

            return _owned;
        }
        private string Cleanup(string value)
        {
            value = value.Replace("\\", "");
            value = value.Replace("\"{", "{");
            value = value.Replace("}\"", "}");
            return value;
        }

        public async Task<NFT> AddNFT(string walletId)
        {
            var json = JsonConvert.SerializeObject(new {id =walletId});
            var request = UnityWebRequest.Put(ApiNftBaseURL, Encoding.UTF8.GetBytes(json));

            request.method = UnityWebRequest.kHttpVerbPOST;

            request.SetRequestHeader("Content-Type", "application/json");
            request.SetRequestHeader("Accept", "application/json");

            await request.SendWebRequest();
            var token = JsonConvert.DeserializeObject<Token>(Cleanup(request.downloadHandler.text));
            var newNFT = token.Metadata;

            newNFT.Id = token.Id;
        
            _owned.Add(newNFT);
            updated.Dispatch();
        
            return newNFT;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/api/NakamaApi.cs ---
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Nakama;
using Newtonsoft.Json;
using utils.signal;
using UnityEngine;
using utils.injection;

namespace api
{
    [Singleton]
    public class NakamaApi
    {
        public Signal MatchmakerUpdate { get; } = new Signal();
        public Signal ParticipantsUpdated { get; } = new Signal();
        public Signal Error { get; } = new Signal();
        public Signal<long, string, IUserPresence> StateUpdated { get; } = new Signal<long, string, IUserPresence>();

        public List<IUserPresence> Participants;
        public IMatchmakerMatched MatchmakerResult;

        private Client _client;
        private ISession _session;
        private ISocket _socket;

        private IMatchmakerTicket _ticket;
        private IMatch _match;

        private const string StorageKey = "NFT";
        private const string StorageCollection = "storage";

        public void CreateClient()
        {
#if UNITY_WEBGL && !UNITY_EDITOR
            var httpRequestAdapter = UnityWebRequestAdapter.Instance;
#else
            var httpRequestAdapter = new HttpRequestAdapter(new HttpClient());
#endif
            _client = new Client("http", "34.89.79.67", 7350, "test-key", httpRequestAdapter);
        }

        public async Task CreateSession(string id = null)
        {
            if (string.IsNullOrEmpty(id))
                id = PlayerPrefs.GetString("nakama.id");
            else
                PlayerPrefs.SetString("nakama.id", id); // cache  id.

            _session = await _client.AuthenticateDeviceAsync(id);
        }

        public async Task CreateSocket()
        {
            _socket = _client.NewSocket();
            await _socket.ConnectAsync(_session);
            _socket.ReceivedMatchmakerMatched += matched =>
            {
                Debug.LogError("ReceivedMatchmakerMatched");
                MatchmakerResult = matched;
                Participants = MatchmakerResult.Users.Select(u => u.Presence).ToList();
                MatchmakerUpdate.Dispatch();
            };

            _socket.ReceivedMatchPresence += OnReceivedMatchPresence;

            var enc = System.Text.Encoding.UTF8;
            _socket.ReceivedMatchState += state =>
            {
                try
                {
                    Debug.Log($"<<<<<{state.OpCode} {state.State}");
                    StateUpdated.Dispatch(state.OpCode, enc.GetString(state.State), state.UserPresence);
                }
                catch (Exception e)
                {
#if UNITY_EDITOR
                    Debug.LogError(e);
#endif
                }
            };

#if UNITY_EDITOR
            _socket.ReceivedError += e =>
            {
                Debug.LogErrorFormat("Socket error: {0}", e.Message);
                Error.Dispatch();
            };
#endif
        }

        private void OnReceivedMatchPresence(IMatchPresenceEvent presence)
        {
            try
            {
                foreach (var elem in presence.Leaves)
                    Participants.Remove(elem);

                Participants.AddRange(presence.Joins);
                ParticipantsUpdated.Dispatch();
            }
            catch (Exception e)
            {
#if UNITY_EDITOR
                Debug.LogError(e);
#endif
            }
        }

        public async Task<IEnumerable<IApiUser>> GetUsers(IEnumerable<string> userIds)
        {
            if (_session.HasExpired(DateTime.UtcNow))
                await CreateSession();

            return (await _client.GetUsersAsync(_session, userIds)).Users;
        }

        public async Task GetUser()
        {
            if (_session.HasExpired(DateTime.UtcNow))
                await CreateSession();

            var account = await _client.GetAccountAsync(_session);
            User = account.User;
        }

        public string UserName => User.DisplayName;
        public IApiUser User { get; private set; }

        public async Task SetUserName(string value)
        {
            if (_session.HasExpired(DateTime.UtcNow))
                await CreateSession();

            await _client.UpdateAccountAsync(_session, User.Username, value);

            var account = await _client.GetAccountAsync(_session);
            User = account.User;
        }

        public async void AddMatchmaker(int tier)
        {
            await RemoveMatchmaker();

            _ticket = await _socket.AddMatchmakerAsync(null, 2, 2);
        }

        private async Task RemoveMatchmaker()
        {
            try
            {
                if (_ticket != null)
                    await _socket.RemoveMatchmakerAsync(_ticket);
            }
            catch (Exception e)
            {
#if UNITY_EDITOR
                Debug.LogError(e);
#endif
            }

            MatchmakerResult = null;
            MatchmakerUpdate.Dispatch();
        }

        public async Task<IMatch> JoinMatch()
        {
            _match = await _socket.JoinMatchAsync(MatchmakerResult);

            Participants.AddRange(_match.Presences);
            ParticipantsUpdated.Dispatch();

            return _match;
        }

        public async Task SendState(long operation, string value)
        {
            if (_socket != null && _match != null)
                await _socket.SendMatchStateAsync(_match.Id, operation, value);

#if UNITY_EDITOR
            Debug.Log($">>>>{operation} {value}");
#endif
        }

        struct StorageObj
        {
            public string[] tokens;
        }

        public async Task<string[]> GetSelectedNFT()
        {
            var result = await _client.ReadStorageObjectsAsync(_session, new IApiReadStorageObjectId[]
            {
                new StorageObjectId()
                {
                    Collection = StorageCollection,
                    Key = StorageKey,
                    UserId = _session.UserId
                }
            });

            return result.Objects.FirstOrDefault()?.Value == null
                ? null
                : JsonConvert.DeserializeObject<StorageObj>(result.Objects.FirstOrDefault()?.Value).tokens;
        }

        public async Task SaveSelectedNFT(string[] value)
        {
            var result = await _client.WriteStorageObjectsAsync(_session, new IApiWriteStorageObject[]
            {
                new WriteStorageObject
                {
                    Collection = StorageCollection,
                    Key = StorageKey,
                    Value = JsonConvert.SerializeObject(new StorageObj {tokens = value})
                }
            });
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/ActionProgressModel.cs ---
﻿using System.Collections.Generic;
using model.data;
using utils.injection;
using UnityEngine;

namespace model
{
    public enum ActionType
    {
        Build,
        Hatch,
        Feed
    }

    public class ActionProgress
    {
        public ActionType Type;
        public float Progress;
        public float MaxProgress;
        public Faction Faction;
    }

    [Singleton]
    // ReSharper disable once ClassNeverInstantiated.Global
    public class ActionProgressModel
    {
        readonly int[] _maxProgress = {20, 3, 5};

        readonly Dictionary<int, ActionProgress> _data = new Dictionary<int, ActionProgress>();

        public bool Contribute(int id, Faction faction, ActionType type, float value)
        {
            if (!_data.ContainsKey(id) || (_data[id].Type != type && _data[id].Progress >= _data[id].MaxProgress))
            {
                _data[id] = new ActionProgress
                {
                    Type = type,
                    Progress = value,
                    MaxProgress = _maxProgress[(int) type],
                    Faction = faction
                };
            }
            else if (_data[id].Type != type)
            {
#if UNITY_EDITOR
                Debug.LogError("WRONG TYPE: " + _data[id].Type + ":" + type);
#endif
                return false;
            }
            else if (_data[id].Faction != faction)
            {
#if UNITY_EDITOR
                Debug.LogError("WRONG FACTION: " + _data[id].Faction + ":" + faction);
#endif
                return false;
            }

            //ignore contributions after completion
            if (_data[id].Progress >= _data[id].MaxProgress)
                return false;

            _data[id].Progress += value;
            if (_data[id].Progress >= _data[id].MaxProgress)
            {
                _data[id].Progress = _data[id].MaxProgress;
                return false;
            }

            return true;
        }

        public ActionProgress Get(int id)
        {
            return _data.ContainsKey(id) ? _data[id] : null;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/CollectionModel.cs ---
﻿using utils.injection;

namespace model
{
    [PerNamedObject]
    public class CollectionModel
    {
        private float _data;//todo possibly map enum.type=>float for now only 1 resource

        public void Inc(float value)
        {
            _data += value;
        }

        public void Reset()
        {
            _data = 0;
        }

        public float Get()
        {
            return _data;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/FactionModel.cs ---
﻿using System.Collections.Generic;
using model.data;
using utils.injection;
using utils.signal;

namespace model
{
    [Singleton]
    public class FactionModel
    {
        readonly Dictionary<int, Faction> _data = new Dictionary<int, Faction>();

        public Signal<int> Updated { get; } = new Signal<int>();

        public Faction Get(int id)
        {
            return _data.ContainsKey(id) ? _data[id] : Faction.Neutral;
        }

        public void Set(int id, Faction value, bool overwrite = true)
        {
            if (_data.ContainsKey(id) && (!overwrite || _data[id] == value))
                return;

            _data[id] = value;
            Updated.Dispatch(id);
        }

        public bool IsSame(int id1, int id2)
        {
            return Get(id1) == Get(id2);
        }

        public bool IsOpposite(int id1, int id2)
        {
            return (int) Get(id1) == -(int) Get(id2) && Get(id1) != Faction.Neutral;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/HealthModel.cs ---
﻿using System.Collections.Generic;
using utils.injection;
using utils.signal;

namespace model
{
    [Singleton]
    public class HealthModel
    {
        public readonly Signal<int> Updated = new Signal<int>();

        readonly Dictionary<int, int> _data = new Dictionary<int, int>();

        public int Get(int id)
        {
            return _data.ContainsKey(id)?_data[id] : 0;
        }

        public void Set(int id, int value)
        {
            if (_data.ContainsKey(id) && value <= 0)
                _data.Remove(id);
            else
                _data[id] = value;

            Updated.Dispatch(id);
        }

        public void Apply(int id, int delta)
        {
            if (!_data.ContainsKey(id))
                return;

            var value = _data[id] + delta;
            if (_data.ContainsKey(id) && value <= 0)
                _data.Remove(id);
            else
                _data[id] = value;

            Updated.Dispatch(id);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/InputModel.cs ---
﻿using System;
using utils.injection;
using UnityEngine;

namespace model
{
    [Singleton]
    public class InputModel
    {
        public Vector2 DragDelta;

        private Touch _lastTouch;

        public Touch LastTouch => _lastTouch;

        float _zoom;

        public float Zoom
        {
            get { return _zoom; }
            set { _zoom = Math.Min(1, Math.Max(0, value)); }
        }

        public void MakeSnapshot()
        {
            if (Input.touchCount > 0)
                _lastTouch = Input.touches[0];
        }

        public static int ActiveTouchCount()
        {
            return Input.touchCount;
        }

        public static Touch GetActiveTouch(int index)
        {
            return Input.touches[index];
        }

        public void RegisterDrag()
        {
            if (ActiveTouchCount() > 0)
                DragDelta = _lastTouch.deltaPosition;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/LayedEggsModel.cs ---
﻿using System.Collections.Generic;
using utils.injection;
using utils.signal;
using UnityEngine;

namespace model
{
    [Singleton]
    // ReSharper disable once UnusedMember.Global
    public class LayedEggsModel
    {
        private readonly Dictionary<int, GameObject> _data = new Dictionary<int, GameObject>();

        public Signal<int> Updated { get; } = new Signal<int>();

        public GameObject GetLayedEgg(int id)
        {
            return _data.ContainsKey(id) ? _data[id] : null;
        }

        public bool HasLayedEgg(int id)
        {
            return _data.ContainsKey(id);
        }

        public void RemoveLayedEgg(int id)
        {
            if (_data.ContainsKey(id)) _data.Remove(id);
        }

        public void SetLayedEgg(int id, GameObject value)
        {
            if (_data.ContainsKey(id))
            {
                if (value != null && _data[id] == value)
                    return;

                _data.Remove(id);
            }

            _data.Add(id, value);
            Updated.Dispatch(id);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/MoveParamsModel.cs ---
﻿using utils.customUI;
using utils.injection;

namespace model
{
    
    public enum MovementType
    {
        Wander,
        Harvest,
        Direct
    }
    
    [PerNamedObject]
    // ReSharper disable once UnusedMember.Global
    // ReSharper disable once ClassNeverInstantiated.Global
    public class MoveParamsModel
    {
        public MovementType Type;
        public float Velocity;
        public MinMaxRange Inertia;

        public void SetMoveParams(MovementType type, float velocity, MinMaxRange inertia)
        {
            Type = type;
            Velocity = velocity;
            Inertia = inertia;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/ResourceModel.cs ---
﻿using System.Collections.Generic;
using model.data;
using utils.injection;
using utils.signal;

namespace model
{
    [Singleton]
    public class ResourceModel
    {
        private readonly Dictionary<Faction, float> _data = new Dictionary<Faction, float>
        {
            {Faction.Player, 0},
            {Faction.Enemy, 0}
        };

        public Signal<Faction> Updated { get; } = new Signal<Faction>();

        public float remaining;

        public float total;

        public int sourceCount => _sourceCount;
        private int _sourceCount;

        public void Set(Faction faction, float value)
        {
            _data[faction] = value;
            Updated.Dispatch(faction);
        }

        public float Get(Faction faction)
        {
            return _data[faction];
        }

        public void RegisterSource()
        {
            _sourceCount++;
        }
    }
    
}
'''
'''--- bees-wax-client/Assets/Scripts/model/SelectedTierModel.cs ---
﻿using utils.injection;

namespace model
{
    [Singleton]
    public class SelectedTierModel
    {
        public int value;
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/SelectionModel.cs ---
﻿using System.Collections.Generic;
using model.data;
using utils.injection;
using utils.signal;

namespace model
{
    [Singleton]
    public class SelectionModel
    {
        private readonly Dictionary<Faction, Dictionary<int, bool>> _data =
            new Dictionary<Faction, Dictionary<int, bool>>();

        public Signal<Faction, int> Updated { get; } = new Signal<Faction, int>();

        public void ToggleSelection(Faction faction, int id)
        {
            if (!_data.ContainsKey(faction))
                _data[faction] = new Dictionary<int, bool>();

            _data[faction][id] = !_data[faction].ContainsKey(id) || !_data[faction][id];
            Updated.Dispatch(faction, id);
        }

        public bool IsSelected(Faction faction, int id)
        {
            if (!_data.ContainsKey(faction))
                _data[faction] = new Dictionary<int, bool>();

            return _data[faction].ContainsKey(id) && _data[faction][id];
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/TargetModel.cs ---
﻿using System.Collections.Generic;
using utils.injection;
using utils.signal;
using UnityEngine;

namespace model
{
    [Singleton]
    public class TargetModel
    {
        public readonly Signal<int> Updated = new Signal<int>();

        readonly Dictionary<int, GameObject> _data = new Dictionary<int, GameObject>();

        public GameObject GetTarget(int id)
        {
            var containsKey = _data.ContainsKey(id);
            var gameObject = containsKey ? _data[id] : null;
            return gameObject;
        }

        public void SetTarget(int id, GameObject value)
        {
            if (value == null && !_data.ContainsKey(id))
                return;
            
            if (value != null && _data.ContainsKey(id) && _data[id] == value)
                return;

            if (value == null)
                _data.Remove(id);
            else
                _data[id] = value;
            
            Updated.Dispatch(id);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/UnitQueueModel.cs ---
﻿using System.Collections.Generic;
using utils.injection;
using utils.signal;
using UnityEngine;

namespace model
{
    [Singleton]
    public class UnitQueueModel
    {
        private const int MaxSize = 7;

        public readonly Signal Updated = new Signal();

        private readonly Queue<GameObject> _data =
            new Queue<GameObject>();

        private readonly List<GameObject> _types =
            new List<GameObject>();

        public void Register(GameObject type)
        {
            if (!_types.Contains(type))
                _types.Add(type);
        }

        public void Push(GameObject value)
        {
            if (_data.Count >= MaxSize)
                return;

            _data.Enqueue(value);

            Updated.Dispatch();
        }

        public Queue<GameObject> Get()
        {
            return _data;
        }

        public GameObject Roll()
        {
            GameObject result;
            if (_data.Count > 0)
            {
                result = _data.Dequeue();
                Updated.Dispatch();
            }
            else
                result = _types[Random.Range(0, _types.Count)];

            return result;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/UnitRegisterModel.cs ---
﻿using System.Collections.Generic;
using model.data;
using utils.injection;
using utils.signal;
using UnityEngine;

namespace model
{
    [Singleton]
    public class UnitRegisterModel
    {
        public readonly Signal<Faction, string> Updated = new Signal<Faction, string>();

        private readonly Dictionary<Faction, Dictionary<string, int>> _data =
            new Dictionary<Faction, Dictionary<string, int>>();

        public void Add(Faction faction, string type)
        {
            if (!_data.ContainsKey(faction))
                _data[faction] = new Dictionary<string, int>();
            
            if (_data[faction].ContainsKey(type))
            {
                _data[faction][type]++;
            }
            else
            {
                _data[faction][type] = 1;
            }

            Updated.Dispatch(faction, type);
        }

        public void Remove(Faction faction, string type)
        {
            if (!_data.ContainsKey(faction))
                _data[faction] = new Dictionary<string, int>();

            if (_data[faction].ContainsKey(type))
            {
                _data[faction][type]--;
                Updated.Dispatch(faction, type);
                if (_data[faction][type] < 0)
                    Debug.Log("negative unit count!");
            }
            else
            {
                Debug.Log("trying to remove a non exisgin unit!");
            }
        }

        public int Get(Faction faction, string type)
        {
            if (!_data.ContainsKey(faction))
                _data[faction] = new Dictionary<string, int>();
            
            return _data[faction].ContainsKey(type) ? _data[faction][type] : 0;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/data/Faction.cs ---
﻿namespace model.data
{
    public enum Faction
    {
        Player = 1,
        Enemy = -1,
        Neutral = 0
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/data/geometry/Hexagon.cs ---
﻿using System.Collections.Generic;
using UnityEngine;

namespace model.data.geometry
{
    public class Hexagon
    {
        public readonly List<Vector2> Vertices;

        public Hexagon()
        {
            Vertices = new List<Vector2>
            {
                new Vector2(0.5f, 0),
                new Vector2(1, 0.25f),
                new Vector2(1, 0.75f),
                new Vector2(0.5f, 1),
                new Vector2(0, 0.75f),
                new Vector2(0, 0.25f)
            };
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/data/geometry/IcoSphere.cs ---
﻿using System.Collections.Generic;
using System.Linq;
using JetBrains.Annotations;
using UnityEngine;

namespace model.data.geometry
{
    public class IcoSphere
    {
        private readonly Dictionary<Vector3, List<Vector3>> _created;
        public readonly List<List<Vector3>> Faces;

        public IcoSphere(int splits, float radius)
        {
            _created = new Dictionary<Vector3, List<Vector3>>();

            var icosahedron = new Icosahedron(radius);

            foreach (var tri in icosahedron.Faces)
            {
                var v1 = icosahedron.Vertices[tri[0]];
                var v2 = icosahedron.Vertices[tri[1]];
                var v3 = icosahedron.Vertices[tri[2]];

                CreateHexes(v1, v2, v3, splits, radius);
            }

            Faces = _created.Values.ToList();
        }

        private void CreateHexes(Vector3 v1, Vector3 v2, Vector3 v3, int splits, float radius)
        {
            var center = (v1 + v2 + v3) / 3;
            for (var pass = 0; pass < splits; pass++)
            {
                float passWidth = Mathf.Max(1, splits - pass);
                for (var i = 0; i < passWidth; i++)
                {
                    var vertexCount = pass + i == 0 ? 5 : 6;

                    var weight1 = (float) i / splits + pass / (3f * splits);
                    var weight2 = (passWidth - i) / splits + pass / (3f * splits);
                    var weight3 = pass / (3f * splits);

                    var pivotWeight1 = weight1 + 1f / (3f * splits);
                    var pivotWeight2 = weight2 - 1f / (3f * splits);

                    CreateFace(v1 * weight1 + v2 * weight2 + v3 * weight3,
                        v1 * pivotWeight1 + v2 * pivotWeight2 + v3 * weight3, vertexCount, center, radius);
                    CreateFace(v2 * weight1 + v3 * weight2 + v1 * weight3,
                        v2 * pivotWeight1 + v3 * pivotWeight2 + v1 * weight3, vertexCount, center, radius);
                    CreateFace(v3 * weight1 + v1 * weight2 + v2 * weight3,
                        v3 * pivotWeight1 + v1 * pivotWeight2 + v2 * weight3, vertexCount, center, radius);
                }
            }

            CreateFace(center, center + (v2 - v1) / (3 * splits), 6, center, radius);
        }

        private void CreateFace(Vector3 v1, Vector3 v2, int vertexCount, Vector3 normal, float radius)
        {
            var vertices = new List<Vector3>();
            var r = v2 - v1;

            for (var idx = 0; idx < vertexCount; idx++)
            {
                vertices.Add((r + v1).normalized * radius);
                // ReSharper disable once PossibleLossOfFraction (degrees are precise enough)
                r = Quaternion.AngleAxis(360 / vertexCount, normal) * r;
            }

            if (_created.ContainsKey(v1))
            {
                var oldVertices = _created[v1];

                //update own vertices (should be on same plane as current icosahedron face)
                var ownVerticesIndexes = vertexCount == 6 ? new[] {4, 5} : new[] {0};

                foreach (var idx in ownVerticesIndexes) SnapNearest(oldVertices, vertices[idx]);
                _created[v1] = oldVertices;
            }
            else
            {
                _created.Add(v1, vertices);
            }
        }

	    /// <summary>
	    ///     Finds a point in source array closest to snap point and assings snapPoint value to it.
	    /// </summary>
	    /// <param name="source">Array of points, one of which (closest) will be snapped.</param>
	    /// <param name="snapPoint">Snap point.</param>
	    private static void SnapNearest([NotNull] IList<Vector3> source, Vector3 snapPoint)
        {
            var closestDistance = -1f;
            var closestIndex = 0;
            for (var i = 0; i < source.Count; i++)
            {
                var distance = Vector3.Distance(source[i].normalized, snapPoint.normalized);
                if (closestDistance > 0 && distance >= closestDistance)
                    continue;
                closestDistance = distance;
                closestIndex = i;
            }

            source[closestIndex] = snapPoint;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/model/data/geometry/Icosahedron.cs ---
﻿using System.Collections.Generic;
using UnityEngine;

namespace model.data.geometry
{
    public class Icosahedron
    {
        //(1.0f + Mathf.Sqrt (5.0f)) / 2.0f;
        private const float T = 1.61803398875f;
        public readonly List<List<int>> Faces;

        public readonly List<Vector3> Vertices;

        public Icosahedron(float radius)
        {
            Vertices = new List<Vector3>
            {
                new Vector3(-1, T, 0).normalized * radius,
                new Vector3(1, T, 0).normalized * radius,
                new Vector3(-1, -T, 0).normalized * radius,
                new Vector3(1, -T, 0).normalized * radius,
                new Vector3(0, -1, T).normalized * radius,
                new Vector3(0, 1, T).normalized * radius,
                new Vector3(0, -1, -T).normalized * radius,
                new Vector3(0, 1, -T).normalized * radius,
                new Vector3(T, 0, -1).normalized * radius,
                new Vector3(T, 0, 1).normalized * radius,
                new Vector3(-T, 0, -1).normalized * radius,
                new Vector3(-T, 0, 1).normalized * radius
            };

            Faces = new List<List<int>>
            {
                new List<int> {0, 11, 5},
                new List<int> {0, 5, 1},
                new List<int> {0, 1, 7},
                new List<int> {0, 7, 10},
                new List<int> {0, 10, 11},

                // 5 adjacent faces 
                new List<int> {1, 5, 9},
                new List<int> {5, 11, 4},
                new List<int> {11, 10, 2},
                new List<int> {10, 7, 6},
                new List<int> {7, 1, 8},

                // 5 faces around point 3
                new List<int> {3, 9, 4},
                new List<int> {3, 4, 2},
                new List<int> {3, 2, 6},
                new List<int> {3, 6, 8},
                new List<int> {3, 8, 9},

                // 5 adjacent faces 
                new List<int> {4, 9, 5},
                new List<int> {2, 4, 11},
                new List<int> {6, 2, 10},
                new List<int> {8, 6, 7},
                new List<int> {9, 8, 1}
            };
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/service/MultiplayerService.cs ---
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using api;
using model;
using model.data;
using Nakama;
using utils.injection;
using utils.signal;
using UnityEngine;
using Object = UnityEngine.Object;

namespace service
{
    public enum Operation : long
    {
        Ready = 1,
        Create = 2,
        Destroy = 3,
        AssignTarget = 4,
        AssignFaction = 5
    }

    public enum Unit
    {
        None,
        Harvester,
        Nurse,
        Builder,
        Warrior,
        Queen
    }

    [Singleton]
    public class MultiplayerService
    {
        [Inject] private TargetModel _targets;

        [Inject] private FactionModel _faction;

        [Inject] private SelectedTierModel tier;

        [Inject] private NakamaApi _nakama;

        public readonly Signal UsersUpdated = new Signal();
        public readonly Signal Disconnect = new Signal();
        public List<IApiUser> Users => _userMap.Values.OrderByDescending(u => u.Id).ToList();

        private readonly Dictionary<string, IApiUser> _userMap = new Dictionary<string, IApiUser>();
        private readonly Dictionary<int, GameObject> _objectMap = new Dictionary<int, GameObject>();
        private readonly Dictionary<int, int> _reverseLookup = new Dictionary<int, int>();

        private async Task SendData(Operation operation, string data = "")
        {
            if (operation == Operation.Ready)
                AddReadyPlayer(_nakama.User);

            if (_nakama != null)
                await _nakama.SendState((long) operation, data);
        }

        private void OnDataReceived(long op, string data, IUserPresence sender)
        {
            UnityMainThreadDispatcher.Instance().Enqueue(() => ProcessData(op, data, sender));
        }

        private void ProcessData(long op, string data, IUserPresence sender)
        {
            if (!Enum.IsDefined(typeof(Operation), op)) return;

            var opEnum = (Operation) op;
            var split = data.Split(':');
            switch (opEnum)
            {
                case Operation.Create:
                    var vectorString = split[2];
                    vectorString = vectorString.Substring(1, vectorString.Length - 2);
                    var vectorCsv = vectorString.Split(',');
                    if (int.TryParse(split[0], out var remoteId) &&
                        float.TryParse(vectorCsv[0], out var x) &&
                        float.TryParse(vectorCsv[1], out var y) &&
                        float.TryParse(vectorCsv[2], out var z))
                    {
                        var prefabName = ((Unit) int.Parse(split[1])).ToString();
                        var position = new Vector3(x, y, z);

                        var hive = GameObject.Find("Hive");
                        var obj = Object.Instantiate(Resources.Load("Prefabs/Units/" + prefabName), position,
                            Quaternion.identity,
                            hive.transform); //todo static access

                        _objectMap[remoteId] = obj as GameObject;
                        _reverseLookup[obj.GetInstanceID()] = remoteId;
                        _faction.Set(obj.GetInstanceID(), Faction.Enemy);
                    }

                    break;
                case Operation.Ready:
                    AddReadyPlayer(_userMap[sender.UserId]);
                    break;
                case Operation.Destroy:
                    if (int.TryParse(data, out remoteId) && _objectMap.ContainsKey(remoteId))
                    {
                        Object.Destroy(_objectMap[remoteId]);
                        _objectMap.Remove(remoteId);
                    }

                    break;
                case Operation.AssignTarget:
                    if (!int.TryParse(split[0], out remoteId))
                        return;

                    if (!int.TryParse(split[1], out var targetId))
                        return;

                    if (_objectMap.TryGetValue(remoteId, out var gameObject))
                    {
                        if (_objectMap.ContainsKey(targetId))
                            _targets.SetTarget(gameObject.GetInstanceID(), _objectMap[targetId]);
                        else
                        {
#if UNITY_EDITOR
                            Debug.LogError($"target {targetId} doesnt exist for {gameObject}");
#endif
                            break;
                        }

                        if (gameObject != null)
                            gameObject.GetComponent<Animator>().SetTrigger("TargetFound");
                    }

                    break;

                case Operation.AssignFaction:
                    if (int.TryParse(data, out remoteId))
                        if (_objectMap.TryGetValue(remoteId, out var commandTarget))
                            _faction.Set(commandTarget.GetInstanceID(), Faction.Enemy);
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private const bool AutoJoin = true;

        public int GetPlayerIndex()
        {
            return Users.FindIndex(u => u.Id == _nakama.User.Id);
        }

        private readonly List<string> _readyPlayers = new List<string>();

        private void AddReadyPlayer(IApiUser value)
        {
            if (value == null || _readyPlayers.Contains(value.Id)) return;

            _readyPlayers.Add(value.Id);
            UsersUpdated.Dispatch();
        }

        private async void OnMatchmakerUpdate()
        {
            if (AutoJoin && _nakama.MatchmakerResult != null)
                await _nakama.JoinMatch();
        }

        private void OnParticipantsUpdated()
        {
            UnityMainThreadDispatcher.Instance().Enqueue(ProcessParticipants);
        }

        private async void ProcessParticipants()
        {
            //load missing users
            foreach (var user in await _nakama.GetUsers(_nakama.Participants.Where(p => !_userMap.ContainsKey(p.UserId))
                .Select(p => p.UserId)))
                _userMap[user.Id] = user;

            //trim missing participants
            foreach (var key in _userMap.Keys.ToList())
                if (_nakama.Participants.All(p => p.UserId != key))
                {
                    _userMap.Remove(key);
                    _readyPlayers.Remove(key);
                }

            UsersUpdated.Dispatch();

            if (Users.Count < 2 && _nakama.MatchmakerResult != null)
            {
                if (_readyPlayers.Remove(User?.Id))
                    _nakama.AddMatchmaker(tier.value);
            }
        }

        public bool IsReady(string value)
        {
            return _readyPlayers.Contains(value);
        }

        public Signal UserUpdated { get; } = new Signal();
        public string UserName => User?.DisplayName;
        private IApiUser User => _nakama?.User;

        public async void SetUserName(string value)
        {
            await _nakama.SetUserName(value);
            UserUpdated.Dispatch();

            _readyPlayers.Remove(User?.Id);
            _nakama.AddMatchmaker(tier.value);
        }

        public void InitApi()
        {
            _nakama.MatchmakerUpdate.Add(OnMatchmakerUpdate);
            _nakama.ParticipantsUpdated.Add(OnParticipantsUpdated);
            _nakama.StateUpdated.Add(OnDataReceived);
            _nakama.Error.Add(() => Disconnect.Dispatch());

            _nakama.AddMatchmaker(tier.value);
        }

        public int RegisterObject(GameObject value, int id = -1)
        {
            if (id < 0)
                id = _objectMap.Keys.Count > 0 ? _objectMap.Keys.Max() + 1 : 0;

            _objectMap[id] = value;
            _reverseLookup[value.GetInstanceID()] = id;
            return id;
        }

        public async void AssignTarget(GameObject owner, GameObject target)
        {
            if (_reverseLookup.TryGetValue(owner.GetInstanceID(), out var ownerNetworkId) &&
                _reverseLookup.TryGetValue(target.GetInstanceID(), out var targetNetworkId))
                await SendData(Operation.AssignTarget, $"{ownerNetworkId}:{targetNetworkId}");
#if UNITY_EDITOR
            else
                Debug.LogError("Network ID not found for objects " + owner.name + "," + target.name);
#endif
        }

        public async void Create(GameObject value)
        {
            var unit = Unit.None;
            if (value.name.Contains("Harvester"))
                unit = Unit.Harvester;

            if (value.name.Contains("Nurse"))
                unit = Unit.Nurse;

            if (value.name.Contains("Builder"))
                unit = Unit.Builder;

            if (value.name.Contains("Warrior"))
                unit = Unit.Warrior;

            if (value.name.Contains("Queen"))
                unit = Unit.Queen;

            if (unit != Unit.None)
                await SendData(Operation.Create,
                    RegisterObject(value) + ":" + (int) unit + ":" + value.transform.position);
#if UNITY_EDITOR
            else
                Debug.LogError("Trying to create unregistered prefab type: " + value.name);
#endif
        }

        public async Task Destroy(GameObject value)
        {
            if (_reverseLookup.TryGetValue(value.GetInstanceID(), out var networkId))
                await SendData(Operation.Destroy, networkId.ToString());
#if UNITY_EDITOR
            else
                Debug.LogError("Network ID not found for object " + value.name);
#endif
        }

        public async Task Ready()
        {
            await SendData(Operation.Ready);
        }

        public async void AssignFaction(int instanceId)
        {
            if (_reverseLookup.TryGetValue(instanceId, out var networkId))
                await SendData(Operation.AssignFaction, networkId.ToString());
#if UNITY_EDITOR
            else
                Debug.LogError("Network ID not found for object with instance Id " + instanceId);
#endif
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/service/NFTSelectionService.cs ---
using System;
using System.Linq;
using System.Threading.Tasks;
using api;
using utils.injection;
using utils.signal;

namespace service
{
    [Singleton]
    public class NFTSelectionService
    {
        public Signal Updated = new Signal();
        public Signal Selected = new Signal();
        
        [Inject] private NakamaApi _nakama;
        
        [Inject] private NFTApi _nft;
        
        [Inject] private WalletService _wallet;

        public async Task<string[]> GetSelection()
        {
            if (_buffer != null)
                return _buffer;

            await Init();
            return _buffer;
        }

        private string[] _selection;
        private string[] _buffer;
        
        public GameplayEffect Effect { get; private set; }

        private async Task Init()
        {
            _selection = new string[3];
            var storedSelection = await _nakama.GetSelectedNFT();
            if (storedSelection!=null)
                for (var i = 0; i < Math.Min(3, storedSelection.Length); i++)
                {
                    _selection[i] = storedSelection[i];
                }

            Reset();
        }

        public bool TrySetState(string dataId, bool value)
        {
            if (!value)
            {
                for (var i = 0; i < _buffer.Length; i++)
                    if (_buffer[i] == dataId){
                        _buffer[i] = null;
                        break;
                    }
                CalculateEffect();
                Selected.Dispatch();
                return true;
            }
            else
            {
                for (var i = 0; i < _buffer.Length; i++)
                    if (_buffer[i] == null){
                        _buffer[i] = dataId;
                        CalculateEffect();
                        Selected.Dispatch();
                        return true;
                    }
                return false;
            }
        }

        public async Task Apply()
        {
            await _nakama.SaveSelectedNFT(_buffer);
            _selection = (string[]) _buffer.Clone();
            Updated.Dispatch();
        }

        public void Reset()
        {
            _buffer = (string[]) _selection.Clone();
            CalculateEffect();
        }

        private async void CalculateEffect()
        {
            var owned = await _nft.GetNFTs(_wallet.WalletId);

            Effect = new GameplayEffect();

            foreach (var id in await GetSelection())
            {
                if (id == null) 
                    continue;
                
                if (!owned.Exists(e => e.Id == id))
                    continue;
            
                var nft = owned.FirstOrDefault(e => e.Id == id);
                Effect.Merge(nft.Extra);
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/service/WalletService.cs ---
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using UnityEngine.Networking;
using utils.injection;
using utils;
using utils.signal;

namespace service
{
    [Singleton]
    public class WalletService
    {
        public Signal Update = new Signal();

        public string WalletId;
        private int? _balance;

        private const string ApiBalanceBaseURL = "http://localhost:8084/api/balance";

        public async Task<int> GetBalance()
        {
            if (_balance == null)
            {
                var request = UnityWebRequest.Get(ApiBalanceBaseURL + "?id=" + WalletId);
                await request.SendWebRequest();
                _balance = int.Parse(request.downloadHandler.text);
            }

            return _balance ?? 0;
        }

        public async Task<bool> Withdraw(int value)
        {
            var json = JsonConvert.SerializeObject(new
            {
                id =WalletId,
                value
            });

            var request = UnityWebRequest.Put(ApiBalanceBaseURL, Encoding.UTF8.GetBytes(json));

            request.method = UnityWebRequest.kHttpVerbPOST;

            request.SetRequestHeader("Content-Type", "application/json");
            request.SetRequestHeader("Accept", "application/json");

            await request.SendWebRequest();

            _balance = null; //dirty
            Update.Dispatch();

            return request.result == UnityWebRequest.Result.Success;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/WebRequestExtensionMethods.cs ---
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using UnityEngine;
using UnityEngine.Networking;

namespace utils
{
    
    
    [ DebuggerNonUserCode ]
    public readonly struct AsyncOperationAwaiter : INotifyCompletion
    {
        private readonly AsyncOperation _asyncOperation;
        public bool IsCompleted => _asyncOperation.isDone;

        public AsyncOperationAwaiter( AsyncOperation asyncOperation ) => _asyncOperation = asyncOperation;

        public void OnCompleted( Action continuation ) => _asyncOperation.completed += _ => continuation();

        public void GetResult() { }
    }

    [ DebuggerNonUserCode ]
    public readonly struct UnityWebRequestAwaiter : INotifyCompletion
    {
        private readonly UnityWebRequestAsyncOperation _asyncOperation;

        public bool IsCompleted => _asyncOperation.isDone;

        public UnityWebRequestAwaiter( UnityWebRequestAsyncOperation asyncOperation ) => _asyncOperation = asyncOperation;

        public void OnCompleted( Action continuation ) => _asyncOperation.completed += _ => continuation();

        public UnityWebRequest GetResult() => _asyncOperation.webRequest;
    }
    
    public static class WebRequestExtensionMethods
    {
        public static UnityWebRequestAwaiter GetAwaiter(this UnityWebRequestAsyncOperation asyncOp)
        {
            return new UnityWebRequestAwaiter(asyncOp);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/customUI/ConditionalField.cs ---
﻿using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using System.Collections.ObjectModel;
using System.Reflection;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace utils.customUI
{
	/// <summary>
	/// Conditionally Show/Hide field in inspector, based on some other field value 
	/// </summary>
	[AttributeUsage(AttributeTargets.Field)]
	public class ConditionalFieldAttribute : PropertyAttribute
	{
		private readonly string _fieldToCheck;
		private readonly object[] _compareValues;
		private readonly bool _inverse;

		/// <param name="fieldToCheck">String name of field to check value</param>
		/// <param name="inverse">Inverse check result</param>
		/// <param name="compareValues">On which values field will be shown in inspector</param>
		public ConditionalFieldAttribute(string fieldToCheck, bool inverse = false, params object[] compareValues)
		{
			_fieldToCheck = fieldToCheck;
			_inverse = inverse;
			_compareValues = compareValues;
		}

#if UNITY_EDITOR
		public bool CheckBehaviourPropertyVisible(MonoBehaviour behaviour, string propertyName)
		{
			if (string.IsNullOrEmpty(_fieldToCheck)) return true;

			var so = new SerializedObject(behaviour);
			var property = so.FindProperty(propertyName);

			return CheckPropertyVisible(property);
		}

		public bool CheckPropertyVisible(SerializedProperty property)
		{
			var conditionProperty = FindRelativeProperty(property, _fieldToCheck);
			if (conditionProperty == null) return true;

			string asString = AsStringValue(conditionProperty).ToUpper();

			if (_compareValues != null && _compareValues.Length > 0)
			{
				var matchAny = CompareAgainstValues(asString);
				if (_inverse) matchAny = !matchAny;
				return matchAny;
			}

			bool someValueAssigned = asString != "FALSE" && asString != "0" && asString != "NULL";
			if (someValueAssigned) return !_inverse;

			return _inverse;
		}

		/// <summary>
		/// True if the property value matches any of the values in '_compareValues'
		/// </summary>
		private bool CompareAgainstValues(string propertyValueAsString)
		{
			foreach (object valueToCompare in _compareValues)
			{
				bool valueMatches = valueToCompare.ToString().ToUpper() == propertyValueAsString;

				// One of the value is equals to the property value.
				if (valueMatches) return true;
			}

			// None of the value is equals to the property value.
			return false;
		}

		private SerializedProperty FindRelativeProperty(SerializedProperty property, string toGet)
		{
			if (property.depth == 0) return property.serializedObject.FindProperty(toGet);

			var path = property.propertyPath.Replace(".Array.data[", "[");
			var elements = path.Split('.');

			var nestedProperty = NestedPropertyOrigin(property, elements);

			// if nested property is null = we hit an array property
			if (nestedProperty == null)
			{
				var cleanPath = path.Substring(0, path.IndexOf('['));
				var arrayProp = property.serializedObject.FindProperty(cleanPath);
				var target = arrayProp.serializedObject.targetObject;

				var who = "Property <color=brown>" + arrayProp.name + "</color> in object <color=brown>" + target.name + "</color> caused: ";
				var warning = who + "Array fields is not supported by [ConditionalFieldAttribute]";

				Debug.LogWarning(warning);

				return null;
			}

			return nestedProperty.FindPropertyRelative(toGet);
		}

		// For [Serialized] types with [Conditional] fields
		private SerializedProperty NestedPropertyOrigin(SerializedProperty property, string[] elements)
		{
			SerializedProperty parent = null;

			for (int i = 0; i < elements.Length - 1; i++)
			{
				var element = elements[i];
				int index = -1;
				if (element.Contains("["))
				{
					index = Convert.ToInt32(element.Substring(element.IndexOf("[", StringComparison.Ordinal))
						.Replace("[", "").Replace("]", ""));
					element = element.Substring(0, element.IndexOf("[", StringComparison.Ordinal));
				}

				parent = i == 0
					? property.serializedObject.FindProperty(element)
					: parent != null
						? parent.FindPropertyRelative(element)
						: null;

				if (index >= 0 && parent != null) parent = parent.GetArrayElementAtIndex(index);
			}

			return parent;
		}

		private string AsStringValue(SerializedProperty prop)
		{
			switch (prop.propertyType)
			{
				case SerializedPropertyType.String:
					return prop.stringValue;

				case SerializedPropertyType.Character:
				case SerializedPropertyType.Integer:
					if (prop.type == "char") return Convert.ToChar(prop.intValue).ToString();
					return prop.intValue.ToString();

				case SerializedPropertyType.ObjectReference:
					return prop.objectReferenceValue != null ? prop.objectReferenceValue.ToString() : "null";

				case SerializedPropertyType.Boolean:
					return prop.boolValue.ToString();

				case SerializedPropertyType.Enum:
					return prop.enumNames[prop.enumValueIndex];

				default:
					return string.Empty;
			}
		}
#endif
	}
}

#if UNITY_EDITOR
namespace utils.customUI
{
	[CustomPropertyDrawer(typeof(ConditionalFieldAttribute))]
	public class ConditionalFieldAttributeDrawer : PropertyDrawer
	{
		private bool _multipleAttributes;
		private bool _specialType;

		private PropertyAttribute _genericAttribute;
		private PropertyDrawer _genericDrawerInstance;
		private Type _genericDrawerType;

		private static IEnumerable<Type> _typesCache;

		private void LogWarning(string log, SerializedProperty property)
		{
			var warning = "Property <color=brown>" + fieldInfo.Name + "</color>";
			if (fieldInfo.DeclaringType != null) warning += " on behaviour <color=brown>" + fieldInfo.DeclaringType.Name + "</color>";
			warning += " caused: " + log;

			Debug.LogWarning(warning);
		}

		private void GetPropertyDrawerType(SerializedProperty property)
		{
			if (_genericDrawerInstance != null) return;

			//Get the second attribute flag
			try
			{
				_genericAttribute = (PropertyAttribute) fieldInfo.GetCustomAttributes(typeof(PropertyAttribute), false)[1];

				if (_genericAttribute is ContextMenuItemAttribute)
				{
					LogWarning("[ConditionalField] does not work with " + _genericAttribute.GetType(), property);
					return;
				}

				if (_genericAttribute is TooltipAttribute) return;
			}
			catch (Exception e)
			{
				LogWarning("Can't find stacked propertyAttribute after ConditionalProperty: " + e, property);
				return;
			}

			//Get the associated attribute drawer
			try
			{
				if (_typesCache == null)
				{
					_typesCache = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes())
						.Where(x => typeof(PropertyDrawer).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract);
				}

				_genericDrawerType = _typesCache.First(x =>
					(Type) CustomAttributeData.GetCustomAttributes(x).First().ConstructorArguments.First().Value == _genericAttribute.GetType());
			}
			catch (Exception e)
			{
				LogWarning("Can't find property drawer from CustomPropertyAttribute of " + _genericAttribute.GetType() + " : " + e, property);
				return;
			}

			//Create instances of each (including the arguments)
			try
			{
				_genericDrawerInstance = (PropertyDrawer) Activator.CreateInstance(_genericDrawerType);
				//Get arguments
				IList<CustomAttributeTypedArgument> attributeParams = fieldInfo.GetCustomAttributesData()[1].ConstructorArguments;
				IList<CustomAttributeTypedArgument> unpackedParams = new List<CustomAttributeTypedArgument>();
				//Unpack any params object[] args
				foreach (CustomAttributeTypedArgument singleParam in attributeParams)
				{
					if (singleParam.Value.GetType() == typeof(ReadOnlyCollection<CustomAttributeTypedArgument>))
					{
						foreach (CustomAttributeTypedArgument unpackedSingleParam in (ReadOnlyCollection<CustomAttributeTypedArgument>) singleParam.Value)
						{
							unpackedParams.Add(unpackedSingleParam);
						}
					}
					else
					{
						unpackedParams.Add(singleParam);
					}
				}

				object[] attributeParamsObj = unpackedParams.Select(x => x.Value).ToArray();

				if (attributeParamsObj.Any())
				{
					_genericAttribute = (PropertyAttribute) Activator.CreateInstance(_genericAttribute.GetType(), attributeParamsObj);
				}
				else
				{
					_genericAttribute = (PropertyAttribute) Activator.CreateInstance(_genericAttribute.GetType());
				}
			}
			catch (Exception e)
			{
				LogWarning("no constructor available in " + _genericAttribute.GetType() + " : " + e, property);
				return;
			}

			//Reassign the attribute field in the drawer so it can access the argument values
			try
			{
				_genericDrawerType.GetField("m_Attribute", BindingFlags.Instance | BindingFlags.NonPublic)?.SetValue(_genericDrawerInstance, _genericAttribute);
			}
			catch (Exception e)
			{
				LogWarning("Unable to assign attribute to " + _genericDrawerInstance.GetType() + " : " + e, property);
			}
		}

		private Type _genericType;
		private PropertyDrawer _genericTypeDrawerInstance;
		private Type _genericTypeDrawerType;

		private void GetTypeDrawerType(SerializedProperty property)
		{
			if (_genericTypeDrawerInstance != null) return;

			//Get the type
			_genericType = fieldInfo.FieldType;

			var genericObject = fieldInfo;

			//Get the associated attribute drawer
			try
			{
				if (_typesCache == null)
				{
					_typesCache = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes())
						.Where(x => typeof(PropertyDrawer).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract);
				}

				_genericTypeDrawerType = _typesCache.First(x =>
					(Type) CustomAttributeData.GetCustomAttributes(x).First().ConstructorArguments.First().Value == _genericType);
			}
			catch (Exception)
			{
				LogWarning("[ConditionalField] does not work with "+_genericType+". Unable to find property drawer from the Type", property);
				return;
			}

			//Create instances of each (including the arguments)
			try
			{
				_genericTypeDrawerInstance = (PropertyDrawer) Activator.CreateInstance(_genericTypeDrawerType);
			}
			catch (Exception e)
			{
				LogWarning("no constructor available in " + _genericType + " : " + e, property);
				return;
			}

			//Reassign the attribute field in the drawer so it can access the argument values
			try
			{
				_genericTypeDrawerType.GetField("m_Attribute", BindingFlags.Instance | BindingFlags.NonPublic)
					?.SetValue(_genericTypeDrawerInstance, genericObject);
			}
			catch (Exception)
			{
				//LogWarning("Unable to assign attribute to " + _genericTypeDrawerInstance.GetType() + " : " + e, property);
			}
		}

		private ConditionalFieldAttribute Attribute
		{
			get { return _attribute ?? (_attribute = attribute as ConditionalFieldAttribute); }
		}

		private ConditionalFieldAttribute _attribute;

		private bool _toShow = true;

		public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
		{
			if (fieldInfo.GetCustomAttributes(typeof(PropertyAttribute), false).Count() > 1)
			{
				_multipleAttributes = true;
				GetPropertyDrawerType(property);
			}
			else if (!fieldInfo.FieldType.Module.ScopeName.Equals(typeof(int).Module.ScopeName))
			{
				_specialType = true;
				GetTypeDrawerType(property);
			}

			_toShow = Attribute.CheckPropertyVisible(property);
			if (!_toShow) return 0;

			if (_genericDrawerInstance != null)
				return _genericDrawerInstance.GetPropertyHeight(property, label);
			if (_genericTypeDrawerInstance != null)
				return _genericTypeDrawerInstance.GetPropertyHeight(property, label);
			return EditorGUI.GetPropertyHeight(property);
		}

		public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
		{
			if (!_toShow) return;

			if (_multipleAttributes && _genericDrawerInstance != null)
			{
				try
				{
					_genericDrawerInstance.OnGUI(position, property, label);
				}
				catch (Exception e)
				{
					EditorGUI.PropertyField(position, property, label);
					LogWarning("Unable to instantiate " + _genericAttribute.GetType() + " : " + e, property);
				}
			}
			else if (_specialType && _genericTypeDrawerInstance != null)
			{
				try
				{
					_genericTypeDrawerInstance.OnGUI(position, property, label);
				}
				catch (Exception e)
				{
					EditorGUI.PropertyField(position, property, label);
					LogWarning("Unable to instantiate " + _genericType + " : " + e, property);
				}
			}
			else
			{
				EditorGUI.PropertyField(position, property, label);
			}
		}
	}
}
#endif
'''
'''--- bees-wax-client/Assets/Scripts/utils/customUI/MinMaxSliderDrawer.cs ---
﻿using System;
using UnityEditor;
using UnityEngine;
#if UNITY_EDITOR

#endif

namespace utils.customUI
{
    [Serializable]
    public class MinMaxRange
    {
        public float RangeEnd;
        public float RangeStart;
    }

    public class MinMaxRangeAttribute : PropertyAttribute
    {
        public readonly float MaxLimit;

        public readonly float MinLimit;

        public MinMaxRangeAttribute(float min, float max)
        {
            MinLimit = min;
            MaxLimit = max;
        }
    }

#if UNITY_EDITOR
    [CustomPropertyDrawer(typeof(MinMaxRangeAttribute))]
    internal class MinMaxSliderDrawer : PropertyDrawer
    {
        public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
        {
            return base.GetPropertyHeight(property, label) + 16;
        }

        // Draw the property inside the given rect
        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
        {
            // Now draw the property as a Slider or an IntSlider based on whether it’s a float or integer.
            if (property.type != "MinMaxRange")
            {
                Debug.LogWarning("Use only with MinMaxRange type");
            }
            else
            {
                var range = attribute as MinMaxRangeAttribute;
                var minValue = property.FindPropertyRelative("RangeStart");
                var maxValue = property.FindPropertyRelative("RangeEnd");
                var newMin = minValue.floatValue;
                var newMax = maxValue.floatValue;

                var xDivision = position.width * 0.33f;
                var yDivision = position.height * 0.5f;
                EditorGUI.LabelField(new Rect(position.x, position.y, xDivision, yDivision), label);

                EditorGUI.LabelField(new Rect(position.x, position.y + yDivision, position.width, yDivision),
                    range.MinLimit.ToString("0.##"));
                EditorGUI.LabelField(
                    new Rect(position.x + position.width - 20f, position.y + yDivision, position.width, yDivision),
                    range.MaxLimit.ToString("0.##"));
                EditorGUI.MinMaxSlider(
                    new Rect(position.x + 24f, position.y + yDivision, position.width + -48f, yDivision), ref newMin,
                    ref newMax, range.MinLimit, range.MaxLimit);

                EditorGUI.LabelField(new Rect(position.x + xDivision, position.y, xDivision, yDivision), "From: ");
                newMin = Mathf.Clamp(
                    EditorGUI.FloatField(
                        new Rect(position.x + xDivision + 34f, position.y, xDivision + -30f, yDivision), newMin),
                    range.MinLimit, newMax);
                EditorGUI.LabelField(new Rect(position.x + xDivision * 2f + 4f, position.y, xDivision, yDivision),
                    "To: ");
                newMax = Mathf.Clamp(
                    EditorGUI.FloatField(
                        new Rect(position.x + xDivision * 2f + 24, position.y, xDivision + -24f, yDivision), newMax),
                    newMin, range.MaxLimit);

                minValue.floatValue = newMin;
                maxValue.floatValue = newMax;

                property.serializedObject.ApplyModifiedProperties();
            }
        }
    }
#endif
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/generators/GenerateHive.cs ---
﻿#if UNITY_EDITOR
#endif
using System.Collections.Generic;
using model.data.geometry;
using UnityEditor;
using UnityEngine;
using view.behaviours.cell;
using Object = UnityEngine.Object;

namespace utils.generators
{
#if UNITY_EDITOR
    [CustomEditor(typeof(GenerateHive))]
    public class GenerateHiveEditor : Editor
    {
        public override void OnInspectorGUI()
        {
            DrawDefaultInspector();

            var generator = (GenerateHive) target;
            if (GUILayout.Button("Generate")) generator.Recreate();
        }
    }

    [ExecuteInEditMode]
    public class GenerateHive : MonoBehaviour
    {
        public GameObject Prefab;
        public float Radius = 10f;
        public int Splits = 4;
        public bool CreateGameplayObjects = false;

        enum IdEntities
        {
            SpawnPoint,
            NetworkObject
        };

        private Dictionary<IdEntities, int> IdCounter = new Dictionary<IdEntities, int>
        {
            {IdEntities.NetworkObject, 0},
            {IdEntities.SpawnPoint, 0}
        };
        
        public void Recreate()
        {
            var icoSphere = new IcoSphere(Splits, Radius);

            while (transform.childCount > 0) 
            {
                var child = transform.GetChild(transform.childCount - 1);
                child.parent = null;
                DestroyImmediate(child.gameObject);
            }

            for (var i = 0; i < icoSphere.Faces.Count; i++)
            {
                var face = icoSphere.Faces[i];
                var obj = AssignIds(Instantiate(Prefab, transform));
                obj.name = "Cell" + transform.childCount;
                obj.GetComponent<IGenerateMesh>()?.SetVertices(face);

                if (i % 15 == 0 && CreateGameplayObjects)
                {
                    var resource = (GameObject) Instantiate(Resources.Load("Prefabs/Cells/Source"), obj.transform);
                    resource.transform.parent = obj.transform.parent;
                    AssignIds(resource);
                    DestroyImmediate(obj);
                }

                if ((i == 8 || i == 200) && CreateGameplayObjects)
                {
                    AssignIds(Instantiate(Resources.Load("Prefabs/Cells/SpawnPoint"), obj.transform));
                }
            }
        }

        private GameObject AssignIds(Object target)
        {
            if (!(target is GameObject go)) return null;
            
            //todo you can do better c#
            var networkId = go.GetComponent<NetworkId>();
            if (networkId != null) 
                networkId.Id = IdCounter[IdEntities.NetworkObject]++;
            
            var spawnPoint = go.GetComponent<SpawnPoint>();
            if (spawnPoint != null) 
                spawnPoint.Id = IdCounter[IdEntities.SpawnPoint]++;
            
            return go;

        }
    }
#endif
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/generators/ReplacePrefab.cs ---
﻿
#if UNITY_EDITOR
using UnityEditor;
#endif
using UnityEngine;

namespace utils.generators
{
    [ExecuteInEditMode]
    public class ReplacePrefab : MonoBehaviour
    {
        public GameObject Prefab;
#if UNITY_EDITOR
        // Update is called once per frame
        private void Update()
        {
            if (Prefab == null) return;

            if (PrefabUtility.GetPrefabType(Prefab) != PrefabUtility.GetPrefabType(gameObject))
            {
                //create
                var newObj = Instantiate(Prefab, transform.parent);

                //transform
                newObj.transform.position = transform.position;
                newObj.transform.rotation = transform.rotation;

                var mesh = gameObject.GetComponent<MeshFilter>().sharedMesh;

                //mesh
                var filter = newObj.GetComponent<MeshFilter>();
                if (filter != null) filter.mesh = mesh;

                //collider
                // ReSharper disable once LocalVariableHidesMember
                var collider = newObj.GetComponent<MeshCollider>();
                if (collider != null) collider.sharedMesh = mesh;

                //replace in list
                var idx = transform.GetSiblingIndex();
                DestroyImmediate(gameObject);
                newObj.transform.SetSiblingIndex(idx);
            }
        }
#endif
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/injection/InjectableBehaviour.cs ---
﻿using UnityEngine;

namespace utils.injection
{
    public class InjectableBehaviour : MonoBehaviour
    {
        protected virtual void Awake()
        {
            Injector.Instance.Resolve(this, gameObject.GetInstanceID());
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/injection/InjectableStateMachineBehaviour.cs ---
﻿using UnityEngine;

namespace utils.injection
{
    public class InjectableStateMachineBehaviour : StateMachineBehaviour
    {
        public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
        {
            Injector.Instance.Resolve(this, animator.gameObject.GetInstanceID());
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/injection/InjectionAttributes.cs ---
﻿using System;

namespace utils.injection
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
    public class Inject : Attribute
    {
    }

    [AttributeUsage(AttributeTargets.Class)]
    public class Singleton : Attribute
    {
    }

    [AttributeUsage(AttributeTargets.Class)]
    public class PerNamedObject : Attribute
    {
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/injection/Injector.cs ---
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

//contains functionality classically implemented in a context.
//combined in attempt to simplify

namespace utils.injection
{
    public class Injector
    {
        private const BindingFlags BindingFlags = System.Reflection.BindingFlags.DeclaredOnly |
                                                  System.Reflection.BindingFlags.NonPublic |
                                                  System.Reflection.BindingFlags.Instance;

        public static Injector Instance;
        private readonly Dictionary<string, object> _cache = new Dictionary<string, object>();

        private readonly Dictionary<Type, List<FieldInfo>> _injectionPoints = new Dictionary<Type, List<FieldInfo>>();

        public static void Setup(Assembly assembly)
        {
            if (Instance != null)
                return;
            
            Instance = new Injector();

            foreach (var a in AppDomain.CurrentDomain.GetAssemblies())
            {
                if (a != assembly)
                    continue;
                
                a.GetTypes().ToList().ForEach(Instance.ProcessType);
            }
        }

        private void ProcessType(Type type)
        {
            if (type.IsAbstract)
                return;

            ProcessInjectionPoints(type, type);
        }

        private void ProcessInjectionPoints(Type owner, Type type)
        {
            foreach (var member in type.GetFields(BindingFlags))
            {
                if (member.GetCustomAttributes(typeof(Inject), true).Length == 0)
                    continue;

                if (_injectionPoints.ContainsKey(owner))
                    _injectionPoints[owner].Add(member);
                else
                    _injectionPoints.Add(owner, new List<FieldInfo> {member});
            }

            if (type.BaseType != null)
                ProcessInjectionPoints(owner, type.BaseType);
        }

        public void Resolve(object obj, int ownerId = 0)
        {
            if (!_injectionPoints.ContainsKey(obj.GetType()))
                return;

            foreach (var member in _injectionPoints[obj.GetType()])
            {
                var val = ResolveValue(member, obj, ownerId);
                member.SetValue(obj, val);
            }
        }

        //TODO decorate with resolvers
        private object ResolveValue(FieldInfo member, object obj, int ownerId)
        {
            if (member.FieldType.GetCustomAttributes(typeof(Singleton), false).Length > 0)
                return GetValue(member.FieldType);

            return GetValue(member.FieldType, ownerId);
        }

        private object GetValue(Type type, int id = 0)
        {
            var key = id != 0 ? $"{type}:{id}" : type.ToString();

            if (!_cache.ContainsKey(key))
                _cache.Add(key, Activator.CreateInstance(type));

            return _cache[key];
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/utils/signal/Signal.cs ---
﻿using System.Collections.Generic;

namespace utils.signal
{
    public class Signal
    {
        public delegate void Callback();

        private readonly List<Callback> _callbacks;

        public Signal()
        {
            _callbacks = new List<Callback>();
        }

        public void Dispatch()
        {
            for (var i = 0; i < _callbacks.Count; i++) _callbacks[i].Invoke();
        }

        // Use this for initialization
        public void Add(Callback callback)
        {
            _callbacks.Add(callback);
        }

        // Update is called once per frame
        public void Remove(Callback callback)
        {
            _callbacks.Remove(callback);
        }
    }
    
    public class Signal<T>
    {
        public delegate void Callback(T p);

        private readonly List<Callback> _callbacks;

        public Signal()
        {
            _callbacks = new List<Callback>();
        }

        public void Dispatch(T p)
        {
            for (var i = 0; i < _callbacks.Count; i++) _callbacks[i].Invoke(p);
        }

        // Use this for initialization
        public void Add(Callback callback)
        {
            _callbacks.Add(callback);
        }

        // Update is called once per frame
        public void Remove(Callback callback)
        {
            _callbacks.Remove(callback);
        }
    }

    public class Signal<T1, T2>
    {
        public delegate void Callback(T1 p1, T2 p2);

        private readonly List<Callback> _callbacks;

        public Signal()
        {
            _callbacks = new List<Callback>();
        }

        public void Dispatch(T1 p1, T2 p2)
        {
            for (var i = 0; i < _callbacks.Count; i++) _callbacks[i].Invoke(p1, p2);
        }

        // Use this for initialization
        public void Add(Callback callback)
        {
            _callbacks.Add(callback);
        }

        // Update is called once per frame
        public void Remove(Callback callback)
        {
            _callbacks.Remove(callback);
        }
    }
    
    public class Signal<T1, T2, T3>
    {
        public delegate void Callback(T1 p1, T2 p2, T3 p3);

        private readonly List<Callback> _callbacks;

        public Signal()
        {
            _callbacks = new List<Callback>();
        }

        public void Dispatch(T1 p1, T2 p2, T3 p3)
        {
            for (var i = 0; i < _callbacks.Count; i++) _callbacks[i].Invoke(p1, p2, p3);
        }

        // Use this for initialization
        public void Add(Callback callback)
        {
            _callbacks.Add(callback);
        }

        // Update is called once per frame
        public void Remove(Callback callback)
        {
            _callbacks.Remove(callback);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/AddIntoQueue.cs ---
﻿using System;
using model;
using model.data;
using utils.injection;
using UnityEngine;
using UnityEngine.EventSystems;

namespace view.behaviours.UI
{
    public class AddIntoQueue : InjectableBehaviour, IPointerClickHandler
    { 
        public GameObject UnitPrefab;
        
        [Inject]
        UnitQueueModel _queue;

        private void Start()
        {
            _queue.Register(UnitPrefab);
        }

        public void OnPointerClick(PointerEventData eventData)
        {        
            _queue.Push(UnitPrefab);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/DisplayMatchUsers.cs ---
﻿using System;
using service;
using utils.injection;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class DisplayMatchUsers : InjectableBehaviour
    {
        [Inject]
        private MultiplayerService _multiplayer;

        public GameObject NoMatch;
        public GameObject MatchInfo;

        public Text[] UserNameLabels;

        void OnEnable()
        {
            _multiplayer.UsersUpdated.Add(UpdateViews);
            UpdateViews();
        }

        private void UpdateViews()
        {
            MatchInfo.SetActive(false);
            NoMatch.SetActive(true);

            if (_multiplayer.Users.Count < 2)
            {
                MatchInfo.SetActive(false);
                NoMatch.SetActive(true);
            }
            else
            {
                MatchInfo.SetActive(true);
                NoMatch.SetActive(false);

                var userData = _multiplayer.Users;
                bool allReady = true;
                for (var i = 0; i < Math.Min(UserNameLabels.Length, userData.Count); i++)
                {
                    UserNameLabels[i].text = (userData[i].DisplayName ?? userData[i].Username).Split('.')[0].ToUpper();
                    var isReady = _multiplayer.IsReady(userData[i].Id);
                    UserNameLabels[i].color = isReady ? Color.green : Color.white;
                    
                    allReady &= isReady;
                }

                if (allReady)
                    SceneManager.LoadScene("Hive");
            }
        }

        private void OnDisable()
        {
            _multiplayer.UsersUpdated.Remove(UpdateViews);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/DisplayQueue.cs ---
﻿using System;
using model;
using UnityEngine;
using utils.injection;

namespace view.behaviours.UI
{
    public class DisplayQueue : InjectableBehaviour
    {
        [Inject] private UnitQueueModel _queue;

        public Transform container;

        public Transform random;

        private void Start()
        {
            Refresh();
            _queue.Updated.Add(Refresh);
        }

        private void Refresh()
        {
            foreach (Transform child in container)
                if (child != random)
                    Destroy(child.gameObject);

            foreach (var obj in _queue.Get())
            {
                var icon = (GameObject) Instantiate(Resources.Load($"Prefabs/UI/{obj.name}Icon"), container);
                icon.transform.localScale = Vector3.one / 2;
            }

            random.SetSiblingIndex(container.childCount - 1);
        }

        private void OnDestroy()
        {
            _queue.Updated.Remove(Refresh);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/DisplayUserName.cs ---
﻿using service;
using UnityEngine.UI;
using utils.injection;

namespace view.behaviours.UI
{
    public class DisplayUserName : InjectableBehaviour
    {
        [Inject]
        MultiplayerService _multiplayer;
        
        [Inject]
        WalletService _wallet;
    
        void OnEnable()
        {
            if (_multiplayer.UserName == null)
                _multiplayer.SetUserName(_wallet.WalletId);
            
            _multiplayer?.UserUpdated?.Add(OnUserUpdated);
            OnUserUpdated();
        }

        private void OnUserUpdated()
        {
            GetComponent<Text>().text = (_multiplayer.UserName ?? _wallet.WalletId).ToUpper();
        }

        private void OnDisable()
        { 
            _multiplayer?.UserUpdated?.Remove(OnUserUpdated);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/FocusOn.cs ---
﻿using UnityEngine;
using utils.signal;

namespace view.behaviours.UI
{
    public class FocusOn : MonoBehaviour
    {
        public static readonly Signal<GameObject> NeedsFocus = new Signal<GameObject>();

        private void Start()
        {
            NeedsFocus.Add(FocusOnTarget);
        }

        private void FocusOnTarget(GameObject target)
        {
            transform.position = target.transform.position.normalized * transform.position.magnitude;
            transform.LookAt(Vector3.zero);
        }

        private void OnDestroy()
        {
            NeedsFocus.Remove(FocusOnTarget);
        }
    }
}

'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/HoverHandler.cs ---
﻿using System;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class HoverHandler : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler
    {
        public RectTransform[] ObjectsToRotate;
        public Text Label;

        private float _targetRotation = 0;
        private float _currentRotation = 0;

        public void OnPointerEnter(PointerEventData pointerEventData)
        {
            _targetRotation = -60f;
            if (Label != null)
                Label.color = Color.green;
        }

        //Detect when Cursor leaves the GameObject
        public void OnPointerExit(PointerEventData pointerEventData)
        {
            _targetRotation = 0f;
            if (Label != null)
                Label.color = Color.white;
        }

        private void Update()
        {
            if (Math.Abs(_currentRotation - _targetRotation) < 0.0001f)
                return;

            _currentRotation += (_targetRotation - _currentRotation) * Time.deltaTime * 10;

            foreach (var obj in ObjectsToRotate)
                obj.rotation = Quaternion.Euler(0f, 0f, _currentRotation);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/IncTime.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class IncTime : MonoBehaviour
    {
        public Text Text;
        private float _enabledAt;

        // Start is called before the first frame update
        void OnEnable()
        {
            _enabledAt = Time.realtimeSinceStartup;
        }

        // Update is called once per frame
        void Update()
        {
            var timeSinceEnabled = Time.realtimeSinceStartup - _enabledAt;
            var ms = $"{(int) (1000 * (timeSinceEnabled - (int) timeSinceEnabled))}".PadRight(3, '0');

            var m = (int) timeSinceEnabled / 60;
            var s = (int) timeSinceEnabled % 60;
            Text.text = m > 0 ? $"{m}:{s}:{ms}" : $"{s}:{ms}";
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/JoinMatch.cs ---
﻿using service;
using utils.injection;

namespace view.behaviours.UI
{
    public class JoinMatch : InjectableBehaviour
    {
        [Inject]
        private MultiplayerService _multiplayer;

        public async void OnClick()
        {
            await _multiplayer.Ready();
        }

    }
}

'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/MoveUpAndFade.cs ---
﻿using UnityEngine;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class MoveUpAndFade : MonoBehaviour
    {
        public float Duration = 1;
        public Vector3 Offset = Vector3.up * 50; //px!

        private Text _text;
        private Vector3 _pos;
        private float _timePassed;

        private void Start()
        {
            _text = GetComponent<Text>();
        }

        public void Anchor(Vector3 value)
        {
            _pos = value;
        }
        
        void Update()
        {
            if (_text == null)
                return;
            
            if (_timePassed > Duration){
                Destroy(gameObject);
                return;
            }

            var pos = transform.position;
            if (_pos != default(Vector3))
                pos = Camera.main.WorldToScreenPoint(_pos);
            transform.position = pos + Offset * (_timePassed / Duration);

            var color = _text.color;
            _text.color = new Color(color.r, color.g, color.b, Duration - (_timePassed / Duration));

            _timePassed += Time.deltaTime;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/SelectTier.cs ---
﻿using model;
using UnityEngine.SceneManagement;
using utils.injection;

namespace view.behaviours.UI
{
    public class SelectTier : InjectableBehaviour
    {
        [Inject] private SelectedTierModel _tier;

        public void Select(int value)
        {
            _tier.value = value;
            SceneManager.LoadScene("Lobby");
        }
    }
}

'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/SetUserName.cs ---
﻿using service;
using UnityEngine.UI;
using utils.injection;

namespace view.behaviours.UI
{
    public class SetUserName : InjectableBehaviour
    {
        public Text Source;

        [Inject]
        private MultiplayerService _multiplayer;
    
    
        public void Apply()
        {
            _multiplayer.SetUserName(Source.text);
        }

    }
}

'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/ShowProgressBar.cs ---
﻿using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace view.behaviours.UI
{
    public class ShowProgressBar : InjectableBehaviour
    {
        public GameObject Prefab;

        GameObject _canvas;

        [Inject]
        ActionProgressModel _progress;

        GameObject _progressBar;

        void Start()
        {
            _canvas = GameObject.Find("ProgressBarLayer"); //todo OMG
        }

        // Update is called once per frame
        void Update()
        {
            var progress = _progress.Get(gameObject.GetInstanceID());

            if (progress != null && progress.Faction == Faction.Player && progress.Progress < progress.MaxProgress &&
                _progressBar == null)
            {
                CreateProgressBar();
            }
            else if (_progressBar != null && (progress == null || progress.Progress >= progress.MaxProgress))
            {
                DestroyProgressBar();
            }
            else if (progress != null && _progressBar != null)
            {
                UpdateProgressBar(progress);
            }
        }

        private void CreateProgressBar()
        {
            _progressBar = Instantiate(Prefab, _canvas.transform);
            UpdateProgressBar();
        }

        private void UpdateProgressBar(ActionProgress value = null)
        {
            var cameraPlane = new Plane(Camera.main.transform.position, Camera.main.transform.position.normalized * 5);
            _progressBar.SetActive(cameraPlane.GetSide(transform.position));
            if (!_progressBar.activeSelf) return;

            _progressBar.transform.position = Camera.main.WorldToScreenPoint(transform.position);

            if (value == null)
                return;

            var fill = _progressBar.transform.GetChild(1);
            fill.localScale = new Vector3(value.Progress / value.MaxProgress, 1, 1);
        }

        private void DestroyProgressBar()
        {
            Destroy(_progressBar);
        }

        void OnDestroy()
        {
            if (_progressBar != null)
            {
                DestroyProgressBar();
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/ShowResourceCollected.cs ---
﻿using model;
using utils.injection;
using UnityEngine;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class ShowResourceCollected : InjectableBehaviour
    {
        [Inject]
        ResourceModel _resources;

        [Inject]
        FactionModel _factionModel;

        public GameObject TextPrefab;

        private static ShowResourceCollected _ref;
        protected override void Awake()
        {
            base.Awake();
            _ref = this;
        }

        public static void ShowCollectionEffect(int value, Vector3 position)//oh no, static TODO
        {
            //ignore if on the other side of the hive
            
            var cameraPlane = new Plane(Camera.main.transform.position, 0);
            if (!cameraPlane.GetSide(position))
                return;
            
            var text = Instantiate(_ref.TextPrefab, position, Quaternion.identity, _ref.transform);
            text.GetComponent<MoveUpAndFade>().Anchor(position);
            text.GetComponent<Text>().text = "+" + value;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/ShowUnitCount.cs ---
﻿using model;
using model.data;
using utils.injection;
using UnityEngine;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class ShowUnitCount : InjectableBehaviour
    {
        public GameObject UnitPrefab;
        
        [Inject]
        UnitRegisterModel _unitRegister;
        
        [Inject]
        FactionModel _faction;

        private Text _text;

        void OnEnable()
        {
            _unitRegister.Updated.Add(UpdateValue);
            UpdateValue(Faction.Player, UnitPrefab.name);
        }

        void UpdateValue(Faction faction, string type)
        {
            if (faction != Faction.Player)
                return;
            
            if (UnitPrefab.name != type)
                return;
            
            if (_text == null)
                _text = GetComponent<Text>();
            
            _text.text = _unitRegister.Get(Faction.Player, UnitPrefab.name).ToString();
        }

        void OnDisable()
        {
            _unitRegister.Updated.Remove(UpdateValue);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/ShowUnitQueue.cs ---
﻿using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace view.behaviours.UI
{
    public class ShowUnitQueue : InjectableBehaviour
    {
        [Inject]
        UnitQueueModel _queue;

        void OnEnable()
        {
            _queue.Updated.Add(UpdateValue);
        }

        void UpdateValue()
        {
            
        }

        void OnDisable()
        {
            _queue.Updated.Remove(UpdateValue);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/balance/ConfirmDeposit.cs ---
﻿using System.Runtime.InteropServices;
using UnityEngine.UI;
using utils.injection;

namespace view.behaviours.UI.nft
{
    public class ConfirmDeposit : InjectableBehaviour
    {
        public Text text;
        
        [DllImport("__Internal")]
        private static extern void Deposit(int value);
        
        public void DepositConfirmed()
        {
            Deposit(int.Parse(text.text));
            
            text.text = "";
        }
        
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/balance/ConfirmWithdrawal.cs ---
﻿using Hexart_UI.Scripts;
using service;
using UnityEngine;
using UnityEngine.UI;
using utils.injection;

namespace view.behaviours.UI.nft
{
    public class ConfirmWithdrawal : InjectableBehaviour
    {
        [Inject] private WalletService _wallet;
        
        public Button button;
        public Text text;
        
        private bool _rotating;
        private float _currentRotation = 0;

        public async void WithdrawConfirmed()
        {
            button.interactable = false;
            button.GetComponent<UIElementSound>().enabled = false;
//            GetComponent<HoverHandler>().enabled = false;
            _rotating = true;

            await _wallet.Withdraw(int.Parse(text.text));
            text.text = "";

            button.interactable = true;
            button.GetComponent<UIElementSound>().enabled = true;
       //     GetComponent<HoverHandler>().enabled = true;
            _rotating = false;
        }

        private void Update()
        {
            if (!_rotating)
                return;

            _currentRotation -= 360f * Time.deltaTime;

            button.transform.rotation = Quaternion.Euler(0f, 0f, _currentRotation);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/game/ShowRemainingResource.cs ---
﻿using System;
using model;
using model.data;
using utils.injection;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class ShowRemainingResource : InjectableBehaviour
    {
        [Inject]
        ResourceModel _resources;

        private Text _text;

        void OnEnable()
        {
            UpdateValue(Faction.Neutral);
            _resources.Updated.Add(UpdateValue);
        }

        private void Update()
        {
            UpdateValue(Faction.Player);
        }

        void UpdateValue(Faction faction)
        {
            if (_text == null)
                _text = GetComponent<Text>();

            _text.text = ((int) _resources.remaining).ToString();
        }

        void OnDisable()
        {
            _resources.Updated.Remove(UpdateValue);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/game/ShowResource.cs ---
﻿using System;
using model;
using model.data;
using UnityEngine;
using utils.injection;
using UnityEngine.UI;

namespace view.behaviours.UI
{
    public class ShowResource : InjectableBehaviour
    {
        [Inject]
        ResourceModel _resources;

        [Inject]
        FactionModel _factionModel;

        public Faction Faction;
        public RectTransform Bar;
        public float MaxScale = 42f;
        
        public Text text;

        void OnEnable()
        {
            _resources.Updated.Add(UpdateValue);
            UpdateValue(Faction);
        }

        void UpdateValue(Faction updatedFaction)
        {
            if (updatedFaction != Faction)
                return;

            if (text == null)
                text = GetComponent<Text>();

            text.text = ((int) _resources.Get(Faction)).ToString();
            
            var scale = (float)Math.Max(0.5f, MaxScale * _resources.Get(Faction) / _resources.total);
            Bar.sizeDelta = new Vector2(scale , Bar.sizeDelta.y);
        }

        void OnDisable()
        {
            _resources.Updated.Remove(UpdateValue);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/nft/AddNFT.cs ---
﻿using api;
using Hexart_UI.Scripts;
using service;
using UnityEngine;
using UnityEngine.UI;
using utils.injection;

namespace view.behaviours.UI.nft
{
    public class AddNFT : InjectableBehaviour
    {
        [Inject] private NFTApi _nft;
        [Inject] private WalletService _wallet;
        
        private bool _rotating;
        private float _currentRotation = 0;
        private Button _button;

        private void Start()
        {
            _button = GetComponentInChildren<Button>();
        }

        public async void AddNewNFT()
        {
            _button.interactable = false;
            _button.GetComponent<UIElementSound>().enabled = false;
            GetComponent<HoverHandler>().enabled = false;
            _rotating = true;

            await _nft.AddNFT(_wallet.WalletId);

            _button.interactable = true;
            _button.GetComponent<UIElementSound>().enabled = true;
            GetComponent<HoverHandler>().enabled = true;
            _rotating = false;
        }

        private void Update()
        {
            if (!_rotating)
                return;

            _currentRotation -= 360f * Time.deltaTime;

            _button.transform.rotation = Quaternion.Euler(0f, 0f, _currentRotation);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/nft/DisplayNFT.cs ---
using System.Collections;
using api;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

namespace view.behaviours.UI.nft
{
    public class DisplayNFT : MonoBehaviour
    {
        public Text title;
        public RawImage image;
        
        private NFT _data;
        public NFT Data => _data;

        public void SetData(NFT value)
        {
            _data = value;
            
            if (title != null)
                title.text = value.Title;
            
            StopAllCoroutines();
            StartCoroutine(GetTexture(value.Media));
        }

        IEnumerator GetTexture(string url)
        {
            if (url == null)
            {
                image.enabled = false;
                yield break;
            }
            
            var request = UnityWebRequestTexture.GetTexture(url);
            yield return request.SendWebRequest();

            if (request.responseCode != 200)
            {
                Debug.Log(request.error);
                image.enabled = false;
            }
            else
            {
                image.texture = ((DownloadHandlerTexture) request.downloadHandler).texture;
                image.enabled = true;
            }
            
        }

        public string GetTokenId()
        {
            return _data.Id;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/nft/DisplayOwnedNFT.cs ---
﻿using System.Linq;
using api;
using service;
using UnityEngine;
using utils.injection;

namespace view.behaviours.UI.nft
{
    public class DisplayOwnedNFT : InjectableBehaviour
    {
        public Transform container;
        public DisplayNFT nftRenderer;

        [Inject] private NFTApi _nft;
        [Inject] private NFTSelectionService _selection;
        [Inject] private WalletService _wallet;

        public Transform addBtn;

        private void Start()
        {
            _nft.updated.Add(Redraw);
            Redraw();
        }

        private async void Redraw()
        {
            var owned = await _nft.GetNFTs(_wallet.WalletId);
        
            foreach (Transform child in container)
                if (child.GetComponent<DisplayNFT>() != null)
                    Destroy(child.gameObject);
            
            var selection = await _selection.GetSelection();

            foreach (var nft in owned)
            {
                var newRenderer = Instantiate(nftRenderer.gameObject, container);
                newRenderer.GetComponent<DisplayNFT>()?.SetData(nft);
                newRenderer.GetComponent<SelectHandler>()?.SetSelected(selection.ToList().Contains(nft.Id));
            }
        
            addBtn.SetSiblingIndex(container.childCount-1);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/nft/DisplaySelectedNFT.cs ---
﻿using System;
using System.Linq;
using api;
using service;
using UnityEngine;
using utils.injection;

namespace view.behaviours.UI.nft
{
    public class DisplaySelectedNFT : InjectableBehaviour
    {
        public Transform container;
        public DisplayNFT nftRenderer;

        [Inject] private NFTApi _nft;
        [Inject] private NFTSelectionService _selectionService;
        [Inject] private WalletService _wallet;

        private void Start()
        {
            Redraw();
            _selectionService.Updated.Add(Redraw);
        }

        private async void Redraw()
        {
            var selection = await _selectionService.GetSelection();

            if (container == null)
                return;
            
            foreach (Transform child in container)
                Destroy(child.gameObject);

            var owned = await _nft.GetNFTs(_wallet.WalletId);
        
            foreach (var nft in selection)
            {
                var newNftRenderer = Instantiate(nftRenderer.gameObject, container);
                newNftRenderer.GetComponent<DisplayNFT>().SetData(owned.FirstOrDefault(e => e.Id == nft));
            }
        }

        private void OnDestroy()
        {
            _selectionService.Updated.Remove(Redraw);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/UI/nft/SetSelectedNFT.cs ---
﻿using service;
using utils.injection;

namespace view.behaviours.UI.nft
{
    public class SetSelectedNFT : InjectableBehaviour
    {
        [Inject] 
        private NFTSelectionService _selectedNFTs;

        public void Apply()
        {
            _selectedNFTs.Apply();
        }
        
        public void Cancel()
        {
            _selectedNFTs.Reset();
        }

    }
}

'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/cell/ApplyFactionColor.cs ---
﻿using System.Collections.Generic;
using System.Linq;
using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace view.behaviours.cell
{
    public class ApplyFactionColor : InjectableBehaviour
    {
        [Inject]
        FactionModel _faction;
        
        [Inject]
        TargetModel _target;

        public static Dictionary<Faction, Color> FactionColors => new Dictionary<Faction, Color>
        {
            {Faction.Player, new Color(1f, 0.7f, 0.1f)},
            {Faction.Enemy, Color.white},
            {Faction.Neutral, Color.black}
        };

        public Renderer Renderer;
        public TrailRenderer Trail;
        public Light Light;

        private Material _material;
        private SpriteRenderer _sprite;

        void Start()
        {
            if (_material == null && Renderer is MeshRenderer)
                _material = ((MeshRenderer) Renderer).material;

            if (_sprite == null && Renderer is SpriteRenderer)
                _sprite = (SpriteRenderer) Renderer;
        
            OnFactionUpdated(gameObject.GetInstanceID());
        }

        void OnEnable()
        {
            _faction.Updated.Add(OnFactionUpdated);
            _target.Updated.Add(OnTargetUpdated);
        }

        void OnFactionUpdated(int id)
        {
            if (id != gameObject.GetInstanceID())
                return;
            
            UpdateColor();
        }
        
        void OnTargetUpdated(int id)
        {
            if (id != gameObject.GetInstanceID())
                return;
            
            UpdateColor();
        }

        private void UpdateColor()
        {
            var instanceID = gameObject.GetInstanceID();
            var target = _target.GetTarget(instanceID);
            var shouldBeSeen = _faction.Get(instanceID) == Faction.Player ||
                               target != null && _faction.Get(target.GetInstanceID()) == Faction.Player;

            var factionColor = FactionColors[_faction.Get(instanceID)];

            if (_material != null)
                _material.SetColor("_Color", factionColor);

            if (_sprite != null)
                _sprite.color = factionColor;

            if (Trail != null)
            {
                Trail.enabled = shouldBeSeen;
                var prevGradient = Trail.colorGradient;
                var gradient = new Gradient();
                gradient.SetKeys(
                    prevGradient.colorKeys.Select(e => new GradientColorKey(factionColor, e.time)).ToArray(),
                    prevGradient.alphaKeys);

                Trail.colorGradient = gradient;
            }

            if (Light != null)
            {
                Light.gameObject.SetActive(shouldBeSeen);
//                Light.color = factionColor;
            }
        }

        void OnDisable()
        {
            _faction.Updated.Remove(OnFactionUpdated);
            _target.Updated.Remove(OnTargetUpdated);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/cell/ApplySelectionEffect.cs ---
﻿using System.Collections;
using model;
using model.data;
using utils.injection;
using UnityEngine;

namespace view.behaviours.cell
{
    public class ApplySelectionEffect : InjectableBehaviour
    {
        [Inject]
        SelectionModel _selection;

        public Renderer Renderer;
        private Material _material;
        private Color _selectionColor;

        IEnumerator Start()
        {
            yield return new WaitForEndOfFrame();
            
            if (_material == null && Renderer is MeshRenderer)
                _material = ((MeshRenderer) Renderer).material;

            UpdateValue(Faction.Player, gameObject.GetInstanceID());
        }

        void OnEnable()
        {
            _selection.Updated.Add(UpdateValue);
        }

        int CompareColors(Color c1, Color c2)
        {
            if (c1.r <= c2.r && c1.g <= c2.g && c1.b <= c2.b)
                return -1;

            if (c1.r >= c2.r && c1.g >= c2.g && c1.b >= c2.b)
                return 1;

            return 0;
        }

        void Update()
        {
            if (_material == null) return;
            if (_selectionColor == Color.black) return;

            var currentColor = _material.GetColor("_EmissionColor");

            if (currentColor.r <= 0 && currentColor.g <= 0 && currentColor.b <= 0){
                _material.SetColor("_EmissionColor", _selectionColor);
                return;
            }

            var newColor = currentColor - Time.deltaTime * _selectionColor * 2;
            _material.SetColor("_EmissionColor", newColor);
        }

        void UpdateValue(Faction faction, int id)
        {
            if (faction != Faction.Player)
                return;
                
            if (id != gameObject.GetInstanceID())
                return;

            if (_material == null) return;
            
            _selectionColor = _selection.IsSelected(Faction.Player, id)
                ? ApplyFactionColor.FactionColors[Faction.Player] / 20
                : Color.black;
                
            _material.SetColor("_EmissionColor", _selectionColor);
        }

        void OnDisable()
        {
            _selection.Updated.Remove(UpdateValue);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/cell/GenerateMesh.cs ---
﻿using System.Collections.Generic;
using UnityEngine;

namespace view.behaviours.cell
{
#if UNITY_EDITOR
    public class GenerateMesh : MonoBehaviour, IGenerateMesh
    {
        List<Vector3> _vertices;
        List<Vector3> _normals;
        List<int> _tris;
        List<Vector2> _uvs;
        
        // Use this for initialization
        public void SetVertices(List<Vector3> worldVertices)
        {
            var filter = GetComponent<MeshFilter>();
            var mesh = new Mesh();
            filter.mesh = mesh;
            
            _vertices = new List<Vector3>();
            _normals = new List<Vector3>();
            _tris = new List<int>();
            _uvs = new List<Vector2>();

            var center = Vector3.zero;
            foreach (var vertex in worldVertices) center += vertex;
            center /= worldVertices.Count;

            var rotation = Quaternion.FromToRotation(center, Vector3.up);

            transform.position = center;
            transform.rotation = Quaternion.Inverse(rotation);

            var thickness = 0.95f;
            for (var i = 0; i < worldVertices.Count; i++)
            {
                var v1 = rotation * (worldVertices[i] - center);
                var v2 = rotation * (worldVertices[(i + 1) % worldVertices.Count] - center);

                WriteFace(new List<Vector3>
                {
                    v1, 
                    v2, 
                    v2 * thickness, 
                    v1 * thickness
                }, new Vector2(thickness, thickness));

                WriteFace(new List<Vector3>
                {
                    v1 * thickness,
                    v2 * thickness,
                    v2 * 0.65f + Vector3.down * 2f,
                    v1 * 0.65f + Vector3.down * 2f
                }, new Vector2(0.5f, 0));

                WriteFace(new List<Vector3>
                {
                    v2, 
                    v1, 
                    v1* 0.75f + Vector3.down * 2f, 
                    v2* 0.75f + Vector3.down * 2f
                }, new Vector2(1f, 0));
            }
            
            WriteFace(new List<Vector3>
            {
                rotation * (worldVertices[0] - center) * 0.65f + Vector3.down * 2f,
                rotation * (worldVertices[1] - center) * 0.65f + Vector3.down * 2f,
                rotation * (worldVertices[2] - center) * 0.65f + Vector3.down * 2f,
                rotation * (worldVertices[3] - center) * 0.65f + Vector3.down * 2f
            }, new Vector2(0, 0), -center);
            
            
            WriteFace(new List<Vector3>
            {
                rotation * (worldVertices[worldVertices.Count-3] - center) * 0.65f + Vector3.down * 2f,
                rotation * (worldVertices[worldVertices.Count-2] - center) * 0.65f + Vector3.down * 2f,
                rotation * (worldVertices[worldVertices.Count-1] - center) * 0.65f + Vector3.down * 2f,
                rotation * (worldVertices[0] - center) * 0.65f + Vector3.down * 2f
            }, new Vector2(0, 0), -center);

            mesh.vertices = _vertices.ToArray();
            mesh.normals = _normals.ToArray();
            mesh.triangles = _tris.ToArray();
            mesh.SetUVs(0, _uvs);
            GetComponent<MeshCollider>().sharedMesh = mesh;
        }

        void WriteFace(IReadOnlyList<Vector3> face, Vector2 gradientRange, Vector3 normOverride = default(Vector3))
        {
            var norm = -Vector3.Cross(face[0] - face[2], face[0] - face[1]);

            if (normOverride != default(Vector3))
                norm = normOverride;

            var first = _vertices.Count;
            _vertices.AddRange(face);

            for (var i = 0; i < face.Count; i++)
                _normals.Add(norm);

            for (var i = 1; i < face.Count - 1; i++)
            {
                _tris.AddRange(new[] {first, first + i, first + i + 1});
            }

            _uvs.AddRange(new List<Vector2>
            {
                new Vector2(0, gradientRange.x),
                new Vector2(1, gradientRange.x),
                new Vector2(1, gradientRange.y),
                new Vector2(0, gradientRange.y)
            });
        }
    }

    public interface IGenerateMesh
    {
        void SetVertices(List<Vector3> worldVertices);
    }
#endif
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/cell/InitialFaction.cs ---
﻿using model;
using model.data;
using utils.injection;

namespace view.behaviours.cell
{
    public class InitialFaction : InjectableBehaviour
    {
        [Inject]
        FactionModel _faction;

        public Faction Value = Faction.Neutral;

        void Start()
        {
            _faction.Set(gameObject.GetInstanceID(), Value, false);
            Destroy (this);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/cell/SpawnPoint.cs ---
﻿using System.Collections;
using System.Linq;
using model;
using model.data;
using service;
using utils.injection;
using UnityEngine;
using view.behaviours.UI;

namespace view.behaviours.cell
{
    public class SpawnPoint : InjectableBehaviour
    {
        public GameObject[] StartUnits;

        [Inject]
        private MultiplayerService _multiplayer;
    
        [Inject]
        private FactionModel _faction;

        public int Id;

        protected override void Awake()
        {
            base.Awake();
            GetComponent<SpriteRenderer>().enabled = false; //hide in runtime
        }

        private IEnumerator Start()
        {
            if (_multiplayer.GetPlayerIndex() == Id)
            {
                StartUnits.ToList().ForEach(u =>
                {
                    _multiplayer.Create(Instantiate(u, transform.position, Quaternion.identity, transform.parent.parent));
                });
            
                yield return new WaitForFixedUpdate();
                
                _multiplayer.AssignFaction(transform.parent.gameObject.GetInstanceID());
                _faction.Set(transform.parent.gameObject.GetInstanceID(), Faction.Player);
                
                
                yield return new WaitForFixedUpdate();
                FocusOn.NeedsFocus.Dispatch(gameObject);
            }

            Destroy(gameObject);
        }
    }
}

'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/unit/Age.cs ---
﻿using System;
using model;
using model.data;
using service;
using utils.injection;
using UnityEngine;

namespace view.behaviours.unit
{
    public class Age : InjectableBehaviour
    {
        [Inject] UnitRegisterModel _register;

        [Inject] FactionModel _faction;

        [Inject] private MultiplayerService _multiplayer;

        public float Lifetime = 100f;

        private float _accumulated;
        private string _type;

        private void Start()
        {
            _type = name.Split(' ')[0].Split('(')[0];
        }

        private void Update()
        {
            var faction = _faction.Get(gameObject.GetInstanceID());
            
            if (faction == Faction.Enemy)
                return; //todo generalise enemy synchro-actions being not simulated

            if (_register.Get(faction, _type) < 2)
                return;
            
            if (Lifetime < 0)
            {
                Destroy(gameObject);
                _multiplayer.Destroy(gameObject);
                return;
            }
            
            Lifetime -= Time.deltaTime;//todo NFT?
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/unit/ApplyHealth.cs ---
﻿using model;
using model.data;
using service;
using UnityEngine;
using utils.injection;

namespace view.behaviours.unit
{
    public class ApplyHealth : InjectableBehaviour
    {
        [Inject]
        private HealthModel _health;
    
        [Inject]
        private FactionModel _faction;
        
        [Inject]
        private MultiplayerService _multiplayer;

        // Update is called once per frame
        void Update()
        {
            var health = _health.Get(gameObject.GetInstanceID());
            if (health <= 0 && _faction.Get(gameObject.GetInstanceID()) != Faction.Enemy)//todo generalise enemy symchro-actions being not simulated)
            {
                Die();
            }
            else
            {
                var tail = GetComponent<TrailRenderer>();
                if (tail != null)
                {
                    tail.time = health * 0.5f;
                }
            }
        }

        private async void Die()
        {
            Destroy(gameObject); 
            await _multiplayer.Destroy(gameObject);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/unit/MoveToTarget.cs ---
﻿using System;
using System.Collections;
using model;
using utils.injection;
using UnityEngine;
using Random = UnityEngine.Random;

namespace view.behaviours.unit
{
    public class MoveToTarget : InjectableBehaviour
    {
        [Inject]
        MoveParamsModel _moveParams;

        [Inject]
        TargetModel _target;

        Transform _targetTransform;
        Vector3 _fallbackPos;

        int _sign = 1;
        float _angle;

        protected void Start()
        {
            _target.Updated.Add(OnTargetUpdated);
            StartCoroutine(Variate());

            _fallbackPos = transform.position;
        }

        void OnTargetUpdated(int id)
        {
            if (gameObject.GetInstanceID() != id)
            {
                return;
            }

            var target = _target.GetTarget(gameObject.GetInstanceID());
            if (target != null)
            {
                _targetTransform = target.transform;
                _fallbackPos = _targetTransform.position;
            }
            else
            {
                _targetTransform = null;
            }
        }

        void Update()
        {
            if (_moveParams.Velocity <= 0)
                return;

            //rotate
            var targetTransformPosition = _fallbackPos;
            if (_targetTransform != null)
                targetTransformPosition = _targetTransform.position.normalized * 11f;

            var deltaPos = targetTransformPosition - transform.position;
            var targetProjection = Vector3.ProjectOnPlane(deltaPos, transform.position);

            var inertia = Random.Range(_moveParams.Inertia.RangeStart, _moveParams.Inertia.RangeEnd);

            var currentAngle = Vector3.SignedAngle(
                Vector3.ProjectOnPlane(Vector3.up,
                    transform.position), //after LookAt transform.up is set to Vector.up
                transform.up, transform.forward);

            var deltaAngle = 0f;

            switch (_moveParams.Type)
            {
                case MovementType.Wander:

                    //move
                    transform.Translate(transform.up.normalized * Time.deltaTime * _moveParams.Velocity, Space.World);

                    deltaAngle = Vector3.Angle(transform.up, targetProjection) * Time.deltaTime * _sign * 60 / inertia;
                    break;
                case MovementType.Direct:

                    //move
                    transform.Translate(transform.up.normalized * Time.deltaTime * _moveParams.Velocity, Space.World);

                    deltaAngle = Vector3.SignedAngle(transform.up, targetProjection, transform.forward);

                    if (deltaPos.magnitude > 2f) //todo magic numbers, apply to WANDER too.
                        deltaAngle /= inertia;
                    break;
                case MovementType.Harvest:

                    var targetOffset = -deltaPos;

                    if (Math.Abs(_harvestAngleProgress) < 1)
                    {
                        _harvestAngle = _harvestAngleProgress = Random.Range(60, 180) * _sign;
                    }

                    targetOffset = targetOffset.normalized * Mathf.Lerp(
                                       _moveParams.Inertia.RangeStart,
                                       _moveParams.Inertia.RangeEnd,
                                       (float) Math.Sin((_harvestAngle - _harvestAngleProgress) * Math.PI /
                                                        _harvestAngle));

                    var harvestAngleDelta = _harvestAngleProgress * Time.deltaTime * _moveParams.Velocity;
                    _harvestAngleProgress -= harvestAngleDelta;
                    targetOffset = Quaternion.AngleAxis(harvestAngleDelta, targetTransformPosition) * targetOffset;
                    //4. apply to position (target + delta)
                    transform.position = targetTransformPosition + targetOffset;

                    deltaAngle = Vector3.SignedAngle(transform.up, targetProjection, transform.forward);

                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            transform.position = transform.position.normalized * 11f; //put back on the orbit
            transform.LookAt(Vector3.zero);
            transform.Rotate(Vector3.forward, currentAngle + deltaAngle);
        }

        private float _harvestAngle = 25;
        private float _harvestAngleProgress = 5;

        private IEnumerator Variate()
        {
            while (true)
            {
                yield return new WaitForSeconds(Random.Range(5, 15) / 10f);
                _sign *= -1;
            }
        }

        void OnDestroy()
        {
            _target.Updated.Remove(OnTargetUpdated);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/unit/RegisterUnitType.cs ---
﻿using System.Collections;
using model;
using utils.injection;
using UnityEngine;

namespace view.behaviours.unit
{
    public class RegisterUnitType : InjectableBehaviour
    {
        [Inject]
        UnitRegisterModel _units;
        
        [Inject]
        FactionModel _faction;

        private string _prefabName;

        private IEnumerator Start()
        {
            yield return new WaitForEndOfFrame();
            
            _prefabName = name.Split(' ')[0].Split('(')[0];
            _units.Add(_faction.Get(gameObject.GetInstanceID()), _prefabName);
        }

        private void OnDestroy()
        {
            if (_prefabName != null)
            {
                _units.Remove(_faction.Get(gameObject.GetInstanceID()), _prefabName);
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/unit/SetInitialHealth.cs ---
﻿using model;
using utils.injection;

namespace view.behaviours.unit
{
    public class SetInitialHealth : InjectableBehaviour
    {
        [Inject]
        HealthModel _health;

        public int Value;

        private void Start()
        {
            _health.Set(gameObject.GetInstanceID(), Value);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/behaviours/unit/ShowTarget.cs ---
﻿using model;
using UnityEngine;
using utils.injection;
using view.behaviours.cell;

namespace view.behaviours.unit
{
    public class ShowTarget : InjectableBehaviour
    {
        [Inject]
        TargetModel _target;

        [Inject]
        FactionModel _faction;

        Transform _targetTransform;

        const float TWEEN_TIME = 1.5f;
        LineRenderer _line;
        private float _appearsFor;

        protected void Start()
        {
            _line = GetComponent<LineRenderer>();

            _target.Updated.Add(OnTargetUpdated);
        }

        void OnTargetUpdated(int id)
        {
            if (gameObject.GetInstanceID() != id)
            {
                return;
            }

            var target = _target.GetTarget(gameObject.GetInstanceID());
            if (target != null)
            {
                _appearsFor = 0;
                _targetTransform = target.transform;
            }
            else
            {
                _targetTransform = null;
            }
        }

        void Update()
        {
            if (_targetTransform == null)
            {
                _line.positionCount = 0;
                return;
            }

            _appearsFor += Time.deltaTime;
            if (_appearsFor < TWEEN_TIME)
            {
                _line.positionCount = 2;
                _line.SetPosition(0, transform.position);
                _line.SetPosition(1, _targetTransform.position);

                var color = ApplyFactionColor.FactionColors[_faction.Get(gameObject.GetInstanceID())];
                _line.startColor = new Color(color.r, color.g, color.b, (TWEEN_TIME - _appearsFor) / TWEEN_TIME);
                _line.endColor = new Color(color.r, color.g, color.b, (TWEEN_TIME - _appearsFor) / TWEEN_TIME);
            }
            else
                _line.positionCount = 0;
        }

        void OnDestroy()
        {
            _target.Updated.Remove(OnTargetUpdated);
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/input/desktop/ClickHandler.cs ---
﻿using utils.injection;
using model;
using model.data;
using UnityEngine;

namespace view.input.desktop
{
	public class ClickHandler : InjectableBehaviour 
	{
		[Inject]
		SelectionModel _selection;
		
		[Inject]
		FactionModel _faction;
		
		// Update is called once per frame
		private void Update()
		{
			if (!Application.isMobilePlatform)
			{
				if (Input.GetMouseButtonUp(0))
				{
					var ray = Camera.main.ScreenPointToRay(Input.mousePosition);
					RaycastHit hit;
					if (Physics.Raycast(ray, out hit, ray.origin.magnitude))
					{
						var hitId = hit.collider.gameObject.GetInstanceID();
						if (_faction.Get(hitId) == Faction.Neutral)
						{
							_selection.ToggleSelection(Faction.Player, hitId);
						}
					}
				}
			}
		}
	}
}

'''
'''--- bees-wax-client/Assets/Scripts/view/input/desktop/DragHandler.cs ---
﻿using utils.injection;
using model;
using UnityEngine;

namespace view.input.desktop
{
    public class DragHandler : InjectableBehaviour
    {
        [Inject]
        InputModel _input;
        
        private bool _dragging;
        private Vector2 _oldPos;

     
        private void Update()
        {
            if (!Application.isMobilePlatform)
            {
                if (Input.GetMouseButton(0))
                {
                    if (!_dragging)
                        StartDragAt(Input.mousePosition);
                    else
                        DragTo(Input.mousePosition);
                }
                else if (_dragging)
                {
                    StopDrag();
                }
            }
        }

        private void StartDragAt(Vector2 point)
        {
            _oldPos = point;
            _dragging = true;
        }

        private void DragTo(Vector2 point)
        {
            _input.DragDelta = point - _oldPos;
            _oldPos = point;
        }

        private void StopDrag()
        {
            _dragging = false;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/input/desktop/ZoomHandler.cs ---
﻿using utils.injection;
using model;
using UnityEngine;

namespace view.input.desktop
{
    public class ZoomHandler : InjectableBehaviour
    {
        [Inject]
        InputModel _input;
        
        // Update is called once per frame
        private void Update()
        {
            if (!Application.isMobilePlatform)
            {
                _input.Zoom += Input.mouseScrollDelta.y / 100;
            }
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/input/sync/ApplyInputRotation.cs ---
﻿using model;
using utils.injection;
using UnityEngine;

namespace view.input.sync
{
    public class ApplyInputRotation : InjectableBehaviour
    {
        [Inject]
        InputModel _input;
        
        private void Update()
        {
            var screenSize = Mathf.Max(Screen.height, Screen.width);
            if (_input.DragDelta == Vector2.zero)
                return;
            
            var dragDelta = _input.DragDelta/ (1 + _input.Zoom);
            transform.RotateAround(Vector3.zero, transform.up, dragDelta.x * 180 / screenSize);
            transform.RotateAround(Vector3.zero, transform.right, -dragDelta.y * 180 / screenSize);
            _input.DragDelta *= 0.8f;
            
            if (_input.DragDelta.SqrMagnitude()<0.001f)
                _input.DragDelta = Vector2.zero;
        }
    }
}
'''
'''--- bees-wax-client/Assets/Scripts/view/input/sync/ApplyInputZoom.cs ---
﻿using System;
using model;
using utils.injection;
using UnityEngine;

namespace view.input.sync
{
    [Serializable]
    public struct ZoomDescriptor
    {
        public Quaternion Rotation;
        public Vector3 Position;
    }

    public class ApplyInputZoom : InjectableBehaviour
    {
        [Inject]
        InputModel _input;
        
        public ZoomDescriptor MaxZoom;
        public ZoomDescriptor MinZoom;
        
        private void Update()
        {
            transform.localRotation = Quaternion.Lerp(MinZoom.Rotation, MaxZoom.Rotation, Mathf.Sqrt(_input.Zoom));
            transform.localPosition = MinZoom.Position * (1 - _input.Zoom) + MaxZoom.Position * Mathf.Sqrt(_input.Zoom);

            GetComponent<Camera>().farClipPlane = transform.position.magnitude;
        }
    }
}
'''
'''--- bees-wax-client/Assets/SelectHandler.cs ---
﻿using api;
using service;
using UnityEngine;
using utils.injection;
using view.behaviours.UI.nft;

public class SelectHandler : InjectableBehaviour
{
    [Inject] private NFTSelectionService _selectionService;
    
    public GameObject selectedObj;
    public GameObject deselectedObj;

    private bool _selected;

    public void SetSelected(bool value)
    {
        _selected = value;
        selectedObj.SetActive(value);
        deselectedObj.SetActive(!value);
    }

    public void OnClick()
    {
        var data = GetComponent<DisplayNFT>()?.Data ?? default(NFT);

        if (data.Id == null)
            return;

        if (_selectionService.TrySetState(data.Id, !_selected))
        {
            SetSelected(!_selected);
        }
    }
}

'''
'''--- bees-wax-client/Assets/Source.cs ---
using System.Collections;
using System.Collections.Generic;
using model;
using model.data;
using UnityEngine;
using utils.injection;

public class Source : InjectableBehaviour
{
    [Inject] ResourceModel _resources;

    public float remaining;

    void Start()
    {
        _resources.RegisterSource();
        _resources.Updated.Add(UpdateRemaining);
    }

    private void UpdateRemaining(Faction p)
    {
        remaining = _resources.total / _resources.sourceCount;
        _resources.Updated.Remove(UpdateRemaining);
    }

    public bool Reduce(float value)
    {
        remaining -= value;
        if (remaining > 0) return true;

        Destroy(gameObject);
        return false;
    }
}
'''
'''--- bees-wax-client/Assets/SwitchScene.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class SwitchScene : MonoBehaviour
{
    // Update is called once per frame
    public void DoSwitch(string value)
    {
        SceneManager.LoadScene(value);
    }
}

'''
'''--- bees-wax-client/Assets/UnityMainThreadDispatcher.cs ---
﻿/*
Copyright 2015 Pim de Witte All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using System.Threading.Tasks;

/// Author: Pim de Witte (pimdewitte.com) and contributors, https://github.com/PimDeWitte/UnityMainThreadDispatcher
/// <summary>
/// A thread-safe class which holds a queue with actions to execute on the next Update() method. It can be used to make calls to the main thread for
/// things such as UI Manipulation in Unity. It was developed for use in combination with the Firebase Unity plugin, which uses separate threads for event handling
/// </summary>
public class UnityMainThreadDispatcher : MonoBehaviour
{
    private static readonly Queue<Action> ExecutionQueue = new Queue<Action>();

    public void Update()
    {
        lock (ExecutionQueue)
        {
            while (ExecutionQueue.Count > 0)
            {
                ExecutionQueue.Dequeue().Invoke();
            }
        }
    }

    /// <summary>
    /// Locks the queue and adds the IEnumerator to the queue
    /// </summary>
    /// <param name="action">IEnumerator function that will be executed from the main thread.</param>
    public void Enqueue(IEnumerator action)
    {
        lock (ExecutionQueue)
        {
            ExecutionQueue.Enqueue(() => { StartCoroutine(action); });
        }
    }

    /// <summary>
    /// Locks the queue and adds the Action to the queue
    /// </summary>
    /// <param name="action">function that will be executed from the main thread.</param>
    public void Enqueue(Action action)
    {
        Enqueue(ActionWrapper(action));
    }

    /// <summary>
    /// Locks the queue and adds the Action to the queue, returning a Task which is completed when the action completes
    /// </summary>
    /// <param name="action">function that will be executed from the main thread.</param>
    /// <returns>A Task that can be awaited until the action completes</returns>
    public Task EnqueueAsync(Action action)
    {
        var tcs = new TaskCompletionSource<bool>();

        void WrappedAction()
        {
            try
            {
                action();
                tcs.TrySetResult(true);
            }
            catch (Exception ex)
            {
                tcs.TrySetException(ex);
            }
        }

        Enqueue(ActionWrapper(WrappedAction));
        return tcs.Task;
    }

    static IEnumerator ActionWrapper(Action a)
    {
        a();
        yield return null;
    }

    private static UnityMainThreadDispatcher _instance;

    private static bool Exists()
    {
        return _instance != null;
    }

    public static UnityMainThreadDispatcher Instance()
    {
        if (!Exists())
        {
            throw new Exception(
                "UnityMainThreadDispatcher could not find the UnityMainThreadDispatcher object. Please ensure you have added the MainThreadExecutor Prefab to your scene.");
        }

        return _instance;
    }

    void Awake()
    {
        if (_instance != null) return;
        _instance = this;
        DontDestroyOnLoad(gameObject);
    }

    void OnDestroy()
    {
        _instance = null;
    }
}
'''
'''--- bees-wax-client/Packages/manifest.json ---
{
  "dependencies": {
    "com.unity.2d.sprite": "1.0.0",
    "com.unity.2d.tilemap": "1.0.0",
    "com.unity.ads": "3.7.5",
    "com.unity.analytics": "3.7.1",
    "com.unity.ide.rider": "3.0.7",
    "com.unity.ide.visualstudio": "2.0.12",
    "com.unity.ide.vscode": "1.2.4",
    "com.unity.postprocessing": "3.2.0",
    "com.unity.purchasing": "4.1.2",
    "com.unity.test-framework": "1.1.30",
    "com.unity.timeline": "1.7.0-pre.1",
    "com.unity.ugui": "1.0.0",
    "com.unity.xr.legacyinputhelpers": "2.1.8",
    "com.unity.modules.ai": "1.0.0",
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.modules.animation": "1.0.0",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.cloth": "1.0.0",
    "com.unity.modules.director": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.imgui": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.particlesystem": "1.0.0",
    "com.unity.modules.physics": "1.0.0",
    "com.unity.modules.physics2d": "1.0.0",
    "com.unity.modules.screencapture": "1.0.0",
    "com.unity.modules.terrain": "1.0.0",
    "com.unity.modules.terrainphysics": "1.0.0",
    "com.unity.modules.tilemap": "1.0.0",
    "com.unity.modules.ui": "1.0.0",
    "com.unity.modules.uielements": "1.0.0",
    "com.unity.modules.umbra": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
    "com.unity.modules.unitywebrequestaudio": "1.0.0",
    "com.unity.modules.unitywebrequesttexture": "1.0.0",
    "com.unity.modules.unitywebrequestwww": "1.0.0",
    "com.unity.modules.vehicles": "1.0.0",
    "com.unity.modules.video": "1.0.0",
    "com.unity.modules.vr": "1.0.0",
    "com.unity.modules.wind": "1.0.0",
    "com.unity.modules.xr": "1.0.0",
    "com.unity.nuget.newtonsoft-json": "2.0.0"
  }
}

'''
'''--- bees-wax-client/Packages/packages-lock.json ---
{
  "dependencies": {
    "com.unity.2d.sprite": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.2d.tilemap": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.ads": {
      "version": "3.7.5",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.analytics": {
      "version": "3.7.1",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.services.analytics": "1.0.4",
        "com.unity.ugui": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ext.nunit": {
      "version": "1.0.6",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.rider": {
      "version": "3.0.7",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ext.nunit": "1.0.6"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.visualstudio": {
      "version": "2.0.12",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.test-framework": "1.1.9"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.vscode": {
      "version": "1.2.4",
      "depth": 0,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.nuget.newtonsoft-json": {
      "version": "2.0.0",
      "depth": 0,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.postprocessing": {
      "version": "3.2.0",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.purchasing": {
      "version": "4.1.2",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.services.analytics": {
      "version": "1.0.5",
      "depth": 1,
      "source": "registry",
      "dependencies": {
        "com.unity.services.core": "1.0.1"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.services.core": {
      "version": "1.0.1",
      "depth": 1,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.test-framework": {
      "version": "1.1.30",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ext.nunit": "1.0.6",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.timeline": {
      "version": "1.7.0-pre.1",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.director": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ugui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0"
      }
    },
    "com.unity.xr.legacyinputhelpers": {
      "version": "2.1.8",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.vr": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.modules.ai": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.androidjni": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.animation": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.assetbundle": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.audio": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.cloth": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      }
    },
    "com.unity.modules.director": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.animation": "1.0.0"
      }
    },
    "com.unity.modules.imageconversion": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.imgui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.jsonserialize": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.particlesystem": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.physics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.physics2d": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.screencapture": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.subsystems": {
      "version": "1.0.0",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.terrain": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.terrainphysics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.terrain": "1.0.0"
      }
    },
    "com.unity.modules.tilemap": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics2d": "1.0.0"
      }
    },
    "com.unity.modules.ui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.uielements": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.uielementsnative": "1.0.0"
      }
    },
    "com.unity.modules.uielementsnative": {
      "version": "1.0.0",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.umbra": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.unityanalytics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequest": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.unitywebrequestassetbundle": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequestaudio": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.audio": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequesttexture": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequestwww": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
        "com.unity.modules.unitywebrequestaudio": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.vehicles": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      }
    },
    "com.unity.modules.video": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      }
    },
    "com.unity.modules.vr": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      }
    },
    "com.unity.modules.wind": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.xr": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.subsystems": "1.0.0"
      }
    }
  }
}

'''
'''--- bees-wax-client/ProjectSettings/ProjectVersion.txt ---
m_EditorVersion: 2022.1.0b3
m_EditorVersionWithRevision: 2022.1.0b3 (169963e3b543)

'''
'''--- bees-wax-client/ProjectSettings/SceneTemplateSettings.json ---
{
    "templatePinStates": [],
    "dependencyTypeInfos": [
        {
            "userAdded": false,
            "type": "UnityEngine.AnimationClip",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Animations.AnimatorController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.AnimatorOverrideController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Audio.AudioMixerController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ComputeShader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Cubemap",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.GameObject",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.LightingDataAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.LightingSettings",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Material",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.MonoScript",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicMaterial",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicsMaterial2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessResources",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.VolumeProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.SceneAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Shader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ShaderVariantCollection",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Timeline.TimelineAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        }
    ],
    "defaultDependencyTypeInfo": {
        "userAdded": false,
        "type": "<default_scene_template_dependencies>",
        "ignore": false,
        "defaultInstantiationMode": 1,
        "supportsModification": true
    },
    "newSceneOverride": 0
}
'''
'''--- bees-wax-client/bees-wax-client.sln ---
﻿
Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp", "Assembly-CSharp.csproj", "{30d6827d-b103-e40f-9bf6-c4b76e9d6f4b}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NakamaEditor", "NakamaEditor.csproj", "{9a078dff-2dcd-bc7c-094a-86204c3df765}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NakamaRuntime", "NakamaRuntime.csproj", "{834781a2-f31e-78ee-3a26-4e7e81e053fd}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp-Editor", "Assembly-CSharp-Editor.csproj", "{7f0a20bf-cbd7-d87d-849f-4e28a35768d1}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{30d6827d-b103-e40f-9bf6-c4b76e9d6f4b}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{30d6827d-b103-e40f-9bf6-c4b76e9d6f4b}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{9a078dff-2dcd-bc7c-094a-86204c3df765}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{9a078dff-2dcd-bc7c-094a-86204c3df765}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{834781a2-f31e-78ee-3a26-4e7e81e053fd}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{834781a2-f31e-78ee-3a26-4e7e81e053fd}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7f0a20bf-cbd7-d87d-849f-4e28a35768d1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7f0a20bf-cbd7-d87d-849f-4e28a35768d1}.Debug|Any CPU.Build.0 = Debug|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal

'''
'''--- bees-wax-client/bees-wax.sln ---
﻿
Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp", "Assembly-CSharp.csproj", "{eca727df-cd19-36f0-0654-1bce4e0faf37}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NakamaEditor", "NakamaEditor.csproj", "{3f575194-bde1-0e39-bafd-edc2766c335c}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NakamaRuntime", "NakamaRuntime.csproj", "{0addbe98-baff-2da8-1081-43ceef211f84}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp-Editor", "Assembly-CSharp-Editor.csproj", "{0dd88b5a-d2bf-4ad4-58c7-76a9fed196ab}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{eca727df-cd19-36f0-0654-1bce4e0faf37}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{eca727df-cd19-36f0-0654-1bce4e0faf37}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3f575194-bde1-0e39-bafd-edc2766c335c}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3f575194-bde1-0e39-bafd-edc2766c335c}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0addbe98-baff-2da8-1081-43ceef211f84}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0addbe98-baff-2da8-1081-43ceef211f84}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0dd88b5a-d2bf-4ad4-58c7-76a9fed196ab}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0dd88b5a-d2bf-4ad4-58c7-76a9fed196ab}.Debug|Any CPU.Build.0 = Debug|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal

'''
'''--- bees-wax-escrow-service/.env ---
DB_CONN_STRING="mongodb+srv://nickbalyanitsa:giFSuQdfsyfU6nDN@cluster0.mhtwq.mongodb.net/beeswax?retryWrites=true&w=majority"
DB_NAME="beeswax"
'''
'''--- bees-wax-escrow-service/package-lock.json ---
{
  "name": "match-maker-service",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "match-maker-service",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/express": "^4.17.13",
        "axios": "^0.24.0",
        "bugsnag": "^2.4.3",
        "concurrently": "^7.0.0",
        "cors": "^2.8.5",
        "dotenv": "^16.0.0",
        "express": "^4.17.2",
        "firebase-admin": "^9.12.0",
        "mongodb": "^4.4.1",
        "near-api-js": "^0.44.2",
        "nodemon": "^2.0.15",
        "socket.io": "^4.2.0",
        "ts-node-dev": "^1.1.8"
      },
      "devDependencies": {
        "@types/node": "^16.10.3",
        "tslint": "^6.1.3",
        "typescript": "^4.4.3"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
      "dev": true,
      "dependencies": {
        "@babel/highlight": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.16.10",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.16.10.tgz",
      "integrity": "sha512-5FnTQLSLswEj6IkgVw5KusNUUFY9ZGqe/TRFnP/BKYHYgfh7tc+C7mwiy95/yNP7Dh9x580Vv8r7u7ZfTBFxdw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@firebase/app": {
      "version": "0.7.16",
      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.7.16.tgz",
      "integrity": "sha512-xToEi8f7uvadhtgNsPmuUS9eVHteMjWoa5I7i/+5TBeGgGkm1g9SROJl+8wSrcdT5Xd6OA7eUGZLxr4RQvL7Tw==",
      "peer": true,
      "dependencies": {
        "@firebase/component": "0.5.10",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/app-compat": {
      "version": "0.1.17",
      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.1.17.tgz",
      "integrity": "sha512-84AO0SAxdEaXl8fHnVnqWUufZJatCbZwwsxMtyj6UYYTPxv3VTCDusFF6nmoWgaCIs35PCBnLWAdzNxx7facCg==",
      "peer": true,
      "dependencies": {
        "@firebase/app": "0.7.16",
        "@firebase/component": "0.5.10",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/app-types": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.7.0.tgz",
      "integrity": "sha512-6fbHQwDv2jp/v6bXhBw2eSRbNBpxHcd1NBF864UksSMVIqIyri9qpJB1Mn6sGZE+bnDsSQBC5j2TbMxYsJQkQg=="
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.1.6.tgz",
      "integrity": "sha512-etIi92fW3CctsmR9e3sYM3Uqnoq861M0Id9mdOPF6PWIg38BXL5k4upCNBggGUpLIS0H1grMOvy/wn1xymwe2g==",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/component": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.5.10.tgz",
      "integrity": "sha512-mzUpg6rsBbdQJvAdu1rNWabU3O7qdd+B+/ubE1b+pTbBKfw5ySRpRRE6sKcZ/oQuwLh0HHB6FRJHcylmI7jDzA==",
      "dependencies": {
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-0.12.5.tgz",
      "integrity": "sha512-1Pd2jYqvqZI7SQWAiXbTZxmsOa29PyOaPiUtr8pkLSfLp4AeyMBegYAXCLYLW6BNhKn3zNKFkxYDxYHq4q+Ixg==",
      "dependencies": {
        "@firebase/auth-interop-types": "0.1.6",
        "@firebase/component": "0.5.10",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-0.1.5.tgz",
      "integrity": "sha512-UVxkHL24sZfsjsjs+yiKIdYdrWXHrLxSFCYNdwNXDlTkAc0CWP9AAY3feLhBVpUKk+4Cj0I4sGnyIm2C1ltAYg==",
      "dependencies": {
        "@firebase/component": "0.5.10",
        "@firebase/database": "0.12.5",
        "@firebase/database-types": "0.9.4",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/database-compat/node_modules/@firebase/database-types": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-0.9.4.tgz",
      "integrity": "sha512-uAQuc6NUZ5Oh/cWZPeMValtcZ+4L1stgKOeYvz7mLn8+s03tnCDL2N47OLCHdntktVkhImQTwGNARgqhIhtNeA==",
      "dependencies": {
        "@firebase/app-types": "0.7.0",
        "@firebase/util": "1.4.3"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "0.7.3",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-0.7.3.tgz",
      "integrity": "sha512-dSOJmhKQ0nL8O4EQMRNGpSExWCXeHtH57gGg0BfNAdWcKhC8/4Y+qfKLfWXzyHvrSecpLmO0SmAi/iK2D5fp5A==",
      "dependencies": {
        "@firebase/app-types": "0.6.3"
      }
    },
    "node_modules/@firebase/database-types/node_modules/@firebase/app-types": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.6.3.tgz",
      "integrity": "sha512-/M13DPPati7FQHEQ9Minjk1HGLm/4K4gs9bR4rzLCWJg64yGtVC0zNg9gDpkw9yc2cvol/mNFxqTtd4geGrwdw=="
    },
    "node_modules/@firebase/logger": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.3.2.tgz",
      "integrity": "sha512-lzLrcJp9QBWpo40OcOM9B8QEtBw2Fk1zOZQdvv+rWS6gKmhQBCEMc4SMABQfWdjsylBcDfniD1Q+fUX1dcBTXA==",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.4.3.tgz",
      "integrity": "sha512-gQJl6r0a+MElLQEyU8Dx0kkC2coPj67f/zKZrGR7z7WpLgVanhaCUqEsptwpwoxi9RMFIaebleG+C9xxoARq+Q==",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@google-cloud/common": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/common/-/common-3.9.0.tgz",
      "integrity": "sha512-R9PfmCKbpOizvcLY+fz/TS4HdOQhvmf4EY4xEXvWnotGbGXujuTLJTJ2URy8BGT8TDxlh6gjjfEwjJ8McnNPIg==",
      "optional": true,
      "dependencies": {
        "@google-cloud/projectify": "^2.0.0",
        "@google-cloud/promisify": "^2.0.0",
        "arrify": "^2.0.1",
        "duplexify": "^4.1.1",
        "ent": "^2.2.0",
        "extend": "^3.0.2",
        "google-auth-library": "^7.9.2",
        "retry-request": "^4.2.2",
        "teeny-request": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@google-cloud/firestore": {
      "version": "4.15.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-4.15.1.tgz",
      "integrity": "sha512-2PWsCkEF1W02QbghSeRsNdYKN1qavrHBP3m72gPDMHQSYrGULOaTi7fSJquQmAtc4iPVB2/x6h80rdLHTATQtA==",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^2.24.1",
        "protobufjs": "^6.8.6"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@google-cloud/paginator": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-3.0.6.tgz",
      "integrity": "sha512-XCTm/GfQIlc1ZxpNtTSs/mnZxC2cePNhxU3X8EzHXKIJ2JFncmJj2Fcd2IP+gbmZaSZnY0juFxbUCkIeuu/2eQ==",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@google-cloud/projectify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-2.1.1.tgz",
      "integrity": "sha512-+rssMZHnlh0twl122gXY4/aCrk0G1acBqkHFfYddtsqpYXGxA29nj9V5V9SfC+GyOG00l650f6lG9KL+EpFEWQ==",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@google-cloud/promisify": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-2.0.4.tgz",
      "integrity": "sha512-j8yRSSqswWi1QqUGKVEKOG03Q7qOoZP6/h2zN2YO+F5h2+DHU0bSrHCK9Y7lo2DI9fBd8qGAw795sf+3Jva4yA==",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@google-cloud/storage": {
      "version": "5.18.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-5.18.1.tgz",
      "integrity": "sha512-EeVIarDb6u9vE5Se3YaXA8tuW8Ae2xmYLHy43doutTwzkXwizGXVS2Qmc2pouq9ln8qMD9A2f3arvhgAPtK9LQ==",
      "optional": true,
      "dependencies": {
        "@google-cloud/common": "^3.8.1",
        "@google-cloud/paginator": "^3.0.0",
        "@google-cloud/promisify": "^2.0.0",
        "abort-controller": "^3.0.0",
        "arrify": "^2.0.0",
        "async-retry": "^1.3.3",
        "compressible": "^2.0.12",
        "configstore": "^5.0.0",
        "date-and-time": "^2.0.0",
        "duplexify": "^4.0.0",
        "extend": "^3.0.2",
        "gaxios": "^4.0.0",
        "get-stream": "^6.0.0",
        "google-auth-library": "^7.0.0",
        "hash-stream-validation": "^0.2.2",
        "mime": "^3.0.0",
        "mime-types": "^2.0.8",
        "p-limit": "^3.0.1",
        "pumpify": "^2.0.0",
        "snakeize": "^0.1.0",
        "stream-events": "^1.0.4",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.5.4.tgz",
      "integrity": "sha512-+nJTOsqpFAXnfFrMZ7Too4XXZ/J9O+8jYvSoaunupoC7I7b9H4iex1BRsbTdOmiowfPGJrWit7jUPmbENSUSpw==",
      "optional": true,
      "dependencies": {
        "@grpc/proto-loader": "^0.6.4",
        "@types/node": ">=12.12.47"
      },
      "engines": {
        "node": "^8.13.0 || >=10.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.6.9",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.6.9.tgz",
      "integrity": "sha512-UlcCS8VbsU9d3XTXGiEVFonN7hXk+oMXZtoHHG2oSA1/GcDP1q6OUgs20PzHDGizzyi8ufGSUDlk3O2NyY7leg==",
      "optional": true,
      "dependencies": {
        "@types/long": "^4.0.1",
        "lodash.camelcase": "^4.3.0",
        "long": "^4.0.0",
        "protobufjs": "^6.10.0",
        "yargs": "^16.2.0"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@panva/asn1.js": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@panva/asn1.js/-/asn1.js-1.0.0.tgz",
      "integrity": "sha512-UdkG3mLEqXgnlKsWanWcgb6dOjUzJ+XC5f+aWw30qrtjxeNUSfKX1cd5FBzOaXQumoe9nIqeZUvrRJS03HCCtw==",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha1-m4sMxmPWaafY9vXQiToU00jzD78=",
      "optional": true
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "optional": true
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "optional": true
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha1-NVy8mLr61ZePntCV85diHx0Ga3A=",
      "optional": true
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha1-upn7WYYUr2VwDBYZ/wbUVLDYTEU=",
      "optional": true,
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha1-Xp4avctz/Ap8uLKR33jIy9l7h9E=",
      "optional": true
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha1-/yAOPnzyQp4tyvwRQIKOjMY48Ik=",
      "optional": true
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha1-bMKyDFya1q0NzP0hynZz2Nf79o0=",
      "optional": true
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha1-Cf0V8tbTq/qbZbw2ZQbWrXhG/1Q=",
      "optional": true
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha1-p3c2C1s5oaLlEG+OhY8v0tBgxXA=",
      "optional": true
    },
    "node_modules/@sindresorhus/is": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@socket.io/base64-arraybuffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@socket.io/base64-arraybuffer/-/base64-arraybuffer-1.0.2.tgz",
      "integrity": "sha512-dOlCBKnDw4iShaIsH/bxujKTM18+2TOAsYz+KSc11Am38H4q5Xw8Bbz97ZYdrVNM+um3p7w86Bvvmcn9q+5+eQ==",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
      "dependencies": {
        "defer-to-connect": "^1.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/component-emitter": {
      "version": "1.2.11",
      "resolved": "https://registry.npmjs.org/@types/component-emitter/-/component-emitter-1.2.11.tgz",
      "integrity": "sha512-SRXjM+tfsSlA9VuG8hGO2nft2p8zjXCK1VcC6N4NXbBbYbSia9kzCChYQajIjzIqOOOuh5Ock6MmV2oux4jDZQ=="
    },
    "node_modules/@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.12",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.12.tgz",
      "integrity": "sha512-vt+kDhq/M2ayberEtJcIN/hxXy1Pk+59g2FV/ZQceeaTyCtCucjL2Q7FXlFjtWn4n15KCr1NE2lNNFhp0lEThw=="
    },
    "node_modules/@types/express": {
      "version": "4.17.13",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.13.tgz",
      "integrity": "sha512-6bSZTPaTIACxn48l50SR+axgrqm6qXFIxrdAKaG6PaJk3+zuUr35hBlgT7vOmJcum+OEaIBLtHV/qloEAFITeA==",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.18",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-jwt": {
      "version": "0.0.42",
      "resolved": "https://registry.npmjs.org/@types/express-jwt/-/express-jwt-0.0.42.tgz",
      "integrity": "sha512-WszgUddvM1t5dPpJ3LhWNH8kfNN8GPIBrAGxgIYXVCEGx6Bx4A036aAuf/r5WH9DIEdlmp7gHOYvSM6U87B0ag==",
      "dependencies": {
        "@types/express": "*",
        "@types/express-unless": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.28",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.28.tgz",
      "integrity": "sha512-P1BJAEAW3E2DJUlkgq4tOL3RyMunoWXqbSCygWo5ZIWTjUgN1YnaXWW4VWl/oc8vs/XoYibEGBKP0uZyF4AHig==",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*"
      }
    },
    "node_modules/@types/express-unless": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/@types/express-unless/-/express-unless-0.5.3.tgz",
      "integrity": "sha512-TyPLQaF6w8UlWdv4gj8i46B+INBVzURBNRahCozCSXfsK2VTlL1wNyTlMKw817VHygBtlcl5jfnPadlydr06Yw==",
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/long": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.1.tgz",
      "integrity": "sha512-5tXH6Bx/kNGd3MgffdmP4dy2Z+G4eaXw0SE81Tq3BNadtnMR5/ySMzX4SLEzHJzSmPNn4HIdpQsBvXMUykr58w==",
      "optional": true
    },
    "node_modules/@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw=="
    },
    "node_modules/@types/node": {
      "version": "16.11.24",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-16.11.24.tgz",
      "integrity": "sha512-Ezv33Rl4mIi6YdSHfIRNBd4Q9kUe5okiaw/ikvJiJDmuQZNW5kfdg7+oQPF8NO6sTcr3woIpj3jANzTXdvEZXA=="
    },
    "node_modules/@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw=="
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw=="
    },
    "node_modules/@types/serve-static": {
      "version": "1.13.10",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.13.10.tgz",
      "integrity": "sha512-nCkHGI4w7ZgAdNkrEu0bv+4xNV/XDqW+DydknebMOQwkpDGx8G+HTlj7R7ABI8i8nKxVw0wtKPi1D+lPOkh4YQ==",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-FKjsOVbC6B7bdSB5CuzyHCkK69I="
    },
    "node_modules/@types/strip-json-comments": {
      "version": "0.0.30",
      "resolved": "https://registry.npmjs.org/@types/strip-json-comments/-/strip-json-comments-0.0.30.tgz",
      "integrity": "sha512-7NQmHra/JILCd1QqpSzl8+mJRc8ZHz3uDm8YV1Ks9IhK0epEiTw8aIErbvH9PI+6XbqhyIQy3462nEsn7UVzjQ=="
    },
    "node_modules/@types/webidl-conversions": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-6.1.1.tgz",
      "integrity": "sha512-XAahCdThVuCFDQLT7R7Pk/vqeObFNL3YqRyFZg+AqAP/W1/w3xHaIxuW7WszQqTbIBOPRcItYJIou3i/mppu3Q=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.1",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.1.tgz",
      "integrity": "sha512-2YubE1sjj5ifxievI5Ge1sckb9k/Er66HyR2c+3+I6VDUUg1TLPdYYTEbQ+DjRkS4nTxMJhgWfSfMRD2sl2EYQ==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "optional": true,
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-align": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.1.tgz",
      "integrity": "sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==",
      "dependencies": {
        "string-width": "^4.1.0"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY="
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "optional": true,
      "dependencies": {
        "retry": "0.13.1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA=="
    },
    "node_modules/axios": {
      "version": "0.24.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.24.0.tgz",
      "integrity": "sha512-Q6cWsys88HoPgAaFAVUb0WpPk0O8iTeisR9IMqy9G8AbO4NlpVknrnQS03zzF9PGAWgO3cgletO3VjV/P7VztA==",
      "dependencies": {
        "follow-redirects": "^1.14.4"
      }
    },
    "node_modules/backo": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/backo/-/backo-1.1.0.tgz",
      "integrity": "sha1-o2xEaJI/LSZcnopwnqVuza/4B+Y="
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.2.tgz",
      "integrity": "sha512-GAcQvbpsM0pUb0zw1EI0KhQEZ+lRwR5fYaAp3vPOYuP7aDvGy6cVN6XHLauvF8SOga2y0dcLcjt3iQDTSEliyw==",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "node_modules/body-parser": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.19.1.tgz",
      "integrity": "sha512-8ljfQi5eBk8EJfECMrgqNGWPEY5jWP+1IzkzkGdFFEwFQZZyaZ21UqdaHktgiMlH0xLHqIFtE/u2OYE5dOtViA==",
      "dependencies": {
        "bytes": "3.1.1",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "http-errors": "1.8.1",
        "iconv-lite": "0.4.24",
        "on-finished": "~2.3.0",
        "qs": "6.9.6",
        "raw-body": "2.4.2",
        "type-is": "~1.6.18"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "node_modules/body-parser/node_modules/qs": {
      "version": "6.9.6",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.6.tgz",
      "integrity": "sha512-TIRk4aqYLNoJUbd+g2lEdz5kLWIuTMRagAXxl78Q0RiVjAOugHmeKNGdd3cwo/ktpf9aL9epCfFqWDEKysUlLQ==",
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/boxen": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-5.1.2.tgz",
      "integrity": "sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==",
      "dependencies": {
        "ansi-align": "^3.0.0",
        "camelcase": "^6.2.0",
        "chalk": "^4.1.0",
        "cli-boxes": "^2.2.1",
        "string-width": "^4.2.2",
        "type-fest": "^0.20.2",
        "widest-line": "^3.1.0",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/boxen/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/boxen/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/boxen/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/boxen/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/boxen/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/boxen/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browser-fingerprint": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/browser-fingerprint/-/browser-fingerprint-0.0.1.tgz",
      "integrity": "sha1-jfPNyiW/fVs1QtYVRdcwBT/OYEo="
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/bson": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/bson/-/bson-4.6.1.tgz",
      "integrity": "sha512-I1LQ7Hz5zgwR4QquilLNZwbhPw0Apx7i7X9kGMBTsqPdml/03Q9NBtD9nt/19ahjlphktQImrnderxqpzeVDjw==",
      "dependencies": {
        "buffer": "^5.6.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha1-+OcRMvf/5uAaXJaXpMbz5I1cyBk="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "node_modules/bugsnag": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bugsnag/-/bugsnag-2.4.3.tgz",
      "integrity": "sha512-7gjpRE+J0BBbwYvmZeYo2ZyX3nCDX+ITqHd5wNb+t6KBXwhvuEbyJrmsDE/U32ndsV441jwaGtJ1o2ppLoQXTg==",
      "deprecated": "All projects should upgrade to our universal JS notifier: \"@bugsnag/js\". See https://github.com/bugsnag/bugsnag-js/blob/master/UPGRADING.md for more details.",
      "dependencies": {
        "backo": "^1.1.0",
        "cuid": "^1.3.8",
        "json-stringify-safe": "~5.0.1",
        "promise": "7.x",
        "request": "^2.81.0",
        "stack-trace": "~0.0.9"
      }
    },
    "node_modules/builtin-modules": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz",
      "integrity": "sha1-Jw8HbFpywC9bZaR9+Uxf46J4iS8=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.1.tgz",
      "integrity": "sha512-dWe4nWO/ruEOY7HkUJ5gFt1DCFV9zPRoJr8pV0/ASQermOZjtq8jMjOprC0Kd10GLN+l7xaUPvxzJFWtxGu8Fg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/cacheable-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^3.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^4.1.0",
        "responselike": "^1.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacheable-request/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cacheable-request/node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE="
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ=="
    },
    "node_modules/cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/clone-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
      "dependencies": {
        "mimic-response": "^1.0.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
      "dev": true
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "dev": true
    },
    "node_modules/component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg=="
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "optional": true,
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
    },
    "node_modules/concurrently": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-7.0.0.tgz",
      "integrity": "sha512-WKM7PUsI8wyXpF80H+zjHP32fsgsHNQfPLw/e70Z5dYkV7hF+rf8q3D+ScWJIEr57CpkO3OWBko6hwhQLPR8Pw==",
      "dependencies": {
        "chalk": "^4.1.0",
        "date-fns": "^2.16.1",
        "lodash": "^4.17.21",
        "rxjs": "^6.6.3",
        "spawn-command": "^0.0.2-1",
        "supports-color": "^8.1.0",
        "tree-kill": "^1.2.2",
        "yargs": "^16.2.0"
      },
      "bin": {
        "concurrently": "dist/bin/concurrently.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.0 || >=16.0.0"
      }
    },
    "node_modules/concurrently/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/concurrently/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/concurrently/node_modules/chalk/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/concurrently/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/concurrently/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/concurrently/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/concurrently/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "dependencies": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "node_modules/core-js": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
      "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY=",
      "deprecated": "core-js@<3.4 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims, feature detection in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. Please, upgrade your dependencies to the actual version of core-js."
    },
    "node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cuid": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/cuid/-/cuid-1.3.8.tgz",
      "integrity": "sha1-S4deCWm612T37AcGz0T1+wgx9rc=",
      "dependencies": {
        "browser-fingerprint": "0.0.1",
        "core-js": "^1.1.1",
        "node-fingerprint": "0.0.2"
      }
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/date-and-time": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/date-and-time/-/date-and-time-2.1.1.tgz",
      "integrity": "sha512-70O+o1I79HiYkYiqbY6lTNtQurU2mbOh3hw3MXVXm1xS98nBklNCG6fH1S9OqLqYpEIm3o4OMnzNVys4+XykIA==",
      "optional": true
    },
    "node_modules/date-fns": {
      "version": "2.28.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.28.0.tgz",
      "integrity": "sha512-8d35hViGYx/QH0icHYCeLmsLmMUheMmTyV9Fcm6gvNwdw31yXXH+O85sOBJ+OLnLQMKZowvpKb6FgMIQjcpvQw==",
      "engines": {
        "node": ">=0.11"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/date-fns"
      }
    },
    "node_modules/debug": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
      "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decompress-response": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ=="
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/denque": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.0.1.tgz",
      "integrity": "sha512-tfiWc6BQLXNLpNiR5iGd0Ocu3P3VpxfzFiqubLgMfhfOw9WyvgJBd46CClNn9k3qfbjvT//0cf7AlYRX/OslMQ==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
      "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
    },
    "node_modules/dicer": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.3.1.tgz",
      "integrity": "sha512-ObioMtXnmjYs3aRtpIJt9rgQSPCIhKVkFPip+E9GUDyWl8N435znUxK/JfNwGZJ2wnn5JKQ7Ly3vOK5Q5dylGA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "dependencies": {
        "is-obj": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
      "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/duplexer3": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI="
    },
    "node_modules/duplexify": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.2.tgz",
      "integrity": "sha512-fz3OjcNCHmRP12MJoZMPglx8m4rrFP8rovnk4vT8Fs+aonZoCwGg10dSsQsfP/E62eZcPTMSMP6686fu9Qlqtw==",
      "optional": true,
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.0"
      }
    },
    "node_modules/dynamic-dedupe": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/dynamic-dedupe/-/dynamic-dedupe-0.3.0.tgz",
      "integrity": "sha1-BuRMIj9eTpTXjvnbI6ZRXOL5YqE=",
      "dependencies": {
        "xtend": "^4.0.0"
      }
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/engine.io": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.1.2.tgz",
      "integrity": "sha512-v/7eGHxPvO2AWsksyx2PUsQvBafuvqs0jJJQ0FdmJG1b9qIvgSbqDRGwNhfk2XHaTTbTXiC4quRE8Q9nRjsrQQ==",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.0.0",
        "ws": "~8.2.3"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.0.3.tgz",
      "integrity": "sha512-BtQxwF27XUNnSafQLvDi0dQ8s3i6VgzSoQMJacpIcGNrlUdfHSKbgm3jmjCVvQluGzqwujQMPAoMai3oYSTurg==",
      "dependencies": {
        "@socket.io/base64-arraybuffer": "~1.0.2"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/ent": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/ent/-/ent-2.2.0.tgz",
      "integrity": "sha1-6WQhkyWiHQX0RGai9obtbOX13R0=",
      "optional": true
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
      "dev": true,
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/express": {
      "version": "4.17.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.17.2.tgz",
      "integrity": "sha512-oxlxJxcQlYwqPWKVJJtvQiwHgosH/LrLSPA+H4UxpyvSS6jC5aH+5MoHFM+KABgTOt0APue4w66Ha8jCUo9QGg==",
      "dependencies": {
        "accepts": "~1.3.7",
        "array-flatten": "1.1.1",
        "body-parser": "1.19.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.4.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "~1.1.2",
        "fresh": "0.5.2",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.9.6",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.17.2",
        "serve-static": "1.14.2",
        "setprototypeof": "1.2.0",
        "statuses": "~1.5.0",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express/node_modules/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "node_modules/express/node_modules/qs": {
      "version": "6.9.6",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.6.tgz",
      "integrity": "sha512-TIRk4aqYLNoJUbd+g2lEdz5kLWIuTMRagAXxl78Q0RiVjAOugHmeKNGdd3cwo/ktpf9aL9epCfFqWDEKysUlLQ==",
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=",
      "engines": [
        "node >=0.6.0"
      ]
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-text-encoding": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.3.tgz",
      "integrity": "sha512-dtm4QZH9nZtcDt8qJiOH9fcQd1NAgi+K1O2DbE6GG1PPCK/BWfOH3idCTRQ4ImXRUOyopDEgDEnVEE7Y/2Wrig==",
      "optional": true
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz",
      "integrity": "sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.3",
        "statuses": "~1.5.0",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "node_modules/firebase-admin": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-9.12.0.tgz",
      "integrity": "sha512-AtA7OH5RbIFGoc0gZOQgaYC6cdjdhZv4w3XgWoupkPKO1HY+0GzixOuXDa75kFeoVyhIyo4PkLg/GAC1dC1P6w==",
      "dependencies": {
        "@firebase/database-compat": "^0.1.1",
        "@firebase/database-types": "^0.7.2",
        "@types/node": ">=12.12.47",
        "dicer": "^0.3.0",
        "jsonwebtoken": "^8.5.1",
        "jwks-rsa": "^2.0.2",
        "node-forge": "^0.10.0"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "optionalDependencies": {
        "@google-cloud/firestore": "^4.5.0",
        "@google-cloud/storage": "^5.3.0"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.14.8",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.14.8.tgz",
      "integrity": "sha512-1x0S9UVJHsQprFcEC/qnNzBLcIxsjAV905f/UkQxbclCsoTWlacCNOpQa/anodLl2uaEKFhfWOvM2Qg77+15zA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
      "optional": true
    },
    "node_modules/gaxios": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-4.3.2.tgz",
      "integrity": "sha512-T+ap6GM6UZ0c4E6yb1y/hy2UB6hTrqhglp3XfmU9qbLCGRYhLVV5aRPpC4EmoG8N8zOnkYCgoBz+ScvGAARY6Q==",
      "optional": true,
      "dependencies": {
        "abort-controller": "^3.0.0",
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-4.3.1.tgz",
      "integrity": "sha512-x850LS5N7V1F3UcV7PoupzGsyD6iVwTVvsh3tbXfkctZnBnjW5yu5z1/3k3SehF7TyoTIe78rJs02GMMy+LF+A==",
      "optional": true,
      "dependencies": {
        "gaxios": "^4.0.0",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/global-dirs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.0.tgz",
      "integrity": "sha512-v8ho2DS5RiCjftj1nD9NmnfaOzTdud7RRnVd9kFNOjqZbISlx5DQ+OrTkywgd0dIt7oFCvKetZSHoHcP3sDdiA==",
      "dependencies": {
        "ini": "2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/google-auth-library": {
      "version": "7.12.0",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-7.12.0.tgz",
      "integrity": "sha512-RS/whvFPMoF1hQNxnoVET3DWKPBt1Xgqe2rY0k+Jn7TNhoHlwdnSe7Rlcbo2Nub3Mt2lUVz26X65aDQrWp6x8w==",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "fast-text-encoding": "^1.0.0",
        "gaxios": "^4.0.0",
        "gcp-metadata": "^4.2.0",
        "gtoken": "^5.0.4",
        "jws": "^4.0.0",
        "lru-cache": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/google-gax": {
      "version": "2.29.5",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-2.29.5.tgz",
      "integrity": "sha512-wJI+rgqujcl4/0eO4sRIwXAJAD+G8dFRqvGxc2lUuZtdzOToc5NHYbrTvplWQVO6Lw1YNsk9u1pKN3HcXembJg==",
      "optional": true,
      "dependencies": {
        "@grpc/grpc-js": "~1.5.0",
        "@grpc/proto-loader": "^0.6.1",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "fast-text-encoding": "^1.0.3",
        "google-auth-library": "^7.6.1",
        "is-stream-ended": "^0.1.4",
        "node-fetch": "^2.6.1",
        "object-hash": "^2.1.1",
        "proto3-json-serializer": "^0.1.8",
        "protobufjs": "6.11.2",
        "retry-request": "^4.0.0"
      },
      "bin": {
        "compileProtos": "build/tools/compileProtos.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/google-p12-pem": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-3.1.3.tgz",
      "integrity": "sha512-MC0jISvzymxePDVembypNefkAQp+DRP7dBE+zNUPaIjEspIlYg0++OrsNr248V9tPbz6iqtZ7rX1hxWA5B8qBQ==",
      "optional": true,
      "dependencies": {
        "node-forge": "^1.0.0"
      },
      "bin": {
        "gp12-pem": "build/src/bin/gp12-pem.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/google-p12-pem/node_modules/node-forge": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.2.1.tgz",
      "integrity": "sha512-Fcvtbb+zBcZXbTTVwqGA5W+MKBj56UjVRevvchv5XrcyXbmNdesfZL37nlcWOfpgHhgmxApw3tQbTr4CqNmX4w==",
      "optional": true,
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/got": {
      "version": "9.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
      "dependencies": {
        "@sindresorhus/is": "^0.14.0",
        "@szmarczak/http-timer": "^1.1.2",
        "cacheable-request": "^6.0.0",
        "decompress-response": "^3.3.0",
        "duplexer3": "^0.1.4",
        "get-stream": "^4.1.0",
        "lowercase-keys": "^1.0.1",
        "mimic-response": "^1.0.1",
        "p-cancelable": "^1.0.0",
        "to-readable-stream": "^1.0.0",
        "url-parse-lax": "^3.0.0"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/got/node_modules/get-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.9",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz",
      "integrity": "sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ=="
    },
    "node_modules/gtoken": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-5.3.2.tgz",
      "integrity": "sha512-gkvEKREW7dXWF8NV8pVrKfW7WqReAmjjkMBh6lNCCGOM4ucS0r0YyXXl0r/9Yj8wcW/32ISkfc8h5mPTDbtifQ==",
      "optional": true,
      "dependencies": {
        "gaxios": "^4.0.0",
        "google-p12-pem": "^3.1.3",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/hash-stream-validation": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/hash-stream-validation/-/hash-stream-validation-0.2.4.tgz",
      "integrity": "sha512-Gjzu0Xn7IagXVkSu9cSFuK1fqzwtLwFhNhVL8IFJijRNMgUttFbBSIAzKuSIrsFMO1+g1RlsoN49zPIbwPDMGQ==",
      "optional": true
    },
    "node_modules/http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.5.tgz",
      "integrity": "sha512-x+JVEkO2PoM8qqpbPbOL3cqHPwerep7OwzK7Ay+sMQjKzaKCqWvjoXm5tqMP9tXWWTnTzAjIhXg+J99XYuPhPA=="
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha1-SMptcvbGo68Aqa1K5odr44ieKwk="
    },
    "node_modules/import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha1-BWmOPUXIjo1+nZLLBYTnfwlvPkM=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ini": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ini/-/ini-2.0.0.tgz",
      "integrity": "sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ip": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/ip/-/ip-1.1.5.tgz",
      "integrity": "sha1-vd7XARQpCCjAoDnnLvJfWq7ENUo="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "dependencies": {
        "ci-info": "^2.0.0"
      },
      "bin": {
        "is-ci": "bin.js"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.8.1.tgz",
      "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-installed-globally": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.4.0.tgz",
      "integrity": "sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==",
      "dependencies": {
        "global-dirs": "^3.0.0",
        "is-path-inside": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-npm": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-5.0.0.tgz",
      "integrity": "sha512-WW/rQLOazUq+ST/bCAVBp/2oMERWLsR7OrKyt052dNDk4DHcDE0/7QSXITlmi+VBcV13DfIbysG3tZJm5RfdBA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "optional": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-stream-ended": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/is-stream-ended/-/is-stream-ended-0.1.4.tgz",
      "integrity": "sha512-xj0XPvmr7bQFTvirqnFr50o0hQIh6ZItDqloxt5aJrR4NQsYeSsyFQERYGCAzfindAcnKjINnwEEgLx4IqVzQw==",
      "optional": true
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "node_modules/is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw=="
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
    },
    "node_modules/jose": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/jose/-/jose-2.0.5.tgz",
      "integrity": "sha512-BAiDNeDKTMgk4tvD0BbxJ8xHEHBZgpeRZ1zGPPsitSyMgjoMWiLGYAE7H7NpP5h0lPppQajQs871E8NHUrzVPA==",
      "dependencies": {
        "@panva/asn1.js": "^1.0.0"
      },
      "engines": {
        "node": ">=10.13.0 < 13 || >=13.7.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM="
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "optional": true,
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg="
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA=="
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
    },
    "node_modules/jsonwebtoken": {
      "version": "8.5.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
      "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^5.6.0"
      },
      "engines": {
        "node": ">=4",
        "npm": ">=1.4.28"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "optional": true,
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwks-rsa": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-2.0.5.tgz",
      "integrity": "sha512-fliHfsiBRzEU0nXzSvwnh0hynzGB0WihF+CinKbSRlaqRxbqqKf2xbBPgwc8mzf18/WgwlG8e5eTpfSTBcU4DQ==",
      "dependencies": {
        "@types/express-jwt": "0.0.42",
        "debug": "^4.3.2",
        "jose": "^2.0.5",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.1.4"
      },
      "engines": {
        "node": ">=10 < 13 || >=14"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "optional": true,
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/keyv": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
      "dependencies": {
        "json-buffer": "3.0.0"
      }
    },
    "node_modules/latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "dependencies": {
        "package-json": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha1-soqmKIorn8ZRA1x3EfZathkDMaY=",
      "optional": true
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha1-4j8/nE+Pvd6HJSnBBxhXoIblzO8="
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha1-YLuYqHy5I8aMoeUTJUgzFISfVT8="
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha1-bC4XHbKiV82WgC/UOwGyDV9YcPY="
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha1-YZwK89A/iwTDH1iChAt3sRzWg0M="
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha1-POdoEMWSjQM1IwGsKHMX8RwLH/w="
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs="
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha1-1SfftUVuynzJu5XV2ur4i6VKVFE="
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha1-DdOXEhPHxW34gJd9UEyI+0cal6w="
    },
    "node_modules/long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA==",
      "optional": true
    },
    "node_modules/lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lru-memoizer": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.1.4.tgz",
      "integrity": "sha512-IXAq50s4qwrOBrXJklY+KhgZF+5y98PDaNo0gi/v2KQBFLyWr+JyFvijZXkGKjQj/h9c0OwoE+JZbwUXce76hQ==",
      "dependencies": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "~4.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/lru-cache": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.0.2.tgz",
      "integrity": "sha1-HRdnnAac2l0ECZGgnbwsDbN35V4=",
      "dependencies": {
        "pseudomap": "^1.0.1",
        "yallist": "^2.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "optional": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime-db": {
      "version": "1.51.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.51.0.tgz",
      "integrity": "sha512-5y8A56jg7XVQx2mbv1lu49NR4dokRnhZYTtL+KGfaa27uq4pSTXkwQkFJl4pkRMyNFz/EtYDSkiiEHx3F7UN6g==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.34",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.34.tgz",
      "integrity": "sha512-6cP692WwGIs9XXdOO4++N+7qjqv0rqxxVvJ3VHPh/Sc9mVZcQP+ZGhkKiTvWMQRr2tbHkJP/Yn7Y0npb3ZBs4A==",
      "dependencies": {
        "mime-db": "1.51.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimatch": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.5.tgz",
      "integrity": "sha512-tUpxzX0VAzJHjLu0xUfFv1gwVp9ba3IOuRAVH2EGuRW8a5emA2FlACLqiT/lDVtS1W+TGNwqz3sWaNyLgDJWuw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw=="
    },
    "node_modules/mkdirp": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
      "dev": true,
      "dependencies": {
        "minimist": "^1.2.5"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/mongodb": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.4.1.tgz",
      "integrity": "sha512-IAD3nFtCR4s22vi5qjqkCBnuyDDrOW8WVSSmgHquOvGaP1iTD+XpC5tr8wAUbZ2EeZkaswwBKQFHDvl4qYcKqQ==",
      "dependencies": {
        "bson": "^4.6.1",
        "denque": "^2.0.1",
        "mongodb-connection-string-url": "^2.5.2",
        "socks": "^2.6.2"
      },
      "engines": {
        "node": ">=12.9.0"
      },
      "optionalDependencies": {
        "saslprep": "^1.0.3"
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.5.2.tgz",
      "integrity": "sha512-tWDyIG8cQlI5k3skB6ywaEA5F9f5OntrKKsT/Lteub2zgwSUlhqEN2inGgBTm8bpYJf8QYBdA/5naz65XDpczA==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-fingerprint": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/node-fingerprint/-/node-fingerprint-0.0.2.tgz",
      "integrity": "sha1-Mcur63GmeufdWn3AQuUcPHWGhQE="
    },
    "node_modules/node-forge": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-0.10.0.tgz",
      "integrity": "sha512-PPmu8eEeG9saEUvI97fm4OYxXVB6bFvyNTyiUOBichBpFG8A1Ljw3bY62+5oOjDEMHRnd0Y7HQ+x7uzxOzC6JA==",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "2.0.15",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.15.tgz",
      "integrity": "sha512-gdHMNx47Gw7b3kWxJV64NI+Q5nfl0y5DgDbiVtShiwa7Z0IZ07Ll4RLFo6AjrhzMtoEZn5PDE3/c2AbVsiCkpA==",
      "hasInstallScript": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.0.4",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5",
        "update-notifier": "^5.1.0"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "4.5.1",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
      "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-2.2.0.tgz",
      "integrity": "sha512-gScRMn0bS5fH+IuwyIFgnh9zBdo4DV+6GhygmWM9HyNJSgS0hScp1f5vjtm7oIIOiT9trXrShAkLFSc2IqKNgw==",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/p-cancelable": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "optional": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "dependencies": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/package-json/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/promise": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/promise/-/promise-7.3.1.tgz",
      "integrity": "sha512-nolQXZ/4L+bP/UGlkfaIujX9BKxGwmQ9OT4mOt5yvy8iK1h3wqTEJCijzGANTCCl9nWjY41juyAn2K3Q1hLLTg==",
      "dependencies": {
        "asap": "~2.0.3"
      }
    },
    "node_modules/proto3-json-serializer": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-0.1.8.tgz",
      "integrity": "sha512-ACilkB6s1U1gWnl5jtICpnDai4VCxmI9GFxuEaYdxtDG2oVI3sVFIUsvUZcQbJgtPM6p+zqKbjTKQZp6Y4FpQw==",
      "optional": true,
      "dependencies": {
        "protobufjs": "^6.11.2"
      }
    },
    "node_modules/protobufjs": {
      "version": "6.11.2",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-6.11.2.tgz",
      "integrity": "sha512-4BQJoPooKJl2G9j3XftkIXjoC9C0Av2NOrWmbLWT1vH32GcSUHjM0Arra6UfTsVyfMAuFzaLucXn1sadxJydAw==",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/long": "^4.0.1",
        "@types/node": ">=13.7.0",
        "long": "^4.0.0"
      },
      "bin": {
        "pbjs": "bin/pbjs",
        "pbts": "bin/pbts"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "node_modules/psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w=="
    },
    "node_modules/pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/pumpify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pumpify/-/pumpify-2.0.1.tgz",
      "integrity": "sha512-m7KOje7jZxrmutanlkS1daj1dS6z6BgslzOXmcSEpIlCxM3VJH7lG5QLeck/6hgF6F4crFf01UtQmNsJfweTAw==",
      "optional": true,
      "dependencies": {
        "duplexify": "^4.1.1",
        "inherits": "^2.0.3",
        "pump": "^3.0.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "dependencies": {
        "escape-goat": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.4.2.tgz",
      "integrity": "sha512-RPMAFUJP19WIet/99ngh6Iv8fzAbqum4Li7AD6DtGaW2RpMB/11xDoalPiJMTbu6I3hkbMVkATvZrqb9EEqeeQ==",
      "dependencies": {
        "bytes": "3.1.1",
        "http-errors": "1.8.1",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/rc/node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew=="
    },
    "node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "optional": true,
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/registry-auth-token": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.1.tgz",
      "integrity": "sha512-6gkSb4U6aWJB4SF2ZvLb76yCBjcvufXBqvvEx1HbmKPkutswjW1xNVRY0+daljIYRbogN7O0etYSlbiaEQyMyw==",
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "dependencies": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/responselike": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
      "dependencies": {
        "lowercase-keys": "^1.0.0"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-request": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-4.2.2.tgz",
      "integrity": "sha512-xA93uxUD/rogV7BV59agW/JHPGXeREMWiZc9jhcwY4YdZ7QOtC7qbomYg0n4wyk2lJhggjvKvhNX8wln/Aldhg==",
      "optional": true,
      "dependencies": {
        "debug": "^4.1.1",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/rxjs": {
      "version": "6.6.7",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
      "dependencies": {
        "tslib": "^1.9.0"
      },
      "engines": {
        "npm": ">=2.0.0"
      }
    },
    "node_modules/rxjs/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "dependencies": {
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/semver-diff/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.17.2",
      "resolved": "https://registry.npmjs.org/send/-/send-0.17.2.tgz",
      "integrity": "sha512-UJYB6wFSJE3G00nEivR5rgWp8c2xXvJ3OPWPhmuteU0IKj8nKbG3DrjiOmLwpnHGYWAVwA69zmTm++YG0Hmwww==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "destroy": "~1.0.4",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "1.8.1",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "~2.3.0",
        "range-parser": "~1.2.1",
        "statuses": "~1.5.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "node_modules/send/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/send/node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.14.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.14.2.tgz",
      "integrity": "sha512-+TMNA9AFxUEGuC0z2mevogSnn9MXKb4fa7ngeRMJaaGv8vTwnIEkKi+QGvPt33HSnf8pRS+WGM0EbMtCJLKMBQ==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.17.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/snakeize": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/snakeize/-/snakeize-0.1.0.tgz",
      "integrity": "sha1-EMCI2LWOsHazIpu1oE4jLOEmQi0=",
      "optional": true
    },
    "node_modules/socket.io": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.4.1.tgz",
      "integrity": "sha512-s04vrBswdQBUmuWJuuNTmXUVJhP0cVky8bBDhdkf8y0Ptsu7fKU2LuLbts9g+pdmAdyMMn8F/9Mf1/wbtUN0fg==",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "debug": "~4.3.2",
        "engine.io": "~6.1.0",
        "socket.io-adapter": "~2.3.3",
        "socket.io-parser": "~4.0.4"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.3.3.tgz",
      "integrity": "sha512-Qd/iwn3VskrpNO60BeRyCyr8ZWw9CPZyitW4AQwmRZ8zCiyDiL+znRnWX6tDHXnWn1sJrM1+b6Mn6wEDJJ4aYQ=="
    },
    "node_modules/socket.io-parser": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.0.4.tgz",
      "integrity": "sha512-t+b0SS+IxG7Rxzda2EVvyBZbvFPBCjJoyHuE0P//7OAsN23GItzDRdWa6ALxZI/8R5ygK7jAR6t028/z+7295g==",
      "dependencies": {
        "@types/component-emitter": "^1.2.10",
        "component-emitter": "~1.3.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.6.2.tgz",
      "integrity": "sha512-zDZhHhZRY9PxRruRMR7kMhnf3I8hDs4S3f9RecfnGxvcBHQcKcIH/oUcEWffsfl1XxdYlA7nnlGbbTvPz9D8gA==",
      "dependencies": {
        "ip": "^1.1.5",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha1-/0rm5oZWBWuks+eSqzM004JzyhE=",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/spawn-command": {
      "version": "0.0.2-1",
      "resolved": "https://registry.npmjs.org/spawn-command/-/spawn-command-0.0.2-1.tgz",
      "integrity": "sha1-YvXpRmmBwbeW3Fkpk34RycaSG9A="
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
      "dev": true
    },
    "node_modules/sshpk": {
      "version": "1.17.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.17.0.tgz",
      "integrity": "sha512-/9HIEs1ZXGhSPE8X6Ccm7Nam1z8KcoCqPdI7ecm1N33EzAetWahvQWVqLZtaZQ+IDKX4IyA2o0gBzqIMkAagHQ==",
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha1-VHxws0fo0ytOEI6hoqFZ5f3eGcA=",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "optional": true,
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.1.tgz",
      "integrity": "sha512-AiisoFqQ0vbGcZgQPY1cdP2I76glaVA/RauYR4G4thNFgkTqr90yXTo4LYX60Jl+sIlPNHHdGSwo01AvbKUSVQ==",
      "optional": true
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "optional": true,
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha1-6NK6H6nJBXAwPAMLaQD31fiavls=",
      "optional": true
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/teeny-request": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-7.1.3.tgz",
      "integrity": "sha512-Ew3aoFzgQEatLA5OBIjdr1DWJUaC1xardG+qbPPo5k/y/3fMwXLxpjh5UB5dVfElktLaQbbMs80chkz53ByvSg==",
      "optional": true,
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.1",
        "stream-events": "^1.0.5",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/teeny-request/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
    },
    "node_modules/tree-kill": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
      "bin": {
        "tree-kill": "cli.js"
      }
    },
    "node_modules/ts-node": {
      "version": "9.1.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-9.1.1.tgz",
      "integrity": "sha512-hPlt7ZACERQGf03M253ytLY3dHbGNGrAq9qIHWUY9XHYl1z7wYngSr3OQ5xmui8o2AaxsONxIzjafLUiWBo1Fg==",
      "dependencies": {
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "source-map-support": "^0.5.17",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "typescript": ">=2.7"
      }
    },
    "node_modules/ts-node-dev": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/ts-node-dev/-/ts-node-dev-1.1.8.tgz",
      "integrity": "sha512-Q/m3vEwzYwLZKmV6/0VlFxcZzVV/xcgOt+Tx/VjaaRHyiBcFlV0541yrT09QjzzCxlDZ34OzKjrFAynlmtflEg==",
      "dependencies": {
        "chokidar": "^3.5.1",
        "dynamic-dedupe": "^0.3.0",
        "minimist": "^1.2.5",
        "mkdirp": "^1.0.4",
        "resolve": "^1.0.0",
        "rimraf": "^2.6.1",
        "source-map-support": "^0.5.12",
        "tree-kill": "^1.2.2",
        "ts-node": "^9.0.0",
        "tsconfig": "^7.0.0"
      },
      "bin": {
        "ts-node-dev": "lib/bin.js",
        "tsnd": "lib/bin.js"
      },
      "engines": {
        "node": ">=0.8.0"
      },
      "peerDependencies": {
        "node-notifier": "*",
        "typescript": "*"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node-dev/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tsconfig": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/tsconfig/-/tsconfig-7.0.0.tgz",
      "integrity": "sha512-vZXmzPrL+EmC4T/4rVlT2jNVMWCi/O4DIiSj3UHg1OE5kCKbk4mfrXc6dZksLgRM/TZlKnousKH9bbTazUWRRw==",
      "dependencies": {
        "@types/strip-bom": "^3.0.0",
        "@types/strip-json-comments": "0.0.30",
        "strip-bom": "^3.0.0",
        "strip-json-comments": "^2.0.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.3.1.tgz",
      "integrity": "sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw=="
    },
    "node_modules/tslint": {
      "version": "6.1.3",
      "resolved": "https://registry.npmjs.org/tslint/-/tslint-6.1.3.tgz",
      "integrity": "sha512-IbR4nkT96EQOvKE2PW/djGz8iGNeJ4rF2mBfiYaR/nvUWYKJhLwimoJKgjIFEIDibBtOevj7BqCRL4oHeWWUCg==",
      "deprecated": "TSLint has been deprecated in favor of ESLint. Please see https://github.com/palantir/tslint/issues/4534 for more information.",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "builtin-modules": "^1.1.1",
        "chalk": "^2.3.0",
        "commander": "^2.12.1",
        "diff": "^4.0.1",
        "glob": "^7.1.1",
        "js-yaml": "^3.13.1",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.3",
        "resolve": "^1.3.2",
        "semver": "^5.3.0",
        "tslib": "^1.13.0",
        "tsutils": "^2.29.0"
      },
      "bin": {
        "tslint": "bin/tslint"
      },
      "engines": {
        "node": ">=4.8.0"
      },
      "peerDependencies": {
        "typescript": ">=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev || >=2.7.0-dev || >=2.8.0-dev || >=2.9.0-dev || >=3.0.0-dev || >= 3.1.0-dev || >= 3.2.0-dev || >= 4.0.0-dev"
      }
    },
    "node_modules/tslint/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "dev": true
    },
    "node_modules/tsutils": {
      "version": "2.29.0",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-2.29.0.tgz",
      "integrity": "sha512-g5JVHCIJwzfISaXpXE1qvNalca5Jwob6FjI4AoPlqMusJ6ftFE7IkkFoMhVLRgK+4Kx3gkzb8UZK5t5yTTvEmA==",
      "dev": true,
      "dependencies": {
        "tslib": "^1.8.1"
      },
      "peerDependencies": {
        "typescript": ">=2.1.0 || >=2.1.0-dev || >=2.2.0-dev || >=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev || >=2.7.0-dev || >=2.8.0-dev || >=2.9.0-dev || >= 3.0.0-dev || >= 3.1.0-dev"
      }
    },
    "node_modules/tsutils/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "dev": true
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "4.5.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.5.5.tgz",
      "integrity": "sha512-TCTIul70LyWe6IJWT8QSYeA54WQe8EjQFU4wY52Fasj5UKx88LNYKCgBEHcOMOrFF1rKGbD8v/xcNWVUq9SymA==",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA=="
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-notifier": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-5.1.0.tgz",
      "integrity": "sha512-ItnICHbeMh9GqUy31hFPrD1kcuZ3rpxDZbf4KUDavXwS0bW5m7SLbDQpGX3UYr072cbrF5hFUs3r5tUsPwjfHw==",
      "dependencies": {
        "boxen": "^5.0.0",
        "chalk": "^4.1.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.4.0",
        "is-npm": "^5.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.1.0",
        "pupa": "^2.1.1",
        "semver": "^7.3.4",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/yeoman/update-notifier?sponsor=1"
      }
    },
    "node_modules/update-notifier/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/update-notifier/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/update-notifier/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/update-notifier/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/update-notifier/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/update-notifier/node_modules/semver": {
      "version": "7.3.5",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
      "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/update-notifier/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
      "dependencies": {
        "prepend-http": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "optional": true
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "engines": [
        "node >=0.6.0"
      ],
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "dependencies": {
        "string-width": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/ws": {
      "version": "8.2.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.2.3.tgz",
      "integrity": "sha512-wBuoj1BDpC6ZQ1B7DWQBYVLphPWkm8i9Y0/3YdHjHKHiohOJ1ws+3OccDWtH+PoC9DZD5WOTrJvNbWvjS6JWaA==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  },
  "dependencies": {
    "@babel/code-frame": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
      "dev": true,
      "requires": {
        "@babel/highlight": "^7.16.7"
      }
    },
    "@babel/helper-validator-identifier": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
      "dev": true
    },
    "@babel/highlight": {
      "version": "7.16.10",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.16.10.tgz",
      "integrity": "sha512-5FnTQLSLswEj6IkgVw5KusNUUFY9ZGqe/TRFnP/BKYHYgfh7tc+C7mwiy95/yNP7Dh9x580Vv8r7u7ZfTBFxdw==",
      "dev": true,
      "requires": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      }
    },
    "@firebase/app": {
      "version": "0.7.16",
      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.7.16.tgz",
      "integrity": "sha512-xToEi8f7uvadhtgNsPmuUS9eVHteMjWoa5I7i/+5TBeGgGkm1g9SROJl+8wSrcdT5Xd6OA7eUGZLxr4RQvL7Tw==",
      "peer": true,
      "requires": {
        "@firebase/component": "0.5.10",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      }
    },
    "@firebase/app-compat": {
      "version": "0.1.17",
      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.1.17.tgz",
      "integrity": "sha512-84AO0SAxdEaXl8fHnVnqWUufZJatCbZwwsxMtyj6UYYTPxv3VTCDusFF6nmoWgaCIs35PCBnLWAdzNxx7facCg==",
      "peer": true,
      "requires": {
        "@firebase/app": "0.7.16",
        "@firebase/component": "0.5.10",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      }
    },
    "@firebase/app-types": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.7.0.tgz",
      "integrity": "sha512-6fbHQwDv2jp/v6bXhBw2eSRbNBpxHcd1NBF864UksSMVIqIyri9qpJB1Mn6sGZE+bnDsSQBC5j2TbMxYsJQkQg=="
    },
    "@firebase/auth-interop-types": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.1.6.tgz",
      "integrity": "sha512-etIi92fW3CctsmR9e3sYM3Uqnoq861M0Id9mdOPF6PWIg38BXL5k4upCNBggGUpLIS0H1grMOvy/wn1xymwe2g==",
      "requires": {}
    },
    "@firebase/component": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.5.10.tgz",
      "integrity": "sha512-mzUpg6rsBbdQJvAdu1rNWabU3O7qdd+B+/ubE1b+pTbBKfw5ySRpRRE6sKcZ/oQuwLh0HHB6FRJHcylmI7jDzA==",
      "requires": {
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      }
    },
    "@firebase/database": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-0.12.5.tgz",
      "integrity": "sha512-1Pd2jYqvqZI7SQWAiXbTZxmsOa29PyOaPiUtr8pkLSfLp4AeyMBegYAXCLYLW6BNhKn3zNKFkxYDxYHq4q+Ixg==",
      "requires": {
        "@firebase/auth-interop-types": "0.1.6",
        "@firebase/component": "0.5.10",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "@firebase/database-compat": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-0.1.5.tgz",
      "integrity": "sha512-UVxkHL24sZfsjsjs+yiKIdYdrWXHrLxSFCYNdwNXDlTkAc0CWP9AAY3feLhBVpUKk+4Cj0I4sGnyIm2C1ltAYg==",
      "requires": {
        "@firebase/component": "0.5.10",
        "@firebase/database": "0.12.5",
        "@firebase/database-types": "0.9.4",
        "@firebase/logger": "0.3.2",
        "@firebase/util": "1.4.3",
        "tslib": "^2.1.0"
      },
      "dependencies": {
        "@firebase/database-types": {
          "version": "0.9.4",
          "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-0.9.4.tgz",
          "integrity": "sha512-uAQuc6NUZ5Oh/cWZPeMValtcZ+4L1stgKOeYvz7mLn8+s03tnCDL2N47OLCHdntktVkhImQTwGNARgqhIhtNeA==",
          "requires": {
            "@firebase/app-types": "0.7.0",
            "@firebase/util": "1.4.3"
          }
        }
      }
    },
    "@firebase/database-types": {
      "version": "0.7.3",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-0.7.3.tgz",
      "integrity": "sha512-dSOJmhKQ0nL8O4EQMRNGpSExWCXeHtH57gGg0BfNAdWcKhC8/4Y+qfKLfWXzyHvrSecpLmO0SmAi/iK2D5fp5A==",
      "requires": {
        "@firebase/app-types": "0.6.3"
      },
      "dependencies": {
        "@firebase/app-types": {
          "version": "0.6.3",
          "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.6.3.tgz",
          "integrity": "sha512-/M13DPPati7FQHEQ9Minjk1HGLm/4K4gs9bR4rzLCWJg64yGtVC0zNg9gDpkw9yc2cvol/mNFxqTtd4geGrwdw=="
        }
      }
    },
    "@firebase/logger": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.3.2.tgz",
      "integrity": "sha512-lzLrcJp9QBWpo40OcOM9B8QEtBw2Fk1zOZQdvv+rWS6gKmhQBCEMc4SMABQfWdjsylBcDfniD1Q+fUX1dcBTXA==",
      "requires": {
        "tslib": "^2.1.0"
      }
    },
    "@firebase/util": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.4.3.tgz",
      "integrity": "sha512-gQJl6r0a+MElLQEyU8Dx0kkC2coPj67f/zKZrGR7z7WpLgVanhaCUqEsptwpwoxi9RMFIaebleG+C9xxoARq+Q==",
      "requires": {
        "tslib": "^2.1.0"
      }
    },
    "@google-cloud/common": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/common/-/common-3.9.0.tgz",
      "integrity": "sha512-R9PfmCKbpOizvcLY+fz/TS4HdOQhvmf4EY4xEXvWnotGbGXujuTLJTJ2URy8BGT8TDxlh6gjjfEwjJ8McnNPIg==",
      "optional": true,
      "requires": {
        "@google-cloud/projectify": "^2.0.0",
        "@google-cloud/promisify": "^2.0.0",
        "arrify": "^2.0.1",
        "duplexify": "^4.1.1",
        "ent": "^2.2.0",
        "extend": "^3.0.2",
        "google-auth-library": "^7.9.2",
        "retry-request": "^4.2.2",
        "teeny-request": "^7.0.0"
      }
    },
    "@google-cloud/firestore": {
      "version": "4.15.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-4.15.1.tgz",
      "integrity": "sha512-2PWsCkEF1W02QbghSeRsNdYKN1qavrHBP3m72gPDMHQSYrGULOaTi7fSJquQmAtc4iPVB2/x6h80rdLHTATQtA==",
      "optional": true,
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^2.24.1",
        "protobufjs": "^6.8.6"
      }
    },
    "@google-cloud/paginator": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-3.0.6.tgz",
      "integrity": "sha512-XCTm/GfQIlc1ZxpNtTSs/mnZxC2cePNhxU3X8EzHXKIJ2JFncmJj2Fcd2IP+gbmZaSZnY0juFxbUCkIeuu/2eQ==",
      "optional": true,
      "requires": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      }
    },
    "@google-cloud/projectify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-2.1.1.tgz",
      "integrity": "sha512-+rssMZHnlh0twl122gXY4/aCrk0G1acBqkHFfYddtsqpYXGxA29nj9V5V9SfC+GyOG00l650f6lG9KL+EpFEWQ==",
      "optional": true
    },
    "@google-cloud/promisify": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-2.0.4.tgz",
      "integrity": "sha512-j8yRSSqswWi1QqUGKVEKOG03Q7qOoZP6/h2zN2YO+F5h2+DHU0bSrHCK9Y7lo2DI9fBd8qGAw795sf+3Jva4yA==",
      "optional": true
    },
    "@google-cloud/storage": {
      "version": "5.18.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-5.18.1.tgz",
      "integrity": "sha512-EeVIarDb6u9vE5Se3YaXA8tuW8Ae2xmYLHy43doutTwzkXwizGXVS2Qmc2pouq9ln8qMD9A2f3arvhgAPtK9LQ==",
      "optional": true,
      "requires": {
        "@google-cloud/common": "^3.8.1",
        "@google-cloud/paginator": "^3.0.0",
        "@google-cloud/promisify": "^2.0.0",
        "abort-controller": "^3.0.0",
        "arrify": "^2.0.0",
        "async-retry": "^1.3.3",
        "compressible": "^2.0.12",
        "configstore": "^5.0.0",
        "date-and-time": "^2.0.0",
        "duplexify": "^4.0.0",
        "extend": "^3.0.2",
        "gaxios": "^4.0.0",
        "get-stream": "^6.0.0",
        "google-auth-library": "^7.0.0",
        "hash-stream-validation": "^0.2.2",
        "mime": "^3.0.0",
        "mime-types": "^2.0.8",
        "p-limit": "^3.0.1",
        "pumpify": "^2.0.0",
        "snakeize": "^0.1.0",
        "stream-events": "^1.0.4",
        "xdg-basedir": "^4.0.0"
      }
    },
    "@grpc/grpc-js": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.5.4.tgz",
      "integrity": "sha512-+nJTOsqpFAXnfFrMZ7Too4XXZ/J9O+8jYvSoaunupoC7I7b9H4iex1BRsbTdOmiowfPGJrWit7jUPmbENSUSpw==",
      "optional": true,
      "requires": {
        "@grpc/proto-loader": "^0.6.4",
        "@types/node": ">=12.12.47"
      }
    },
    "@grpc/proto-loader": {
      "version": "0.6.9",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.6.9.tgz",
      "integrity": "sha512-UlcCS8VbsU9d3XTXGiEVFonN7hXk+oMXZtoHHG2oSA1/GcDP1q6OUgs20PzHDGizzyi8ufGSUDlk3O2NyY7leg==",
      "optional": true,
      "requires": {
        "@types/long": "^4.0.1",
        "lodash.camelcase": "^4.3.0",
        "long": "^4.0.0",
        "protobufjs": "^6.10.0",
        "yargs": "^16.2.0"
      }
    },
    "@panva/asn1.js": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@panva/asn1.js/-/asn1.js-1.0.0.tgz",
      "integrity": "sha512-UdkG3mLEqXgnlKsWanWcgb6dOjUzJ+XC5f+aWw30qrtjxeNUSfKX1cd5FBzOaXQumoe9nIqeZUvrRJS03HCCtw=="
    },
    "@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha1-m4sMxmPWaafY9vXQiToU00jzD78=",
      "optional": true
    },
    "@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "optional": true
    },
    "@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "optional": true
    },
    "@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha1-NVy8mLr61ZePntCV85diHx0Ga3A=",
      "optional": true
    },
    "@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha1-upn7WYYUr2VwDBYZ/wbUVLDYTEU=",
      "optional": true,
      "requires": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha1-Xp4avctz/Ap8uLKR33jIy9l7h9E=",
      "optional": true
    },
    "@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha1-/yAOPnzyQp4tyvwRQIKOjMY48Ik=",
      "optional": true
    },
    "@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha1-bMKyDFya1q0NzP0hynZz2Nf79o0=",
      "optional": true
    },
    "@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha1-Cf0V8tbTq/qbZbw2ZQbWrXhG/1Q=",
      "optional": true
    },
    "@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha1-p3c2C1s5oaLlEG+OhY8v0tBgxXA=",
      "optional": true
    },
    "@sindresorhus/is": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ=="
    },
    "@socket.io/base64-arraybuffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@socket.io/base64-arraybuffer/-/base64-arraybuffer-1.0.2.tgz",
      "integrity": "sha512-dOlCBKnDw4iShaIsH/bxujKTM18+2TOAsYz+KSc11Am38H4q5Xw8Bbz97ZYdrVNM+um3p7w86Bvvmcn9q+5+eQ=="
    },
    "@szmarczak/http-timer": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
      "requires": {
        "defer-to-connect": "^1.0.1"
      }
    },
    "@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "optional": true
    },
    "@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "requires": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "@types/component-emitter": {
      "version": "1.2.11",
      "resolved": "https://registry.npmjs.org/@types/component-emitter/-/component-emitter-1.2.11.tgz",
      "integrity": "sha512-SRXjM+tfsSlA9VuG8hGO2nft2p8zjXCK1VcC6N4NXbBbYbSia9kzCChYQajIjzIqOOOuh5Ock6MmV2oux4jDZQ=="
    },
    "@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q=="
    },
    "@types/cors": {
      "version": "2.8.12",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.12.tgz",
      "integrity": "sha512-vt+kDhq/M2ayberEtJcIN/hxXy1Pk+59g2FV/ZQceeaTyCtCucjL2Q7FXlFjtWn4n15KCr1NE2lNNFhp0lEThw=="
    },
    "@types/express": {
      "version": "4.17.13",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.13.tgz",
      "integrity": "sha512-6bSZTPaTIACxn48l50SR+axgrqm6qXFIxrdAKaG6PaJk3+zuUr35hBlgT7vOmJcum+OEaIBLtHV/qloEAFITeA==",
      "requires": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.18",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "@types/express-jwt": {
      "version": "0.0.42",
      "resolved": "https://registry.npmjs.org/@types/express-jwt/-/express-jwt-0.0.42.tgz",
      "integrity": "sha512-WszgUddvM1t5dPpJ3LhWNH8kfNN8GPIBrAGxgIYXVCEGx6Bx4A036aAuf/r5WH9DIEdlmp7gHOYvSM6U87B0ag==",
      "requires": {
        "@types/express": "*",
        "@types/express-unless": "*"
      }
    },
    "@types/express-serve-static-core": {
      "version": "4.17.28",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.28.tgz",
      "integrity": "sha512-P1BJAEAW3E2DJUlkgq4tOL3RyMunoWXqbSCygWo5ZIWTjUgN1YnaXWW4VWl/oc8vs/XoYibEGBKP0uZyF4AHig==",
      "requires": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*"
      }
    },
    "@types/express-unless": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/@types/express-unless/-/express-unless-0.5.3.tgz",
      "integrity": "sha512-TyPLQaF6w8UlWdv4gj8i46B+INBVzURBNRahCozCSXfsK2VTlL1wNyTlMKw817VHygBtlcl5jfnPadlydr06Yw==",
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/long": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.1.tgz",
      "integrity": "sha512-5tXH6Bx/kNGd3MgffdmP4dy2Z+G4eaXw0SE81Tq3BNadtnMR5/ySMzX4SLEzHJzSmPNn4HIdpQsBvXMUykr58w==",
      "optional": true
    },
    "@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw=="
    },
    "@types/node": {
      "version": "16.11.24",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-16.11.24.tgz",
      "integrity": "sha512-Ezv33Rl4mIi6YdSHfIRNBd4Q9kUe5okiaw/ikvJiJDmuQZNW5kfdg7+oQPF8NO6sTcr3woIpj3jANzTXdvEZXA=="
    },
    "@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw=="
    },
    "@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw=="
    },
    "@types/serve-static": {
      "version": "1.13.10",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.13.10.tgz",
      "integrity": "sha512-nCkHGI4w7ZgAdNkrEu0bv+4xNV/XDqW+DydknebMOQwkpDGx8G+HTlj7R7ABI8i8nKxVw0wtKPi1D+lPOkh4YQ==",
      "requires": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "@types/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-FKjsOVbC6B7bdSB5CuzyHCkK69I="
    },
    "@types/strip-json-comments": {
      "version": "0.0.30",
      "resolved": "https://registry.npmjs.org/@types/strip-json-comments/-/strip-json-comments-0.0.30.tgz",
      "integrity": "sha512-7NQmHra/JILCd1QqpSzl8+mJRc8ZHz3uDm8YV1Ks9IhK0epEiTw8aIErbvH9PI+6XbqhyIQy3462nEsn7UVzjQ=="
    },
    "@types/webidl-conversions": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-6.1.1.tgz",
      "integrity": "sha512-XAahCdThVuCFDQLT7R7Pk/vqeObFNL3YqRyFZg+AqAP/W1/w3xHaIxuW7WszQqTbIBOPRcItYJIou3i/mppu3Q=="
    },
    "@types/whatwg-url": {
      "version": "8.2.1",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.1.tgz",
      "integrity": "sha512-2YubE1sjj5ifxievI5Ge1sckb9k/Er66HyR2c+3+I6VDUUg1TLPdYYTEbQ+DjRkS4nTxMJhgWfSfMRD2sl2EYQ==",
      "requires": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "optional": true,
      "requires": {
        "event-target-shim": "^5.0.0"
      }
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "optional": true,
      "requires": {
        "debug": "4"
      }
    },
    "ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      }
    },
    "ansi-align": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.1.tgz",
      "integrity": "sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==",
      "requires": {
        "string-width": "^4.1.0"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "requires": {
        "color-convert": "^1.9.0"
      }
    },
    "anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "optional": true
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY="
    },
    "asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "requires": {
        "safer-buffer": "~2.1.0"
      }
    },
    "assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
    },
    "async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "optional": true,
      "requires": {
        "retry": "0.13.1"
      }
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="
    },
    "aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA=="
    },
    "axios": {
      "version": "0.24.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.24.0.tgz",
      "integrity": "sha512-Q6cWsys88HoPgAaFAVUb0WpPk0O8iTeisR9IMqy9G8AbO4NlpVknrnQS03zzF9PGAWgO3cgletO3VjV/P7VztA==",
      "requires": {
        "follow-redirects": "^1.14.4"
      }
    },
    "backo": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/backo/-/backo-1.1.0.tgz",
      "integrity": "sha1-o2xEaJI/LSZcnopwnqVuza/4B+Y="
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
    },
    "base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog=="
    },
    "bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
      "requires": {
        "tweetnacl": "^0.14.3"
      }
    },
    "bignumber.js": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.2.tgz",
      "integrity": "sha512-GAcQvbpsM0pUb0zw1EI0KhQEZ+lRwR5fYaAp3vPOYuP7aDvGy6cVN6XHLauvF8SOga2y0dcLcjt3iQDTSEliyw==",
      "optional": true
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA=="
    },
    "bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "body-parser": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.19.1.tgz",
      "integrity": "sha512-8ljfQi5eBk8EJfECMrgqNGWPEY5jWP+1IzkzkGdFFEwFQZZyaZ21UqdaHktgiMlH0xLHqIFtE/u2OYE5dOtViA==",
      "requires": {
        "bytes": "3.1.1",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "http-errors": "1.8.1",
        "iconv-lite": "0.4.24",
        "on-finished": "~2.3.0",
        "qs": "6.9.6",
        "raw-body": "2.4.2",
        "type-is": "~1.6.18"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        },
        "ms": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
        },
        "qs": {
          "version": "6.9.6",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.6.tgz",
          "integrity": "sha512-TIRk4aqYLNoJUbd+g2lEdz5kLWIuTMRagAXxl78Q0RiVjAOugHmeKNGdd3cwo/ktpf9aL9epCfFqWDEKysUlLQ=="
        }
      }
    },
    "borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "boxen": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-5.1.2.tgz",
      "integrity": "sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==",
      "requires": {
        "ansi-align": "^3.0.0",
        "camelcase": "^6.2.0",
        "chalk": "^4.1.0",
        "cli-boxes": "^2.2.1",
        "string-width": "^4.2.2",
        "type-fest": "^0.20.2",
        "widest-line": "^3.1.0",
        "wrap-ansi": "^7.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "requires": {
            "color-convert": "^2.0.1"
          }
        },
        "chalk": {
          "version": "4.1.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
          "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
          "requires": {
            "ansi-styles": "^4.1.0",
            "supports-color": "^7.1.0"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
        },
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
        },
        "supports-color": {
          "version": "7.2.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
          "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browser-fingerprint": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/browser-fingerprint/-/browser-fingerprint-0.0.1.tgz",
      "integrity": "sha1-jfPNyiW/fVs1QtYVRdcwBT/OYEo="
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "bson": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/bson/-/bson-4.6.1.tgz",
      "integrity": "sha512-I1LQ7Hz5zgwR4QquilLNZwbhPw0Apx7i7X9kGMBTsqPdml/03Q9NBtD9nt/19ahjlphktQImrnderxqpzeVDjw==",
      "requires": {
        "buffer": "^5.6.0"
      }
    },
    "buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "requires": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha1-+OcRMvf/5uAaXJaXpMbz5I1cyBk="
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "bugsnag": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bugsnag/-/bugsnag-2.4.3.tgz",
      "integrity": "sha512-7gjpRE+J0BBbwYvmZeYo2ZyX3nCDX+ITqHd5wNb+t6KBXwhvuEbyJrmsDE/U32ndsV441jwaGtJ1o2ppLoQXTg==",
      "requires": {
        "backo": "^1.1.0",
        "cuid": "^1.3.8",
        "json-stringify-safe": "~5.0.1",
        "promise": "7.x",
        "request": "^2.81.0",
        "stack-trace": "~0.0.9"
      }
    },
    "builtin-modules": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz",
      "integrity": "sha1-Jw8HbFpywC9bZaR9+Uxf46J4iS8=",
      "dev": true
    },
    "bytes": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.1.tgz",
      "integrity": "sha512-dWe4nWO/ruEOY7HkUJ5gFt1DCFV9zPRoJr8pV0/ASQermOZjtq8jMjOprC0Kd10GLN+l7xaUPvxzJFWtxGu8Fg=="
    },
    "cacheable-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
      "requires": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^3.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^4.1.0",
        "responselike": "^1.0.2"
      },
      "dependencies": {
        "get-stream": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
          "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
          "requires": {
            "pump": "^3.0.0"
          }
        },
        "lowercase-keys": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
          "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA=="
        }
      }
    },
    "camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA=="
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE="
    },
    "caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="
    },
    "chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "requires": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      }
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ=="
    },
    "cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw=="
    },
    "cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "clone-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
      "requires": {
        "mimic-response": "^1.0.0"
      }
    },
    "color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "requires": {
        "color-name": "1.1.3"
      }
    },
    "color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
      "dev": true
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "dev": true
    },
    "component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg=="
    },
    "compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "optional": true,
      "requires": {
        "mime-db": ">= 1.43.0 < 2"
      }
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
    },
    "concurrently": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-7.0.0.tgz",
      "integrity": "sha512-WKM7PUsI8wyXpF80H+zjHP32fsgsHNQfPLw/e70Z5dYkV7hF+rf8q3D+ScWJIEr57CpkO3OWBko6hwhQLPR8Pw==",
      "requires": {
        "chalk": "^4.1.0",
        "date-fns": "^2.16.1",
        "lodash": "^4.17.21",
        "rxjs": "^6.6.3",
        "spawn-command": "^0.0.2-1",
        "supports-color": "^8.1.0",
        "tree-kill": "^1.2.2",
        "yargs": "^16.2.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "requires": {
            "color-convert": "^2.0.1"
          }
        },
        "chalk": {
          "version": "4.1.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
          "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
          "requires": {
            "ansi-styles": "^4.1.0",
            "supports-color": "^7.1.0"
          },
          "dependencies": {
            "supports-color": {
              "version": "7.2.0",
              "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
              "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
              "requires": {
                "has-flag": "^4.0.0"
              }
            }
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
        },
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
        },
        "supports-color": {
          "version": "8.1.1",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
          "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "requires": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      }
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA=="
    },
    "cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "core-js": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
      "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA=="
    },
    "cuid": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/cuid/-/cuid-1.3.8.tgz",
      "integrity": "sha1-S4deCWm612T37AcGz0T1+wgx9rc=",
      "requires": {
        "browser-fingerprint": "0.0.1",
        "core-js": "^1.1.1",
        "node-fingerprint": "0.0.2"
      }
    },
    "dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "date-and-time": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/date-and-time/-/date-and-time-2.1.1.tgz",
      "integrity": "sha512-70O+o1I79HiYkYiqbY6lTNtQurU2mbOh3hw3MXVXm1xS98nBklNCG6fH1S9OqLqYpEIm3o4OMnzNVys4+XykIA==",
      "optional": true
    },
    "date-fns": {
      "version": "2.28.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.28.0.tgz",
      "integrity": "sha512-8d35hViGYx/QH0icHYCeLmsLmMUheMmTyV9Fcm6gvNwdw31yXXH+O85sOBJ+OLnLQMKZowvpKb6FgMIQjcpvQw=="
    },
    "debug": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
      "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
      "requires": {
        "ms": "2.1.2"
      }
    },
    "decompress-response": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
      "requires": {
        "mimic-response": "^1.0.0"
      }
    },
    "deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA=="
    },
    "defer-to-connect": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ=="
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk="
    },
    "denque": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.0.1.tgz",
      "integrity": "sha512-tfiWc6BQLXNLpNiR5iGd0Ocu3P3VpxfzFiqubLgMfhfOw9WyvgJBd46CClNn9k3qfbjvT//0cf7AlYRX/OslMQ=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
      "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
    },
    "dicer": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.3.1.tgz",
      "integrity": "sha512-ObioMtXnmjYs3aRtpIJt9rgQSPCIhKVkFPip+E9GUDyWl8N435znUxK/JfNwGZJ2wnn5JKQ7Ly3vOK5Q5dylGA==",
      "requires": {
        "streamsearch": "^1.1.0"
      }
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
    },
    "dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "requires": {
        "is-obj": "^2.0.0"
      }
    },
    "dotenv": {
      "version": "16.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
      "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q=="
    },
    "duplexer3": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI="
    },
    "duplexify": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.2.tgz",
      "integrity": "sha512-fz3OjcNCHmRP12MJoZMPglx8m4rrFP8rovnk4vT8Fs+aonZoCwGg10dSsQsfP/E62eZcPTMSMP6686fu9Qlqtw==",
      "optional": true,
      "requires": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.0"
      }
    },
    "dynamic-dedupe": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/dynamic-dedupe/-/dynamic-dedupe-0.3.0.tgz",
      "integrity": "sha1-BuRMIj9eTpTXjvnbI6ZRXOL5YqE=",
      "requires": {
        "xtend": "^4.0.0"
      }
    },
    "ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "requires": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k="
    },
    "end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "requires": {
        "once": "^1.4.0"
      }
    },
    "engine.io": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.1.2.tgz",
      "integrity": "sha512-v/7eGHxPvO2AWsksyx2PUsQvBafuvqs0jJJQ0FdmJG1b9qIvgSbqDRGwNhfk2XHaTTbTXiC4quRE8Q9nRjsrQQ==",
      "requires": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.0.0",
        "ws": "~8.2.3"
      }
    },
    "engine.io-parser": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.0.3.tgz",
      "integrity": "sha512-BtQxwF27XUNnSafQLvDi0dQ8s3i6VgzSoQMJacpIcGNrlUdfHSKbgm3jmjCVvQluGzqwujQMPAoMai3oYSTurg==",
      "requires": {
        "@socket.io/base64-arraybuffer": "~1.0.2"
      }
    },
    "ent": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/ent/-/ent-2.2.0.tgz",
      "integrity": "sha1-6WQhkyWiHQX0RGai9obtbOX13R0=",
      "optional": true
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw=="
    },
    "escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q=="
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
      "dev": true
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
    },
    "event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "optional": true
    },
    "express": {
      "version": "4.17.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.17.2.tgz",
      "integrity": "sha512-oxlxJxcQlYwqPWKVJJtvQiwHgosH/LrLSPA+H4UxpyvSS6jC5aH+5MoHFM+KABgTOt0APue4w66Ha8jCUo9QGg==",
      "requires": {
        "accepts": "~1.3.7",
        "array-flatten": "1.1.1",
        "body-parser": "1.19.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.4.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "~1.1.2",
        "fresh": "0.5.2",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.9.6",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.17.2",
        "serve-static": "1.14.2",
        "setprototypeof": "1.2.0",
        "statuses": "~1.5.0",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "dependencies": {
        "cookie": {
          "version": "0.4.1",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
          "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA=="
        },
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        },
        "ms": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
        },
        "qs": {
          "version": "6.9.6",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.6.tgz",
          "integrity": "sha512-TIRk4aqYLNoJUbd+g2lEdz5kLWIuTMRagAXxl78Q0RiVjAOugHmeKNGdd3cwo/ktpf9aL9epCfFqWDEKysUlLQ=="
        }
      }
    },
    "extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
    },
    "fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fast-text-encoding": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.3.tgz",
      "integrity": "sha512-dtm4QZH9nZtcDt8qJiOH9fcQd1NAgi+K1O2DbE6GG1PPCK/BWfOH3idCTRQ4ImXRUOyopDEgDEnVEE7Y/2Wrig==",
      "optional": true
    },
    "faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "requires": {
        "websocket-driver": ">=0.5.1"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz",
      "integrity": "sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.3",
        "statuses": "~1.5.0",
        "unpipe": "~1.0.0"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "ms": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
        }
      }
    },
    "firebase-admin": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-9.12.0.tgz",
      "integrity": "sha512-AtA7OH5RbIFGoc0gZOQgaYC6cdjdhZv4w3XgWoupkPKO1HY+0GzixOuXDa75kFeoVyhIyo4PkLg/GAC1dC1P6w==",
      "requires": {
        "@firebase/database-compat": "^0.1.1",
        "@firebase/database-types": "^0.7.2",
        "@google-cloud/firestore": "^4.5.0",
        "@google-cloud/storage": "^5.3.0",
        "@types/node": ">=12.12.47",
        "dicer": "^0.3.0",
        "jsonwebtoken": "^8.5.1",
        "jwks-rsa": "^2.0.2",
        "node-forge": "^0.10.0"
      }
    },
    "follow-redirects": {
      "version": "1.14.8",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.14.8.tgz",
      "integrity": "sha512-1x0S9UVJHsQprFcEC/qnNzBLcIxsjAV905f/UkQxbclCsoTWlacCNOpQa/anodLl2uaEKFhfWOvM2Qg77+15zA=="
    },
    "forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="
    },
    "form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac="
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
      "optional": true
    },
    "gaxios": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-4.3.2.tgz",
      "integrity": "sha512-T+ap6GM6UZ0c4E6yb1y/hy2UB6hTrqhglp3XfmU9qbLCGRYhLVV5aRPpC4EmoG8N8zOnkYCgoBz+ScvGAARY6Q==",
      "optional": true,
      "requires": {
        "abort-controller": "^3.0.0",
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.1"
      }
    },
    "gcp-metadata": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-4.3.1.tgz",
      "integrity": "sha512-x850LS5N7V1F3UcV7PoupzGsyD6iVwTVvsh3tbXfkctZnBnjW5yu5z1/3k3SehF7TyoTIe78rJs02GMMy+LF+A==",
      "optional": true,
      "requires": {
        "gaxios": "^4.0.0",
        "json-bigint": "^1.0.0"
      }
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg=="
    },
    "get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "optional": true
    },
    "getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "global-dirs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.0.tgz",
      "integrity": "sha512-v8ho2DS5RiCjftj1nD9NmnfaOzTdud7RRnVd9kFNOjqZbISlx5DQ+OrTkywgd0dIt7oFCvKetZSHoHcP3sDdiA==",
      "requires": {
        "ini": "2.0.0"
      }
    },
    "google-auth-library": {
      "version": "7.12.0",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-7.12.0.tgz",
      "integrity": "sha512-RS/whvFPMoF1hQNxnoVET3DWKPBt1Xgqe2rY0k+Jn7TNhoHlwdnSe7Rlcbo2Nub3Mt2lUVz26X65aDQrWp6x8w==",
      "optional": true,
      "requires": {
        "arrify": "^2.0.0",
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "fast-text-encoding": "^1.0.0",
        "gaxios": "^4.0.0",
        "gcp-metadata": "^4.2.0",
        "gtoken": "^5.0.4",
        "jws": "^4.0.0",
        "lru-cache": "^6.0.0"
      }
    },
    "google-gax": {
      "version": "2.29.5",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-2.29.5.tgz",
      "integrity": "sha512-wJI+rgqujcl4/0eO4sRIwXAJAD+G8dFRqvGxc2lUuZtdzOToc5NHYbrTvplWQVO6Lw1YNsk9u1pKN3HcXembJg==",
      "optional": true,
      "requires": {
        "@grpc/grpc-js": "~1.5.0",
        "@grpc/proto-loader": "^0.6.1",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "fast-text-encoding": "^1.0.3",
        "google-auth-library": "^7.6.1",
        "is-stream-ended": "^0.1.4",
        "node-fetch": "^2.6.1",
        "object-hash": "^2.1.1",
        "proto3-json-serializer": "^0.1.8",
        "protobufjs": "6.11.2",
        "retry-request": "^4.0.0"
      }
    },
    "google-p12-pem": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-3.1.3.tgz",
      "integrity": "sha512-MC0jISvzymxePDVembypNefkAQp+DRP7dBE+zNUPaIjEspIlYg0++OrsNr248V9tPbz6iqtZ7rX1hxWA5B8qBQ==",
      "optional": true,
      "requires": {
        "node-forge": "^1.0.0"
      },
      "dependencies": {
        "node-forge": {
          "version": "1.2.1",
          "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.2.1.tgz",
          "integrity": "sha512-Fcvtbb+zBcZXbTTVwqGA5W+MKBj56UjVRevvchv5XrcyXbmNdesfZL37nlcWOfpgHhgmxApw3tQbTr4CqNmX4w==",
          "optional": true
        }
      }
    },
    "got": {
      "version": "9.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
      "requires": {
        "@sindresorhus/is": "^0.14.0",
        "@szmarczak/http-timer": "^1.1.2",
        "cacheable-request": "^6.0.0",
        "decompress-response": "^3.3.0",
        "duplexer3": "^0.1.4",
        "get-stream": "^4.1.0",
        "lowercase-keys": "^1.0.1",
        "mimic-response": "^1.0.1",
        "p-cancelable": "^1.0.0",
        "to-readable-stream": "^1.0.0",
        "url-parse-lax": "^3.0.0"
      },
      "dependencies": {
        "get-stream": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
          "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
          "requires": {
            "pump": "^3.0.0"
          }
        }
      }
    },
    "graceful-fs": {
      "version": "4.2.9",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz",
      "integrity": "sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ=="
    },
    "gtoken": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-5.3.2.tgz",
      "integrity": "sha512-gkvEKREW7dXWF8NV8pVrKfW7WqReAmjjkMBh6lNCCGOM4ucS0r0YyXXl0r/9Yj8wcW/32ISkfc8h5mPTDbtifQ==",
      "optional": true,
      "requires": {
        "gaxios": "^4.0.0",
        "google-p12-pem": "^3.1.3",
        "jws": "^4.0.0"
      }
    },
    "har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="
    },
    "har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "requires": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      }
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
    },
    "has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw=="
    },
    "hash-stream-validation": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/hash-stream-validation/-/hash-stream-validation-0.2.4.tgz",
      "integrity": "sha512-Gjzu0Xn7IagXVkSu9cSFuK1fqzwtLwFhNhVL8IFJijRNMgUttFbBSIAzKuSIrsFMO1+g1RlsoN49zPIbwPDMGQ==",
      "optional": true
    },
    "http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        }
      }
    },
    "http-parser-js": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.5.tgz",
      "integrity": "sha512-x+JVEkO2PoM8qqpbPbOL3cqHPwerep7OwzK7Ay+sMQjKzaKCqWvjoXm5tqMP9tXWWTnTzAjIhXg+J99XYuPhPA=="
    },
    "http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "optional": true,
      "requires": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      }
    },
    "http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "requires": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==",
      "optional": true,
      "requires": {
        "agent-base": "6",
        "debug": "4"
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha1-SMptcvbGo68Aqa1K5odr44ieKwk="
    },
    "import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha1-BWmOPUXIjo1+nZLLBYTnfwlvPkM="
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o="
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ini": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ini/-/ini-2.0.0.tgz",
      "integrity": "sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA=="
    },
    "ip": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/ip/-/ip-1.1.5.tgz",
      "integrity": "sha1-vd7XARQpCCjAoDnnLvJfWq7ENUo="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "requires": {
        "ci-info": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.8.1.tgz",
      "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI="
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-installed-globally": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.4.0.tgz",
      "integrity": "sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==",
      "requires": {
        "global-dirs": "^3.0.0",
        "is-path-inside": "^3.0.2"
      }
    },
    "is-npm": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-5.0.0.tgz",
      "integrity": "sha512-WW/rQLOazUq+ST/bCAVBp/2oMERWLsR7OrKyt052dNDk4DHcDE0/7QSXITlmi+VBcV13DfIbysG3tZJm5RfdBA=="
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w=="
    },
    "is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ=="
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "optional": true
    },
    "is-stream-ended": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/is-stream-ended/-/is-stream-ended-0.1.4.tgz",
      "integrity": "sha512-xj0XPvmr7bQFTvirqnFr50o0hQIh6ZItDqloxt5aJrR4NQsYeSsyFQERYGCAzfindAcnKjINnwEEgLx4IqVzQw==",
      "optional": true
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw=="
    },
    "isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
    },
    "jose": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/jose/-/jose-2.0.5.tgz",
      "integrity": "sha512-BAiDNeDKTMgk4tvD0BbxJ8xHEHBZgpeRZ1zGPPsitSyMgjoMWiLGYAE7H7NpP5h0lPppQajQs871E8NHUrzVPA==",
      "requires": {
        "@panva/asn1.js": "^1.0.0"
      }
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM="
    },
    "json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "optional": true,
      "requires": {
        "bignumber.js": "^9.0.0"
      }
    },
    "json-buffer": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg="
    },
    "json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA=="
    },
    "json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
    },
    "jsonwebtoken": {
      "version": "8.5.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
      "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
      "requires": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^5.6.0"
      },
      "dependencies": {
        "jwa": {
          "version": "1.4.1",
          "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
          "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
          "requires": {
            "buffer-equal-constant-time": "1.0.1",
            "ecdsa-sig-formatter": "1.0.11",
            "safe-buffer": "^5.0.1"
          }
        },
        "jws": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
          "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
          "requires": {
            "jwa": "^1.4.1",
            "safe-buffer": "^5.0.1"
          }
        }
      }
    },
    "jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "requires": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      }
    },
    "jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "optional": true,
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jwks-rsa": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-2.0.5.tgz",
      "integrity": "sha512-fliHfsiBRzEU0nXzSvwnh0hynzGB0WihF+CinKbSRlaqRxbqqKf2xbBPgwc8mzf18/WgwlG8e5eTpfSTBcU4DQ==",
      "requires": {
        "@types/express-jwt": "0.0.42",
        "debug": "^4.3.2",
        "jose": "^2.0.5",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.1.4"
      }
    },
    "jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "optional": true,
      "requires": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "keyv": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
      "requires": {
        "json-buffer": "3.0.0"
      }
    },
    "latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "requires": {
        "package-json": "^6.3.0"
      }
    },
    "limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha1-soqmKIorn8ZRA1x3EfZathkDMaY=",
      "optional": true
    },
    "lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha1-4j8/nE+Pvd6HJSnBBxhXoIblzO8="
    },
    "lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha1-YLuYqHy5I8aMoeUTJUgzFISfVT8="
    },
    "lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha1-bC4XHbKiV82WgC/UOwGyDV9YcPY="
    },
    "lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha1-YZwK89A/iwTDH1iChAt3sRzWg0M="
    },
    "lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha1-POdoEMWSjQM1IwGsKHMX8RwLH/w="
    },
    "lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs="
    },
    "lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha1-1SfftUVuynzJu5XV2ur4i6VKVFE="
    },
    "lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha1-DdOXEhPHxW34gJd9UEyI+0cal6w="
    },
    "long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA==",
      "optional": true
    },
    "lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA=="
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "lru-memoizer": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.1.4.tgz",
      "integrity": "sha512-IXAq50s4qwrOBrXJklY+KhgZF+5y98PDaNo0gi/v2KQBFLyWr+JyFvijZXkGKjQj/h9c0OwoE+JZbwUXce76hQ==",
      "requires": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "~4.0.0"
      },
      "dependencies": {
        "lru-cache": {
          "version": "4.0.2",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.0.2.tgz",
          "integrity": "sha1-HRdnnAac2l0ECZGgnbwsDbN35V4=",
          "requires": {
            "pseudomap": "^1.0.1",
            "yallist": "^2.0.0"
          }
        },
        "yallist": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
          "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
        }
      }
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
    },
    "mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "optional": true
    },
    "mime-db": {
      "version": "1.51.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.51.0.tgz",
      "integrity": "sha512-5y8A56jg7XVQx2mbv1lu49NR4dokRnhZYTtL+KGfaa27uq4pSTXkwQkFJl4pkRMyNFz/EtYDSkiiEHx3F7UN6g=="
    },
    "mime-types": {
      "version": "2.1.34",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.34.tgz",
      "integrity": "sha512-6cP692WwGIs9XXdOO4++N+7qjqv0rqxxVvJ3VHPh/Sc9mVZcQP+ZGhkKiTvWMQRr2tbHkJP/Yn7Y0npb3ZBs4A==",
      "requires": {
        "mime-db": "1.51.0"
      }
    },
    "mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ=="
    },
    "minimatch": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.5.tgz",
      "integrity": "sha512-tUpxzX0VAzJHjLu0xUfFv1gwVp9ba3IOuRAVH2EGuRW8a5emA2FlACLqiT/lDVtS1W+TGNwqz3sWaNyLgDJWuw==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw=="
    },
    "mkdirp": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
      "dev": true,
      "requires": {
        "minimist": "^1.2.5"
      }
    },
    "mongodb": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.4.1.tgz",
      "integrity": "sha512-IAD3nFtCR4s22vi5qjqkCBnuyDDrOW8WVSSmgHquOvGaP1iTD+XpC5tr8wAUbZ2EeZkaswwBKQFHDvl4qYcKqQ==",
      "requires": {
        "bson": "^4.6.1",
        "denque": "^2.0.1",
        "mongodb-connection-string-url": "^2.5.2",
        "saslprep": "^1.0.3",
        "socks": "^2.6.2"
      }
    },
    "mongodb-connection-string-url": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.5.2.tgz",
      "integrity": "sha512-tWDyIG8cQlI5k3skB6ywaEA5F9f5OntrKKsT/Lteub2zgwSUlhqEN2inGgBTm8bpYJf8QYBdA/5naz65XDpczA==",
      "requires": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
          "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
          "requires": {
            "punycode": "^2.1.1"
          }
        },
        "webidl-conversions": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
          "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
          "version": "11.0.0",
          "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
          "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
          "requires": {
            "tr46": "^3.0.0",
            "webidl-conversions": "^7.0.0"
          }
        }
      }
    },
    "ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "requires": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      },
      "dependencies": {
        "tweetnacl": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
          "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
        }
      }
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-fingerprint": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/node-fingerprint/-/node-fingerprint-0.0.2.tgz",
      "integrity": "sha1-Mcur63GmeufdWn3AQuUcPHWGhQE="
    },
    "node-forge": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-0.10.0.tgz",
      "integrity": "sha512-PPmu8eEeG9saEUvI97fm4OYxXVB6bFvyNTyiUOBichBpFG8A1Ljw3bY62+5oOjDEMHRnd0Y7HQ+x7uzxOzC6JA=="
    },
    "nodemon": {
      "version": "2.0.15",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.15.tgz",
      "integrity": "sha512-gdHMNx47Gw7b3kWxJV64NI+Q5nfl0y5DgDbiVtShiwa7Z0IZ07Ll4RLFo6AjrhzMtoEZn5PDE3/c2AbVsiCkpA==",
      "requires": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.0.4",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5",
        "update-notifier": "^5.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "requires": {
            "ms": "^2.1.1"
          }
        }
      }
    },
    "nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "normalize-url": {
      "version": "4.5.1",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
      "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA=="
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ=="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "object-hash": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-2.2.0.tgz",
      "integrity": "sha512-gScRMn0bS5fH+IuwyIFgnh9zBdo4DV+6GhygmWM9HyNJSgS0hScp1f5vjtm7oIIOiT9trXrShAkLFSc2IqKNgw==",
      "optional": true
    },
    "on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "requires": {
        "wrappy": "1"
      }
    },
    "p-cancelable": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw=="
    },
    "p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "optional": true,
      "requires": {
        "yocto-queue": "^0.1.0"
      }
    },
    "package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "requires": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
        }
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
    },
    "performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
    },
    "prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc="
    },
    "promise": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/promise/-/promise-7.3.1.tgz",
      "integrity": "sha512-nolQXZ/4L+bP/UGlkfaIujX9BKxGwmQ9OT4mOt5yvy8iK1h3wqTEJCijzGANTCCl9nWjY41juyAn2K3Q1hLLTg==",
      "requires": {
        "asap": "~2.0.3"
      }
    },
    "proto3-json-serializer": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-0.1.8.tgz",
      "integrity": "sha512-ACilkB6s1U1gWnl5jtICpnDai4VCxmI9GFxuEaYdxtDG2oVI3sVFIUsvUZcQbJgtPM6p+zqKbjTKQZp6Y4FpQw==",
      "optional": true,
      "requires": {
        "protobufjs": "^6.11.2"
      }
    },
    "protobufjs": {
      "version": "6.11.2",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-6.11.2.tgz",
      "integrity": "sha512-4BQJoPooKJl2G9j3XftkIXjoC9C0Av2NOrWmbLWT1vH32GcSUHjM0Arra6UfTsVyfMAuFzaLucXn1sadxJydAw==",
      "optional": true,
      "requires": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/long": "^4.0.1",
        "@types/node": ">=13.7.0",
        "long": "^4.0.0"
      }
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ=="
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w=="
    },
    "pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "requires": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "pumpify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pumpify/-/pumpify-2.0.1.tgz",
      "integrity": "sha512-m7KOje7jZxrmutanlkS1daj1dS6z6BgslzOXmcSEpIlCxM3VJH7lG5QLeck/6hgF6F4crFf01UtQmNsJfweTAw==",
      "optional": true,
      "requires": {
        "duplexify": "^4.1.1",
        "inherits": "^2.0.3",
        "pump": "^3.0.0"
      }
    },
    "punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
    },
    "pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "requires": {
        "escape-goat": "^2.0.0"
      }
    },
    "qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.4.2.tgz",
      "integrity": "sha512-RPMAFUJP19WIet/99ngh6Iv8fzAbqum4Li7AD6DtGaW2RpMB/11xDoalPiJMTbu6I3hkbMVkATvZrqb9EEqeeQ==",
      "requires": {
        "bytes": "3.1.1",
        "http-errors": "1.8.1",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "requires": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "dependencies": {
        "ini": {
          "version": "1.3.8",
          "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
          "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew=="
        }
      }
    },
    "readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "optional": true,
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "registry-auth-token": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.1.tgz",
      "integrity": "sha512-6gkSb4U6aWJB4SF2ZvLb76yCBjcvufXBqvvEx1HbmKPkutswjW1xNVRY0+daljIYRbogN7O0etYSlbiaEQyMyw==",
      "requires": {
        "rc": "^1.2.8"
      }
    },
    "registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "requires": {
        "rc": "^1.2.8"
      }
    },
    "request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "requires": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I="
    },
    "resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "requires": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "responselike": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
      "requires": {
        "lowercase-keys": "^1.0.0"
      }
    },
    "retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "optional": true
    },
    "retry-request": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-4.2.2.tgz",
      "integrity": "sha512-xA93uxUD/rogV7BV59agW/JHPGXeREMWiZc9jhcwY4YdZ7QOtC7qbomYg0n4wyk2lJhggjvKvhNX8wln/Aldhg==",
      "optional": true,
      "requires": {
        "debug": "^4.1.1",
        "extend": "^3.0.2"
      }
    },
    "rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "rxjs": {
      "version": "6.6.7",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
      "requires": {
        "tslib": "^1.9.0"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
        }
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
    },
    "semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "requires": {
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
        }
      }
    },
    "send": {
      "version": "0.17.2",
      "resolved": "https://registry.npmjs.org/send/-/send-0.17.2.tgz",
      "integrity": "sha512-UJYB6wFSJE3G00nEivR5rgWp8c2xXvJ3OPWPhmuteU0IKj8nKbG3DrjiOmLwpnHGYWAVwA69zmTm++YG0Hmwww==",
      "requires": {
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "destroy": "~1.0.4",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "1.8.1",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "~2.3.0",
        "range-parser": "~1.2.1",
        "statuses": "~1.5.0"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          },
          "dependencies": {
            "ms": {
              "version": "2.0.0",
              "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
              "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
            }
          }
        },
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        },
        "mime": {
          "version": "1.6.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
          "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.14.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.14.2.tgz",
      "integrity": "sha512-+TMNA9AFxUEGuC0z2mevogSnn9MXKb4fa7ngeRMJaaGv8vTwnIEkKi+QGvPt33HSnf8pRS+WGM0EbMtCJLKMBQ==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.17.2"
      }
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
    },
    "snakeize": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/snakeize/-/snakeize-0.1.0.tgz",
      "integrity": "sha1-EMCI2LWOsHazIpu1oE4jLOEmQi0=",
      "optional": true
    },
    "socket.io": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.4.1.tgz",
      "integrity": "sha512-s04vrBswdQBUmuWJuuNTmXUVJhP0cVky8bBDhdkf8y0Ptsu7fKU2LuLbts9g+pdmAdyMMn8F/9Mf1/wbtUN0fg==",
      "requires": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "debug": "~4.3.2",
        "engine.io": "~6.1.0",
        "socket.io-adapter": "~2.3.3",
        "socket.io-parser": "~4.0.4"
      }
    },
    "socket.io-adapter": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.3.3.tgz",
      "integrity": "sha512-Qd/iwn3VskrpNO60BeRyCyr8ZWw9CPZyitW4AQwmRZ8zCiyDiL+znRnWX6tDHXnWn1sJrM1+b6Mn6wEDJJ4aYQ=="
    },
    "socket.io-parser": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.0.4.tgz",
      "integrity": "sha512-t+b0SS+IxG7Rxzda2EVvyBZbvFPBCjJoyHuE0P//7OAsN23GItzDRdWa6ALxZI/8R5ygK7jAR6t028/z+7295g==",
      "requires": {
        "@types/component-emitter": "^1.2.10",
        "component-emitter": "~1.3.0",
        "debug": "~4.3.1"
      }
    },
    "socks": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.6.2.tgz",
      "integrity": "sha512-zDZhHhZRY9PxRruRMR7kMhnf3I8hDs4S3f9RecfnGxvcBHQcKcIH/oUcEWffsfl1XxdYlA7nnlGbbTvPz9D8gA==",
      "requires": {
        "ip": "^1.1.5",
        "smart-buffer": "^4.2.0"
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
    },
    "source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha1-/0rm5oZWBWuks+eSqzM004JzyhE=",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "spawn-command": {
      "version": "0.0.2-1",
      "resolved": "https://registry.npmjs.org/spawn-command/-/spawn-command-0.0.2-1.tgz",
      "integrity": "sha1-YvXpRmmBwbeW3Fkpk34RycaSG9A="
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
      "dev": true
    },
    "sshpk": {
      "version": "1.17.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.17.0.tgz",
      "integrity": "sha512-/9HIEs1ZXGhSPE8X6Ccm7Nam1z8KcoCqPdI7ecm1N33EzAetWahvQWVqLZtaZQ+IDKX4IyA2o0gBzqIMkAagHQ==",
      "requires": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      }
    },
    "stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha1-VHxws0fo0ytOEI6hoqFZ5f3eGcA="
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
    },
    "stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "optional": true,
      "requires": {
        "stubs": "^3.0.0"
      }
    },
    "stream-shift": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.1.tgz",
      "integrity": "sha512-AiisoFqQ0vbGcZgQPY1cdP2I76glaVA/RauYR4G4thNFgkTqr90yXTo4LYX60Jl+sIlPNHHdGSwo01AvbKUSVQ==",
      "optional": true
    },
    "streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg=="
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "optional": true,
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM="
    },
    "strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo="
    },
    "stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha1-6NK6H6nJBXAwPAMLaQD31fiavls=",
      "optional": true
    },
    "supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "requires": {
        "has-flag": "^3.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
    },
    "teeny-request": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-7.1.3.tgz",
      "integrity": "sha512-Ew3aoFzgQEatLA5OBIjdr1DWJUaC1xardG+qbPPo5k/y/3fMwXLxpjh5UB5dVfElktLaQbbMs80chkz53ByvSg==",
      "optional": true,
      "requires": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.1",
        "stream-events": "^1.0.5",
        "uuid": "^8.0.0"
      },
      "dependencies": {
        "uuid": {
          "version": "8.3.2",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
          "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
          "optional": true
        }
      }
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q=="
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "requires": {
        "nopt": "~1.0.10"
      }
    },
    "tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "requires": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
    },
    "tree-kill": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A=="
    },
    "ts-node": {
      "version": "9.1.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-9.1.1.tgz",
      "integrity": "sha512-hPlt7ZACERQGf03M253ytLY3dHbGNGrAq9qIHWUY9XHYl1z7wYngSr3OQ5xmui8o2AaxsONxIzjafLUiWBo1Fg==",
      "requires": {
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "source-map-support": "^0.5.17",
        "yn": "3.1.1"
      }
    },
    "ts-node-dev": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/ts-node-dev/-/ts-node-dev-1.1.8.tgz",
      "integrity": "sha512-Q/m3vEwzYwLZKmV6/0VlFxcZzVV/xcgOt+Tx/VjaaRHyiBcFlV0541yrT09QjzzCxlDZ34OzKjrFAynlmtflEg==",
      "requires": {
        "chokidar": "^3.5.1",
        "dynamic-dedupe": "^0.3.0",
        "minimist": "^1.2.5",
        "mkdirp": "^1.0.4",
        "resolve": "^1.0.0",
        "rimraf": "^2.6.1",
        "source-map-support": "^0.5.12",
        "tree-kill": "^1.2.2",
        "ts-node": "^9.0.0",
        "tsconfig": "^7.0.0"
      },
      "dependencies": {
        "mkdirp": {
          "version": "1.0.4",
          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
          "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
        }
      }
    },
    "tsconfig": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/tsconfig/-/tsconfig-7.0.0.tgz",
      "integrity": "sha512-vZXmzPrL+EmC4T/4rVlT2jNVMWCi/O4DIiSj3UHg1OE5kCKbk4mfrXc6dZksLgRM/TZlKnousKH9bbTazUWRRw==",
      "requires": {
        "@types/strip-bom": "^3.0.0",
        "@types/strip-json-comments": "0.0.30",
        "strip-bom": "^3.0.0",
        "strip-json-comments": "^2.0.0"
      }
    },
    "tslib": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.3.1.tgz",
      "integrity": "sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw=="
    },
    "tslint": {
      "version": "6.1.3",
      "resolved": "https://registry.npmjs.org/tslint/-/tslint-6.1.3.tgz",
      "integrity": "sha512-IbR4nkT96EQOvKE2PW/djGz8iGNeJ4rF2mBfiYaR/nvUWYKJhLwimoJKgjIFEIDibBtOevj7BqCRL4oHeWWUCg==",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "builtin-modules": "^1.1.1",
        "chalk": "^2.3.0",
        "commander": "^2.12.1",
        "diff": "^4.0.1",
        "glob": "^7.1.1",
        "js-yaml": "^3.13.1",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.3",
        "resolve": "^1.3.2",
        "semver": "^5.3.0",
        "tslib": "^1.13.0",
        "tsutils": "^2.29.0"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
          "dev": true
        }
      }
    },
    "tsutils": {
      "version": "2.29.0",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-2.29.0.tgz",
      "integrity": "sha512-g5JVHCIJwzfISaXpXE1qvNalca5Jwob6FjI4AoPlqMusJ6ftFE7IkkFoMhVLRgK+4Kx3gkzb8UZK5t5yTTvEmA==",
      "dev": true,
      "requires": {
        "tslib": "^1.8.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
          "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
          "dev": true
        }
      }
    },
    "tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
    },
    "type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ=="
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "requires": {
        "is-typedarray": "^1.0.0"
      }
    },
    "typescript": {
      "version": "4.5.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.5.5.tgz",
      "integrity": "sha512-TCTIul70LyWe6IJWT8QSYeA54WQe8EjQFU4wY52Fasj5UKx88LNYKCgBEHcOMOrFF1rKGbD8v/xcNWVUq9SymA=="
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA=="
    },
    "unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "requires": {
        "crypto-random-string": "^2.0.0"
      }
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw="
    },
    "update-notifier": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-5.1.0.tgz",
      "integrity": "sha512-ItnICHbeMh9GqUy31hFPrD1kcuZ3rpxDZbf4KUDavXwS0bW5m7SLbDQpGX3UYr072cbrF5hFUs3r5tUsPwjfHw==",
      "requires": {
        "boxen": "^5.0.0",
        "chalk": "^4.1.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.4.0",
        "is-npm": "^5.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.1.0",
        "pupa": "^2.1.1",
        "semver": "^7.3.4",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "requires": {
            "color-convert": "^2.0.1"
          }
        },
        "chalk": {
          "version": "4.1.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
          "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
          "requires": {
            "ansi-styles": "^4.1.0",
            "supports-color": "^7.1.0"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
        },
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
        },
        "semver": {
          "version": "7.3.5",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
          "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
          "requires": {
            "lru-cache": "^6.0.0"
          }
        },
        "supports-color": {
          "version": "7.2.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
          "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "requires": {
        "punycode": "^2.1.0"
      }
    },
    "url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
      "requires": {
        "prepend-http": "^2.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "optional": true
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
    },
    "uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A=="
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
    },
    "verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
    },
    "websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "requires": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      }
    },
    "websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "requires": {
        "string-width": "^4.0.0"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "requires": {
            "color-convert": "^2.0.1"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
        }
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "requires": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "ws": {
      "version": "8.2.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.2.3.tgz",
      "integrity": "sha512-wBuoj1BDpC6ZQ1B7DWQBYVLphPWkm8i9Y0/3YdHjHKHiohOJ1ws+3OccDWtH+PoC9DZD5WOTrJvNbWvjS6JWaA==",
      "requires": {}
    },
    "xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q=="
    },
    "xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ=="
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA=="
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "requires": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      }
    },
    "yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w=="
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="
    },
    "yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "optional": true
    }
  }
}

'''
'''--- bees-wax-escrow-service/package.json ---
{
  "name": "match-maker-service",
  "version": "1.0.0",
  "description": "",
  "main": "src/index.ts",
  "scripts": {
    "dev": "ts-node-dev --respawn --pretty --transpile-only src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/node": "^16.10.3",
    "tslint": "^6.1.3",
    "typescript": "^4.4.3"
  },
  "dependencies": {
    "@types/express": "^4.17.13",
    "axios": "^0.24.0",
    "bugsnag": "^2.4.3",
    "concurrently": "^7.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "express": "^4.17.2",
    "firebase-admin": "^9.12.0",
    "mongodb": "^4.4.1",
    "near-api-js": "^0.44.2",
    "nodemon": "^2.0.15",
    "socket.io": "^4.2.0",
    "ts-node-dev": "^1.1.8"
  }
}

'''
'''--- bees-wax-escrow-service/src/balance/balanceRouter.ts ---
import express, { Request, Response } from "express";
import { connect } from "near-api-js";
import { rpcConfig } from "../common/near.config";
import { getCollection } from "../db/deposits";

export const balanceRouter = express.Router();

let account;
var initAccount = async () => {
    if (account)
        return true;

    const near = await connect(rpcConfig);
    const ACCOUNT_ID = 'nickbalyanitsa.testnet';
    account = await near.account(ACCOUNT_ID);

    return true;
}

balanceRouter.get("/", async (req: Request, res: Response) => {
    const deposit = (await (await getCollection()).findOne({ wallet: req.query["id"] }));
    if (deposit)
        res.status(200).send(deposit.value.toString());
    else
        res.status(404).send('not found');
});

balanceRouter.post("/", async (req: Request, res: Response) => {
    try {
        if (!req.body.id || !req.body.value) {
            res.status(400).send('bad request');
            return;
        }

        const deposit = (await (await getCollection()).findOne({ wallet: req.body.id }));

        if (deposit && deposit.value >= req.body.value) {
            res.status(200).send(
                await (await getCollection()).updateOne({ wallet: req.body.id }, { $inc: { value: -req.body.value } }) &&
                await initAccount() &&
                await account.sendMoney(req.body.id, req.body.value));
            return;
        }
        else
            res.status(404).send('wallet not found');

    } catch (e: any) {
        res.status(500).send(e.message);
    }
});

'''
'''--- bees-wax-escrow-service/src/balance/depositListener.ts ---
import { archConfig } from "../common/near.config";
import { connect } from "near-api-js";
import { text } from "stream/consumers";
import { getCollection } from "../db/deposits";
import { ObjectId } from "mongodb";

export class DepositListener {

    static delay = (ms) => new Promise(res => setTimeout(res, ms));

    static async getTransactions(startBlock, accountId) {

        let deposits = {};

        const near = await connect(archConfig);

        var latestBlock = (await near.connection.provider.status()).sync_info.latest_block_hash;

        // creates an array of block hashes for given range
        const blockArr = [];
        let blockHash = latestBlock;
        do {
            if (latestBlock == startBlock)
                break;//all processed, nothign to do here (no new blocks addded since last pass)
            const currentBlock = await await near.connection.provider.block({ blockId: blockHash });
            blockArr.push(currentBlock.header.hash);
            blockHash = currentBlock.header.prev_hash;
        } while (blockHash !== startBlock && startBlock != null);

        // returns block details based on hashes in array
        const blockDetails = await Promise.all(
            blockArr.map((blockId) =>
                near.connection.provider.block({
                    blockId,
                })
            )
        );

        // returns an array of chunk hashes from block details
        const chunkHashArr = blockDetails.flatMap((block) =>
            block.chunks.map(({ chunk_hash }) => chunk_hash)
        );

        //returns chunk details based from the array of hashes
        const chunkDetails = await Promise.all(
            chunkHashArr.map(chunk => near.connection.provider.chunk(chunk))
        );

        // checks chunk details for transactions
        // if there are transactions in the chunk we
        // find ones associated with passed accountId

        const transactions: any = chunkDetails.flatMap((chunk) =>
            (chunk.transactions || []).filter((tx: any) => tx.receiver_id === accountId)
        );

        //[{ "Transfer": { "deposit": "1" } }]
        for (let tx of transactions)
            for (let action of (<any>tx).actions) {
                if (action.Transfer)
                    if (action.Transfer.deposit) {
                        if (!deposits[tx.signer_id])
                            deposits[tx.signer_id] = parseInt(action.Transfer.deposit);
                        else
                            deposits[tx.signer_id] += parseInt(action.Transfer.deposit);
                    }
            }

        console.log(deposits);

        for (var id of Object.keys(deposits)) {

            const deposit = (await (await getCollection()).findOne({ wallet: id }));
            if (deposit)
                console.log(await (await getCollection()).updateOne({ wallet: id }, { $inc: { value: deposits[id] } }, true));
            else
                console.log(await (await getCollection()).insertOne({ wallet: id, value: deposits[id] }));
        }

        await DepositListener.delay(1000);
        this.getTransactions(latestBlock, accountId);
    }
}

'''
'''--- bees-wax-escrow-service/src/common/near.config.ts ---

import { KeyPair, keyStores } from "near-api-js";
import * as os from "os";
import * as fs from "fs";

const ACCOUNT_ID = 'nickbalyanitsa.testnet';
const NETWORK_ID = "testnet";
// path to your custom keyPair location (ex. function access key for example account)
const KEY_PATH = '/.near-credentials/testnet/nickbalyanitsa.testnet.json';

const credentials = JSON.parse(fs.readFileSync(os.homedir() + KEY_PATH).toString());
const keyStore = new keyStores.InMemoryKeyStore();
keyStore.setKey(NETWORK_ID, ACCOUNT_ID, KeyPair.fromString(credentials.private_key));

const RPC_API_ENDPOINT = 'https://rpc.testnet.near.org/';
const API_KEY = '19def0ca-0a9a-4556-8ec8-04617ea19894'; //.env

export const rpcConfig = {
    networkId: 'testnet',
    keyStore,
    nodeUrl: RPC_API_ENDPOINT,
    headers: { 'x-api-key': API_KEY },
};

export const archConfig = {
    keyStore,
    networkId: "testnet",
    nodeUrl: "https://archival-rpc.testnet.near.org",
    headers: {}
};
'''
'''--- bees-wax-escrow-service/src/db/deposits.ts ---
import { Db, MongoClient } from "mongodb";
import * as dotenv from "dotenv";

export const getCollection = async () => {
    if (!collection)
        await connectToDatabase();
    return collection;

}

var collection;
export async function connectToDatabase() {

    dotenv.config();

    const client = new MongoClient(process.env.DB_CONN_STRING);

    await client.connect();
    const db: Db = client.db(process.env.DB_NAME);
    collection = db.collection("deposits");
    console.log(`Successfully connected to database: ${db.databaseName} and collection: ${collection.collectionName}`);

    return true;
}
'''
'''--- bees-wax-escrow-service/src/escrow/escrow.service.ts ---
import { Server, Socket } from "socket.io";
import { getCollection } from "../db/deposits";
import { Match } from "./match";

export class Escrow {

    matchLookup = new Map<string, string>();
    matches = new Map<string, Match>();
    sockets = new Map<string, Socket>();

    constructor() {
        let io = new Server(8083, { cors: { origin: '*' }, allowEIO3: true });
        console.log("http server instance created..");

        io.on("connection", (socket) => {
            console.log(socket.id + " connected..");

            socket.on("start", this.onStart.bind(this, socket));
            socket.on("collection", this.onCollection.bind(this, socket));
            socket.on("disconnect", this.onDisconnect.bind(this, socket));

            this.sockets[socket.id] = socket;
        });
    }

    onStart(socket: Socket, json: any) {
        var data = JSON.parse(json);
        console.log("start", data, data.matchId);

        if (!this.matches[data.matchId])
            this.matches[data.matchId] = new Match(data.tier);

        if (this.matches[data.matchId].tier != data.tier) { //previously created match has different tier
            console.error('wrong tier! debug matchmaker');
            return;
        }

        console.log(Object.keys(this.matches));

        this.matches[data.matchId].addPlayer(socket.id);
        this.matchLookup[socket.id] = data.matchId;

        console.log("start", JSON.stringify(this.matches[this.matchLookup[socket.id]]));
        socket.emit("start", JSON.stringify(this.matches[data.matchId].remainingResource));
    }

    onCollection(socket: Socket, value: number) {
        console.log("collection", value);

        console.log(Object.keys(this.matches));
        console.log(this.matchLookup[socket.id]);

        if (!this.matchLookup[socket.id] || !this.matches[this.matchLookup[socket.id]]) {
            console.error('match not created for player');
            return;
        }

        if (!this.matches[this.matchLookup[socket.id]].onCollection(socket.id, value)) {
            this.endMatch(this.matchLookup[socket.id]);
        }

        console.log("res", JSON.stringify(this.matches[this.matchLookup[socket.id]]));
        socket.emit("res", JSON.stringify(this.matches[this.matchLookup[socket.id]]));
    }

    async endMatch(id: string) {
        var value: Match = this.matches[id];
        if (!value) {
            console.info('match aready ended');
            return;
        }

        value.distributeRemainder();

        var playerIds = Object.keys(value.players);

        let initialStake = 1000 / playerIds.length; //1000 should depend on tier
        for (let playerId of playerIds) {

            const deposit = (await (await getCollection()).findOne({ wallet: playerId }));
            if (deposit)
                console.log(await (await getCollection()).updateOne({ wallet: playerId }, { $inc: { value: Math.round(value.players[playerId] - initialStake) } }, true));
            else
                console.error("add a deposit check on server side");

            this.sockets[playerId].emit("end", value.players[playerId]);
        }

        delete this.matches[id];
    }

    onDisconnect(socket: Socket) {
        this.endMatch(this.matches[this.matchLookup[socket.id]]);
    }

}

'''
'''--- bees-wax-escrow-service/src/escrow/match.ts ---
export class Match {

    public tier: number;
    remainingResource: number;

    players: Map<string, number> = new Map<string, number>();

    constructor(tier: number) {
        this.tier = tier;
        this.remainingResource = 1000; //depends on tier
    }

    addPlayer(id: string) {
        this.players[id] = 0;
    }

    onCollection(id: string, value: number) {
        if (this.players[id] === undefined) {
            console.error('unregistered player');
            return false;
        }

        var collected = Math.min(this.remainingResource, value);
        console.log("collected", collected);

        this.remainingResource -= collected;
        this.players[id] += collected;

        console.log("this.remainingResource", this.remainingResource);

        if (this.remainingResource < 1) {
            console.info('match ended, no more resource on map');
            return false;
        }

        return true;
    }

    distributeRemainder() {
        let playerIds = Object.keys(this.players);
        var playerCount = playerIds.length;

        for (let id of playerIds) {
            this.players[id] += this.remainingResource / playerCount;
        }

        this.remainingResource = 0;
    }
}
'''
'''--- bees-wax-escrow-service/src/index.ts ---
import express from "express";
import { connectToDatabase } from "./db/deposits";
import { DepositListener } from "./balance/depositListener";
import { nftRouter } from "./nft/NFTRouter";
import { balanceRouter } from "./balance/balanceRouter";
import cors from "cors";

import Bugsnag from 'bugsnag'
import { Escrow } from "./escrow/escrow.service";
Bugsnag.register('9e4fbc24e93f3b61af7ba23bd26be0f0');

const app = express();

app.use(
    cors({
        origin: (origin, callback) => callback(null, true),
        credentials: true,
    })
);

app.use(express.json());

app.use("/api/nft", nftRouter);
app.use("/api/balance", balanceRouter);

app.listen(8084, async () => {
    console.log(`Listening on port ${8084}`);
});

DepositListener.getTransactions(null, "nickbalyanitsa.testnet");

connectToDatabase();

new Escrow();

'''
'''--- bees-wax-escrow-service/src/nft/NFTRouter.ts ---
import express, { Request, Response } from "express";
import { connect, Contract } from "near-api-js";
import crypto from "crypto";

import { rpcConfig } from "../common/near.config"

export const nftRouter = express.Router();

const ACCOUNT_ID = 'nickbalyanitsa.testnet';

var contract: any;

var initContract = async () => {
    if (contract)
        return true;

    const near = await connect(rpcConfig);
    const account = await near.account(ACCOUNT_ID);

    contract = new Contract(
        account, // the account object that is connecting
        ACCOUNT_ID,
        {
            viewMethods: ["nft_tokens_for_owner"], // view methods do not change state but usually return a value
            changeMethods: ["new_default_meta", "nft_mint"]//, // change methods modify state
        }
    );
    return true;
}

nftRouter.get("/", async (req: Request, res: Response) => {
    res.status(200).send(await initContract() && await contract.nft_tokens_for_owner({ account_id: req.query["id"] }));
});

nftRouter.post("/", async (req: Request, res: Response) => {
    try {

        if (!req.body.id) {
            res.status(400).send('bad request');
            return;
        }

        res.status(200).send(await initContract() && await contract.nft_mint({
            args: {
                "token_id": crypto.randomBytes(12).toString('hex'),
                "receiver_id": req.body.id,
                "token_metadata": getRandomMetadata()
            },

            gas: "300000000000000", // attached GAS (optional)
            amount: "10000000000000000000000" // attached deposit in yoctoNEAR (optional)
        }));
    } catch (e: any) {
        res.status(500).send(e.message);
    }
});

//serve it from external config
var templates = [
    {
        title: "Hatch Boost",
        description: "Reduces Hatch Time",
        media: "https://bafkreidps3om43em6ayzcvn5p6fdaornmdkrow2ab6kamfcbkcgoqbr7g4.ipfs.nftstorage.link",
        extra: "hatch"
    }, {
        title: "Damage Boost",
        description: "Increases Damage",
        media: "https://bafkreihwomwmvstvkrpazgrqa4l6dkam6nywvafxmlptbwcd2y4orrwl5y.ipfs.nftstorage.link/",
        extra: "damage"
    }, {
        title: "HP Boost",
        description: "Increases Health Points",
        media: "https://bafkreidps3om43em6ayzcvn5p6fdaornmdkrow2ab6kamfcbkcgoqbr7g4.ipfs.nftstorage.link/",
        extra: "hp"
    }, {
        title: "Harvest Boost",
        description: "Increases Harvest Speed",
        media: "https://bafkreigwemt362pcybuzspafz3mwgdasrnat3dnbo225ehngt6ngvknq7m.ipfs.nftstorage.link/",
        extra: "harvest"
    }, {
        title: "Armour Boost",
        description: "Decreases Damange Taken",
        media: "https://bafkreicoiigdpcob7h6qdyv5wa6aysowel7xurukg7ok2e2lpslzl2qmre.ipfs.nftstorage.link/",
        extra: "armour"
    }, {
        title: "Build Boost",
        description: "Reduces Build Time",
        media: "https://bafkreihsdlxom5td7e7k7xpnzxu5nqgrbld7xu4wvvtx4b65t4aamuo3hq.ipfs.nftstorage.link/",
        extra: "build"
    }];

var getRandomMetadata = () => {
    var template = { ...templates[Math.floor(Math.random() * templates.length)] };
    var boostObj = {};
    boostObj[template.extra] = 1.1 + Math.random(); //+10..110% boost
    template.extra = JSON.stringify(boostObj);

    return template;
}   
'''
'''--- bees-wax-escrow-service/tsconfig.json ---
{
    "compilerOptions": {
        "module": "commonjs",
        "esModuleInterop": true,
        "target": "es6",
        "moduleResolution": "node",
        "sourceMap": true,
        "outDir": "dist"
    },
    "lib": [
        "es2015"
    ],
    "include": [
        "src/**/*.ts"
    ],
    "exclude": [
        "node_modules",
        "**/*.spec.ts"
    ]
}
'''
'''--- bees-wax-escrow-service/tslint.json ---
{
    "defaultSeverity": "error",
    "extends": [
        "tslint:recommended"
    ],
    "jsRules": {},
    "rules": {},
    "rulesDirectory": []
}
'''
'''--- bees-wax-near/bees-wax-nft/Cargo.toml ---
[package]
name = "bees-wax-nft"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib", "rlib"]
[dependencies]
near-sdk = "*"
near-contract-standards = "*"

'''
'''--- bees-wax-near/bees-wax-nft/src/lib.rs ---
/*!
Non-Fungible Token implementation with JSON serialization.
NOTES:
  - The maximum balance value is limited by U128 (2**128 - 1).
  - JSON calls should pass U128 as a base-10 string. E.g. "100".
  - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some
    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.
  - The contract tracks the change in storage before and after the call. If the storage increases,
    the contract requires the caller of the contract to attach enough deposit to the function call
    to cover the storage cost.
    This is done to prevent a denial of service attack on the contract by taking all available storage.
    If the storage decreases, the contract will issue a refund for the cost of the released storage.
    The unused tokens from the attached deposit are also refunded, so it's safe to
    attach more deposit than required.
  - To prevent the deployed contract from being modified or deleted, it should not have any access
    keys on its account.
*/
use near_contract_standards::non_fungible_token::metadata::{
    NFTContractMetadata, NonFungibleTokenMetadataProvider, TokenMetadata, NFT_METADATA_SPEC,
};
use near_contract_standards::non_fungible_token::{Token, TokenId};
use near_contract_standards::non_fungible_token::NonFungibleToken;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LazyOption;
use near_sdk::json_types::ValidAccountId;
use near_sdk::{
    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,
};

near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    tokens: NonFungibleToken,
    metadata: LazyOption<NFTContractMetadata>,
}

const DATA_IMAGE_SVG_NEAR_ICON: &str = "https://bafkreialbdjiwxsvnqrgycjrp3emc2rkisjshsuwkuwrkmcdyppybmpjgq.ipfs.nftstorage.link";

#[derive(BorshSerialize, BorshStorageKey)]
enum StorageKey {
    NonFungibleToken,
    Metadata,
    TokenMetadata,
    Enumeration,
    Approval,
}

#[near_bindgen]
impl Contract {
    /// Initializes the contract owned by `owner_id` with
    /// default metadata (for example purposes only).
    #[init]
    pub fn new_default_meta(owner_id: ValidAccountId) -> Self {
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: NFT_METADATA_SPEC.to_string(),
                name: "Bees Wax NFT".to_string(),
                symbol: "BWX".to_string(),
                icon: Some(DATA_IMAGE_SVG_NEAR_ICON.to_string()),
                base_uri: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    #[init]
    pub fn new(owner_id: ValidAccountId, metadata: NFTContractMetadata) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        metadata.assert_valid();
        Self {
            tokens: NonFungibleToken::new(
                StorageKey::NonFungibleToken,
                owner_id,
                Some(StorageKey::TokenMetadata),
                Some(StorageKey::Enumeration),
                Some(StorageKey::Approval),
            ),
            metadata: LazyOption::new(StorageKey::Metadata, Some(&metadata)),
        }
    }

    /// Mint a new token with ID=`token_id` belonging to `receiver_id`.
    ///
    /// Since this example implements metadata, it also requires per-token metadata to be provided
    /// in this call. `self.tokens.mint` will also require it to be Some, since
    /// `StorageKey::TokenMetadata` was provided at initialization.
    ///
    /// `self.tokens.mint` will enforce `predecessor_account_id` to equal the `owner_id` given in
    /// initialization call to `new`.
    #[payable]
    pub fn nft_mint(
        &mut self,
        token_id: TokenId,
        receiver_id: ValidAccountId,
        token_metadata: TokenMetadata,
    ) -> Token {
        self.tokens.mint(token_id, receiver_id, Some(token_metadata))
    }
}

near_contract_standards::impl_non_fungible_token_core!(Contract, tokens);
near_contract_standards::impl_non_fungible_token_approval!(Contract, tokens);
near_contract_standards::impl_non_fungible_token_enumeration!(Contract, tokens);

#[near_bindgen]
impl NonFungibleTokenMetadataProvider for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::testing_env;

    use super::*;

    const MINT_STORAGE_COST: u128 = 5870000000000000000000;

    fn get_context(predecessor_account_id: ValidAccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    fn sample_token_metadata() -> TokenMetadata {
        TokenMetadata {
            title: Some("Olympus Mons".into()),
            description: Some("The tallest mountain in the charted solar system".into()),
            media: None,
            media_hash: None,
            copies: Some(1u64),
            issued_at: None,
            expires_at: None,
            starts_at: None,
            updated_at: None,
            extra: None,
            reference: None,
            reference_hash: None,
        }
    }

    #[test]
    fn test_new() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = Contract::new_default_meta(accounts(1).into());
        testing_env!(context.is_view(true).build());
        assert_eq!(contract.nft_token("1".to_string()), None);
    }

    #[test]
    #[should_panic(expected = "The contract is not initialized")]
    fn test_default() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let _contract = Contract::default();
    }

    #[test]
    fn test_mint() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());

        let token_id = "0".to_string();
        let token = contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());
        assert_eq!(token.token_id, token_id);
        assert_eq!(token.owner_id, accounts(0).to_string());
        assert_eq!(token.metadata.unwrap(), sample_token_metadata());
        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
    }

    #[test]
    fn test_transfer() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_transfer(accounts(1), token_id.clone(), None, None);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        if let Some(token) = contract.nft_token(token_id.clone()) {
            assert_eq!(token.token_id, token_id);
            assert_eq!(token.owner_id, accounts(1).to_string());
            assert_eq!(token.metadata.unwrap(), sample_token_metadata());
            assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
        } else {
            panic!("token not correctly created, or not found by nft_token");
        }
    }

    #[test]
    fn test_approve() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
    }

    #[test]
    fn test_revoke() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        // alice revokes bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_revoke(token_id.clone(), accounts(1));
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), None));
    }

    #[test]
    fn test_revoke_all() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        // alice revokes bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_revoke_all(token_id.clone());
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
    }
}

'''