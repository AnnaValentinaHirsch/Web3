*GitHub Repository "myklemykle/stateless-web"*

'''--- .gitpod.yml ---
# This configuration file was automatically generated by Gitpod.
# Please adjust to your needs (see https://www.gitpod.io/docs/introduction/learn-gitpod/gitpod-yaml)
# and commit this file to your remote git repository to share the goodness with others.

# Learn more from ready-to-use templates: https://www.gitpod.io/docs/introduction/getting-started/quickstart

tasks:
  - init: npm install
  - command: npx parcel src/index.html

'''
'''--- old/distrodemo.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
		<link rel="stylesheet" href="styles.css">
  </head>
	<body class="container-fluid">
		<div class="header">
			<div class="row">
				<div class="logo col">
					<img src="assets/logo.png" class="float-start mt-1"/>
				</div><!-- logo -->
				<div class="nav-top col-sm-auto mt-2 d-none d-sm-block">
					<nav class="nav">
						<a class="nav-link mx-1" href="#"><img src="assets/1x_idle.png"></a>
						<a class="nav-link mx-1" href="#"><img src="assets/call_new_selection.png"></a>
						<a class="nav-link mx-1" href="#"><img src="assets/4x_active.png"></a>
					</nav>
				</div><!-- nav-top -->
				<div class="help col">
					<img src="assets/help.png" class="float-end mt-2"/>
				</div><!-- help -->
			</div><!-- row -->
		</div><!-- header -->
		<div class="main text-center">
			<div class="row">
				<!-- <div class="col&#45;3"></div> -->
				<div class="col-6 offset-3 mt-5">
					<h1>Distrotron Payment Demo</h1>
					<div id="near-disconnected" class="my-3">
						<!-- connect button -->
						<button type="button" onclick="utils.signIn()" class="btn btn-outline-dark">Connect to NEAR</button>
					</div><!-- near-disconnected -->
					<div id="near-connected" class="my-3">
						<!-- login info, disconnect button -->
						<h5>Connected as <span id="accountName"></span>: <span id="accountBalance"></span> Ⓝ</h5>
						<button type="button" onclick="utils.signOut()" class="btn btn-outline-dark">Disconnect</button> 
						<!-- minter contract form -->
						<form id="minter-form" class="my-5">
							<fieldset>
								<hr/>
								<div class="mb-3">
									<label for="minter-contract" class="form-label">Name of minter contract:</label>
									<!-- todo: form validation for NEAR account names -->
									<input type="text" class="form-control" id="minter-contract" aria-describedby="minter-help" required>
									<div id="minter-help" class="form-text">Enter the Mintbase contract with the list of minters to pay.</div>
								</div>
								<button type="submit" class="btn btn-outline-dark">Check</button>
							</fieldset>
						</form>
						<!-- report area -->
						<div id="minter-report">
							<div class="alert alert-success d-none" role="alert"></div>
							<div class="alert alert-warning d-none" role="alert"></div>
							<!-- test: contract exists, has a minters list that is not empty -->
							<!-- test: all minters in the list exist? -->
						</div>
						<!-- payment form -->
						<form id="payment-form" class="my-5">
							<fieldset>
								<hr/>
								<div class="mb-3">
									<label for="total-payment" class="form-label">Total Ⓝ to distibute:</label>
									<!-- todo: form validation for NEAR amounts -->
									<!-- todo: form validation: don't exceed wallet contents -->
									<input type="number" min="0.000000000001" class="form-control" id="total-payment" aria-describedby="payment-help" required>
									<div id="payment-help" class="form-text">Enter an amount to divide equally between the minters.</div>
								</div>
								<button type="submit" class="btn btn-outline-dark">Pay</button>
							</fieldset>
						</form>
						<!-- report area -->
						<div id="payment-report">
							<div class="alert alert-success d-none" role="alert"></div>
							<div class="alert alert-warning d-none" role="alert"></div>
							<!-- report: any complications? -->
							<!-- report: how much paid to each minter -->
							<!-- report: total gas cost -->
						</div>
						<div id="tx-success">
							<hr/>
							<h2>Transaction Successful!</h2>
							<a id="tx-hash-btn" class="btn btn-outline-success">View Transaction Details</a> 
							<button id="start-over-btn" type="button" class="btn btn-outline-dark">Make Another Payment</button> 
						</div>
					</div><!-- near-connected -->
				</div><!-- col -->
			</div><!-- row -->
		</div><!-- main -->
		<div class="footer">
			<div class="row">
				<div class="col"></div>
				<div class="nav-btm col-auto mt-2 mb-4 d-block d-sm-none">
					<nav class="nav">
						<a class="nav-link mx-1" href="#"><img src="assets/1x_idle.png"></a>
						<a class="nav-link mx-1" href="#"><img src="assets/call_new_selection.png"></a>
						<a class="nav-link mx-1" href="#"><img src="assets/4x_active.png"></a>
					</nav>
				</div><!-- nav -->
				<div class="col"></div>
			</div>
		</div><!--footer-->
	</div>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
	<script src="distrodemo.js" type="module"></script>
</body>
</html>

'''
'''--- old/distrodemo.js ---

// node version:
// import * as nearApi from "near-api-js";
//
// browser version:
window.onload = async function() {

	const { utils, connect, keyStores, WalletConnection} = nearApi;

	// Configure NEAR in the calling HTML file inside a <script> block, like so:

		/*
	  <script>
    Window.distrotron_config = {
      networkDomain: "near.org",
      networkId: "mainnet",
      contractId: "distribundance.near"
      // optional overrides:
      // nodeUrl: "https://rpc." + networkDomain,
      // walletUrl: "https://wallet." + networkDomain,
      // helperUrl: "https://helper." + networkDomain,
      // explorerUrl: "https://explorer." + networkDomain,
    };
		</script>
		*/

	
	if (typeof Window.distrotron_config === "undefined") {
		console.warn("distrotron_config not configured");
		Window.distrotron_config = {}
	} 

	if (typeof Window.distrotron_config.networkId === "undefined") {
		console.warn("NEAR networkId unconfigured, defaulting to sandbox");
		Window.distrotron_config.networkId = "sandbox";
	}

	if (typeof Window.distrotron_config.networkDomain === "undefined") {
		console.warn("NEAR network domain unconfigured, defaulting to localhost");
		Window.distrotron_config.networkDomain = "localhost";
	}

	const config = {
		networkId: Window.distrotron_config.networkId,
		keyStore: new keyStores.BrowserLocalStorageKeyStore(),
		nodeUrl: Window.distrotron_config.nodeUrl || "https://rpc." + Window.distrotron_config.networkDomain,
		walletUrl: Window.distrotron_config.walletUrl || "https://wallet." + Window.distrotron_config.networkDomain,
		helperUrl: Window.distrotron_config.helperUrl || "https://helper." + Window.distrotron_config.networkDomain,
		explorerUrl: Window.distrotron_config.explorerUrl || "https://explorer." + Window.distrotron_config.networkDomain,
		contractId: Window.distrotron_config.contractId || "distro_test.near", // a wild guess, probably wrong.
	};

	const LOTSAGAS = "300000000000000"; // ATM this is the max gas that can be attached to a transaction

	///////////
	//
	// some simple utils for a simple script.

	const defined = (el) => {
		return (el != null && typeof el !== 'undefined');
	}

	// show/hide elements the bootstrap way:
	const bsHide = (el) => {
		if (defined(el))
			// el.classList.add('d-none');
			el.addClass('d-none');
	}
	const bsShow = (el) => {
		if (defined(el))
			//el.classList.remove('d-none');
			el.removeClass('d-none');
	}
	const bsDisable = (el) => {
		if (defined(el))
			// el.disabled = true;
			el.prop('disabled', true);
	}
	const bsEnable = (el) => {
		if (defined(el))
			// el.disabled = false;
			el.prop('disabled', false);
	}

	// reload the same page with no query args:
	const startOver = () => {
		window.location.href = window.location.origin + window.location.pathname ;
	}

	window.wallet = {};
	window.near = {};
	window.nearAccount = {};

	// export async function init() {
	async function init() {
		// connect to blockchain
		window.near = await connect(config);

		// connect to wallet
		window.wallet = new WalletConnection(window.near);

	};

	// redirects user to wallet to authorize your dApp
	// this creates an access key that will be stored in the browser's local storage
	// access key can then be used to connect to NEAR and sign transactions via keyStore

	// export const signIn = () => {
	//const signIn = () => {
	async function signIn(){
		await window.wallet.requestSignIn(
			config.contractId, // contract requesting access
			"Distrotron", // optional
			// "http://YOUR-URL.com/success", // optional
			// "http://YOUR-URL.com/failure" // optional
		);
	};

	// export async function signOut(){
	async function signOut(){
		await window.wallet.signOut();
		window.location.reload();
	};

	// Try to get the list of minters from the minter contract.
	// export async function submitMinterForm(e){
	async function submitMinterForm(e){
		e.preventDefault();

		const mc = new nearApi.Contract(
			window.nearAccount, // the account object that is connecting
			$("#minter-contract").val(),
			{
				// name of contract you're connecting to
				viewMethods: ["list_minters"], // view methods do not change state but usually return a value
				sender: window.nearAccount, // account object to initialize and sign transactions.
			}
		);

		let report = $("#minter-report .alert-success");
		let errReport = $("#minter-report .alert-warning");
		let payform = $("#payment-form");
		let payformForm = $("#payment-form fieldset");
		bsHide(report); bsHide(errReport);
		
		// call listMinters() on the contract:
		try { 
			let minters = await mc.list_minters();
			// TODO: test the list somewhat.
			//

			// report results
			report.html("contract '" + mc.contractId + "' has " + minters.length + " minters: <br/>" + minters.join(", "));
			bsShow(report);
			bsShow(payform);
			bsEnable(payformForm);

			showPaymentUI(mc.contractId);
		} catch(err) { 
			// if errors, report them
			console.log(err);
			errReport.html(err);
			bsShow(errReport);
			bsDisable(payformForm);
		}
	};

	// decorate & show other UI that needs a valid contract to work
	function showPaymentUI(mbContractId) {
			let mbContractName = mbContractId.split('.');
			$(".distrotron-contract-firstname").html(mbContractName.shift());
			$(".distrotron-contract-restname").html('.' + mbContractName.join('.'));
			bsShow($(".distrotron-contract-found"));
	}

	// Call the distrotron to distribute some NEAR
	// export async function submitPaymentForm(e){

	async function payMinters(minterContract, totalPayment, reportEl, errReportEl, meta) {
		bsHide(reportEl); bsHide(errReportEl);

		let allMeta = Object.assign({
			minterContract: minterContract,
			totalPayment: totalPayment
		}, meta);

		const dc = new nearApi.Contract(
			window.wallet.account(), // the connected wallet account
			config.contractId, 	// address of the distrotron contract
			{
				changeMethods: ["pay_minters", "split_payment"],
				sender: window.nearAccount, // account object to initialize and sign transactions.
			}
		);

		try {
			let net_payment = await dc.pay_minters({
				args: {
					minter_contract: minterContract,
				},
				gas: LOTSAGAS, // attached GAS 
				amount: totalPayment, // attached yoctoNear
				meta: JSON.stringify(allMeta)
			});

			///////////////////
			// Execution stops here.
			// The call to a payable method is REDIRECTED to the NEAR Wallet page! 
			// On success, the NEAR wallet page redirects back to our window.location.href 
			//      with a "?transactionHashes=F6KN3S7MtBfb6ojoxhsuKeLg4fi2xxErRnfkMeek2gfg" query,
			//      plus whatever metadata was provided in the "meta" field above.
			//
			// Therefore, we should never see this message:
			contract.error("NEAR redireciton failed!"); 

		} catch(err) { 
			errReportEl.html(err);
			console.log(err);
			bsShow(errReportEl);
		}
	};

	async function submitPaymentForm(e){
		e.preventDefault();

		let reportEl = $("#main-payment-report .alert-success");
		let errReportEl = $("#main-payment-report .alert-warning");
		let minterContract = $("#minter-contract").val();
		let totalPayment = utils.format.parseNearAmount($("#total-payment").val());

		return await payMinters(minterContract, totalPayment, reportEl, errReportEl);
	};

	async function submitTipButton(e){
		e.preventDefault();

		let form = $(e.target);

		let reportEl = form.find(".payment-report .alert-success");
		let errReportEl = form.find(".payment-report .alert-warning");
		let minterContract = $("#minter-contract").val();
		let tipAmount = utils.format.parseNearAmount(form.find(".tip-amount").val());

		return await payMinters(minterContract, tipAmount, reportEl, errReportEl);
	}

	// window.onload = async function(){

		await init();
		const urlSearchParams = new URLSearchParams(window.location.search);
		const params = Object.fromEntries(urlSearchParams.entries());

		// meta == any previous state reflected back by NEAR Wallet:
		let meta = {};
		if (params.signMeta){
			try { // could be garbled ...
				meta = JSON.parse(params.signMeta);
			} catch {}
		}

		if (window.wallet.isSignedIn()) {
			bsHide($(".near-disconnected"));
			bsShow($(".near-connected"));

			window.nearAccount = await near.account(wallet.getAccountId());
			$(".accountName").html(window.nearAccount.accountId);

			window.nearAccount.__balance = await window.nearAccount.getAccountBalance();
			$("#accountBalance").html(utils.format.formatNearAmount(window.nearAccount.__balance.available, 3));

			if (params.errorCode) {
				// returned here after a tx failure!  
				// bsHide($("#minter-form"));
				// bsHide($("#payment-form"));
				// bsShow($(".tx-error"));
				// bsHide($(".tx-success");
				//
				// not going to talk up this error cuz the Wallet should already have reported it.
				// Just reload the page without query args, to try again.
				startOver();

			} else if (params.transactionHashes) {
				// returned here after a tx success!  give a link to the explorer
				$("a#tx-hash-btn").attr('href',window.near.config.explorerUrl + '/transactions/' + params.transactionHashes);
				$("#start-over-btn").on('click',startOver); 
				bsHide($("#minter-form"));
				bsHide($("#payment-form"));
				bsHide($(".tx-error"));
				bsShow($(".tx-success"));
				// if (meta.minterContract) {
				// 	showPaymentUI(meta.minterContract);
				// }

			} else {
				bsHide($(".tx-error"));
				bsHide($(".tx-success"));
				bsShow($("#minter-form"));
				bsHide($("#payment-form")); // not shown at first ...

				$("#minter-form").on("submit", submitMinterForm);
				$("#payment-form").on("submit", submitPaymentForm);
				$("form.tip-button").on("submit", submitTipButton);

			}
			
		} else { // not signed in
			bsHide($(".near-connected"));
			bsShow($(".near-disconnected"));
		}

		window.utils = {
			signIn: signIn,
			signOut: signOut,
		};
	// }

};

'''
'''--- package.json ---
{
  "name": "stateless-web",
  "version": "1.0.0",
  "description": "Cooperative NFT marketplace",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/myklemykle/stateless-web.git"
  },
  "author": "mykle hansen",
  "license": "Unlicense",
  "bugs": {
    "url": "https://github.com/myklemykle/stateless-web/issues"
  },
  "homepage": "https://github.com/myklemykle/stateless-web#readme",
  "dependencies": {
    "@mintbase-js/sdk": "^0.4.1-beta.0",
    "@near-wallet-selector/core": "^8.4.0",
    "@near-wallet-selector/here-wallet": "^8.4.0",
    "@near-wallet-selector/ledger": "^8.4.0",
    "@near-wallet-selector/meteor-wallet": "^8.4.0",
    "@near-wallet-selector/modal-ui": "^8.4.0",
    "@near-wallet-selector/my-near-wallet": "^8.4.0",
    "@near-wallet-selector/near-wallet": "^8.4.0",
    "@near-wallet-selector/sender": "^8.4.0",
    "@types/react": "^18.2.19",
    "crypto-browserify": "^3.12.0",
    "near-api-js": "^2.1.4",
    "parcel": "^2.9.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.15.0",
    "stream-browserify": "^3.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.22.10",
    "buffer": "^6.0.3",
    "https-browserify": "^1.0.0",
    "process": "^0.11.10",
    "punycode": "^1.4.1",
    "stream-http": "^3.2.0",
    "url": "^0.11.1"
  }
}

'''
'''--- readme.md ---
Coötoo presents: a User Interface for more cooperation and less competition.
-

You can now display any Mintbase store using the Coötoo UI.

**We offer a minimalistic interface with focus on the art.**

![image](src/assets/mockup_thumb.jpg)

**Prices are not shown by default.** If the art speaks to you, click to see more information. 

Because we recognise sometimes it’s not about buying, but enjoying.

**We don’t have the scroll of doom.** If you want to see more, you have to click.

This allows you to take time and appreciate the art that is in front of you.

Instead of sorting by latest mint or lowest price, **we display NFTs in a random order.**

Creators don’t need to be constantly minting or listing to compete for display space.

Who sold more, who minted more often - these metrics often become vicious circles while discovery and enjoyment suffers.

That’s why we made conscious choices to shift the focus away from competition. 

.

We hope you enjoy this way of viewing NFTs.

*Let’s nourish our innate need for cooperation.*

.

**DEMO VIDEO:** https://youtu.be/xQN59w3IO8U

**LIVE DEMO:** https://encode-hackathon-demo-ct5pzswt6-mintland-demo.vercel.app/

----
__CONTENTS__
This application is built with React (logic) and Bootstrap 5 (design).  It uses the NEAR JS Api for contract interaction, the Mintbase GraphQL database for queries, and the NEAR Wallet Selector for wallet interface.  The user profile data is sourced from Near BOS. Parcel.js. is the compilation & deployment tool. npm is the Node/Javascript package manager.

__ONE-CLICK DEPLOY:__

* With [Vercel](https://www.vercel.com): 
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fmyklemykle%2Fstateless-web&env=NETWORKID,MINTBASECONTRACTID&envDescription=NETWORKID%20should%20be%20%22mainnet%22%20or%20%22testnet%22.%20%20See%20.env.example%20for%20more%20details%20on%20required%20%26%20optional%20environment%20variables.&envLink=https%3A%2F%2Fgithub.com%2Fmyklemykle%2Fstateless-web%2Fblob%2Fmaster%2F.env.example&build-command=npx%20parcel%20build%20src%2Findex.html%20--no-scope-hoist%20--public-url%20.%2F&install-command=npm%20install)

__DEV SETUP:__

1) [Install](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) node & npm.

2) Install all required node modules with npm.

```
npm install
```

3) Install [npx](https://www.npmjs.com/package/npx) globally.

```
npm install -g npx
```

__CONFIGURE:__

* Copy `.env.example` to `.env`, and configure the environment variables within.
    * You must set at least `NETWORKID` and `MINTBASECONTRACTID`.
    * You must rebuild the site to see changes take effect.

* If environment variables are not an option, edit index.html to change the hardcoded values within window.stateless_config.

__BUILD:__

This project is packaged/built/tested with [Parcel](https://parceljs.org/).
To build & host the site in development mode:

```
npx parcel src/index.html
```

To generate an optimized site for manual deployment:
```
npx parcel build src/index.html --no-scope-hoist --public-url ./
```

'''
'''--- src/assets/1x_active.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="20" height="20" fill="#555555"/>
</svg>

'''
'''--- src/assets/1x_idle.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="20" height="20" fill="#D7D7D7"/>
</svg>

'''
'''--- src/assets/4x_active.svg ---
<svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1" width="20" height="20" fill="#555555"/>
<path d="M10.9998 0V20" stroke="white" stroke-width="3"/>
<path d="M20.9998 9.95923L0.999923 10.0408" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/4x_idle.svg ---
<svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1" width="20" height="20" fill="#D7D7D7"/>
<path d="M11 0V20" stroke="white" stroke-width="3"/>
<path d="M21 9.95923L1.00017 10.0408" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/call_new_selection.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="10" cy="10" r="10" fill="black"/>
<path d="M16.1111 3.0769C16.1112 4.99998 15.3917 9.99998 10.0001 9.99998C4.60838 9.99998 3.07697 14.3445 3.07697 16.1539" stroke="white" stroke-width="2"/>
<path d="M16.9231 16.1111C15 16.1112 10 15.3917 10 10.0001C10 4.60838 5.65553 3.07697 3.84614 3.07697" stroke="white" stroke-width="2"/>
<path d="M10.0159 19.2325C8.656 17.8728 5.62917 13.8285 9.44166 10.016C13.2542 6.20355 11.265 2.04866 9.98557 0.769237" stroke="white" stroke-width="2"/>
<path d="M0.769287 10.016C2.12906 8.65612 6.1733 5.62929 9.98579 9.44179C13.7983 13.2543 17.9532 11.2651 19.2326 9.9857" stroke="white" stroke-width="2"/>
</svg>

'''
'''--- src/assets/help.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="12" fill="black"/>
<path d="M10.7388 15.3955H12.8164C12.8164 15.1035 12.8239 14.8452 12.8389 14.6206C12.8538 14.3885 12.8913 14.1714 12.9512 13.9692C13.0111 13.7671 13.1009 13.5687 13.2207 13.374C13.348 13.1794 13.5239 12.9735 13.7485 12.7563C14.1004 12.4419 14.4561 12.1012 14.8154 11.7344C15.1823 11.3675 15.5117 10.9707 15.8037 10.5439C16.0957 10.1247 16.3353 9.6792 16.5225 9.20752C16.7096 8.72835 16.8032 8.21924 16.8032 7.68018C16.8032 7.00635 16.6947 6.40739 16.4775 5.8833C16.2604 5.35921 15.946 4.91374 15.5342 4.54688C15.1224 4.18001 14.617 3.90299 14.0181 3.71582C13.4266 3.52116 12.7528 3.42383 11.9966 3.42383C11.3153 3.42383 10.6789 3.51742 10.0874 3.70459C9.50342 3.88428 8.99805 4.14632 8.57129 4.49072C8.13704 4.84261 7.79264 5.26937 7.53809 5.771C7.28353 6.27262 7.15251 6.83789 7.14502 7.4668H9.22266C9.22266 7.07747 9.30127 6.7443 9.4585 6.46729C9.61572 6.18278 9.82536 5.94694 10.0874 5.75977C10.342 5.58008 10.634 5.44906 10.9634 5.3667C11.3003 5.27686 11.6447 5.23193 11.9966 5.23193C12.4533 5.23193 12.8576 5.29183 13.2095 5.41162C13.5614 5.53141 13.8534 5.70736 14.0854 5.93945C14.2951 6.14909 14.4523 6.40739 14.5571 6.71436C14.6694 7.01383 14.7256 7.35824 14.7256 7.74756C14.7256 8.12191 14.6545 8.47754 14.5122 8.81445C14.37 9.15137 14.1903 9.46956 13.9731 9.76904C13.7485 10.076 13.5015 10.368 13.2319 10.645C12.9699 10.922 12.7116 11.1916 12.457 11.4536C12.0827 11.798 11.7832 12.0975 11.5586 12.3521C11.334 12.5991 11.1618 12.8574 11.042 13.127C10.9222 13.404 10.8436 13.7184 10.8062 14.0703C10.7687 14.4147 10.7463 14.8564 10.7388 15.3955ZM10.5029 18.9106C10.5029 19.255 10.6077 19.5433 10.8174 19.7754C11.0345 20.0075 11.3564 20.1235 11.7832 20.1235C12.21 20.1235 12.5319 20.0075 12.749 19.7754C12.9736 19.5433 13.0859 19.255 13.0859 18.9106C13.0859 18.5513 12.9736 18.2518 12.749 18.0122C12.5319 17.7726 12.21 17.6528 11.7832 17.6528C11.3564 17.6528 11.0345 17.7726 10.8174 18.0122C10.6077 18.2518 10.5029 18.5513 10.5029 18.9106Z" fill="white"/>
</svg>

'''
'''--- src/assets/wallet_connected.svg ---
<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12.5" cy="12.5" r="11.5" stroke="black" stroke-width="2"/>
<circle cx="12.5" cy="12.5" r="7.5" stroke="black" stroke-width="2"/>
<circle cx="12.5" cy="12.5" r="3.5" stroke="black" stroke-width="2"/>
</svg>

'''
'''--- src/assets/wallet_not_connected.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="11" stroke="black" stroke-width="2" stroke-dasharray="4 4"/>
</svg>

'''
'''--- src/components/GridOfNFTs.js ---
import { Link, useLoaderData, useNavigation } from "react-router-dom";

function NFTInGrid(props){
	const nav = useNavigation()

	if (nav.state === "loading") {
		return(
						<div className="nft-loading" />
		)
	} else if (! props.nft_record) {
		// Here is how we handle missing records, when the total set isn't an even multiple of 4
		return(

						<div className="no-nft" />

		)
	} else{ 
		let nft = props.nft_record
		return(

						<div className="nft-col col-sm-5">
							<Link to={'/id/' + nft.metadata_id}>
								<img src={nft.media_url} className="nft-img img-fluid"/>
							</Link>
						</div>

		)
	}
}

export default function GridOfNFTs(props){
	let gridItems = props.gridItems
	return(

				<div className="nft-4up">
          <div className="row align-items-center">
            <div className="col-sm-1"></div>
            <NFTInGrid nft_record={gridItems[0]}  />
            <NFTInGrid nft_record={gridItems[1]}  />
            <div className="col-sm-1"></div>
          </div>
          <div className="row align-items-center">
            <div className="col-sm"></div>
            <NFTInGrid nft_record={gridItems[2]}  />
            <NFTInGrid nft_record={gridItems[3]}  />
            <div className="col-sm"></div>
          </div>
        </div>

	)
}

'''
'''--- src/components/HeaderFooter.js ---
import { ViewSelector, Ident } from './Nav';
import { Link } from "react-router-dom"
import { singleSelectorPath, reloadSelectorPath, gridSelectorPath } from '../util'

export function Header(props){
	let singlePath = singleSelectorPath(props.nftGallery, props.nftGalleryCursor, props.viewMode, props.page)
  let reloadPath = reloadSelectorPath(props.nftGallery, props.nftGalleryCursor, props.viewMode, props.page)
  let gridPath   = gridSelectorPath(props.nftGallery, props.nftGalleryCursor, props.viewMode, props.page)

	return(

			<div className="header">
				<nav className="row">

					<div className="logo col">
						<Link to="/">
							<div className="site-name float-start mt-1">{window.stateless_config.sitename}</div>
						</Link>
					</div>

					<div className="nav-top col-sm-auto mt-2 d-none d-sm-block">
						<ViewSelector id="selector-top" 
							viewMode={props.viewMode}
							singlePath={singlePath}
							reloadPath={reloadPath}
							gridPath={gridPath}
						/>
					</div>

					<div className="col">
						<div className="float-end mt-2">
							<Ident id="ident" walletSelector={props.walletSelector} walletClick={props.walletClick}/>
						</div>
					</div>

				</nav>
			</div>

	)
}

export function Footer(props){
	let singlePath = singleSelectorPath(props.nftGallery, props.nftGalleryCursor, props.viewMode, props.page)
  let reloadPath = reloadSelectorPath(props.nftGallery, props.nftGalleryCursor, props.viewMode, props.page)
  let gridPath   = gridSelectorPath(props.nftGallery, props.nftGalleryCursor, props.viewMode, props.page)

	return(

			<div className="footer">
        <nav className="row">

          <div className="col"></div>

          <div className="nav-btm col-auto mt-2 mb-4 d-block d-sm-none">
						<ViewSelector id="selector-bottom" className="nav" 
							viewMode={props.viewMode}
							singlePath={singlePath}
              reloadPath={reloadPath}
              gridPath={gridPath}
						/>
          </div>

          <div className="col"></div>

        </nav>
      </div>

	)
}

'''
'''--- src/components/NFTInGrid.js ---
import { Link, useLoaderData, useNavigation } from "react-router-dom";

export default function NFTInGrid(props){
	const nav = useNavigation()

	if (nav.state === "loading") {
		return(
						<div className="nft-loading" />
		)
	} else if (! props.nft_record) {
		// Here is how we handle missing records, when the total set isn't an even multiple of 4
		return(

						<div className="no-nft" />

		)
	} else{ 
		let nft = props.nft_record
		return(

						<div className="nft-col col-sm-5">
							<Link to={'/id/' + nft.metadata_id}>
								<img src={nft.media_url} className="nft-img img-fluid"/>
							</Link>
						</div>

		)
	}
}

'''
'''--- src/components/NFTSingle.js ---
import { Link, useLoaderData, useNavigation } from "react-router-dom";

export default function NFTSingle(props){
	const nav = useNavigation()

	if (nav.state === "loading") {
		return(
						<div className="nft-loading" />
		)
	} else if (! props.nftRecord) {
		return(

						<div className="no-nft" />

		)
	} else{ 
		let nft = props.nftRecord
		return(

					<div className="nft-single nft-1-view">
            <Link to={'/id/' + nft.metadata_id}>

              <div className="nft-1up">
                <div className="row align-items-center">
                  <div className="nft-col col-sm-12">
                    <img src={nft.media_url} className="nft-img img-fluid"/>
                  </div>
                </div>
              </div>

            </Link>
          </div>

		)
	}
}

'''
'''--- src/components/Nav.js ---
import React from 'react'
import { useEffect, useState, useRef } from 'react';
import { Link } from "react-router-dom";

export function ViewSelector(props){

	return (
		<div className="selector nav">

			<Link className="nav-link mx-1" to={ props.singlePath }>
				<img id="view-1x-button" src={
					// showing this as active for both single and detail views
					props.viewMode != "grid" ?  require("../assets/1x_active.svg") : require("../assets/1x_idle.svg")
				} />
			</Link>

			<Link className="nav-link mx-1" to={ props.reloadPath }>
				<img id="view-reselect-button" src={
					require("../assets/call_new_selection.svg")
				} />
			</Link>

			<Link className="nav-link mx-1" to={ props.gridPath }>
				<img id="view-4x-button" src={
					props.viewMode == "grid" ? require("../assets/4x_active.svg") : require("../assets/4x_idle.svg")
				}/>
			</Link>
		</div>
	)
}

// The user wallet control and the site help link
export function Ident(props){

	let walletConnectedIcon = require("../assets/wallet_connected.svg");
	let walletNotConnectedIcon = require("../assets/wallet_not_connected.svg");

	function helpClick(e){
		alert("help!")
	}

	return (
		<div className="ident">
			<img src={ props.walletSelector?.isSignedIn() ? walletConnectedIcon : walletNotConnectedIcon } className="pe-2" onClick={props.walletClick}/> 
			<img src={require("../assets/help.svg")} onClick={helpClick} /> 
		</div>
	)
}

'''
'''--- src/components/PageHeadings.js ---
import { Link } from 'react-router-dom'

export function ArtistHeading(props){
  return(

        <div className="profile-info artist-info container text-center mt-5 mb-5">
          <div className="row mb-4">
            <div className="col">
							<Link to={"https://near.social/mob.near/widget/ProfilePage?accountId=" + props.artistId} >
								<div className="profile-image-frame rounded-circle">
									<img className="profile-image" src={ props.profile && props.profile.image ? props.profile.image.src : require("../assets/generic_user.jpg") } />
									</div>
							</Link>
            </div>
          </div>
          <div className="row">
            <div className="col text-uppercase">
							{ props.profile?.name || props.artistId }
            </div>
          </div>
          <div className="row">
            <div className="col text-uppercase">
							{ props.profile?.description }
            </div>
          </div>
        </div>

  )
}

export function OwnerHeading(props){
  return(

        <div className="profile-info owner-info container text-center mt-5 mb-5">
          <div className="row mb-4">
            <div className="col">
							<Link to={"https://near.social/mob.near/widget/ProfilePage?accountId=" + props.ownerId} >
								<div className="profile-image-frame rounded-circle">
									<img className="profile-image" src={ props.profile && props.profile.image ? props.profile.image.src : require("../assets/generic_user.jpg") } />
								</div>
							</Link>
            </div>
          </div>
          <div className="row">
            <div className="col text-uppercase">
							{ props.profile?.name || props.ownerId }
            </div>
          </div>
          <div className="row">
            <div className="col text-uppercase">
							{ props.profile?.description }
            </div>
          </div>
        </div>

  )
}

'''
'''--- src/fetch.js ---
import { redirect} from 'react-router-dom'

// gallery cache, static to this scope:
let nftGallery = []
let nftGalleryCursor = 0;
let nftGalleryQueryMode = "store" // "store", "artist" or "owner"

// Shuffle an array 
// https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
function shuffle(array) {
  let currentIndex = array.length,  randomIndex

  // While there remain elements to shuffle.
  while (currentIndex != 0) {

    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex)
    currentIndex--

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]]
  }

  return array
}

// Tidy up & fix potential glitches in gallery data:
function sanitizeGallery(g){
	// Jettison any records with a null medial field.
	g = g.filter((nft)=> nft.media != null);

	for (let i = 0; i < g.length; i++){
		// sometimes the media field is a URI, other times it's a fragment.
		if (g[i].media.match(/^http/)) {
			g[i].media_url = g[i].media
		} else {
			g[i].media_url = g[i].base_uri + '/' + g[i].media
		}
	}
}

// Tidy up & fix potential glitches in NFT data:
function sanitizeNFT(n){
	if (n.metadata.length == 1) {
		n.metadata = n.metadata[0]
	} else {
		throw new Error("weird query result")
	}

	if (n.minters.length == 1) {
		n.minter = n.minters[0].minter
	} else {
		throw new Error("weird number of minters")
	}

	// query limits this to one listing (the cheapest) but it can still be zero.
	if (n.listings.length == 1) {
		n.listing = n.listings[0]
	} else if (n.listings.length > 1){
		throw new Error("weird number of listings")
	}

	if (n.tokenCount?.aggregate?.count){
		n.count = n.tokenCount.aggregate.count
	}

	if (n.minters.length == 1) {
		n.metadata.minter = n.minters[0]
	} else {
		throw new Error("weird number of minters!")
	}

	// "collectors" don't include the minter.
	n.collectors = n.collectors.filter(c => {
		return (c.owner != n.minter)
	}); // interestingly, JS requires a semicolon here because the next line starts with an array bracket

	['media','description','title','tags','media_type'].forEach((field)=>{
		// These are the fields I sometimes see as duplicates, which is lame schematics.
		// If they are blank in the parent & present in the reference_blob, promote them.
		if (! n.metadata[field]){
			if (n.metadata.reference_blob && n.metadata.reference_blob[field])
				n.metadata[field] = n.metadata.reference_blob[field]
			else
				// just blank i guess?
				n.metadata[field] = null
		}
	})

	if (n.metadata.media.match(/^http/)) {
		n.metadata.media_url = n.metadata.media
	} else {
		n.metadata.media_url = n.metadata.base_uri + '/' + n.metadata.media
	}
}

// Loader for NFT gallery browsing.  
// Fetches the thing-id (metadataId) and an image for every NFT in the gallery.
// Tries to clean up a few obvious data glitches -- hopefully not present in mainnet data?
// Shuffles the list randomly after fetching.
// Caches the list in nftGallery[].
//
export async function galleryLoader({params, request}) {
	if (! isNaN(parseInt(params.page)))
		params.page = parseInt(params.page)

	if (params.queryMode != nftGalleryQueryMode) {
		// Change query mode 
		nftGalleryQueryMode = params.queryMode
		// Clear cache
		params.nftGallery = nftGallery = []
	}

	if (params.page == -1) { 
		// Handle a reload request after running off the end of the gallery:
		// Clear cache 
		params.nftGallery = nftGallery = []

		// Redirect to the same route/path we're on, but with no page number (i.e. page number zero)
		let url = new URL(request.url)
		if (url.pathname.match(/\/-1$/)){
			return redirect(url.pathname.replace(/\/-1$/, '')
				+ url.search  // if any
			) 
		} else {
			throw new Error("cant grok path to rewrite it")
		}
	}

	if (nftGallery.length > 0) {
		// Gallery is already loaded
		params.nftGallery = nftGallery
		params.nftGalleryCursor = nftGalleryCursor
		return params
	}

	let result
	if (params.queryMode?.match(/^artist.*/)) {
		console.log("fetching minter nfts")
		// Symbol mismatch: we call the person who mints art "artist", but Mintbase calls them "minter"
		result = await fetchMinterNFTs(window.stateless_config.networkId,
			window.stateless_config.mintbaseApiKey,
			window.stateless_config.mintbaseContractId,
			params.artistId
		).then(r => r.json())

	} else if (params.queryMode?.match(/^owner.*/)) {
		console.log("fetching owner nfts")
		result = await fetchOwnerNFTs(window.stateless_config.networkId,
			window.stateless_config.mintbaseApiKey,
			window.stateless_config.mintbaseContractId,
			params.ownerId
		).then(r => r.json())

	} else { 
		console.log("fetching all store nfts")
		result = await fetchAllNFTs(window.stateless_config.networkId,
			window.stateless_config.mintbaseApiKey,
			window.stateless_config.mintbaseContractId,
		).then(r => r.json())
	}
	
	console.log("done fetching")
	nftGallery = result.data.nftList

	// Cleanup some bad data issues:
	sanitizeGallery(nftGallery)
	
	// Shuffle!
	shuffle(nftGallery)

	params.nftGallery = nftGallery
	params.nftGalleryCursor = nftGalleryCursor
	return params
}

// Wrappers around galleryLoader for 'artist' and 'owner' modes.
// Seems we have to do this sort of hacky-looking thing, or else uglier things,
// to get state from the route definition to the route loader.
export async function artistLoader(args){
	args.params.queryMode = "artist-" + args.params.artistId
	return galleryLoader(args)
}

export async function ownerLoader(args){
	args.params.queryMode = "owner" + args.params.ownerId
	return galleryLoader(args)
}

export async function nftLoader({params, request}){
	result = await fetchNFTMeta(window.stateless_config.networkId,
		window.stateless_config.mintbaseApiKey,
		params.nftid,
	).then(r => r.json())

	params.nft = result.data
	sanitizeNFT(params.nft)
	
	// if we have a gallery loaded, set the cursor to this particular NFT's index
	if (nftGallery.length) {
		let n = nftGallery.findIndex(o => o.metadata_id == params.nftid)
		if (n > -1)
			nftGalleryCursor = n
	}

	params.nftGallery = nftGallery
	params.nftGalleryCursor = nftGalleryCursor
	return params
}

export async function queryGallery(network, apikey, query){
	// network should be "mainnet" or "testnet"
	return fetch("https://graph.mintbase.xyz/" + network, { 
			method: "POST",
			headers: {
			  "Content-Type": "application/json",
			  "Accept": "application/json",
				"mb-api-key": apikey,  
			},
			body: JSON.stringify({query: query})
		}
	)
}

export async function fetchAllNFTs(network, apikey, galleryId){
	return queryGallery(network, apikey, galleryQuery(galleryId))
}

export async function fetchMinterNFTs(network, apikey, galleryId, minterId){
	return queryGallery(network, apikey, minterQuery(galleryId, minterId))
}

export async function fetchOwnerNFTs(network, apikey, galleryId, ownerId){
	return queryGallery(network, apikey, ownerQuery(galleryId, ownerId))
}

export async function fetchNFTMeta(network, apikey, metadataId){
	return queryGallery(network, apikey, nftQuery(metadataId))
}

export function galleryQuery(galleryId) {
	return `query MyGalleryQuery {
		nftList: mb_views_nft_metadata_unburned(
			where: {nft_contract_id: {_eq: "` + galleryId + `"}}
		) {
			base_uri
			media
			metadata_id
			reference
		}
	}`
}

export function minterQuery(galleryId,minterId) {
	return `query MyMinterQuery {
		nftList: mb_views_nft_metadata_unburned(
			where: {
				nft_contract_id: {_eq: "` + galleryId + `"}
				minter: {_eq: "` + minterId + `"}
			}
		) {
			base_uri
			media
			metadata_id
			reference
		}
	}`
}

// Is it necessary to remove self-owned entries here?  To end up in this table,
// I think you'd have to actually purchase an NFT from yourself,
// or buy it back from someone who bought it from you,
// in which case you sort of did collect it ...
export function ownerQuery(galleryId,ownerId) {
	return `query MyOwnerQuery {
		nftList: mb_views_nft_owned_tokens(
			where: {
				nft_contract_id: {_eq: "` + galleryId + `"}
				owner: {_eq: "` + ownerId + `"}
			}
			distinct_on: metadata_id
		) {
			base_uri
			media
			metadata_id
			reference
			owner
			minter
		}
	}`
}

// This is a copy of the big metadata query in the broken/beta mintbasejs-data, which seems broken ATM ...
// as far as I can tell, 'metadataId' is the "thing id" for NFTs that mint multiple. ("id" is for each unique mint.)
// "burned" are destroyed records that still exist in the chain so we manually ignore them (hmmmmm)
export function nftQuery(metadataId) {
	return `query MyQuery {
		metadata: nft_metadata(
			where: {
				id: { _eq: "` + metadataId + `"}
			}
		) {
			title
			description
			media
			reference_blob
			base_uri
		}

		tokenCount: nft_tokens_aggregate(
			where: {
				metadata_id: { _eq: "` + metadataId + `"}
				burned_timestamp: {_is_null: true},
			}
		) {
			aggregate {
				count
			}
		}

		collectors: mb_views_nft_tokens(
			where: {
				metadata_id: { _eq: "` + metadataId + `"}
				burned_timestamp: {_is_null: true},
			}
			distinct_on: owner
		) {
			token_id
			owner
		}

		minters: nft_tokens(
			distinct_on: minter
			where: {
				metadata_id: { _eq: "` + metadataId + `"}
				burned_timestamp: {_is_null: true},
			}
		) {
			minter
		}

		listings: mb_views_active_listings (
			where: {
				metadata_id: { _eq: "` + metadataId + `"}
				kind: { _eq: "simple" }
			}
			limit: 1,
			order_by: { price: desc }
		) {
			kind
			price
			market_id
			token {
				token_id
				minter
				nft_contract_id
				owner
				splits
				royalties
			}
		}
	}`
}

'''
'''--- src/index.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>STATELESS</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
		<style> @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;600&family=Roboto&display=swap');</style>

		<link rel="stylesheet" href="styles.css">
  </head>
	<body class="container-fluid">

		<div id="app" />

		<script>
			window.stateless_config = {
				// Environment variables, if present, will override these values:

				networkId: "testnet", 			// NETWORKID (required)
				mintbaseContractId: "statelessart.mintspace2.testnet",  // MINTBASECONTRACTID (required)
				//mintbaseApiKey: "anon", 	// MINTBASEAPIKEY (optional)
				//basename: "/", 						// BASENAME (optional)
				//sitename: "Bob's Fancy NFTs", 						// SITENAME (optional)

			};
		</script>

		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js" integrity="sha384-Rx+T1VzGupg4BHQYs2gCW9It+akI2MM/mndMCy36UVfodzcJcF0GGLxZIzObiEfa" crossorigin="anonymous"></script>
		<script src="index.js" type="module"></script>
	</body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import { useEffect, useState, useRef } from 'react'
import { createRoot } from 'react-dom/client'
import {
  createBrowserRouter,
  RouterProvider,
	// useLoaderData,
	Outlet,
} from "react-router-dom"

// NEAR Wallet Selector: https://docs.near.org/tools/wallet-selector
import { setupWalletSelector } from "@near-wallet-selector/core"
import { setupModal } from "@near-wallet-selector/modal-ui"
import { setupNearWallet } from "@near-wallet-selector/near-wallet"
import { setupHereWallet } from "@near-wallet-selector/here-wallet"
import { setupMyNearWallet } from "@near-wallet-selector/my-near-wallet"
import { setupSender } from "@near-wallet-selector/sender"
import { setupMeteorWallet } from "@near-wallet-selector/meteor-wallet"
import { setupLedger } from "@near-wallet-selector/ledger"
import "@near-wallet-selector/modal-ui/styles.css"

import GridPage from './routes/G'
import OwnerGridPage from './routes/OwnerG'
import ArtistGridPage from './routes/ArtistG'
import SinglePage from './routes/S'
import ArtistSinglePage from './routes/ArtistS'
import OwnerSinglePage from './routes/OwnerS'
import Id from './routes/Id'

import { galleryLoader, artistLoader, ownerLoader, nftLoader } from './fetch'

import { Contract, connect } from 'near-api-js'

async function initSocialContract(accountId){
	const nearConnection = await connect({
		networkId: window.stateless_config.networkId,
		  nodeUrl: "https://rpc.mainnet.near.org",
	})
	const account = await nearConnection.account(accountId)

	c = new Contract( account, "social.near", {
		viewMethods: [ "get", "keys" ]
	});

	return c
}

function App(props){

	const [walletSelector, setWalletSelector] = useState(null)
	const walletModal = useRef(null) 

	const [socialContract, setSocialContract] = useState(null)
	// calling useEffect at top level, to run this setup once at startup.
	// (Does React have a clearer way to do that?)
  useEffect(() => {
    async function _setup(){
      let s = await setupWalletSelector({
        network: window.stateless_config.networkId,
        modules: [
          setupNearWallet(),
          setupHereWallet(),
          setupMyNearWallet(),
          setupSender(),
          setupMeteorWallet(),
          setupLedger()
        ]

      })
      walletModal.current = setupModal(s, {
        contractId: window.stateless_config.mintbaseContractId,
      })
      setWalletSelector(s)
			// window.walletSelector = s //debug

			// connect to near.social for user deets
			let wallet = await s.wallet()
			let accounts = await wallet.getAccounts()
			let accountId = accounts[0].accountId
			let sc = await initSocialContract(accountId) 
			setSocialContract(sc)
    }

    if (walletSelector == null) {
      _setup()
    }
  }, [walletSelector, walletModal, socialContract])

	// click handlers that effect global state are defined here & handed down 
  function walletClick(e){
    walletModal.current.show()
  }

	const router = createBrowserRouter([
		{
			path: "/",
			element: <Root walletSelector={walletSelector} walletClick={walletClick} />,
			children: [
				{ index: true,
					loader: galleryLoader,
					element: <GridPage walletSelector={walletSelector} walletClick={walletClick} />
				},
				{
					path: "/g",
					loader: galleryLoader,
					element: <GridPage walletSelector={walletSelector} walletClick={walletClick} />
				},
				{
					path: "/g/:page",
					loader: galleryLoader,
					element: <GridPage walletSelector={walletSelector} walletClick={walletClick} />
				},

				{
					path: "/s",
					loader: galleryLoader,
					element: <SinglePage walletSelector={walletSelector} walletClick={walletClick} />
				},
				{
					path: "/s/:page",
					loader: galleryLoader,
					element: <SinglePage walletSelector={walletSelector} walletClick={walletClick} />
				},

				{
					path: "/artist/:artistId",
					loader: artistLoader,
					element: <ArtistGridPage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/artist/:artistId/g",
					loader: artistLoader,
					element: <ArtistGridPage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/artist/:artistId/g/:page",
					loader: artistLoader,
					element: <ArtistGridPage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/artist/:artistId/s",
					loader: artistLoader,
					element: <ArtistSinglePage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/artist/:artistId/s/:page",
					loader: artistLoader,
					element: <ArtistSinglePage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},

				{
					path: "/owner/:ownerId",
					loader: ownerLoader,
					element: <OwnerGridPage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/owner/:ownerId/g",
					loader: ownerLoader,
					element: <OwnerGridPage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/owner/:ownerId/g/:page",
					loader: ownerLoader,
					element: <OwnerGridPage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>
				},
				{
					path: "/owner/:ownerId/s",
					loader: ownerLoader,
					element: <OwnerSinglePage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>,
				},
				{
					path: "/owner/:ownerId/s/:page",
					loader: ownerLoader,
					element: <OwnerSinglePage walletSelector={walletSelector} walletClick={walletClick} socialContract={socialContract}/>,
				},

				{
					path: "/id/:nftid",
					loader: nftLoader,
					element: <Id walletSelector={walletSelector} walletClick={walletClick} />,
				},
			]
		},
	], {
		basename: props.basename // undefined defaults to /
	})

	return(
		<React.StrictMode>
			<RouterProvider router={router} />
		</React.StrictMode>
	)
}

// Root: The outer page structure.  
// (the wallet-modal and the main route Outlet need to be peer nodes for the modal overlay to work visually.)
function Root(props){ 
	return(
		<div>
			<div id="near-wallet-selector-modal" />
			<Outlet />
		</div>
		) 
}

// Parcel says we can't iterate on process.env for security reasons ...
if (typeof process.env.NETWORKID !== 'undefined')
	window.stateless_config.networkId = process.env.NETWORKID;
if (typeof process.env.MINTBASECONTRACTID !== 'undefined')
	window.stateless_config.mintbaseContractId = process.env.MINTBASECONTRACTID;
if (typeof process.env.MINTBASEAPIKEY !== 'undefined')
	window.stateless_config.mintbaseApiKey = process.env.MINTBASEAPIKEY;
else
	window.stateless_config.mintbaseApiKey = "anon" // the sensible default
if (typeof process.env.BASENAME !== 'undefined')
	window.stateless_config.basename = process.env.BASENAME;
	// or else basename can be left undefined.

if (typeof process.env.SITENAME !== 'undefined')
	window.stateless_config.sitename= process.env.SITENAME
else 
	window.stateless_config.sitename = window.stateless_config.mintbaseContractId.split('.')[0]

const root = createRoot(document.getElementById('app'))
root.render(<App basename={window.stateless_config.basename} />)

'''
'''--- src/routes/ArtistG.js ---
import { useState, useEffect } from 'react'
import { Link, useLoaderData, useNavigation } from "react-router-dom"
import { Header, Footer } from '../components/HeaderFooter'
import { ArtistHeading } from '../components/PageHeadings'
import GridOfNFTs from '../components/GridOfNFTs'
import { loadProfile, sanitizeProfile } from '../util.js'

export default function ArtistGridPage(props){
	const loader = useLoaderData()
	const page = loader?.page || 0

	const [artistProfile, setArtistProfile] = useState(null)

	useEffect(()=>{
		async function _get(){
			ap = await props.socialContract.get({keys:[
				loader?.artistId + "/profile/**"
			]})
			ap = sanitizeProfile(ap, loader?.artistId)
			setArtistProfile(ap)
		}
		if (props.socialContract && (artistProfile == null) )
			_get()
	},[artistProfile])

	// 4-item array of NFT gallery data blobs
	const gridItems = [
		loader?.nftGallery[page * 4],
		loader?.nftGallery[page * 4 + 1],
		loader?.nftGallery[page * 4 + 2],
		loader?.nftGallery[page * 4 + 3],
	];

	return(

		<div className="grid-page artist-grid-page">

			<Header viewMode="grid" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} 
				walletSelector={props.walletSelector} walletClick={props.walletClick} 
			/>

      <div id="maincontent" className="maincontent text-center mt-5">

				<ArtistHeading artistId={loader?.artistId} profile={artistProfile} />

				<GridOfNFTs gridItems={gridItems} />

      </div>

      <Footer viewMode="grid" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} />

    </div>

	)
}

'''
'''--- src/routes/ArtistS.js ---
import { useState, useEffect } from 'react'
import { Link, useLoaderData } from "react-router-dom";
import { Header, Footer} from '../components/HeaderFooter'
import { ArtistHeading } from '../components/PageHeadings'
import NFTSingle from '../components/NFTSingle'
import { sanitizeProfile } from '../util.js'

export default function ArtistSinglePage(props){
	const loader = useLoaderData();
	const page = loader?.page || 0;

  const nft = loader.nftGallery[page];

	const [artistProfile, setArtistProfile] = useState(null)

	useEffect(()=>{
    async function _get(){
      ap = await props.socialContract.get({keys:[
        loader?.artistId + "/profile/**"
      ]})
      ap = sanitizeProfile(ap, loader?.artistId)
      setArtistProfile(ap)
    }
    if (props.socialContract && (artistProfile == null) )
      _get()
  },[artistProfile])

	return(

		<div className="single-page artist-single-page">

			<Header viewMode="single" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} 
				walletSelector={props.walletSelector} walletClick={props.walletClick} 
			/>

			<div id="maincontent" className="maincontent text-center mt-5">

				<ArtistHeading artist={loader?.artistId} profile={artistProfile} />

				<NFTSingle nftRecord={nft} />

			</div>

			<Footer viewMode="single" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery}  />

		</div>

	)
}

'''
'''--- src/routes/G.js ---
import { Link, useLoaderData } from "react-router-dom";
import { Header, Footer } from '../components/HeaderFooter'
import GridOfNFTs from '../components/GridOfNFTs'

export default function GridPage(props){
	const loader = useLoaderData();
	const page = loader?.page || 0;

	// 4-item array of NFT gallery data blobs
	const gridItems = [
		loader?.nftGallery[page * 4],
		loader?.nftGallery[page * 4 + 1],
		loader?.nftGallery[page * 4 + 2],
		loader?.nftGallery[page * 4 + 3],
	];

	return(

		<div className="grid-page nft-grid-page">

			<Header viewMode="grid" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery}
        walletSelector={props.walletSelector} walletClick={props.walletClick}
      />

      <div id="maincontent" className="maincontent text-center mt-5">

				<GridOfNFTs gridItems={gridItems} />

      </div>

			<Footer viewMode="grid" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} />

    </div>

	)
}

'''
'''--- src/routes/Id.js ---
import { Link, useLoaderData } from "react-router-dom";
import { Header, Footer}  from '../components/HeaderFooter'
import { yn2price } from '../util'

import { execute, buy } from '@mintbase-js/sdk';
import { mbjs } from '@mintbase-js/sdk';
mbjs.config({
		network: window.stateless_config.networkId,
		contractAddress: window.stateless_config.mintbaseContractId,
	//callbackUrl: 'https://mintbase.xyz/success',
})

// Display 1 NFT image with a bunch of metadata & deets
export default function Id(props){
	const loader = useLoaderData();

	const tagsList = loader.nft.metadata.tags?.map(tag => <span className="nft-tag">{tag}</span>)

	function NFTCollectors(){
		if (loader.nft.collectors.length == 0) {
			return(
				<div className="nft-no-collectors" />
			)
		} else {
			const collectorList = loader.nft.collectors?.map(l => { return(
				<Link to={"/owner/" + l.owner} key={l.owner}>
					<p className="collector">{l.owner}</p>
				</Link>
			)})
			return(
					<div className="nft-collectors">
						<div className="row">
							<div className="col-sm"></div>
							<div className="col-sm-8">
								<p className="label">COLLECTORS:</p>
								{ collectorList }
							</div>
							<div className="col-sm"></div>
						</div>
					</div>
			)
		}
	}

	function BuyButton(props){
		const handleBuy = async () => {

			const wallet = await props.walletSelector.wallet();
			const buyArgs = {
				contractAddress: window.stateless_config.mintbaseContractId,
				tokenId: props.listing.token.token_id, 
				//affiliateAccount: null,
				//marketId: window.stateless_config.mintbaseContractId,
				price: BigInt(props.listing.price) }

			await execute(
				{wallet},
				buy(buyArgs, 'testnet')
			);

		}

		return(
			<button onClick={handleBuy} type="button" className="nft-price nft-buy-button btn btn-outline-dark">{ yn2price(props.listing.price) } NEAR</button>
		)
	}

  return (
		<div className="id">

			<Header viewMode="detail" page={props.page} nftGallery={loader.nftGallery} nftGalleryCursor={loader.nftGalleryCursor} 
				walletSelector={props.walletSelector} walletClick={props.walletClick} 
      />

      <div id="maincontent" className="maincontent text-center mt-5">

				<div className="nft-single nft-detail-view">

					<div className="nft-1up">
						<div className="row align-items-center">
							<div className="nft-col col-sm-12">
								<img src={loader.nft.metadata.media_url} className="nft-img img-fluid"/>
							</div>
						</div>
					</div>

					<div className="nft-details">
						<div className="nft-metadata">
							<div className="row mt-5">
								<div className="col-sm"></div>
								<div className="col-sm-8">
									<p className="nft-title"><span className="label">TITLE:</span> {loader.nft.metadata.title}</p>
									<p className="nft-description"><span className="label">DESCRIPTION:</span> {loader.nft.metadata.description}</p>
									<Link to={"/artist/" + loader.nft.minter}>
										<p className="nft-artist"><span className="label">ARTIST:</span> {loader.nft.minter}</p>
									</Link>
									<p className="nft-tags">
										{ tagsList }
									</p>
									<p className="nft-mediatype"><span className="label">MEDIA TYPE:</span> {loader.nft.metadata.media_type}</p>
									<p className="nft-editions"><span className="label">EDITIONS: {loader.nft.count}</span>
									</p>
								</div>
								<div className="col-sm"></div>
							</div>
						</div>
						{ (loader.nft.listing) ?
						<div className="nft-buy">
							<div className="row">
								<div className="col-sm"></div>
								<div className="col-sm-8">
									<BuyButton walletSelector={props.walletSelector} listing={loader.nft.listing} />
								</div>
								<div className="col-sm"></div>
							</div>
						</div>
								:
						<div className="row no-listing mb-5" />
						}

						<NFTCollectors />

						<div className="row mb-5" />
					</div>
				</div>

			</div>

		<Footer viewMode="detail" page={props.page} nftGallery={loader.nftGallery} nftGalleryCursor={loader.nftGalleryCursor} />

	</div>

	)
}

'''
'''--- src/routes/OwnerG.js ---
import { useState, useEffect } from 'react'
import { Link, useLoaderData } from "react-router-dom";
import { Header, Footer } from '../components/HeaderFooter'
import { OwnerHeading } from '../components/PageHeadings'
import GridOfNFTs from '../components/GridOfNFTs'
import { loadProfile, sanitizeProfile } from '../util.js'

export default function OwnerGridPage(props){
	const loader = useLoaderData();
	const page = loader?.page || 0;

	const [ownerProfile, setOwnerProfile] = useState(null)

  useEffect(()=>{
    async function _get(){
      ap = await props.socialContract.get({keys:[
        loader?.ownerId + "/profile/**"
      ]})
      ap = sanitizeProfile(ap, loader?.ownerId)
      setOwnerProfile(ap)
    }
    if (props.socialContract && (ownerProfile == null) )
      _get()
	},[ownerProfile])

	// 4-item array of NFT gallery data blobs
	const gridItems = [
		loader?.nftGallery[page * 4],
		loader?.nftGallery[page * 4 + 1],
		loader?.nftGallery[page * 4 + 2],
		loader?.nftGallery[page * 4 + 3],
	];

	return(

		<div className="grid-page owner-grid-page">

			<Header viewMode="grid" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} 
				walletSelector={props.walletSelector} walletClick={props.walletClick} 
			/>

      <div id="maincontent" className="maincontent text-center mt-5">

				<OwnerHeading ownerId={loader?.ownerId} profile={ownerProfile} />

				<GridOfNFTs gridItems={gridItems} />

      </div>

      <Footer viewMode="grid" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} />

    </div>

	)
}

'''
'''--- src/routes/OwnerS.js ---
import { useState, useEffect } from 'react'
import { Link, useLoaderData } from "react-router-dom";
import { Header, Footer} from '../components/HeaderFooter'
import { OwnerHeading } from '../components/PageHeadings'
import NFTSingle from '../components/NFTSingle'
import { sanitizeProfile } from '../util.js'

export default function OwnerSinglePage(props){
	const loader = useLoaderData();
	const page = loader?.page || 0;

  const nft = loader.nftGallery[page];

	const [ownerProfile, setOwnerProfile] = useState(null)

  useEffect(()=>{
    async function _get(){
      ap = await props.socialContract.get({keys:[
        loader?.ownerId + "/profile/**"
      ]})
      ap = sanitizeProfile(ap, loader?.ownerId)
      setOwnerProfile(ap)
    }
    if (props.socialContract && (ownerProfile == null) )
      _get()
  },[ownerProfile])

	return(

		<div className="single-page owner-single-page">

			<Header viewMode="single" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} 
				walletSelector={props.walletSelector} walletClick={props.walletClick} 
			/>

			<div id="maincontent" className="maincontent text-center mt-5">

				<OwnerHeading owner={loader?.ownerId} profile={ownerProfile} />

				<NFTSingle nftRecord={nft} />

			</div>

			<Footer viewMode="single" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery}  />

		</div>

	)
}

'''
'''--- src/routes/S.js ---
import { Link, useLoaderData } from "react-router-dom";
import { Header, Footer} from '../components/HeaderFooter'
import NFTSingle from '../components/NFTSingle'

export default function SinglePage(props){
	const loader = useLoaderData();
	const page = loader?.page || 0;

  const nft = loader.nftGallery[page];

	return(

		<div className="single-page nft-single-page">

			<Header viewMode="single" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} 
				walletSelector={props.walletSelector} walletClick={props.walletClick} 
			/>

			<div id="maincontent" className="maincontent text-center mt-5">

				<NFTSingle nftRecord={nft} />

			</div>

			<Footer viewMode="single" page={page} nftGalleryCursor={loader?.nftGalleryCursor} nftGallery={loader?.nftGallery} />

		</div>

	)
}

'''
'''--- src/styles.css ---
/* not sure i'm doing medias right, recheck that ... */

/* xs (smartphone) styles: */
.nft-details p, .nft-details button {
	font-family: 'IBM Plex Sans', sans-serif;
	font-size: 18px;
	margin-bottom: 0.5rem;
}

.site-name {
	font-family: 'IBM Plex Sans', sans-serif;
	font-size: 32px;
	font-weight: 600;
	color: #000000;
}

.profile-image {
	width: 100px;
}

.profile-image-frame {
		width: 100px;
    height: 100px;
    overflow: hidden;
    margin: auto;
}

.nft-4up .nft-col {
	padding-top: 5%;
	padding-bottom: 5%;
}

/* everything wider than that: */
@media (min-width: 576px) { 
	.nft-4up .nft-img {
		max-width: 70%;
		max-height: 35vw;
	}
	.nft-4up .nft-col {
		padding-top: 2%;
		padding-bottom: 2%;
	}
	.nft-single {
		max-width: 80rem;
		margin: auto;
	}
	.nft-1up .nft-img {
		max-width: 80vw;
		max-height: 80vh;
	}
	.nft-details {
		text-align: left;
	}
	.nft-metadata {
		text-align: left;
	}
	.nft-buy .row {
		text-align: right;
	}
	.nft-collectors {
		text-align: left;
	}
}

'''
'''--- src/util.js ---

// convert yoctonear to near as accurately as we can
export function yn2n(t) {
	return t * Math.pow(10, -24)
}

// convert yoctonear to near, rounded to (max) 2 decimal places
export function yn2price(t) {
	return (Math.round(yn2n(t)* 100) / 100)
}

// HACK:
// These patterns match some path components from the Router in index.js
// they should really only be defined in one place!
// We are stripping them off the end of the pathname because they could be alone or after artist/ or owner/

let singlePagePat = /\/s(?:\/\d+)?$/ // match /s (single) paths, with or without /page
let gridPagePat = /\/g(?:\/\d+)?$/   // match /g (grid) paths, with or without /page
let detailPagePat = /\/id\/.*$/  // match /id (detail) paths

// The paths we want to navigate to when people click these view selectors in different contexts ... it's complicated.
export function reloadSelectorPath(nftGallery, nftGalleryCursor, viewMode, currentPage){
	let u = new URL(location.href)
	let reloadPath, reloadPage
	currentPage == currentPage || 0

  switch(viewMode) {
    case "single":
      // We are in single mode.
      reloadPage = currentPage + 1           // reload links to the next single page.
			if (reloadPage >= nftGallery.length)
				reloadPage = -1
			reloadPath = '/s/' + reloadPage
			if (u.pathname != '/') {
				reloadPath = u.pathname.replace(singlePagePat,'') + reloadPath
			}
      break;

    case "grid":
      reloadPage = currentPage + 1           // reload links to the next grid page
			if (reloadPage * 4 >= nftGallery.length)
				reloadPage = -1;
			reloadPath = (reloadPage != 0 ? '/g/' + reloadPage : '/g') // rewrite /g/0 to /g
			if (u.pathname != '/') {
				reloadPath = u.pathname.replace(gridPagePat,'') + reloadPath
			}
      break;

    case "detail":
			// sometimes nftGallery is not loaded
			if (nftGallery.length) {
				let cursor = (nftGalleryCursor + 1) % nftGallery.length // the next one in the gallery
				let reloadId = nftGallery[cursor].metadata_id 
				reloadPath = '/id/' + reloadId
			} else { 
				reloadPath = '/' // just go load the gallery.
			}
  }

	return reloadPath
}

export function singleSelectorPath(nftGallery, nftGalleryCursor, viewMode, currentPage){
	let u = new URL(location.href)
	let singlePath, singlePage
	currentPage == currentPage || 0

  switch(viewMode) {
    case "single":
			// We are in single mode, this is a link to the current path.
			return u.pathname;

    case "grid":
			// we are in grid mode, single switches to single mode with the first NFT of our grid
      singlePage = currentPage * 4
			singlePath = (singlePage > 0 ? '/s/' + singlePage : '/s')  // rewrite /s/0 to /s

			if (u.pathname != '/') {
				singlePath = u.pathname.replace(gridPagePat,'') + singlePath
			}
			return singlePath

    case "detail":
			if (nftGallery) {
				singlePage = nftGalleryCursor
				singlePath = (singlePage > 0 ? '/s/' + singlePage : '/s')  // rewrite /s/0 to /s
				if (u.pathname != '/') {
					singlePath = u.pathname.replace(detailPagePat,'') + singlePath
					return singlePath
				}
			}
			// TODO: how to trigger a load if there's a partial gallery? Need a special route?
			return '/' // otherwise just go load the gallery.
	}
}

export function gridSelectorPath(nftGallery, nftGalleryCursor, viewMode, currentPage){
	let u = new URL(location.href)
	let gridPath, gridPage
	currentPage == currentPage || 0

  switch(viewMode) {
    case "grid":
			// we are in grid mode, this is a link to the current path
			return u.pathname;

    case "single":
			// We are in single mode, grid links to the grid with this NFT on it.
			gridPage = Math.floor(currentPage / 4)
			gridPath = (gridPage > 0 ? '/g/' + gridPage : '/g') 
			if (u.pathname != '/') {
				gridPath = u.pathname.replace(singlePagePat,'') + gridPath
			}
			return gridPath

    case "detail":
			// grid links to the page with this page's NFT on it.
			if (nftGallery) {
				gridPage = Math.floor(nftGalleryCursor / 4)
				gridPath = (gridPage > 0 ? '/g/' + gridPage : '/g') 
				if (u.pathname != '/') {
					gridPath = u.pathname.replace(detailPagePat,'') + gridPath
				}
				return gridPath
			}
			return '/' // otherwise just go load the gallery.
	}
}

// clean up the profile data we get back from near.social 
export function sanitizeProfile(profile, id) {
	if (profile && profile[id]) { // if we loaded something
		profile = profile[id].profile
		if (profile.image) {
			// this is a HACK until I figure out how near.social really wants this done:
			profile.image.src = "https://i.near.social/magic/large/https://near.social/magic/img/account/" + id
		}
	}
	return profile
}

'''