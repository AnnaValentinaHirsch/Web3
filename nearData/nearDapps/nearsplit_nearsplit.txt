*GitHub Repository "nearsplit/nearsplit"*

'''--- .eslintrc.js ---
module.exports = {
  root: true,
  // This tells ESLint to load the config from the package `eslint-config-custom`
  extends: ["custom"],
  settings: {
    next: {
      rootDir: ["apps/*/"],
    },
  },
};

'''
'''--- .vscode/settings.json ---
{
  "editor.defaultFormatter": "dbaeumer.vscode-eslint",
  "eslint.packageManager": "pnpm",
  "eslint.alwaysShowStatus": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact"
  ],
  "eslint.debug": true,
  "eslint.format.enable": true,
  "[javascript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[typescript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[html]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "editor.formatOnSave": true,
}

'''
'''--- README.md ---
# Turborepo starter

This is an official pnpm starter turborepo.

## What's inside?

This turborepo uses [pnpm](https://pnpm.io) as a package manager. It includes the following packages/apps:

### Apps and Packages

- `docs`: near-split docs [Next.js](https://nextjs.org) app
- `web`: near-split [Next.js](https://nextjs.org) app
- `contract`: near-split contract
- `ui`: a stub React component library shared by both `web` and `docs` applications
- `eslint-config-custom`: `eslint` configurations (includes `eslint-config-next` and `eslint-config-prettier`)
- `tsconfig`: `tsconfig.json`s used throughout the monorepo

Each package/app is 100% [TypeScript](https://www.typescriptlang.org/).

### Utilities

This turborepo has some additional tools already setup for you:

- [TypeScript](https://www.typescriptlang.org/) for static type checking
- [ESLint](https://eslint.org/) for code linting

### Build

To build all apps and packages, run the following command:

```
cd my-turborepo
pnpm run build
```

### Develop

To develop all apps and packages, run the following command:

```
cd my-turborepo
pnpm run dev
```

### Remote Caching

Turborepo can use a technique known as [Remote Caching](https://turborepo.org/docs/core-concepts/remote-caching) to share cache artifacts across machines, enabling you to share build caches with your team and CI/CD pipelines.

By default, Turborepo will cache locally. To enable Remote Caching you will need an account with Vercel. If you don't have an account you can [create one](https://vercel.com/signup), then enter the following commands:

```
cd my-turborepo
pnpm dlx turbo login
```

This will authenticate the Turborepo CLI with your [Vercel account](https://vercel.com/docs/concepts/personal-accounts/overview).

Next, you can link your Turborepo to your Remote Cache by running the following command from the root of your turborepo:

```
pnpm dlx turbo link
```

## Useful Links

Learn more about the power of Turborepo:

- [Pipelines](https://turborepo.org/docs/core-concepts/pipelines)
- [Caching](https://turborepo.org/docs/core-concepts/caching)
- [Remote Caching](https://turborepo.org/docs/core-concepts/remote-caching)
- [Scoped Tasks](https://turborepo.org/docs/core-concepts/scopes)
- [Configuration Options](https://turborepo.org/docs/reference/configuration)
- [CLI Usage](https://turborepo.org/docs/reference/command-line-reference)

'''
'''--- apps/contract/README.md ---
# NEAR Split Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

```ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(`Saving greeting ${greeting}`);
    this.greeting = greeting;
  }
}
```

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [`NEAR CLI`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

```bash
npm run deploy
```

Once finished, check the `neardev/dev-account` file to find the address in which the contract was deployed:

```bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
```

<br />

## 2. Retrieve the Greeting

`get_greeting` is a read-only method (aka `view` method).

`View` methods can be called for **free** by anyone, even people **without a NEAR account**!

```bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
```

<br />

## 3. Store a New Greeting
`set_greeting` changes the contract's state, for which it is a `call` method.

`Call` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

```bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
```

**Tip:** If you would like to call `set_greeting` using your own account, first login into NEAR using:

```bash
# Use near-cli to login your NEAR account
near login
```

and then use the logged account to sign the transaction: `--accountId <your-account>`.
'''
'''--- apps/contract/babel.config.json ---
{
  "plugins": [
    "near-sdk-js/lib/build-tools/near-bindgen-exporter",
    ["@babel/plugin-proposal-decorators", {"version": "legacy"}]
  ],
  "presets": ["@babel/preset-typescript"]
}
'''
'''--- apps/contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/near-split.wasm

'''
'''--- apps/contract/deploy.sh ---
#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/near-split.wasm
'''
'''--- apps/contract/neardev/dev-account.env ---
CONTRACT_NAME=dev-1663364094083-52614494752630
'''
'''--- apps/contract/package.json ---
{
  "name": "contract",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "big.js": "^6.2.1",
    "near-cli": "^3.4.0",
    "near-sdk-js": "0.5.0"
  },
  "devDependencies": {
    "@types/big.js": "^6.1.6",
    "tsconfig": "workspace:*",
    "typescript": "^4.7.4"
  }
}
'''
'''--- apps/contract/src/contract.ts ---
import { NearBindgen, near, call, view, initialize, UnorderedMap } from 'near-sdk-js';
import Big from 'big.js';

Big.RM = Big.roundDown;
const PRECISION = 32;
Big.PE = PRECISION;

type Shares = {
  [accountId: string]: string;
};

export const GAS_PAY = Big('32e+12').toString();

export type SplitSerial = {
  totalShares: string;
  shares: Shares;
};

export type Split = {
  totalShares: string;
  shares: UnorderedMap;
  totalPaid: string;
};

@NearBindgen({ requireInit: true })
export class SplitContract {
  totalShares: Split['totalShares'] = '0';
  shares: Split['shares'] = new UnorderedMap('near-split-shares');
  totalPaid: Split['totalPaid'] = '0';

  @initialize({})
  init({ split }: { split: SplitSerial }): SplitSerial {
    const sharesSum = Object.values(split.shares).reduce((sum, shares) => sum + BigInt(shares), BigInt('0'));
    if (sharesSum > BigInt(split.totalShares)) {
      return near.panicUtf8('Shares sum is over the amount of total shares!');
    }
    this.totalShares = split.totalShares;
    this.shares.extend(Object.entries(split.shares));

    return {
      totalShares: this.totalShares,
      shares: Object.fromEntries(this.shares.toArray()) as Shares,
    };
  }

  @view({}) // This method is read-only and can be called for free
  get_split(): SplitSerial {
    return {
      totalShares: this.totalShares,
      shares: Object.fromEntries(this.shares.toArray()) as Shares,
    };
  }

  /**
   * processes the incoming payment
   */
  @call({ payableFunction: true })
  pay(): string {
    const amount: bigint = near.attachedDeposit() as bigint;
    const totalShares = BigInt(this.totalShares);
    let paid: Big = Big('0');

    for (const [account, numberOfShares] of this.shares) {
      const accountShares = BigInt(numberOfShares as string);
      const bAmount = Big(amount.toString(10));
      const bTotalShares = Big(totalShares.toString(10));
      const bAccountShares = Big(accountShares.toString(10));
      const toPay = bAmount.div(bTotalShares).times(bAccountShares).round();

      const promise = near.promiseBatchCreate(account as string);
      near.promiseBatchActionTransfer(promise, BigInt(toPay.toString()));
      paid = paid.plus(toPay);
    }

    this.totalPaid = (BigInt(this.totalPaid) + BigInt(paid.toString())).toString(10);

    return paid.toString();
  }
}

'''
'''--- apps/contract/tsconfig.json ---
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "ES2015",
    "lib": [
      "ES2020"
    ],
    "noEmit": true,
    "moduleResolution": "node"
  }
}

'''
'''--- apps/docs/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ["custom"],
};

'''
'''--- apps/docs/README.md ---
## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_source=github.com&utm_medium=referral&utm_campaign=turborepo-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- apps/docs/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- apps/docs/next.config.js ---
const withTM = require("next-transpile-modules")(["ui"]);

module.exports = withTM({
  reactStrictMode: true,
});

'''
'''--- apps/docs/package.json ---
{
  "name": "docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev --port 3001",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "12.3.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "ui": "workspace:*"
  },
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "eslint-config-custom": "workspace:*",
    "eslint": "7.32.0",
    "next-transpile-modules": "9.0.0",
    "tsconfig": "workspace:*",
    "@types/node": "^17.0.12",
    "@types/react": "18.0.17",
    "typescript": "^4.5.3"
  }
}
'''
'''--- apps/docs/tsconfig.json ---
{
  "extends": "tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''
'''--- apps/integration/ava.config.js ---
import util from 'util';

util.inspect.defaultOptions.depth = 5;

export default {
  timeout: '60000',
  files: ['src/*.ava.ts'],
  failWithoutAssertions: false,
  extensions: {
    ts: 'module',
  },
  nodeArguments: ['--loader=ts-node/esm', '--experimental-specifier-resolution=node'],
};

'''
'''--- apps/integration/package.json ---
{
  "name": "near-split-integration",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava -- \"../contract/build/near-split.wasm\""
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "tsconfig": "workspace:*",
    "typescript": "^4.7.2"
  },
  "dependencies": {
    "near-sdk-js": "0.5.0"
  },
  "type": "module"
}
'''
'''--- apps/integration/src/main.ava.ts ---
import type { SplitSerial } from '../../contract/src/contract';
import { Worker, NearAccount, NEAR } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const bint50 = BigInt(50).toString(10);
const bint100 = BigInt(100).toString(10);
const bint150 = BigInt(150).toString(10);

const testSplitAccountBob = 'testsplitbob.test';
const testSplitAccountFob = 'testsplitfob.test';
const testSplitAccountMob = 'testsplitmob.test';
const testSplitAccountCob = 'testsplitcob.test';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('near-split');
  const anteater = await root.createSubAccount('anteater');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract, anteater };
});

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('getting split panics if split not initialized', async (t) => {
  const { contract } = t.context.accounts;
  await t.throwsAsync(contract.view('get_split', { message: 'This split has not been created yet!' }));
});

test('init the split', async (t) => {
  const { root, contract } = t.context.accounts;
  const testSplit: SplitSerial = {
    totalShares: bint150,
    shares: {
      [testSplitAccountBob]: bint50,
      [testSplitAccountFob]: bint50,
      [testSplitAccountMob]: bint50,
    },
  };

  await root.call(contract, 'init', { split: testSplit });
  const split: SplitSerial = await contract.view('get_split', {});
  t.is(split.totalShares, bint150);
  t.is(split.shares[testSplitAccountBob], bint50);
  t.is(split.shares[testSplitAccountFob], bint50);
  t.is(split.shares[testSplitAccountMob], bint50);
});

test('can\'t assign more shares than the total', async (t) => {
  const { root, contract } = t.context.accounts;
  const testSplit: SplitSerial = {
    totalShares: bint150,
    shares: {
      [testSplitAccountBob]: bint50,
      [testSplitAccountFob]: bint50,
      [testSplitAccountMob]: bint50,
      [testSplitAccountCob]: bint100,
    },
  };

  await t.throwsAsync(root.call(contract, 'init', { split: testSplit }));
});

test('pay', async (t) => {
  const { root, contract, anteater } = t.context.accounts;
  const testSplit: SplitSerial = {
    totalShares: bint150,
    shares: {
      [testSplitAccountBob]: bint50,
      [testSplitAccountFob]: bint50,
      [testSplitAccountMob]: bint50,
    },
  };

  await root.call(contract, 'init', { split: testSplit });
  const twoNear = NEAR.parse('2 N').toString();
  const biTwoNear = BigInt(twoNear);
  const paymentResult = await anteater.call(contract, 'pay', {}, {
    attachedDeposit: twoNear,
    gas: BigInt('32000000000000'),
  });
  const biResult = BigInt(paymentResult as string);
  t.true(biResult >= biTwoNear - BigInt(10) && biResult <= biTwoNear);
});

'''
'''--- apps/integration/tsconfig.json ---
{
  "compilerOptions": {
    "experimentalDecorators": true,
    "module": "esnext",
    "moduleResolution": "node"
  }
}
'''
'''--- apps/web/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ["custom"],
};

'''
'''--- apps/web/README.md ---
## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_source=github.com&utm_medium=referral&utm_campaign=turborepo-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- apps/web/core/fetch/coinGecko.ts ---
import { $fetch } from 'ohmyfetch';

const api = $fetch.create({ baseURL: 'https://api.coingecko.com/api/v3' });

type CoinPriceResponse = {
  [coin: string]: {
    [currency: string]: number;
  };
};

export const getCoinPrice = (coin, currency) => api<CoinPriceResponse>('/simple/price', { params: { ids: coin, vs_currencies: currency } });

'''
'''--- apps/web/core/near/interfaces.ts ---
import type { AccountView } from "near-api-js/lib/providers/provider";

export type Account = AccountView & {
  account_id: string;
};

'''
'''--- apps/web/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- apps/web/next.config.js ---
/** @type {import('next').NextConfig} */
const withTM = require("next-transpile-modules")(["ui"]);

module.exports = withTM({
  reactStrictMode: true,
  swcMinify: true,
});

'''
'''--- apps/web/package.json ---
{
  "name": "web",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^7.0.3",
    "@near-wallet-selector/default-wallets": "^7.0.3",
    "@near-wallet-selector/ledger": "^7.0.3",
    "@near-wallet-selector/math-wallet": "^7.0.3",
    "@near-wallet-selector/modal-ui": "^7.0.3",
    "@near-wallet-selector/my-near-wallet": "^7.0.3",
    "@near-wallet-selector/near-wallet": "^7.0.3",
    "@near-wallet-selector/sender": "^7.0.3",
    "near-api-js": "0.44.2",
    "next": "12.3.0",
    "ohmyfetch": "^0.4.19",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "rxjs": "^7.5.7",
    "ui": "workspace:0.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.19.3",
    "@types/node": "^17.0.45",
    "@types/react": "18.0.17",
    "eslint": "7.32.0",
    "eslint-config-custom": "workspace:0.0.0",
    "next-transpile-modules": "9.0.0",
    "tsconfig": "workspace:0.0.0",
    "typescript": "^4.8.4"
  }
}
'''
'''--- apps/web/pages/_app.js ---
import '@near-wallet-selector/modal-ui/styles.css';
import '../styles/globals.css';

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

export default MyApp;

'''
'''--- apps/web/public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- apps/web/styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

@media (prefers-color-scheme: dark) {
  .card,
  .footer {
    border-color: #222;
  }
  .code {
    background: #111;
  }
  .logo img {
    filter: invert(1);
  }
}

'''
'''--- apps/web/styles/globals.css ---
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
  body {
    color: white;
    background: black;
  }
}

'''
'''--- apps/web/tsconfig.json ---
{
  "extends": "tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"],
  "compilerOptions": {
    "target": "ES2017",
    "allowJs": true
  }
}

'''
'''--- package.json ---
{
  "name": "near-split",
  "version": "0.1.0",
  "private": false,
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --parallel",
    "lint": "turbo run lint",
    "test": "pnpm run build:contract && turbo run test",
    "format": "eslint --fix \"**/*.{ts,tsx,md}\"",
    "deploy:contract": "turbo run deploy --filter contract",
    "build:contract": "turbo run build --filter contract"
  },
  "devDependencies": {
    "eslint-config-custom": "workspace:0.0.0",
    "turbo": "latest"
  },
  "engines": {
    "node": ">=16.0.0"
  },
  "packageManager": "pnpm@7.12.2",
  "volta": {
    "node": "16.17.1"
  }
}
'''
'''--- packages/eslint-config-custom/index.js ---
module.exports = {
  extends: ['next', 'turbo'],
  rules: {
    '@next/next/no-html-link-for-pages': 'off',
    'react/jsx-key': 'off',
    indent: [
      'error',
      2,
      {
        SwitchCase: 1,
      },
    ],
    quotes: [
      'error',
      'single',
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    'operator-linebreak': [
      'error',
      'before',
    ],
    'one-var': [
      'error',
      {
        'var': 'never',
        'let': 'never',
        'const': 'never',
      },
    ],
    'no-unreachable': 'error',
    semi: [
      'error',
      'always',
    ],
    'comma-dangle': ['error', 'always-multiline'],
    'quote-props': ['error', 'as-needed'],
    'no-use-before-define': ['error', 'nofunc'],
    'block-spacing': ['error', 'always'],
    'object-curly-spacing': ['error', 'always'],
  },
};

'''
'''--- packages/eslint-config-custom/package.json ---
{
  "name": "eslint-config-custom",
  "version": "0.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "eslint": "^7.23.0",
    "eslint-config-next": "^12.0.8",
    "eslint-config-turbo": "latest",
    "eslint-plugin-react": "7.31.8"
  },
  "devDependencies": {
    "typescript": "^4.7.4"
  },
  "publishConfig": {
    "access": "public"
  }
}

'''
'''--- packages/tsconfig/README.md ---
# `tsconfig`

These are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.

'''
'''--- packages/tsconfig/base.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "Node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": [
    "node_modules"
  ]
}
'''
'''--- packages/tsconfig/nextjs.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "target": "ES6",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "src",
    "next-env.d.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
'''
'''--- packages/tsconfig/package.json ---
{
  "name": "tsconfig",
  "version": "0.0.0",
  "private": true,
  "files": [
    "base.json",
    "nextjs.json",
    "react-library.json"
  ]
}

'''
'''--- packages/tsconfig/react-library.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": ["ES2015"],
    "module": "ESNext",
    "target": "es6"
  }
}

'''
'''--- packages/ui/package.json ---
{
  "name": "ui",
  "version": "0.0.0",
  "main": "./index.tsx",
  "types": "./index.tsx",
  "license": "MIT",
  "scripts": {
    "lint": "eslint *.ts*"
  },
  "devDependencies": {
    "@types/react": "^18.0.17",
    "@types/react-dom": "^18.0.6",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "react": "^18.2.0",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  }
}
'''
'''--- packages/ui/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"]
}

'''
'''--- turbo.json ---
{
  "$schema": "https://turborepo.org/schema.json",
  "pipeline": {
    "build": {
      "dependsOn": [
        "^build"
      ],
      "outputs": [
        "dist/**",
        ".next/**"
      ]
    },
    "deploy": {},
    "lint": {
      "outputs": []
    },
    "dev": {
      "cache": false
    },
    "test": {
      "cache": false
    }
  }
}
'''