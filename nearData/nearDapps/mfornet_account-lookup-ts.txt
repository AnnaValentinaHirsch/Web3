*GitHub Repository "mfornet/account-lookup-ts"*

'''--- Design.md ---
# Page

-   Button to add new accounts
-   Display current NEAR price
-   Switch Between NEAR & USDT
-   Table

'''
'''--- README.md ---
# Account Lookup Table

**[www](https://mfornet.github.io/account-lookup-ts/)**

View details of several lockup accounts in a single place. Similar to [Account-Lookup](https://near.github.io/account-lookup/).

## Roadmap

-   Button to remove an account
-   Parse account from public key / owner implicit account id / lockup account id
-   Improve UI
    -   Error messages
    -   (table) https://tailwindui.com/components/application-ui/lists/tables
-   Move to web4
-   FAQ:
    -   How it works
    -   Why does it page preserves your privacy
    -   Next steps (Add roadmap)
-   Test with several lockups (It is not working for most of them)
-   Log in + allows you to interact with common functions in your lockup contract.

'''
'''--- craco.config.js ---
const webpack = require('webpack');

module.exports = {
    style: {
        // https://stackoverflow.com/questions/70403417/typeerror-match-loader-options-plugins-is-not-a-function
        postcssOptions: {
            plugins: [require("tailwindcss"), require("autoprefixer")],
        },
    },
    // https://github.com/WalletConnect/walletconnect-monorepo/issues/748#issuecomment-1032952692

    configure: {
        resolve: {
            extensions: ['.ts', '.js'],
            fallback: {
                buffer: require.resolve('buffer'),
                stream: require.resolve("stream-browserify"),
            },
            alias: {
                process: "process/browser"
            }
        },
    },
    plugins: {
        add: [
            new webpack.ProvidePlugin({
                Buffer: ['buffer', 'Buffer'],
            }),
            new webpack.ProvidePlugin({
                process: 'process/browser',
            }),
        ],
    },
};

'''
'''--- package.json ---
{
  "name": "account-lookup-table-ts",
  "version": "0.1.0",
  "private": true,
  "homepage": "https://mfornet.github.io/account-lookup-ts/",
  "dependencies": {
    "@craco/craco": "^6.4.3",
    "@ethersproject/bignumber": "^5.6.0",
    "@headlessui/react": "^1.5.0",
    "@heroicons/react": "^1.0.6",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^12.0.0",
    "@testing-library/user-event": "^13.2.1",
    "@types/jest": "^27.0.1",
    "@types/node": "^16.7.13",
    "@types/react": "^17.0.20",
    "@types/react-dom": "^17.0.9",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "process": "0.11.10",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "5.0.0",
    "stream-browserify": "^3.0.0",
    "typescript": "^4.4.2",
    "web-vitals": "^2.1.0"
  },
  "scripts": {
    "start": "PORT=3000 craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^9",
    "gh-pages": "^3.2.3",
    "postcss": "^7",
    "tailwindcss": "npm:@tailwindcss/postcss7-compat",
    "tailwindcss-cli": "^0.1.2"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/reportWebVitals.ts ---
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/types.ts ---
import { BigNumber } from "@ethersproject/bignumber";
import * as nearAPI from "near-api-js";
import { Account } from "near-api-js";

export type AccountId = string;
export type U256 = string;
export type Currency = "NEAR" | "USDT";

export const OPTIONS = {
    networkId: "mainnet",
    keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://rpc.mainnet.near.org",
    walletUrl: "https://wallet.mainnet.near.org",
    helperUrl: "https://helper.mainnet.near.org",
    explorerUrl: "https://explorer.mainnet.near.org",
    headers: {},
};

export class Lockup {
    /// Account id of the lockup account
    accountId: AccountId;
    /// Account id of the owner of this lockup
    owner: AccountId;
    /// Pool where funds are deposited
    pool: AccountId;

    /// Total amount of tokens. Take into account locked, staked and rewards.
    /// To account for all rewards, the staking pool must be regularly updated.
    total: BigNumber;
    /// Amount of tokens locked
    locked: BigNumber;
    /// Amount of tokens available for use right now.
    liquid: BigNumber;
    /// Amount of tokens staked on the pool
    staked: BigNumber;

    constructor(
        accountId: AccountId,
        owner: AccountId,
        pool: AccountId,
        total: BigNumber,
        locked: BigNumber,
        liquid: BigNumber,
        staked: BigNumber
    ) {
        this.accountId = accountId;
        this.owner = owner;
        this.pool = pool;
        this.total = total;
        this.locked = locked;
        this.liquid = liquid;
        this.staked = staked;
    }

    static fromJson(data: any): Lockup {
        return new Lockup(
            data.lockup,
            data.owner,
            data.pool,
            BigNumber.from(data.total),
            BigNumber.from(data.locked),
            BigNumber.from(data.liquid),
            BigNumber.from(data.staked)
        );
    }

    toJson() {
        return {
            lockup: this.accountId,
            owner: this.owner,
            pool: this.pool,
            total: this.total.toString(),
            locked: this.locked.toString(),
            liquid: this.liquid.toString(),
            staked: this.staked.toString(),
        };
    }

    static async fromAccountId(accountId: AccountId): Promise<Lockup> {
        const lockup = new Lockup(
            accountId,
            "",
            "",
            BigNumber.from(0),
            BigNumber.from(0),
            BigNumber.from(0),
            BigNumber.from(0)
        );
        await lockup.update();
        return lockup;
    }

    async update(): Promise<void> {
        const near = await nearAPI.connect(OPTIONS);
        const account = await near.account(this.accountId);

        const lockupContract = new LockupContract(account, this.accountId);

        // Check if the contract is a valid lockup contract by checking the owner method

        try {
            this.owner = await lockupContract.get_owner_account_id();

            this.pool = await lockupContract.get_staking_pool_account_id();
            this.locked = await lockupContract.get_locked_amount();
            // TODO: Get total by querying the staking pool instead (if exists)
            this.total = await lockupContract.get_balance();
            this.liquid = await lockupContract.get_liquid_owners_balance();

            const stakingContract = new StakingContract(account, this.pool);

            this.staked = await stakingContract.staked(this.accountId);
        } catch (e: any) {
            const err_str = e.toString();
            if (err_str.indexOf("MethodNotFound") !== -1) {
                this.owner = "Account is not a valid Lockup";
            } else if (err_str.indexOf("CodeDoesNotExist") !== -1) {
                this.owner = "Account has no code deployed";
            } else {
                throw e;
            }
        }
    }
}

interface LockupInterface extends nearAPI.Contract {
    get_owner_account_id(): Promise<AccountId>;
    get_staking_pool_account_id(): Promise<AccountId>;
    get_locked_amount(): Promise<U256>;
    get_balance(): Promise<U256>;
    get_liquid_owners_balance(): Promise<U256>;
}

class LockupContract {
    contract: LockupInterface;

    constructor(account: Account, contractId: string) {
        this.contract = new nearAPI.Contract(account, contractId, {
            viewMethods: [
                "get_owner_account_id",
                "get_staking_pool_account_id",
                "get_locked_amount",
                "get_balance",
                "get_liquid_owners_balance",
            ],
            changeMethods: [],
        }) as LockupInterface;
    }

    async get_owner_account_id(): Promise<AccountId> {
        return await this.contract.get_owner_account_id();
    }

    async get_staking_pool_account_id(): Promise<AccountId> {
        return await this.contract.get_staking_pool_account_id();
    }

    async get_locked_amount(): Promise<BigNumber> {
        return BigNumber.from(await this.contract.get_locked_amount());
    }

    async get_balance(): Promise<BigNumber> {
        return BigNumber.from(await this.contract.get_balance());
    }

    async get_liquid_owners_balance(): Promise<BigNumber> {
        return BigNumber.from(await this.contract.get_liquid_owners_balance());
    }
}
interface StakingInterface extends nearAPI.Contract {
    get_account(args: {
        account_id: string;
    }): Promise<{ staked_balance: U256 }>;
}

class StakingContract {
    contract: StakingInterface;

    constructor(account: Account, contractId: string) {
        this.contract = new nearAPI.Contract(account, contractId, {
            viewMethods: ["get_account"],
            changeMethods: [],
        }) as StakingInterface;
    }

    async get_account(accountId: AccountId): Promise<{ staked_balance: U256 }> {
        return await this.contract.get_account({ account_id: accountId });
    }

    async staked(accountId: AccountId): Promise<BigNumber> {
        return BigNumber.from(
            (await this.get_account(accountId)).staked_balance
        );
    }
}

'''
'''--- src/utils.ts ---
import { BigNumber } from "@ethersproject/bignumber";
import { AccountId, Currency } from "./types";
import * as nearApi from "near-api-js";

export async function fetchNearPrice(): Promise<number> {
    const res = await fetch(
        "https://api.binance.com/api/v3/ticker/price?symbol=NEARUSDT"
    );
    const content = await res.json();
    return parseFloat(content.price as string);
}

export function formatLockupAccount(lockupAccount: AccountId) {
    return lockupAccount.substring(0, 4) + "..." + lockupAccount.substring(36);
}

export function formatOwnerAccount(ownerAccount: AccountId) {
    return ownerAccount.substring(0, 6) + "..." + ownerAccount.substring(60);
}

export function formatCurrency(
    value: BigNumber,
    currency: Currency,
    nearPrice: number
): string {
    if (currency === "NEAR") {
        return nearApi.utils.format.formatNearAmount(value.toString(), 2) + "Ⓝ";
    } else {
        // assert(currency === "USDT");
        const valueNear = parseFloat(
            nearApi.utils.format
                .formatNearAmount(value.toString())
                .replace(",", "")
        );
        return (
            "$" +
            (valueNear * nearPrice)
                .toFixed(2)
                .replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        );
    }
}

'''
'''--- tailwind.config.js ---
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}", "./public/index.html"],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

'''
'''--- webpack.config.js ---
const webpack = require('webpack');

module.exports = {
    configure: {
        resolve: {
            extensions: ['.ts', '.js'],
            fallback: {
                buffer: require.resolve('buffer'),
                stream: require.resolve("stream-browserify"),
            },
            alias: {
                process: "process/browser"
            }
        },
    },
    plugins: {
        add: [
            new webpack.ProvidePlugin({
                Buffer: ['buffer', 'Buffer'],
            }),
            new webpack.ProvidePlugin({
                process: 'process/browser',
            }),
        ],
    },
};

'''