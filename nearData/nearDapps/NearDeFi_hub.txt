*GitHub Repository "NearDeFi/hub"*

'''--- package.json ---
{
  "name": "frontend",
  "version": "0.1.0",
  "homepage": "/",
  "private": true,
  "dependencies": {
    "@aurora-is-near/engine": "git://github.com/NearDeFi/aurora.js#support-es6",
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.3.2",
    "@testing-library/user-event": "^7.1.2",
    "big.js": "^6.1.1",
    "bn.js": "^5.1.1",
    "bootstrap": "^5.0.0-beta2",
    "bootstrap-icons": "^1.5.0",
    "chart.js": "^3.3.2",
    "chartjs-adapter-moment": "^1.0.0",
    "collections": "^5.1.12",
    "error-polyfill": "^0.1.2",
    "local-storage": "^2.0.0",
    "moment": "^2.29.1",
    "near-api-js": "^0.44.0",
    "node-sass": "^4.0.0",
    "react": "^16.13.1",
    "react-chartjs-2": "^3.0.3",
    "react-compound-timer": "^1.2.0",
    "react-datepicker": "^4.1.1",
    "react-dom": "^16.13.1",
    "react-infinite-scroller": "^1.2.4",
    "react-router-dom": "^5.2.0",
    "react-scripts": "3.4.0",
    "react-select": "^4.3.1",
    "react-singleton-hook": "^3.1.1",
    "react-tooltip": "^4.2.13",
    "react-uuid": "^1.0.2",
    "remark-gfm": "^1.0.0",
    "swr": "^0.5.6",
    "timeago-react": "^3.0.3",
    "web3-eth-abi": "^1.7.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "deploy": "yarn build"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "prettier": "^2.2.1"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#123123" />
    <meta
      name="description"
      content="Defi hub for NEAR"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="og:image" content="https://wiki/favicon.png"/>
    <meta property="og:url" content="https://wiki/" />
    <meta property="og:title" content="Defi Hub" />
    <meta property="og:description" content="Defi hub for NEAR" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/favicon.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Defi Hub</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "wiki",
  "name": "the wiki",
  "icons": [
    {
      "src": "favicon.png",
      "sizes": "256x256",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#333333",
  "background_color": "#fbfbfb"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useCallback, useEffect, useState } from "react";
import "error-polyfill";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/js/bootstrap.bundle";
import "./App.scss";
import { BrowserRouter as Router, Link, Route, Switch } from "react-router-dom";
import { NearConfig, useNearPromise } from "./data/near";
import MainPage from "./pages/MainPage";

function App(props) {
  const [connected, setConnected] = useState(false);
  const [signedIn, setSignedIn] = useState(false);
  const [signedAccountId, setSignedAccountId] = useState(null);

  const _near = useNearPromise();

  const requestSignIn = useCallback(
    async (e) => {
      e && e.preventDefault();
      const appTitle = "wiki";
      const near = await _near;

      await near.walletConnection.requestSignIn(
        NearConfig.contractName,
        appTitle
      );
      return false;
    },
    [_near]
  );

  const logOut = useCallback(async () => {
    const near = await _near;
    near.walletConnection.signOut();
    near.accountId = null;
    setSignedIn(false);
    setSignedAccountId(null);
  }, [_near]);

  const refreshAllowance = useCallback(async () => {
    alert(
      "You're out of access key allowance. Need sign in again to refresh it"
    );
    await logOut();
    await requestSignIn();
  }, [logOut, requestSignIn]);

  useEffect(() => {
    _near.then((near) => {
      setSignedIn(!!near.accountId);
      setSignedAccountId(near.accountId);
      setConnected(true);
    });
  }, [_near]);

  const passProps = {
    refreshAllowance: () => refreshAllowance(),
    signedAccountId,
    signedIn,
    connected,
  };

  const header = !connected ? (
    <div>
      Connecting...{" "}
      <span
        className="spinner-grow spinner-grow-sm"
        role="status"
        aria-hidden="true"
      />
    </div>
  ) : signedIn ? (
    <div>
      <button className="btn btn-outline-light" onClick={() => logOut()}>
        Sign out ({signedAccountId})
      </button>
    </div>
  ) : (
    <div>
      <button
        className="btn btn-outline-light"
        onClick={(e) => requestSignIn(e)}
      >
        Sign in with NEAR Wallet
      </button>
    </div>
  );

  return (
    <div className="App">
      <Router basename={process.env.PUBLIC_URL}>
        <nav className="navbar navbar-expand-lg navbar-dark bg-primary mb-3">
          <div className="container-fluid">
            <a className="navbar-brand" href="/" title="Defi Hub">
              Defi Hub
            </a>
            <button
              className="navbar-toggler"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="#navbarSupportedContent"
              aria-controls="navbarSupportedContent"
              aria-expanded="false"
              aria-label="Toggle navigation"
            >
              <span className="navbar-toggler-icon" />
            </button>
            <div
              className="collapse navbar-collapse"
              id="navbarSupportedContent"
            >
              <ul className="navbar-nav me-auto mb-2 mb-lg-0">
                <li className="nav-item">
                  <Link className="nav-link" aria-current="page" to="/">
                    Main
                  </Link>
                </li>
              </ul>
              <form className="d-flex">{header}</form>
            </div>
          </div>
        </nav>

        <Switch>
          <Route exact path={"/"}>
            <MainPage {...passProps} />
          </Route>
        </Switch>
      </Router>
    </div>
  );
}

export default App;

'''
'''--- src/abi/erc20.js ---
export const Erc20Abi = [
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_spender",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_from",
        type: "address",
      },
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "balance",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address",
      },
      {
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    constant: false,
    inputs: [
      {
        name: "recipient",
        type: "bytes",
      },
      {
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawToNear",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

'''
'''--- src/components/Dashboard/Dashboard.js ---
import React, { useEffect, useState } from "react";
import { NearConfig, TGas, useAurora, useNear } from "../../data/near";
import { useErc20Balances } from "../../data/aurora/token";
import { OneNear, OneEth, toAddress, buildInput } from "../../data/utils";
import Big from "big.js";
import { useTokens } from "../../data/aurora/tokenList";
import "./Dashboard.scss";
import * as nearAPI from "near-api-js";
import { Erc20Abi } from "../../abi/erc20";
import { useAccount } from "../../data/account";

const fetchBalance = async (aurora, address) => {
  return Big((await aurora.getBalance(toAddress(address))).unwrap());
};

export default function Dashboard(props) {
  const aurora = useAurora();
  const near = useNear();
  const account = useAccount();
  const address = props.address;
  const [balance, setBalance] = useState(false);
  const [loading, setLoading] = useState(true);
  const tokens = useTokens();

  const erc20Balances = useErc20Balances(address, tokens.tokenAddresses);

  useEffect(() => {
    if (!aurora) {
      return;
    }
    setLoading(true);

    fetchBalance(aurora, address).then((b) => {
      setBalance(b);
      setLoading(false);
    });
  }, [address, aurora]);

  const sortedErc20Balances = erc20Balances
    ? Object.entries(erc20Balances).filter(([t, b]) => b && b.gt(0))
    : [];
  sortedErc20Balances.sort(([t1, a], [t2, b]) => b.cmp(a));

  const depositWNear = async (e, amount) => {
    e.preventDefault();
    setLoading(true);
    const actions = [
      [
        NearConfig.wrapNearAccountId,
        nearAPI.transactions.functionCall(
          "ft_transfer_call",
          {
            receiver_id: NearConfig.contractName,
            amount: Big(amount).mul(OneNear).toFixed(0),
            memo: "",
            msg: address.substring(2),
          },
          TGas.mul(70).toFixed(0),
          1
        ),
      ],
    ];

    await near.sendTransactions(actions);
  };

  const withdrawWNear = async (e, amount) => {
    e.preventDefault();
    setLoading(true);
    const input = buildInput(Erc20Abi, "withdrawToNear", [
      `0x${Buffer.from(account.accountId, "utf-8").toString("hex")}`,
      OneNear.mul(amount).round(0, 0).toFixed(0),
    ]);
    const wnearAddress = "0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d";
    const res = (await aurora.call(toAddress(wnearAddress), input)).unwrap();
    console.log(res);
    setLoading(false);
  };

  return (
    <div>
      <div>Account: {address.toString()}</div>
      <div>
        <button
          className="btn btn-primary m-1"
          onClick={(e) => depositWNear(e, 1)}
        >
          Deposit 1 wNEAR
        </button>
        <button
          className="btn btn-primary m-1"
          onClick={(e) => withdrawWNear(e, 1)}
        >
          Withdraw 1 wNEAR
        </button>
      </div>
      <div>
        Balance: {loading ? "Loading" : `${balance.div(OneEth).toFixed(6)} ETH`}
      </div>
      <div>
        ERC20 balances:
        <ul>
          {sortedErc20Balances.map(([tokenAddress, balance]) => {
            const token = tokens.tokensByAddress[tokenAddress];
            return (
              <li key={`token-balance-${tokenAddress}`}>
                <img
                  className="token-icon me-1"
                  src={token.logoURI}
                  alt={token.symbol}
                />
                {token.symbol}:{" "}
                {balance
                  ? balance.div(Big(10).pow(token.decimals)).toFixed(6)
                  : balance}
              </li>
            );
          })}
        </ul>
      </div>
    </div>
  );
}

'''
'''--- src/data/account.js ---
import { singletonHook } from "react-singleton-hook";
import { useEffect, useState } from "react";
import { useNearPromise } from "./near";

const defaultAccount = {
  loading: true,
  accountId: null,
  state: null,
  near: null,
};

const loadAccount = async (near, setAccount) => {
  const accountId = near.accountId;
  const account = {
    loading: false,
    accountId,
    state: null,
    near,
    refresh: async () => await loadAccount(near, setAccount),
  };
  if (accountId) {
    account.state = await near.account.state();
  }

  setAccount(account);
};

export const useAccount = singletonHook(defaultAccount, () => {
  const [account, setAccount] = useState(defaultAccount);
  const _near = useNearPromise();

  useEffect(() => {
    _near.then(async (near) => {
      try {
        await loadAccount(near, setAccount);
      } catch (e) {
        console.error(e);
      }
    });
  }, [_near]);

  return account;
});

'''
'''--- src/data/aurora/token.js ---
import { useAurora } from "../near";
import { useEffect, useState } from "react";
import Big from "big.js";
import { buildInput, decodeOutput, toAddress } from "../utils";
import { Erc20Abi } from "../../abi/erc20";

const fetchErc20Balance = async (aurora, accountAddress, tokenAddress) => {
  try {
    const input = buildInput(Erc20Abi, "balanceOf", [
      accountAddress.toString(),
    ]);
    const res = (
      await aurora.view(
        toAddress(accountAddress),
        toAddress(tokenAddress),
        0,
        input
      )
    ).unwrap();
    const out = decodeOutput(Erc20Abi, "balanceOf", res);
    return Big(out[0]);
  } catch (e) {
    console.log(e);
    return false;
  }
};

export const useErc20Balances = (accountAddress, tokenAddresses) => {
  const aurora = useAurora();

  const [tokenBalances, setTokenBalances] = useState(null);

  useEffect(() => {
    console.log("Fetching tokens");
    if (!aurora || !accountAddress || !tokenAddresses) {
      setTokenBalances(null);
      return;
    }

    const currentAccountAddress = accountAddress;

    setTokenBalances(
      tokenAddresses.reduce((obj, tokenAddress) => {
        obj[tokenAddress] = null;
        return obj;
      }, {})
    );
    tokenAddresses.forEach((tokenAddress) => {
      fetchErc20Balance(aurora, accountAddress, tokenAddress).then(
        (balance) => {
          if (currentAccountAddress === accountAddress) {
            setTokenBalances((state) =>
              Object.assign({}, state, { [tokenAddress]: balance })
            );
          }
        }
      );
    });
  }, [aurora, accountAddress, tokenAddresses]);

  return tokenBalances;
};

'''
'''--- src/data/aurora/tokenList.js ---
import { useEffect, useState } from "react";

const defaultTokenList = {
  name: "Aurora",
  logoURI:
    "https://raw.githubusercontent.com/aurora-is-near/aurora-press-kit/master/Logos/SVG/aurora-stack.svg",
  keywords: ["aurora", "near", "rainbow", "bridge", "audited", "verified"],
  tags: {
    aurora: {
      name: "Native Aurora",
      description: "Tokens that were deployed initially on Aurora.",
    },
    near: {
      name: "Native NEAR",
      description:
        "Tokens that were deployed initially on NEAR. They have an equivalent token in Aurora.",
    },
    ethereum: {
      name: "Native Ethereum",
      description:
        "Tokens that were deployed initially on Ethereum. They have an equivalent token in NEAR and Aurora.",
    },
    bsc: {
      name: "Native BSC",
      description:
        "Tokens that were deployed initially on BSC. They have an equivalent token in NEAR and Aurora.",
    },
    terra: {
      name: "Native Terra",
      description:
        "Tokens that were deployed initially on Terra. They have an equivalent token in Aurora.",
    },
  },
  timestamp: "2022-01-19T16:04:39+00:00",
  tokens: [
    {
      chainId: 1313161554,
      address: "0x5ac53f985ea80c6af769b9272f35f122201d0f56",
      symbol: "HAK",
      name: "Hakuna Matata",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/HAK.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0x4e834cdcc911605227eedddb89fad336ab9dc00a",
      symbol: "AAVE",
      name: "Aave Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/aave.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x2BAe00C8BC1868a5F7a216E881Bae9e662630111",
      symbol: "ABR",
      name: "Allbridge (Allbridge)",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/abr_abr.svg",
      tags: ["ethereum", "allbridge"],
    },
    {
      chainId: 1313161554,
      address: "0xC4bdd27c33ec7daa6fcfd8532ddB524Bf4038096",
      symbol: "atLUNA",
      name: "Luna Terra (Allbridge)",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/abr_atluna.svg",
      tags: ["terra", "allbridge"],
    },
    {
      chainId: 1313161554,
      address: "0x5ce9F0B6AFb36135b5ddBF11705cEB65E634A9dC",
      symbol: "atUST",
      name: "UST Terra (Allbridge)",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/abr_atust.svg",
      tags: ["terra", "allbridge"],
    },
    {
      chainId: 1313161554,
      address: "0x5C92A4A7f59A9484AFD79DbE251AD2380E589783",
      symbol: "abBUSD",
      name: "BUSD BSC (Allbridge)",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/abr_busd.svg",
      tags: ["allbridge"],
    },
    {
      chainId: 1313161554,
      address: "0x0fAD0ED848A7A16526E8a7574e418B015Dbf41B5",
      symbol: "PAD",
      name: "SmartPad Token (Allbridge)",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/abr_smartpad.svg",
      tags: ["ethereum", "allbridge"],
    },
    {
      chainId: 1313161554,
      address: "0x0f00576d07B594Bdc1caf44b6014A6A02E5AFd48",
      symbol: "SOL",
      name: "SOL (Allbridge)",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/abr_sol.svg",
      tags: ["allbridge"],
    },
    {
      chainId: 1313161554,
      address: "0xdc7acde9ff18b4d189010a21a44ce51ec874ea7c",
      symbol: "agEUR",
      name: "agEUR",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/ageur.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xb7e3617adb58dc34068522bd20cfe1660780b750",
      symbol: "ANGLE",
      name: "ANGLE",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/angle.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x8bec47865ade3b172a928df8f990bc7f2a3b9f79",
      symbol: "AURORA",
      name: "Aurora",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/aurora.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x8973c9ec7b79fe880697cdbca744892682764c37",
      symbol: "BAKED",
      name: "BakedToken",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/baked.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xb59d0fdaf498182ff19c4e80c00ecfc4470926e2",
      symbol: "BAL",
      name: "Balancer",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/bal.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x2b9025aecc5ce7a8e6880d3e9c6e458927ecba04",
      symbol: "BAT",
      name: "Basic Attention Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/bat.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xe4baf0af161bf03434d1c5a53957981493c12c99",
      symbol: "bHOME",
      name: "bHOME",
      decimals: 6,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/bhome.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xdeacf0faa2b80af41470003b5f6cd113d47b4dcd",
      symbol: "COMP",
      name: "Compound",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/comp.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xabe9818c5fb5e751c4310be6f0f18c8d85f9bd7f",
      symbol: "CREAM",
      name: "Cream Finance",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/cream.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x026dda7f0f0a2e42163c9c80d2a5b6958e35fc49",
      symbol: "CRF",
      name: "Crafting Finance",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/crf.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xe3520349f477a5f6eb06107066048508498a291b",
      symbol: "DAI",
      name: "Dai Stablecoin",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/dai.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xe301ed8c7630c9678c39e4e45193d1e7dfb914f7",
      symbol: "DODO",
      name: "DODO bird",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/dodo.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xea62791aa682d455614eaa2a12ba3d9a2fd197af",
      symbol: "FLX",
      name: "Flux Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/flx.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xda2585430fef327ad8ee44af8f1f989a2a91a3d2",
      symbol: "FRAX",
      name: "Frax",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/frax.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xc8fdd32e0bf33f0396a18209188bb8c6fb8747d2",
      symbol: "FXS",
      name: "Frax Share",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/fxs.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x6454e4a4891c6b78a5a85304d34558dda5f3d6d8",
      symbol: "JUMBO",
      name: "Jumbo Exchange",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/jumbo.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0xE4eB03598f4DCAB740331fa432f4b85FF58AA97E",
      symbol: "KSW",
      name: "KillSwitchToken",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/ksw.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x94190d8ef039c670c6d6b9990142e0ce2a1e3178",
      symbol: "LINK",
      name: "ChainLink Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/link.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xfca152a9916895bf564e3f26a611f9e1e6aa6e73",
      symbol: "LUNA",
      name: "Wrapped LUNA Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/luna.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x1d1f82d8b8fc72f29a8c268285347563cb6cd8b3",
      symbol: "MKR",
      name: "Maker",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/mkr.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xd126b48c072f4668e944a8895bc74044d5f2e85b",
      symbol: "MNFT",
      name: "MANUFACTORY",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/mnft.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x74974575d2f1668c63036d51ff48dbaa68e52408",
      symbol: "MODA",
      name: "moda",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/moda.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xC86Ca2BB9C9c9c9F140d832dE00BfA9e153FA1e3",
      symbol: "NDOL",
      name: "Necc Dollars",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/ndol.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d",
      symbol: "wNEAR",
      name: "Wrapped NEAR fungible token",
      decimals: 24,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/near.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0x6EBA841F1201fFDDe7DDC2ba995D3308f6C4aEa0",
      symbol: "NECC",
      name: "Necc",
      decimals: 9,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/necc.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0x90eb16621274fb47a071001fbbf7550948874cb5",
      symbol: "NFD",
      name: "Feisty Doge NFT",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/nfd.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x449f661c53aE0611a24c2883a910A563A7e42489",
      symbol: "nNECC",
      name: "Wrapped Staked Necc",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/nnecc.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0x951cfdc9544b726872a8faf56792ef6704731aae",
      symbol: "OCT",
      name: "Octopus Network Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/oct.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x07b2055fbd17b601c780aeb3abf4c2b3a30c7aae",
      symbol: "OIN",
      name: "oinfinance",
      decimals: 8,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/oin.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x885f8CF6E45bdd3fdcDc644efdcd0AC93880c781",
      symbol: "PAD",
      name: "NearPad Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/pad.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x291c8fceaca3342b29cc36171deb98106f712c66",
      symbol: "PICKLE",
      name: "PickleToken",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/pickle.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x8828a5047d093f6354e3fe29ffcb2761300dc994",
      symbol: "PULSE",
      name: "Pulse",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/pulse.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x18921f1e257038e538ba24d49fa6495c8b1617bc",
      symbol: "REN",
      name: "Republic",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/ren.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xdc9be1ff012d3c6da818d136a3b2e5fdd4442f74",
      symbol: "SNX",
      name: "Synthetix Network Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/snx.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x7821c773a12485b12a2b5b7bc451c3eb200986b1",
      symbol: "SUSHI",
      name: "SushiToken",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/sushi.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xFa94348467f64D5A457F75F8bc40495D33c65aBB",
      symbol: "TRI",
      name: "Trisolaris",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/tri.svg",
      tags: [],
    },
    {
      chainId: 1313161554,
      address: "0x984c2505a14da732d7271416356f535953610340",
      symbol: "UMINT",
      name: "YouMinter",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/umint.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x1bc741235ec0ee86ad488fa49b69bb6c823ee7b7",
      symbol: "UNI",
      name: "Uniswap",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/uni.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xb12bfca5a55806aaf64e99521918a4bf0fc40802",
      symbol: "USDC",
      name: "USD Coin",
      decimals: 6,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/usdc.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x4988a896b1227218e4a686fde5eabdcabd91571f",
      symbol: "USDT",
      name: "TetherUS",
      decimals: 6,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/usdt.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x098d5b6a26bca1d71f2335805d71b244f94e8a5f",
      symbol: "UST",
      name: "Wrapped UST Token",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/ust.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xf4eb217ba2454613b15dbdea6e5f22276410e89e",
      symbol: "WBTC",
      name: "Wrapped BTC",
      decimals: 8,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/wbtc.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xf34d508bac379825255cc80f66cbc89dfeff92e4",
      symbol: "WSTR",
      name: "WrappedStar",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/wstr.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0x7ca1c28663b76cfde424a9494555b94846205585",
      symbol: "XNL",
      name: "Chronicle",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/xnl.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xa64514a8af3ff7366ad3d5daa5a548eefcef85e0",
      symbol: "YFI",
      name: "yearn.finance",
      decimals: 18,
      logoURI:
        "https://raw.githubusercontent.com/aurora-is-near/bridge-assets/master/tokens/yfi.svg",
      tags: ["ethereum"],
    },
    {
      chainId: 1313161554,
      address: "0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB",
      symbol: "WETH",
      name: "Wrapped ETH",
      decimals: 18,
      logoURI:
        "https://dappimg.com/media/image/token/a412fe82bd2c11eb8d1e0242ac130005.png",
      tags: ["ethereum"],
    },
  ],
  version: {
    major: 1,
    minor: 0,
    patch: 0,
  },
};

export const useTokens = () => {
  const [tokens, setTokens] = useState({});

  const tokenList = defaultTokenList;

  useEffect(() => {
    setTokens(
      Object.assign(
        {
          tokenAddresses: tokenList.tokens.map((t) => t.address),
          tokensByAddress: tokenList.tokens.reduce((m, t) => {
            m[t.address] = t;
            return m;
          }, {}),
        },
        tokenList
      )
    );
  }, [tokenList]);

  return tokens;
};

'''
'''--- src/data/near.js ---
import * as nearAPI from "near-api-js";
import { singletonHook } from "react-singleton-hook";
import Big from "big.js";
import { Engine } from "@aurora-is-near/engine/lib/engine";
import { useEffect, useState } from "react";

export const TGas = Big(10).pow(12);
export const MaxGasPerTransaction = TGas.mul(300);
export const StorageCostPerByte = Big(10).pow(19);
export const TokenStorageDeposit = StorageCostPerByte.mul(125);
export const BridgeTokenStorageDeposit = StorageCostPerByte.mul(1250);

export const randomPublicKey = nearAPI.utils.PublicKey.from(
  "ed25519:8fWHD35Rjd78yeowShh9GwhRudRtLLsGCRjZtgPjAtw9"
);

// const isLocalhost = window.location.hostname === "localhost";

export const IsMainnet = true;
const TestnetContract = "aurora";
const TestNearConfig = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  archivalNodeUrl: "https://rpc.testnet.internal.near.org",
  contractName: TestnetContract,
  walletUrl: "https://wallet.testnet.near.org",
  storageCostPerByte: StorageCostPerByte,
  wrapNearAccountId: "wrap.testnet",
  auroraContractId: "aurora",
};
const MainnetContract = "aurora";
export const MainNearConfig = {
  networkId: "mainnet",
  nodeUrl: "https://rpc.mainnet.near.org",
  archivalNodeUrl: "https://rpc.mainnet.internal.near.org",
  contractName: MainnetContract,
  walletUrl: "https://wallet.near.org",
  storageCostPerByte: StorageCostPerByte,
  wrapNearAccountId: "wrap.near",
  auroraContractId: "aurora",
};

export const NearConfig = IsMainnet ? MainNearConfig : TestNearConfig;
export const LsKey = NearConfig.contractName + ":v01:";

async function _initNear() {
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();
  keyStore.reKey = () => {};
  const nearConnection = await nearAPI.connect(
    Object.assign({ deps: { keyStore } }, NearConfig)
  );
  const _near = {};

  _near.nearArchivalConnection = nearAPI.Connection.fromConfig({
    networkId: NearConfig.networkId,
    provider: {
      type: "JsonRpcProvider",
      args: { url: NearConfig.archivalNodeUrl },
    },
    signer: { type: "InMemorySigner", keyStore },
  });

  _near.keyStore = keyStore;
  _near.nearConnection = nearConnection;

  _near.walletConnection = new nearAPI.WalletConnection(
    nearConnection,
    NearConfig.contractName
  );
  _near.accountId = _near.walletConnection.getAccountId();
  _near.account = _near.walletConnection.account();

  _near.contract = new nearAPI.Contract(
    _near.account,
    NearConfig.contractName,
    {
      viewMethods: [],
      changeMethods: [],
    }
  );

  _near.fetchBlockHash = async () => {
    const block = await nearConnection.connection.provider.block({
      finality: "final",
    });
    return nearAPI.utils.serialize.base_decode(block.header.hash);
  };

  _near.fetchBlockHeight = async () => {
    const block = await nearConnection.connection.provider.block({
      finality: "final",
    });
    return block.header.height;
  };

  _near.fetchNextNonce = async () => {
    const accessKeys = await _near.account.getAccessKeys();
    return accessKeys.reduce(
      (nonce, accessKey) => Math.max(nonce, accessKey.access_key.nonce + 1),
      1
    );
  };

  _near.sendTransactions = async (items, callbackUrl) => {
    let [nonce, blockHash] = await Promise.all([
      _near.fetchNextNonce(),
      _near.fetchBlockHash(),
    ]);

    const transactions = [];
    let actions = [];
    let currentReceiverId = null;
    let currentTotalGas = Big(0);
    items.push([null, null]);
    items.forEach(([receiverId, action]) => {
      const actionGas =
        action && action.functionCall ? Big(action.functionCall.gas) : Big(0);
      const newTotalGas = currentTotalGas.add(actionGas);
      if (
        receiverId !== currentReceiverId ||
        newTotalGas.gt(MaxGasPerTransaction)
      ) {
        if (currentReceiverId !== null) {
          transactions.push(
            nearAPI.transactions.createTransaction(
              _near.accountId,
              randomPublicKey,
              currentReceiverId,
              nonce++,
              actions,
              blockHash
            )
          );
          actions = [];
        }
        currentTotalGas = actionGas;
        currentReceiverId = receiverId;
      } else {
        currentTotalGas = newTotalGas;
      }
      actions.push(action);
    });
    return await _near.walletConnection.requestSignTransactions(
      transactions,
      callbackUrl
    );
  };

  _near.archivalViewCall = async (blockId, contractId, methodName, args) => {
    args = args || {};
    const result = await _near.nearArchivalConnection.provider.query({
      request_type: "call_function",
      account_id: contractId,
      method_name: methodName,
      args_base64: Buffer.from(JSON.stringify(args)).toString("base64"),
      block_id: blockId,
    });

    return (
      result.result &&
      result.result.length > 0 &&
      JSON.parse(Buffer.from(result.result).toString())
    );
  };

  _near.aurora = new Engine(
    _near.walletConnection,
    keyStore,
    _near.account,
    NearConfig.networkId,
    NearConfig.auroraContractId
  );

  return _near;
}

const defaultNearPromise = Promise.resolve(_initNear());
export const useNearPromise = singletonHook(defaultNearPromise, () => {
  return defaultNearPromise;
});

const defaultNear = null;
export const useNear = singletonHook(defaultNear, () => {
  const [near, setNear] = useState(defaultNear);
  const _near = useNearPromise();

  useEffect(() => {
    _near.then(setNear);
  }, [_near]);

  return near;
});

const defaultAurora = null;
export const useAurora = singletonHook(defaultAurora, () => {
  const [aurora, setAurora] = useState(defaultAurora);
  const near = useNear();

  useEffect(() => {
    if (near) {
      setAurora(near.aurora);
    }
  }, [near]);

  return aurora;
});

'''
'''--- src/data/utils.js ---
import Big from "big.js";
import {
  BridgeTokenStorageDeposit,
  NearConfig,
  TokenStorageDeposit,
} from "./near";
import React from "react";
import Timer from "react-compound-timer";
import { Address } from "@aurora-is-near/engine";
import AbiCoder from "web3-eth-abi";

const MinAccountIdLen = 2;
const MaxAccountIdLen = 64;
const ValidAccountRe = /^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$/;
export const OneNear = Big(10).pow(24);
export const OneEth = Big(10).pow(18);
const AccountSafetyMargin = OneNear.div(2);

export const Loading = (
  <span
    className="spinner-grow spinner-grow-sm me-1"
    role="status"
    aria-hidden="true"
  />
);

export function isValidAccountId(accountId) {
  return (
    accountId &&
    accountId.length >= MinAccountIdLen &&
    accountId.length <= MaxAccountIdLen &&
    accountId.match(ValidAccountRe)
  );
}

const toCamel = (s) => {
  return s.replace(/([-_][a-z])/gi, ($1) => {
    return $1.toUpperCase().replace("-", "").replace("_", "");
  });
};

const isArray = function (a) {
  return Array.isArray(a);
};

const isObject = function (o) {
  return o === Object(o) && !isArray(o) && typeof o !== "function";
};

export const keysToCamel = function (o) {
  if (isObject(o)) {
    const n = {};

    Object.keys(o).forEach((k) => {
      n[toCamel(k)] = keysToCamel(o[k]);
    });

    return n;
  } else if (isArray(o)) {
    return o.map((i) => {
      return keysToCamel(i);
    });
  }

  return o;
};

export const bigMin = (a, b) => {
  if (a && b) {
    return a.lt(b) ? a : b;
  }
  return a || b;
};

export const bigToString = (b, p, len) => {
  if (b === null) {
    return "???";
  }
  let s = b.toFixed();
  let pos = s.indexOf(".");
  p = p || 6;
  len = len || 7;
  if (pos > 0) {
    let ap = Math.min(p, Math.max(len - pos, 0));
    if (ap > 0) {
      ap += 1;
    }
    if (pos + ap < s.length) {
      s = s.substring(0, pos + ap);
    }
  } else {
    pos = s.length;
  }
  for (let i = pos - 4; i >= 0; i -= 3) {
    s = s.slice(0, i + 1) + "," + s.slice(i + 1);
  }

  if (s === "0.000000" && p === 6 && len === 7) {
    return "<0.000001";
  }

  return s;
};

export const displayNear = (balance) =>
  balance ? (
    <>
      {bigToString(balance.div(OneNear))}{" "}
      <span className="text-secondary">NEAR</span>
    </>
  ) : (
    "???"
  );

export const dateToString = (d) => {
  return d.toLocaleString("en-us", {
    day: "numeric",
    month: "short",
    year: "numeric",
  });
};

export const displayTime = (d) => {
  return d.toLocaleString();
};

export const availableNearBalance = (account) => {
  if (account && !account.loading && account.state) {
    let balance = Big(account.state.amount).sub(
      Big(account.state.storage_usage).mul(Big(NearConfig.storageCostPerByte))
    );
    if (balance.gt(AccountSafetyMargin)) {
      return balance.sub(AccountSafetyMargin);
    }
  }
  return Big(0);
};

export const isoDate = (d) =>
  d ? new Date(d).toISOString().substring(0, 10) : "";

export const formatTimer = () => (
  <React.Fragment>
    <Timer.Days
      formatValue={(v) => (v > 1 ? `${v} days ` : v ? `1 day ` : "")}
    />
    <Timer.Hours />:
    <Timer.Minutes formatValue={(v) => `${v}`.padStart(2, "0")} />
    :
    <Timer.Seconds formatValue={(v) => `${v}`.padStart(2, "0")} />
  </React.Fragment>
);

export const isBridgeToken = (tokenAccountId) => {
  return tokenAccountId.endsWith(".bridge.near");
};

export const tokenStorageDeposit = async (tokenAccountId) => {
  return isBridgeToken(tokenAccountId)
    ? BridgeTokenStorageDeposit
    : TokenStorageDeposit;
};

export const toAddress = (address) => {
  return typeof address === "string"
    ? Address.parse(address).unwrapOrElse(() => Address.zero())
    : address;
};

export const buildInput = (abi, methodName, params) => {
  const abiItem = abi.find((a) => a.name === methodName);
  if (!abiItem) {
    return null;
  }
  return AbiCoder.encodeFunctionCall(abiItem, params);
};

export const decodeOutput = (abi, methodName, buffer) => {
  const abiItem = abi.find((a) => a.name === methodName);
  if (!abiItem) {
    return null;
  }
  return AbiCoder.decodeParameters(
    abiItem.outputs,
    `0x${buffer.toString("hex")}`
  );
};

'''
'''--- src/index.css ---

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";

ReactDOM.render(<App />, document.getElementById("root"));

'''
'''--- src/pages/MainPage.js ---
import React, { useEffect, useState } from "react";
import Dashboard from "../components/Dashboard/Dashboard";
import { useAccount } from "../data/account";
import { AccountID } from "@aurora-is-near/engine";

export default function MainPage(props) {
  const [address, setAddress] = useState("");

  const account = useAccount();

  const accountId = account && account.accountId;
  useEffect(() => {
    if (accountId) {
      const address = new AccountID(accountId).toAddress().toString();
      console.log(address);
      setAddress(address);
    }
  }, [accountId]);

  const onAddressChange = (e) => {
    setAddress(e.target.value);
  };

  return (
    <div>
      <div className="container">
        <div className="row mb-3">
          <label htmlFor="eth-address">Aurora address:</label>
          <input
            name="eth-address"
            className="form-control"
            type="text"
            placeholder="0x1234..."
            value={address}
            onChange={onAddressChange}
          />
        </div>
        <div className="row mb-3">
          <Dashboard address={address} />
        </div>
      </div>
    </div>
  );
}

'''