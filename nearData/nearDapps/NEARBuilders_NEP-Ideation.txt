*GitHub Repository "NEARBuilders/NEP-Ideation"*

'''--- README.md ---
# NEP-Ideation

Let's ideate standards 💡

{% content-ref url="nep-0000-template.md" %}
[nep-0000-template.md](nep-0000-template.md)
{% endcontent-ref %}

## Quickstart

{% content-ref url="https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/eYMvXqEeHTuMsh7JRboR/" %}
[Start Here](https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/eYMvXqEeHTuMsh7JRboR/)
{% endcontent-ref %}

{% content-ref url="https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/paqK4UTfbHO8TsgdzQ0A/" %}
[NEARSletter](https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/paqK4UTfbHO8TsgdzQ0A/)
{% endcontent-ref %}

{% content-ref url="https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/Lk6pH07brRsxHEHhBO7d/" %}
[Community Groups](https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/Lk6pH07brRsxHEHhBO7d/)
{% endcontent-ref %}

{% content-ref url="https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/thv9RgvV6S5LYy0BQz01/" %}
[Resources](https://app.gitbook.com/o/wxNIOkA8NaT6omjLbqYh/s/thv9RgvV6S5LYy0BQz01/)
{% endcontent-ref %}

'''
'''--- SUMMARY.md ---
# Table of contents

* [NEP-Ideation](README.md)
* [nep-0000-template](nep-0000-template.md)

'''
'''--- nep-0000-template.md ---
---
NEP: 0
Title: NEP Purpose and Guidelines
Author: Todd Codrington III <satoshi@fakenews.org>
DiscussionsTo: https://github.com/nearprotocol/neps/pull/0000
Status: Draft
Type: Standards Track
Category: Contract
Created: 03-Mar-2022
---

## Summary

One paragraph explanation of the proposal.

## Motivation

Why are we doing this? What use cases does it support? What is the expected outcome?

## Rationale and alternatives

- Why is this design the best in the space of possible designs?
- What other designs have been considered and what is the rationale for not choosing them?
- What is the impact of not doing this?

## Specification

Explain the proposal as if it was already implemented and you were teaching it to another developer. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- If the feature introduces new abstractions, explaining how users and/or developers should _think_ about it;
- If applicable, describe the differences between the existing functionality.

For user-facing NEPs, this section should focus on user stories.

## Reference Implementation (Required for Protocol Working Group proposals, optional for other categories)

This is the technical portion of the NEP. Explain the design in sufficient detail that:

- Its interaction with other features is clear.
- Where possible, include a `Minimum Viable Interface` subsection expressing the required behavior and types in a target Near Contract language. (ie. traits and structs for rust, interfaces and classes for javascript, function signatures and structs for c, etc.)
- It is reasonably clear how the feature would be implemented.
- Corner cases are dissected by example.

The section should return to the examples given in the previous section, and explain more fully how the detailed proposal makes those examples work.

## Security Implications (Optional)

If there are security concerns concerning the NEP, those concerns should be explicitly written out to make sure reviewers of the NEP are aware of them.

## Drawbacks (Optional)

Why should we **not** do this?

## Unresolved Issues (Optional)

- What parts of the design do you expect to resolve through the NEP process before this gets merged?
- What parts of the design do you expect to resolve through the implementation of this feature before stabilization?
- What related issues do you consider out of scope for this NEP that could be addressed in the future independently of the solution that comes out of this NEP?

## Future possibilities

Think about what the natural extension and evolution of your proposal would
be and how it would affect the project as a whole in a holistic
way. Try to use this section as a tool to more fully consider all possible
interactions with the project in your proposal.
Also, consider how all fits into the roadmap for the project
and of the relevant sub-team.

This is also a good place to "dump ideas"; if they are out of scope for the
NEP you are writing but otherwise related.

If you have tried and cannot think of any future possibilities,
you may simply state that you cannot think of anything.

Note that having something written down in the future-possibilities section
is not a reason to accept the current or a future NEP. Such notes should be
in the section on motivation or rationale in this or subsequent NEPs.
The section merely provides additional information.

## Copyright

[copyright]: #copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- nep-9999.md ---
```
  NEP: 9999
  Title: Decentralized Autonomous Organization Standard
  Author: DAO Builders Group
  Status: Draft
  DiscussionsTo: <URL of current canonical thread>
  Type: Standards
  Requires: < ... >
  Created: <dd-mmm-yyyy>
```

## Summary

A standard interface that supports decentralized autonomous organizations (DAOs) that enable proposals with governance and voters.

## Motivation

This NEP is a response to the need for interoperability throughout DAO systems built on NEAR and other blockchains.

## Rationale

> [EIP-4824](https://daostar.one/EIP), courtesy of Metagov (Joshua Tan, Isaac Patka, Ido Gershtein, Eyal Eithcowich, Michael Zargham, and Sam Furter)

Let's assume that all DAOs possess at least two primitives:

1. **Membership** is defined by a set of addresses.
2. **Behavior** is defined by a set of possible contract actions, including calls to external contracts and calls to internal functions.

**Proposals** relate membership and behavior; they are *objects* which which members can interact. If and when executed, they become actions of the DAO (via governance).

## Specification 

> The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt).

`Contract` storage includes `Policy` (members + roles), `Proposals` (actions + votes), and `Config` (types).

Several methods are provided to interact with the DAO:

### [Application Binary Interface](https://github.com/near-daos/sputnik-dao-contract/blob/main/sputnikdao2/ABI.md)

```
{
  "viewMethods": [
    "get_config",
    "get_policy",
    "get_last_proposal_id",
    "get_proposals",
    "get_proposal",
  ],
  "changeMethods": [
    "new",
    "add_proposal",
    "act_proposal",
  ],
}
```

CORE DAO FUNCTIONALITY

--> creating and managing **proposals**, **policies** and **members**, along with processing **votes** and **updating the state** of the DAO as a whole

### DAO Interface

```ts
/// For decentralized autonomous organizations.

type DAO = {
  config: Config,
  policy: Policy,
}

/******************/
/* CHANGE METHODS */
/******************/

/// add_proposal: submit a proposal to the DAO
///
/// Requirements
/// * Caller of the method must attach a deposit of 1 yoctoⓃ for security purposes.
/// * Calling the method fails in case of insufficient deposit.
/// * Only those with permission can add the proposal.
/// * The proposal is added to a list of proposals.
///
/// Arguments:
/// * `description`: context of the proposal
/// * `kind`: type of the proposal

function add_proposal(
    proposal: {
        description: String,
        kind: ProposalKind,
    },
): u64;

/// act_proposal: act on given proposal by id, if permissions allow
///
/// A successful workflow will end in a success execution outcome
/// to the callback on the DAO contract at the method `on_proposal_callback`.
///
/// Requirements:
/// * Caller of the method must attach a deposit of 1 yoctoⓃ for security purposes.
/// * Only those with permission can act on the the proposal.
///
/// Arguments:
/// * `id`: the ID of the proposal.
/// * `action`: the action with the proposal.

function act_proposal(
    id: u64,
    action: Action,
)

```

## License
[copyright]: #copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0).

'''