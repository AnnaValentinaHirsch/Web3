*GitHub Repository "omarr45/near-quiz"*

'''--- README.md ---
# Quizly

### Create and solve quizzes with rewards on NEAR blockchain!

Check the demo [here](https://omarr45.github.io/near-quiz/)

'''
'''--- package.json ---
{
  "homepage": "https://omarr45.github.io/near-quiz",
  "name": "quizly",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "flowbite": "^1.5.3",
    "flowbite-react": "^0.1.11",
    "gh-pages": "^4.0.0",
    "i18next": "^21.9.2",
    "i18next-browser-languagedetector": "^6.1.5",
    "near-api-js": "^1.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^11.18.6",
    "react-router": "^6.4.0",
    "react-router-dom": "^6.4.0",
    "react-scripts": "5.0.1",
    "uuid": "^9.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.10",
    "postcss": "^8.4.16",
    "tailwindcss": "^3.1.8"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Create and solve quizzes with rewards on NEAR blockchain!"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"
      integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script>
      if (
        localStorage.getItem('color-theme') === 'dark' ||
        (!('color-theme' in localStorage) &&
          window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
    <title>Quizly</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Racing+Sans+One&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Changa:wght@300;400;500;600;700&display=swap');

body {
  font-family: 'Montserrat', 'Changa', sans-serif;
  -webkit-font-smoothing: antialiased;
}

.logo-font {
  font-family: 'Racing Sans One', cursive;
}

'''
'''--- src/App.js ---
import './App.css';

import { HashRouter, Route, Routes } from 'react-router-dom';

import CreateQuiz from './components/CreateQuiz';
import { Flowbite } from 'flowbite-react';
import Footer from './components/Footer';
import Landing from './components/Landing';
import Navbar from './components/Navbar';
import Profile from './components/Profile';
import TakeQuiz from './components/TakeQuiz';
import { useEffect } from 'react';

window.Buffer = window.Buffer || require('buffer').Buffer;

function App() {
  useEffect(() => {
    if (
      localStorage.getItem('color-theme') === 'dark' ||
      (!('color-theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, []);

  const account = window.walletConnection.account();

  return (
    <HashRouter>
      <Flowbite>
        <div className='App bg-white dark:bg-gray-900 min-h-screen'>
          <Navbar account={account} />
          <Routes>
            <Route path='/' exact element={<Landing account={account} />} />
            <Route path='/profile' element={<Profile account={account} />} />
            <Route path='/quiz/:quizId' element={<TakeQuiz />} />
            <Route path='/create' element={<CreateQuiz />} />
          </Routes>
          <Footer />
        </div>
      </Flowbite>
    </HashRouter>
  );
}

export default App;

'''
'''--- src/components/AddQuestion.js ---
import { QuestionsContext } from './utils/questionsContext';
import { useContext } from 'react';
import { useTranslation } from 'react-i18next';
import { v4 as uuidv4 } from 'uuid';

const AddQuestion = ({ n = 1, id, options }) => {
  const { form, setForm } = useContext(QuestionsContext);

  const { t, i18n } = useTranslation();

  return (
    <div className='p-4 rounded-md space-y-3 bg-gray-200 dark:bg-gray-800'>
      <div className='flex items-center justify-between'>
        <label
          htmlFor={'q' + ('0' + n).slice(-2)}
          className='block text-lg mt-1 font-semibold text-gray-900 dark:text-white'>
          {t('add-question-title')} {n}
        </label>
        <button
          onClick={(e) => {
            e.preventDefault();
            const newForm = form.filter((q) => q.id !== id);
            setForm(newForm);
          }}
          className='text-red-700 bg-transparent border-2 border-red-700 hover:bg-red-700 hover:text-white focus:ring-4 focus:outline-none focus:ring-red-300 rounded-md font-semibold text-sm p-2.5 text-center inline-flex items-center justify-center dark:bg-red-700 dark:text-white dark:hover:bg-red-800 dark:hover:border-red-800 dark:focus:ring-red-800'>
          {t('add-question-remove')}
        </button>
      </div>
      <input
        type='text'
        name={'question ' + n}
        id={'q' + ('0' + n).slice(-2)}
        className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
        placeholder={t('add-question-title-ph')}
        required=''
        value={
          form.filter((q) => q.id === id)[0]
            ? form.filter((q) => q.id === id)[0].questionText || ''
            : ''
        }
        onChange={(e) => {
          const newForm = form.map((q) => {
            if (q.id === id) {
              q.questionText = e.target.value;
            }
            return q;
          });
          setForm(newForm);
        }}
      />
      <label
        style={
          i18n.language === 'ar'
            ? {
                textAlign: 'right',
              }
            : {}
        }
        htmlFor={'tags' + ('0' + n).slice(-2)}
        className='block text-lg mt-1 font-semibold text-gray-900 dark:text-white'>
        {t('add-question-tags')}{' '}
        <bdi className='font-normal'>{t('add-question-tags-sub')}</bdi>
      </label>
      <input
        type='text'
        name={'question ' + n}
        id={'tags' + ('0' + n).slice(-2)}
        className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
        placeholder={t('add-question-tags-ph')}
        required=''
        value={
          form.filter((q) => q.id === id)[0]
            ? form.filter((q) => q.id === id)[0].tags.join(', ') || ''
            : ''
        }
        onChange={(e) => {
          const newForm = form.map((q) => {
            if (q.id === id) {
              const newTags = e.target.value.split(',');
              // trim each value
              q.tags = newTags.map((t) => t.trim());
            }
            return q;
          });
          setForm(newForm);
        }}
      />

      <p className='flex items-center justify-between pt-2 text-md font-semibold text-gray-900 dark:text-white'>
        {i18n.language === 'en'
          ? t('add-question-title') + ` ${n} ` + t('add-question-options')
          : t('add-question-options') + ' ' + t('add-question-title') + ' ' + n}
        <button
          title={t('add-question-add-option-ph')}
          onClick={(e) => {
            e.preventDefault();
            // add a new option
            const newForm = form.map((q) => {
              if (q.id === id) {
                q.options.push({
                  id: uuidv4(),
                  option: '',
                  isCorrect: false,
                });
              }
              return q;
            });
            setForm(newForm);
          }}
          className='h-8 w-8 text-white bg-green-500 hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium  rounded-full text-sm p-2.5 text-center inline-flex items-center justify-center mx-2 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800'>
          <span className='text-lg'>+</span>
        </button>
      </p>

      {options.map((option, i) => {
        return (
          <div className='flex items-center' key={'div-opt-' + i}>
            <input
              key={'rad-opt-' + i}
              defaultChecked={option.isCorrect}
              onChange={(e) => {
                const newForm = form.map((q) => {
                  if (q.id === id) {
                    q.options = q.options.map((o) => {
                      if (o.id === option.id) {
                        o.isCorrect = e.target.checked;
                      } else {
                        o.isCorrect = false;
                      }
                      return o;
                    });
                  }
                  return q;
                });
                setForm(newForm);
              }}
              id={'bordered-radio-' + option.id}
              type='radio'
              value=''
              name={'bordered-radio-q' + n}
              className='w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600'
            />
            <label
              htmlFor={'bordered-radio-' + option.id}
              className='mx-2 w-full text-sm font-medium text-gray-900 dark:text-gray-300'>
              <input
                type='text'
                key={`opt-${i}`}
                placeholder={t('add-question-option-ph')}
                onChange={(e) => {
                  // update option with e.target.value
                  const newForm = form.map((q) => {
                    if (q.id === id) {
                      q.options = q.options.map((o) => {
                        if (o.id === option.id) {
                          o.option = e.target.value;
                        }
                        return o;
                      });
                    }
                    return q;
                  });
                  setForm(newForm);
                }}
                value={
                  form
                    .find((q) => q.id === id)
                    .options.find((o) => o.id === option.id).option
                }
                className='px-4 rounded border w-full border-gray-200 dark:text-gray-700 dark:border-gray-700 focus:ring-primary-500 focus:border-primary-500'
              />
            </label>
            <button
              type='button'
              title={t('add-question-remove-option-ph')}
              onClick={(e) => {
                e.preventDefault();
                const newForm = form.map((q) => {
                  if (q.id === id) {
                    q.options = q.options.filter((o) => o.id !== option.id);
                  }
                  return q;
                });
                setForm(newForm);
              }}
              className='h-8 w-8 text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium  rounded-full text-sm p-2.5 text-center inline-flex items-center justify-center mx-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800'>
              <span>X</span>
            </button>
          </div>
        );
      })}
    </div>
  );
};

export default AddQuestion;

'''
'''--- src/components/CreateQuiz.js ---
import AddQuestion from './AddQuestion';
import { QuestionsContext } from './utils/questionsContext';
import React from 'react';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { v4 as uuidv4 } from 'uuid';

const CreateQuiz = () => {
  const HALF_NEAR = 10000000000;
  const ONE_NEAR = 1000000000000000000000000;

  const [quizTitle, setQuizTitle] = useState('');
  const [quizDescription, setQuizDescription] = useState('');
  const [availableFrom, setAvailableFrom] = useState(
    new Date().toISOString().split('T')[0]
  );
  const [availableTill, setAvailableTill] = useState(
    new Date(new Date().getTime() + 3 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split('T')[0]
  );
  const [numberOfWinner, setNumberOfWinner] = useState('');
  const [rewardPerWinner, setRewardPerWinner] = useState('');
  const [percentageToWin, setPercentageToWin] = useState('');
  const [numberOfTrials, setNumberOfTrials] = useState('');

  const [form, setForm] = useState([]);

  const handleAddQuestion = (e) => {
    e.preventDefault();

    const inputState = {
      id: uuidv4(),
      questionText: '',
      options: [
        {
          id: uuidv4(),
          option: '',
        },
        {
          id: uuidv4(),
          option: '',
        },
      ],
      tags: [],
      trueHashed: '1',
    };

    setForm([...form, inputState]);
  };

  const handleSubmit = () => {
    // e.preventDefault();
    /*
      quizTitle, ✅
      quizDescription, ✅
      questions, ✅
      specificUsers, 
      availableFrom, ✅
      availableTill, ✅
      allowMultipleTrials, ✅
      rewardPerWinner, ✅
      winnerCount, ✅
      percentageToWin, ✅
      |
      |
      ((rewardPerWinner * winnerCount) + one_Near + half_Near).toLocaleString('fullwide', {useGrouping:false})
      */
    const money =
      parseNearAmount(rewardPerWinner) * numberOfWinner + ONE_NEAR + HALF_NEAR;

    const newQuestions = form.map((q) => {
      return {
        ...q,
        options: q.options.map((option) => option.option),
      };
    });

    const avFromInSeconds =
      Math.floor(new Date(availableFrom).getTime()) * 1000000;

    const avTillInSeconds =
      Math.floor(new Date(availableTill).getTime()) * 1000000;

    console.log({
      quiz: {
        quizTitle,
        quizDescription,
        questions: { ...newQuestions },
        specificUsers: [],
        availableFrom: avFromInSeconds,
        availableTill: avTillInSeconds,
        allowMultipleTrials: numberOfTrials,
        rewardPerWinner,
        winnerCount: numberOfWinner,
        percentageToWin,
      },
    });

    window.contract.createQuiz(
      {
        quiz: {
          quizTitle,
          quizDescription,
          questions: { ...newQuestions },
          specificUsers: [],
          availableFrom: avFromInSeconds,
          availableTill: avTillInSeconds,
          allowMultipleTrials: numberOfTrials,
          rewardPerWinner,
          winnerCount: numberOfWinner,
          percentageToWin,
        },
      },
      100000000000000,
      money
    );
    // Add_Quiz(
    //   {
    //     quiz: {
    //       quizTitle,
    //       quizDescription,
    //       questions: { ...newQuestions },
    //       specificUsers: [],
    //       availableFrom: avFromInSeconds,
    //       availableTill: avTillInSeconds,
    //       allowMultipleTrials: numberOfTrials,
    //       rewardPerWinner,
    //       winnerCount: numberOfWinner,
    //       percentageToWin,
    //     },
    //   },
    //   money.toLocaleString('fullwide', { useGrouping: false })
    // )
    //   .then((res) => {
    //     console.log('Success ', res);
    //   })
    //   .catch((err) => {
    //     console.log('Error ', err);
    //   });
  };

  const { t, i18n } = useTranslation();

  return (
    <main className='flex flex-col items-center justify-between bg-white dark:bg-gray-900 dark:text-white my-5 px-6 mx-auto max-w-4xl text-center lg:p-12 lg:pt-8'>
      <h1 className='mb-8 text-2xl font-bold leading-tight tracking-tight text-gray-900 md:text-4xl dark:text-white'>
        {t('create-quiz-title')}
      </h1>
      <QuestionsContext.Provider value={{ form, setForm }}>
        <div className='flex flex-col items-start justify-between gap-0 w-full  md:gap-8'>
          {/* Left Section */}
          <div className='flex flex-col items-center justify-center text-left px-6 py-8 mx-auto w-full lg:p-0'>
            <form
              className='space-y-2 md:space-y-4 w-full'
              action='#'
              autoComplete='false'>
              <div>
                <label
                  style={
                    i18n.language === 'ar'
                      ? {
                          textAlign: 'right',
                        }
                      : {}
                  }
                  htmlFor='title'
                  className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                  {t('create-quiz-form-title')}
                </label>
                <input
                  type='text'
                  style={
                    i18n.language === 'ar'
                      ? {
                          textAlign: 'right',
                        }
                      : {}
                  }
                  name='title'
                  id='title'
                  className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                  placeholder={t('create-quiz-form-title-ph')}
                  required=''
                  value={quizTitle}
                  onChange={(e) => setQuizTitle(e.target.value)}
                />
              </div>
              <div>
                <label
                  style={
                    i18n.language === 'ar'
                      ? {
                          textAlign: 'right',
                        }
                      : {}
                  }
                  htmlFor='description'
                  className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                  {t('create-quiz-form-desc')}
                </label>
                <textarea
                  style={
                    i18n.language === 'ar'
                      ? {
                          textAlign: 'right',
                        }
                      : {}
                  }
                  type='text'
                  name='description'
                  id='description'
                  placeholder={t('create-quiz-form-desc-ph')}
                  className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                  required=''
                  value={quizDescription}
                  onChange={(e) => setQuizDescription(e.target.value)}
                />
              </div>
              <div
                className={`flex flex-col gap-4 w-full ${
                  i18n.language === 'en'
                    ? 'sm:flex-row'
                    : ' sm:flex-row-reverse'
                }`}>
                <div className='w-full'>
                  <label
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    htmlFor='av-from'
                    className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                    {t('create-quiz-form-date-from')}
                  </label>
                  <input
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    type='date'
                    name='av-from'
                    id='av-from'
                    className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                    required=''
                    value={availableFrom}
                    onChange={(e) => setAvailableFrom(e.target.value)}
                  />
                </div>
                <div className='w-full'>
                  <label
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    htmlFor='av-until'
                    className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                    {t('create-quiz-form-date-till')}
                  </label>
                  <input
                    type='date'
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    name='av-until'
                    id='av-until'
                    className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                    required=''
                    value={availableTill}
                    onChange={(e) => setAvailableTill(e.target.value)}
                  />
                </div>
              </div>
              <div
                className={`flex flex-col gap-4 w-full ${
                  i18n.language === 'en'
                    ? 'sm:flex-row'
                    : ' sm:flex-row-reverse'
                }`}>
                <div className='w-full'>
                  <label
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    htmlFor='winners'
                    className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                    {t('create-quiz-form-number-winners')}
                  </label>
                  <input
                    type='number'
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    min={0}
                    name='winners'
                    id='winners'
                    placeholder='5'
                    className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                    required=''
                    value={numberOfWinner}
                    onChange={(e) => setNumberOfWinner(e.target.value)}
                  />
                </div>
                <div className='w-full'>
                  <label
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
                    htmlFor='reward'
                    className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                    {t('create-quiz-form-reward')}
                  </label>
                  <input
                    type='number'
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    min={0}
                    name='reward'
                    id='reward'
                    placeholder='2'
                    className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                    required=''
                    value={rewardPerWinner}
                    onChange={(e) => setRewardPerWinner(e.target.value)}
                  />
                </div>
              </div>
              <div
                className={`flex flex-col gap-4 w-full ${
                  i18n.language === 'en'
                    ? 'sm:flex-row'
                    : ' sm:flex-row-reverse'
                }`}>
                <div className='w-full'>
                  <label
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    htmlFor='reward'
                    className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                    {t('create-quiz-form-percentage')}
                  </label>
                  <input
                    type='number'
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    min={0}
                    name='reward'
                    id='reward'
                    placeholder='50'
                    className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                    required=''
                    value={percentageToWin}
                    onChange={(e) => setPercentageToWin(e.target.value)}
                  />
                </div>
                <div className='w-full'>
                  <label
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    htmlFor='trials'
                    className='block mb-2 text-md font-medium text-gray-900 dark:text-white'>
                    {t('create-quiz-form-trials')}
                  </label>
                  <input
                    type='number'
                    style={
                      i18n.language === 'ar'
                        ? {
                            textAlign: 'right',
                          }
                        : {}
                    }
                    min={0}
                    name='trials'
                    id='trials'
                    placeholder='3'
                    className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
                    required=''
                    value={numberOfTrials}
                    onChange={(e) => setNumberOfTrials(e.target.value)}
                  />
                </div>
              </div>
              {/* <div className='flex items-center mb-4'>
                <input
                  id='retake'
                  type='checkbox'
                  className='w-4 h-4 text-primary-600 bg-gray-100 rounded border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600'
                />
                <label
                style={
                i18n.language === 'ar'
                  ? {
                      textAlign: 'right',
                    }
                  : {}
              }
                  htmlFor='retake'
                  className='ml-2 text-sm font-medium text-gray-900 dark:text-white'>
                  Participants can retake the quiz multiple times
                </label>
              </div> */}
            </form>
          </div>
          {/* Right Section */}
          <div className='flex flex-col items-center justify-center text-left px-6 py-8 mx-auto w-full lg:p-0'>
            <h2 className='mb-3 text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white'>
              {t('create-quiz-questions-title')}
            </h2>
            <form
              dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
              key='my-form'
              className='space-y-2 md:space-y-4 w-full'
              action='#'
              autoComplete='false'>
              <div className='flex flex-col gap-4'>
                {form.map((item, index) => {
                  return (
                    <AddQuestion
                      key={index}
                      id={item.id}
                      n={index + 1}
                      options={item.options}
                    />
                  );
                })}
                <button
                  onClick={handleAddQuestion}
                  className='text-white bg-green-500 hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-md text-md p-2.5 text-center inline-flex items-center justify-center dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800'>
                  {t('create-quiz-questions-btn')}
                </button>
              </div>
              <button
                className='mx-auto flex items-center bg-blue-500 hover:bg-blue-700 text-white text-xl font-semibold py-2 px-4 rounded'
                dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
                onClick={(e) => {
                  e.preventDefault();
                  handleSubmit();
                }}>
                {t('create-quiz-form-button')}
              </button>
            </form>
          </div>
        </div>
      </QuestionsContext.Provider>
    </main>
  );
};

export default CreateQuiz;

'''
'''--- src/components/Footer.js ---
import { Link } from 'react-router-dom';
import React from 'react';
import { useTranslation } from 'react-i18next';

const Footer = () => {
  const { t } = useTranslation();

  return (
    <footer className='p-4 bg-gray-100 md:p-8 lg:p-10 dark:bg-gray-800'>
      <div className='mx-auto max-w-screen-xl text-center'>
        <Link
          to={'/'}
          className='logo-font self-center text-3xl font-normal flex align-middle justify-center dark:text-white'>
          <img
            src='https://res.cloudinary.com/omar45/image/upload/v1663170670/LogoQc.svg'
            className='mr-3 h-6 sm:h-9'
            alt='Flowbite Logo'
          />
          <span className='logo-font self-center text-3xl font-normal whitespace-nowrap dark:text-white'>
            Quizly
          </span>
        </Link>
        {/* <p className='my-6 text-gray-500 dark:text-gray-400'>
          Create and solve quizzes with rewards on NEAR blockchain!
        </p> */}
        <p className='mt-6 text-sm text-gray-500 sm:text-center dark:text-gray-400'>
          © {new Date().getFullYear()} Quizly™. {t('footer')}
        </p>
      </div>
    </footer>
  );
};

export default Footer;

'''
'''--- src/components/Landing.js ---
import { Link } from 'react-router-dom';
import React from 'react';
import { login } from '../utils/near';
import { useTranslation } from 'react-i18next';

const Landing = ({ account }) => {
  const { t, i18n } = useTranslation();

  return (
    <main className='bg-white dark:bg-gray-900 my-10 px-6 mx-auto max-w-screen-xl text-center lg:py-16 lg:px-12'>
      <h1 className='logo-font my-4 text-6xl tracking-wider font-semibold leading-none text-gray-900 md:text-7xl lg:text-8xl dark:text-white'>
        Quizly
      </h1>
      <p
        className='my-12 px-4 text-2xl font-bold  text-gray-900 md:text-3xl lg:text-4xl dark:text-white max-w-3xl mx-auto'
        dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}>
        {t('landing-subtitle')}
      </p>
      <div className='flex flex-col mb-8 lg:mb-16 space-y-4 sm:flex-row sm:justify-center sm:space-y-0 sm:space-x-4'>
        {account.accountId ? (
          <Link
            to={'/profile'}
            className='inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-white rounded-lg bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:focus:ring-primary-900'>
            {t('landing-button1')}
            <svg
              className='ml-2 -mr-1 w-5 h-5'
              fill='currentColor'
              viewBox='0 0 20 20'
              xmlns='http://www.w3.org/2000/svg'>
              <path
                fillRule='evenodd'
                d='M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z'
                clipRule='evenodd'></path>
            </svg>
          </Link>
        ) : (
          <button
            dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
            onClick={login}
            className='inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-white rounded-lg bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:focus:ring-primary-900'>
            {t('landing-login-button')} NEAR
          </button>
        )}
        <a
          href='https://near.org/'
          target='_blank'
          rel='noreferrer'
          className='inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-gray-900 rounded-lg border border-gray-300 hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:focus:ring-gray-800'>
          <svg
            className='mr-2 -ml-1 w-5 h-5'
            fill='currentColor'
            viewBox='0 0 20 20'
            xmlns='http://www.w3.org/2000/svg'>
            <path d='M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z'></path>
          </svg>
          {t('landing-button2')}
        </a>
      </div>
      <p
        dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
        className='my-8 text-lg font-normal text-gray-500 lg:text-xl sm:px-16 xl:px-48 dark:text-gray-400'>
        {t('landing-powered-by')}{' '}
        <a
          className='hover:underline'
          href='https://near.org/'
          target='_blank'
          rel='noreferrer'>
          NEAR
        </a>
      </p>
    </main>
  );
};

export default Landing;

'''
'''--- src/components/Navbar.js ---
import { DarkThemeToggle } from 'flowbite-react';
import { Link } from 'react-router-dom';
import i18n from '../i18n';
import { login } from '../utils/near';
import { t } from 'i18next';
import { useState } from 'react';

const Navbar = ({ account }) => {
  const [lang, setLang] = useState(i18n.language === 'ar' ? 'en' : 'ar');

  return (
    <nav className='bg-white border-gray-200 p-4 shadow-md mb-3 sm:px-4 py-5co dark:bg-gray-800'>
      <div className='container flex flex-wrap justify-between items-center max-w-4xl mx-auto lg:px-12'>
        {/* Logo */}
        <Link to={'/'} className='flex items-center'>
          <img
            src='https://res.cloudinary.com/omar45/image/upload/v1663170670/LogoQc.svg'
            className='mr-3 h-6 sm:h-9'
            alt='Flowbite Logo'
          />
          <span className='logo-font self-center text-3xl font-normal whitespace-nowrap dark:text-white'>
            Quizly
          </span>
        </Link>

        {/* Button */}
        <div className='toggle-wrapper ml-auto'>
          <DarkThemeToggle />
        </div>
        <button
          className='toggle-wrapper px-2 py-2 mx-3 rounded-lg hover:bg-gray-100 font-bold text-gray-500'
          onClick={() => {
            i18n.changeLanguage(i18n.language === 'en' ? 'ar' : 'en');
            setLang(i18n.language === 'en' ? 'ar' : 'en');
          }}>
          {lang.toUpperCase()}
        </button>
        <div className=' hidden md:flex md:order-2'>
          {account.accountId ? (
            <Link
              to={'/profile'}
              className='ml-2 text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-3 md:mr-0 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800'>
              {account.accountId}
            </Link>
          ) : (
            <button
              dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
              onClick={login}
              className='ml-2 text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-3 md:mr-0 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800'>
              {t('landing-login-button')} NEAR
            </button>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

'''
'''--- src/components/Profile.js ---
import React, { useEffect } from 'react';

import { Link } from 'react-router-dom';
import QuizCard from './QuizCard';
import { getQuizzes } from '../utils/functions';
import { logout } from '../utils/near';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';

const Profile = ({ account }) => {
  const [chosenTab, setChosenTab] = useState(2);
  const [quizzes, setQuizzes] = useState([]);
  const [loading, setLoading] = useState(false);

  const { t, i18n } = useTranslation();

  useEffect(() => {
    const getQuiz = async () => {
      try {
        setLoading(true);
        setQuizzes(await getQuizzes());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    };

    getQuiz();
  }, []);

  return (
    <div className='px-6 mx-auto max-w-4xl text-center lg:py-5 lg:px-12 dark:text-white'>
      {/* avatar */}
      <header className='flex flex-col justify-between items-center pb-4 px-4 md:px-0 md:flex-row md:mt-0 mt-8'>
        <div className='flex items-center justify-center w-full md:w-auto'>
          <div className='w-28 rounded-full overflow-hidden'>
            <img
              src='https://placeimg.com/192/192/people'
              alt='avatar placeholder'
            />
          </div>
          <div className='flex flex-col gap-2 mr-auto ml-8 items-start'>
            <h2
              dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
              className='text-3xl font-bold'>
              {t('profile-welcome')}
            </h2>
            <h4 className='text-lg font-semibold'>{account.accountId}</h4>
          </div>
          <button
            title='Logout'
            onClick={logout}
            className='ml-auto md:mt-0 inline-flex md:hidden flex-col gap-0 items-center py-4 px-6 text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800'>
            <h5 className='font-semibold text-lg'>
              <i className='fa fa-sign-out' aria-hidden='true'></i>
            </h5>
          </button>
        </div>
        <Link
          to={'/create'}
          className='mt-8 md:mt-0 ml-auto hidden md:inline-flex flex-col gap-0 items-center py-4 px-6 text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
          <h5
            dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
            className='font-semibold text-lg'>
            {t('profile-create-title')}
          </h5>
          <p
            dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
            className='text-sm font-medium'>
            {t('profile-create-subtitle')}
          </p>
        </Link>
        <button
          title='Logout'
          onClick={logout}
          className='mt-8 ml-4 md:mt-0 hidden md:inline-flex flex-col gap-0 items-center py-4 px-6 text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800'>
          <h5 className='font-semibold text-lg'>
            <i className='fa fa-sign-out' aria-hidden='true'></i>
          </h5>
        </button>
      </header>

      <ul className='grid gap-4 w-full mt-4 font-bold md:grid-cols-2'>
        <li className='md:hidden'>
          <Link
            to={'/create'}
            className='flex flex-col gap-0 p-3 items-center text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
            <h5
              dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
              className='font-semibold text-lg'>
              {t('profile-create-title')}
            </h5>
            <p
              dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
              className='text-sm font-medium'>
              {t('profile-create-subtitle')}
            </p>
          </Link>
          <hr className='mt-4 dark:opacity-25' />
        </li>
        <li>
          <input
            type='radio'
            id='hosting-small'
            name='hosting'
            value='hosting-small'
            className='hidden peer'
            required=''
            onClick={() => setChosenTab(1)}
            defaultChecked={chosenTab === 1}
          />
          <label
            htmlFor='hosting-small'
            className='inline-flex justify-center items-center p-5 w-full text-gray-400 bg-white rounded-lg border-2 border-gray-200 cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-primary-300 peer-checked:border-primary-500 peer-checked:text-primary-500 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-600 dark:bg-gray-800 dark:hover:bg-gray-700'>
            <div className='block'>
              <div className='w-full text-xl'>{t('profile-radio-1')}</div>
            </div>
          </label>
        </li>
        <li>
          <input
            type='radio'
            id='hosting-big'
            name='hosting'
            value='hosting-big'
            className='hidden peer'
            onClick={() => setChosenTab(2)}
            defaultChecked={chosenTab === 2}
          />
          <label
            htmlFor='hosting-big'
            className='inline-flex justify-center items-center p-5 w-full text-gray-400 bg-white rounded-lg border-2 border-gray-200 cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-primary-300 peer-checked:border-primary-500 peer-checked:text-primary-500 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-600 dark:bg-gray-800 dark:hover:bg-gray-700'>
            <div className='block'>
              <div className='w-full text-xl'>{t('profile-radio-2')}</div>
            </div>
          </label>
        </li>
      </ul>

      {/* cards */}

      {loading && (
        <div className='flex justify-center items-center mt-8'>
          <div className='w-12 h-12 border-2 border-gray-200 rounded-full animate-spin dark:border-gray-700'></div>
        </div>
      )}

      {!loading && chosenTab === 2 ? (
        <div className='flex gap-4 flex-col my-4'>
          {quizzes.map((q) => (
            <QuizCard
              quizId={q.quizId}
              title={q.quizTitle}
              desc={q.quizDescription}
              btn={t('quiz-card-take')}
              key={q.quizTitle}
            />
          ))}
        </div>
      ) : (
        <div className='flex gap-4 flex-col my-4'>
          {quizzes
            .filter((q) => q.createdBy === account.accountId)
            .map((q) => (
              <QuizCard
                title={q.quizTitle}
                desc={q.quizDescription}
                btn={'Delete'}
                key={q.quizTitle}
              />
            ))}
          <hr className='my-1 dark:opacity-25' />
          <QuizCard isCreateNew />
        </div>
      )}
    </div>
  );
};

export default Profile;

'''
'''--- src/components/Question.js ---
import React from 'react';

const Question = ({ question }) => {
  return (
    <div className='flex flex-col gap-4'>
      <h4 className='text-2xl font-bold'>{question.questionText}</h4>
      <div className='flex flex-col gap-4'>
        {question.options.map((opt) => (
          <div className='flex gap-4' key={opt}>
            <input
              type='radio'
              id={opt}
              name='hosting'
              value={opt}
              className='hidden peer'
              required=''
            />
            <label
              htmlFor={opt}
              className='inline-flex justify-center items-center p-5 w-full text-gray-400 bg-white rounded-lg border-2 border-gray-200 cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-primary-300 peer-checked:border-primary-500 peer-checked:font-semibold peer-checked:text-primary-500 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-500 dark:bg-gray-800 dark:hover:bg-gray-700'>
              <div className='block'>
                <div className='w-full text-xl'>{opt}</div>
              </div>
            </label>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Question;

'''
'''--- src/components/QuizCard.js ---
import { Link } from 'react-router-dom';
import React from 'react';
import { useTranslation } from 'react-i18next';

const QuizCard = ({ title, desc, quizId, btn, isCreateNew }) => {
  const { t } = useTranslation();

  if (isCreateNew)
    return (
      <div className=' p-5 mx-auto min-w-full flex justify-between align-middle bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700'>
        <h5 className='mt-1 text-2xl font-bold tracking-tight text-gray-900 dark:text-white'>
          {t('quiz-card-create-title')}
        </h5>

        <Link
          to={'/create'}
          className='inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
          {t('quiz-card-create-button')}
          <svg
            aria-hidden='true'
            className='ml-2 -mr-1 w-4 h-4'
            fill='currentColor'
            viewBox='0 0 20 20'
            xmlns='http://www.w3.org/2000/svg'>
            <path
              fillRule='evenodd'
              d='M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z'
              clipRule='evenodd'></path>
          </svg>
        </Link>
      </div>
    );

  let className = '';
  let goTo = '/';

  if (btn === 'Take' || btn === 'اختبر الآن') {
    goTo = '/quiz/' + quizId;
    className =
      'inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800';
  } else if (btn === 'Retake') {
    goTo = '/quiz/' + quizId;
    className =
      'inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-amber-500 rounded-lg hover:bg-amber-600 focus:ring-4 focus:outline-none focus:ring-amber-300 dark:bg-amber-500 dark:hover:bg-amber-600 dark:focus:ring-amber-700';
  } else if (btn === 'Results') {
    goTo = '/results';
    className =
      'inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-green-500 rounded-lg hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-700';
  } else if (btn === 'Delete') {
    goTo = '/delete';
    className =
      'inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800';
  } else
    className =
      'inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white bg-primary-700 rounded-lg hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800';
  return (
    <div className='p-5 mx-auto min-w-full flex justify-between items-center bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700'>
      <div className='flex flex-col items-start'>
        <h5 className='mt-1 text-2xl font-bold tracking-tight text-gray-900 dark:text-white'>
          {title}
        </h5>
        <p>{desc}</p>
      </div>

      <Link to={goTo} className={className}>
        {btn}
        <svg
          aria-hidden='true'
          className='ml-2 -mr-1 w-4 h-4'
          fill='currentColor'
          viewBox='0 0 20 20'
          xmlns='http://www.w3.org/2000/svg'>
          <path
            fillRule='evenodd'
            d='M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z'
            clipRule='evenodd'></path>
        </svg>
      </Link>
    </div>
  );
};

export default QuizCard;

'''
'''--- src/components/TakeQuiz.js ---
import { useEffect, useState } from 'react';

import Question from './Question';
import { getQuizzes } from '../utils/functions';
import { useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

const TakeQuiz = () => {
  // const [started, setStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);

  const [quiz, setQuiz] = useState();
  const [loading, setLoading] = useState(true);

  const handleButtonClick = (action) => {
    if (action === 'next') {
      if (currentQuestion < quiz.questions.length - 1)
        setCurrentQuestion(currentQuestion + 1);
    } else if (action === 'prev') {
      if (currentQuestion > 0) setCurrentQuestion(currentQuestion - 1);
    }
  };

  const { pathname } = useLocation();

  useEffect(() => {
    const getQuiz = async () => {
      try {
        setLoading(true);
        const quizID = pathname.split('/')[2];
        const quizzes = await getQuizzes();
        const ourQuiz = quizzes.find(
          (quiz) => quiz.quizId.toString() === quizID.toString()
        );
        setQuiz(ourQuiz);
        // console.log(ourQuiz);
      } catch (error) {
        console.log({ error });
        setQuiz(null);
      } finally {
        setLoading(false);
      }
    };

    getQuiz();

    console.log('Quiz ID: ', pathname.split('/')[2]);
  }, [pathname]);

  const { t, i18n } = useTranslation();

  return (
    <main className='bg-white dark:bg-gray-900 dark:text-white py-12 px-6 mx-auto max-w-4xl text-left lg:p-12'>
      <h2 className='text-3xl font-bold'>{quiz?.quizTitle}</h2>
      <p className='text-xl my-2 mb-5'>{quiz?.quizDescription}</p>

      {
        // started ? (
        !loading ? (
          quiz ? (
            <>
              {/* Progress */}
              <div className='w-full bg-gray-200 rounded-full dark:bg-gray-700'>
                <div
                  dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}
                  className='bg-primary-500 text-xs font-medium text-white text-center p-1.5 leading-none rounded-full'
                  style={{
                    marginLeft: `${i18n.language === 'ar' ? 'auto' : '0'}`,
                    marginRight: `${i18n.language === 'ar' ? '0' : 'auto'}`,
                    width: `${
                      ((currentQuestion + 1) / quiz?.questions.length) * 100
                    }%`,
                  }}>
                  {t('add-question-title')} {currentQuestion + 1} /{' '}
                  {quiz?.questions.length}
                </div>
              </div>

              <hr className='my-4 dark:opacity-25' />

              {/* Question */}
              <div className='flex flex-col gap-4 my-4'>
                <Question
                  question={quiz?.questions[currentQuestion]}
                  key={quiz?.questions[currentQuestion].questionText}
                />
              </div>

              {/* Buttons */}
              <div
                className={`flex justify-between ${
                  i18n.language === 'en' ? 'flex-row' : ' flex-row-reverse'
                }`}>
                <button
                  disabled={currentQuestion === 0}
                  onClick={() => handleButtonClick('prev')}
                  className={`font-semibold py-2 px-4 rounded ${
                    currentQuestion === 0
                      ? 'cursor-not-allowed bg-gray-200 text-gray-400 dark:bg-gray-700'
                      : 'bg-primary-500 hover:bg-primary-700 text-white'
                  }`}>
                  {t('take-quiz-previous')}
                </button>
                {currentQuestion === quiz?.questions.length - 1 ? (
                  <button className='flex items-center bg-blue-500 hover:bg-blue-700 text-white text-xl font-semibold py-2 px-4 rounded'>
                    {t('take-quiz-submit')}
                  </button>
                ) : (
                  <button
                    onClick={() => handleButtonClick('next')}
                    className='bg-primary-500 hover:bg-primary-700 text-white font-semibold py-2 px-4 rounded'>
                    {t('take-quiz-next')}
                  </button>
                )}
              </div>
            </>
          ) : (
            <div
              className='font-bold my-32 mx-auto text-center'
              dir={i18n.language === 'ar' ? 'rtl' : 'ltr'}>
              <h2 className='text-3xl'>{t('take-quiz-error-title')}</h2>
              <h4 className='text-xl mt-8'>{t('take-quiz-error-subtitle')}</h4>
            </div>
          )
        ) : (
          <div className='flex justify-center items-center h-96'>
            <div className='flex flex-col items-center justify-center'>
              <div className='animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900'></div>
              <p className='text-xl font-semibold mt-4'>
                {t('take-quiz-loading')}
              </p>
            </div>
          </div>
        )
        // ) : (
        //   <>
        //     <p className='text-lg my-2'>
        //       Quiz Duration: 30 mins. Timer will begin after you click start
        //     </p>

        //     <button
        //       onClick={() => setStarted(true)}
        //       className='bg-primary-500 hover:bg-primary-700 text-white font-semibold py-2 px-4 rounded'>
        //       Start Quiz
        //     </button>
        //   </>
        // )
      }
    </main>
  );
};

export default TakeQuiz;

'''
'''--- src/components/utils/questionsContext.js ---
import { createContext } from 'react';

export const QuestionsContext = createContext(null);

'''
'''--- src/i18n.js ---
import LanguageDetector from 'i18next-browser-languagedetector';
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import translationAr from './locale/ar.json';
import translationEn from './locale/en.json';

const resources = {
  en: {
    translation: translationEn,
  },
  ar: {
    translation: translationAr,
  },
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    lng: 'en',
    interpolation: {
      escapeValue: false,
    },
    react: {
      useSuspense: false,
    },
  });

export default i18n;

'''
'''--- src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- src/index.js ---
import './index.css';
import './i18n';

import App from './App';
import React from 'react';
import ReactDOM from 'react-dom/client';
import { initializeContract } from './utils/near';

window.nearInitPromise = initializeContract()
  .then(() => {
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  })
  .catch(console.error);

'''
'''--- src/locale/ar.json ---
{
  "landing-subtitle": "اصنع و حل الاختبارات واحصد المكافآت على بلوكتشين NEAR!",
  "landing-button1": "تفقد اختباراتك",
  "landing-button2": "شاهد الفيديو التعريفي",
  "landing-login-button": "تسجيل الدخول بواسطة",
  "landing-powered-by": "برعاية",
  "profile-welcome": "أهلا بك!",
  "profile-create-title": "أنشئ اختبار جديد*",
  "profile-create-subtitle": "*بتكلفة 1 NEAR",
  "profile-radio-1": "اختبارات أنشأتها",
  "profile-radio-2": "اختبارات متاحة",
  "quiz-card-take": "اختبر الآن",
  "quiz-card-create-title": "اختبار جديد؟",
  "quiz-card-create-button": "ابدأ الآن",
  "create-quiz-title": "أنشئ اختبار جديد",
  "create-quiz-questions-title": "أسئلة الاختبار",
  "create-quiz-questions-btn": "إضافة سؤال جديد",
  "create-quiz-form-title": "العنوان",
  "create-quiz-form-title-ph": "عنوان الاختبار",
  "create-quiz-form-desc": "الوصف",
  "create-quiz-form-desc-ph": "وصف الاختبار",
  "create-quiz-form-date-from": "متاح بدايةً من",
  "create-quiz-form-date-till": "متاح إلى",
  "create-quiz-form-number-winners": "عدد الفائزين",
  "create-quiz-form-reward": "مكافأة كل فائز بالـ Ⓝ",
  "create-quiz-form-percentage": "أقل نسبة للفوز",
  "create-quiz-form-trials": "عدد المحاولات",
  "create-quiz-form-button": "إرسال (إلى الـ console)",
  "add-question-title": "سؤال",
  "add-question-title-ph": "صيغة السؤال",
  "add-question-remove": "إزالة السؤال",
  "add-question-tags": "الوسوم",
  "add-question-tags-ph": "وسوم السؤال",
  "add-question-tags-sub": "(بينهم فاصلة)",
  "add-question-options": "اختيارات",
  "add-question-option-ph": "اختيار جديد",
  "add-question-add-option-ph": "إضافة اختيار",
  "add-question-remove-option-ph": "إزالة اختيار",
  "take-quiz-previous": "السابق",
  "take-quiz-next": "التالي",
  "take-quiz-submit": "إنهاء الاختبار",
  "take-quiz-error-title": "هذا الاختبار غير موجود",
  "take-quiz-error-subtitle": "يرجى التأكد من الرابط / الـ ID",
  "take-quiz-loading": "جاري التحميل ...",
  "footer": "جميع الحقوق محفوظة."
}

'''
'''--- src/locale/en.json ---
{
  "landing-subtitle": "Create and solve quizzes with rewards on NEAR blockchain!",
  "landing-button1": "Check your quizzes",
  "landing-button2": "Watch Video",
  "landing-login-button": "Login with",
  "landing-powered-by": "Powered by",
  "profile-welcome": "Welcome!",
  "profile-create-title": "Create a new Quiz*",
  "profile-create-subtitle": "*Costs 1 NEAR",
  "profile-radio-1": "Quizzes Created",
  "profile-radio-2": "Quizzes Available",
  "quiz-card-take": "Take",
  "quiz-card-create-title": "Create a new Quiz?",
  "quiz-card-create-button": "Start Now",
  "create-quiz-title": "Create a new Quiz",
  "create-quiz-questions-title": "Configure Questions",
  "create-quiz-questions-btn": "Add a new question",
  "create-quiz-form-title": "Title",
  "create-quiz-form-title-ph": "Quiz Title",
  "create-quiz-form-desc": "Description",
  "create-quiz-form-desc-ph": "Quiz Description",
  "create-quiz-form-date-from": "Available from",
  "create-quiz-form-date-till": "Available till",
  "create-quiz-form-number-winners": "Number of winners",
  "create-quiz-form-reward": "Reward per winner (in Ⓝ)",
  "create-quiz-form-percentage": "min Percentage to win",
  "create-quiz-form-trials": "Number of trials",
  "create-quiz-form-button": "Submit (to console)",
  "add-question-title": "Question",
  "add-question-title-ph": "Question Text",
  "add-question-remove": "Remove Question",
  "add-question-tags": "Tags",
  "add-question-tags-ph": "Question Tags",
  "add-question-tags-sub": "(comma separated)",
  "add-question-options": "Options",
  "add-question-option-ph": "New Option",
  "add-question-add-option-ph": "Add Option",
  "add-question-remove-option-ph": "Remove Option",
  "take-quiz-previous": "Previous",
  "take-quiz-next": "Next",
  "take-quiz-submit": "Submit",
  "take-quiz-error-title": "This quiz doesn't exist",
  "take-quiz-error-subtitle": "Please check the quiz ID",
  "take-quiz-loading": "Loading...",
  "footer": "All Rights Reserved."
}

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = 'new1.quiz1.testnet';

function environment(env) {
  switch (env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;

'''
'''--- src/utils/functions.js ---
const GAS = 100000000000000;

export async function Add_Quiz(quiz, money) {
  await window.contract.createQuiz(quiz, GAS, money);
}

export function submitAnswer() {
  return window.contract.submitAnswer();
}

export function getQuizzes() {
  return window.contract.viewQuizzes();
}

export function getQuizByID(id) {
  return window.contract.getQuizByID(id);
}

'''
'''--- src/utils/near.js ---
import { Contract, WalletConnection, connect, keyStores } from 'near-api-js';

import environment from './config';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

const nearEnv = environment('testnet');

export async function initializeContract() {
  // We create a near object that we will use to interact with the NEAR network.
  // It holds a keyStore object that stores the wallet information
  // which is stored in the browser's local storage.

  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  // Then we create a WalletConnection object that we will use to interact with the wallet.
  // To sign in, sign out, get the account ID, and get the account balance.

  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();

  // We create a Contract object that we will use to interact with the smart contract.
  // We pass the account, the name of the smart contract,
  // and the methods that we want to use to the constructor.

  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: ['getQuizByID', 'viewQuizzes', 'getQuestionBank'],
      changeMethods: [
        'createQuiz',
        'createQuizFromBank',
        'increaseWinners',
        'addToQuestionBank',
        'deleteQuiz',
        'submitAnswer',
      ],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'class',
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    'node_modules/flowbite-react/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0fdfa',
          100: '#ccfbf1',
          200: '#99f6e4',
          300: '#5eead4',
          400: '#2dd4bf',
          500: '#14b8a6',
          600: '#0d9488',
          700: '#0f766e',
          800: '#115e59',
          900: '#134e4a',
        },
      },
    },
  },
  plugins: [require('flowbite/plugin')],
};

'''