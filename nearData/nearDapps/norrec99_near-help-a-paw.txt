*GitHub Repository "norrec99/near-help-a-paw"*

'''--- Cargo.toml ---
[workspace]
members = [
  "simulation"
]

'''
'''--- README.md ---
# Help a Paw
A smart contract developed for NEAR Protocol to help sick and stray animals which are need of help.

## Consept
Shelters can give information about animals in need of help and how much funding each animal case require. Users can help these animals by donating an amount of money.

Contracts:
1- adding an animal info
2- sending donation to an animal

## Usage

### Getting started

1. clone this repo to a local folder
2. run `yarn`
3. run `yarn test`

### Running Scripts

To start the contract;
  - run `./script/1.init.sh`
To add an animal and donation;
  - run `./script/2.run.sh [type of animal] [amount of money]`

### Top-level `yarn` commands

- run `yarn test` to run all tests
  - (!) be sure to run `yarn build:release` at least once before:
    - run `yarn test:unit` to run only unit tests
- run `yarn build` to quickly verify build status
- run `yarn clean` to clean up build folder

### Other documentation

- Paw contract and test documentation
  - see `/src/paw/README` for Paw interface
  - see `/src/paw/__tests__/README` for Paw unit testing details

### UI Wireframes

 Here are some examples showing how we envision the basic user interface elements.

#### Add an animal

<img src="./wireframes/img1.jpg" alt="img1"/>

#### Animals list

<img src="./wireframes/img2.jpg" alt="img2"/>

#### Donate to an animal

<img src="./wireframes/img3.jpg" alt="img3"/># Near-protocol-help-paw

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/paw"
  ]
}

'''
'''--- package.json ---
{
  "name": "starterkit-assemblyscript-contracts",
  "version": "0.0.1",
  "description": "Starter project for writing AssemblyScript contracts for NEAR Protocol",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test:unit'",
    "asp": "asp --verbose --nologo",
    "test:unit": "yarn asp -f unit.spec",
    "build": "asb --target debug",
    "build:release": "asb",
    "test": "yarn build:release && yarn test:unit && yarn test:simulate",
    "test:simulate": "cargo test -- --nocapture",
    "clean": "rm -rf ./build && rm -rf ./neardev && rm -rf ./target",
    "test:debug": "node --inspect-brk ./node_modules/.bin/asp"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.0.0"
  }
}

'''
'''--- scripts/1.init.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/paw.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=__new_contract_account_id__'
echo
echo

exit 0

'''
'''--- scripts/2.addAnimal.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call addAnimal() on the contract'
echo
echo \$CONTRACT is $CONTRACT
echo
# near call $CONTRACT addAnimal '{"type": "dog", "description": "it is a dog", "totalDonation": "0"}' --account_id $CONTRACT 
# near call $CONTRACT addAnimal '{"type": "$1", "description": "it is a dog", "totalDonation": "0"}' --account_id $CONTRACT 
# near call $CONTRACT addAnimal '{"type": '"$1"', "description": "it is a dog", "totalDonation": "0"}' --account_id $CONTRACT 
near call $CONTRACT addAnimal '{"type": "'$1'", "description": "it is a '$1'", "totalDonation": "'$3'"}' --account_id $CONTRACT 

'''
'''--- scripts/2.donate.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call donate() on the contract'
echo
echo \$CONTRACT is $CONTRACT

echo

near call $CONTRACT donate '{"animalID": 0}' --account_id $CONTRACT --amount $2

echo 'You donated "'$2'" near. Thank you for donation!'
# addAnimal(type: string, description: string, totalDonation: u128): void
# getAnimals(): Animal[]
# donate(animalID: i8): void
'''
'''--- scripts/2.getAnimals.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call getAnimals() on the contract'
echo
echo \$CONTRACT is $CONTRACT
echo 'These animals need help'
echo

near call $CONTRACT getAnimals --account_id $CONTRACT

'''
'''--- scripts/2.run.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call addAnimal() on the contract'

echo
echo \$CONTRACT is $CONTRACT

echo
# near call $CONTRACT addAnimal '{"type": "dog", "description": "it is a dog", "totalDonation": "0"}' --account_id $CONTRACT 
# near call $CONTRACT addAnimal '{"type": "$1", "description": "it is a dog", "totalDonation": "0"}' --account_id $CONTRACT 
# near call $CONTRACT addAnimal '{"type": '"$1"', "description": "it is a dog", "totalDonation": "0"}' --account_id $CONTRACT 
near call $CONTRACT addAnimal '{"type": "'$1'", "description": "it is a '$1'", "totalDonation": "0"}' --account_id $CONTRACT 
echo 'You just added an animal for help'
echo
echo
echo
echo 'About to call getAnimals() on the contract'
echo
echo 'These animals need help'
near call $CONTRACT getAnimals --account_id $CONTRACT
echo
echo
echo
echo 'About to call donate() on the contract'

near call $CONTRACT donate '{"animalID": 0}' --account_id $CONTRACT --amount $2
echo 'You donated "'$2'" near. Thank you for donation!'

# addAnimal(type: string, description: string, totalDonation: u128): void
# getAnimals(): Animal[]
# donate(animalID: i8): void
'''
'''--- scripts/3.reset.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call reset() on the CONTRACT'
echo near call \$CONTRACT reset --account_id \$CONTRACT
echo
echo \$CONTRACT is $CONTRACT
echo
near call $CONTRACT reset --account_id $CONTRACT

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder support a simple demonstration of the contract.
Although this contract supports an unlimited number of player, this demostration uses only 2 players.

It uses the following setup:

```txt
┌───────────────────────────────────────┬───────────────────────────────────────┐
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                   B                   │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                  A                    ├───────────────────┬───────────────────┤
│                                       │                   │                   │
│                                       │                   │         D         │
│                                       │                   │                   │
│                                       │         C         ├───────────────────┤
│                                       │                   │                   │
│                                       │                   │         E         │
│                                       │                   │                   │
└───────────────────────────────────────┴───────────────────┴───────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control
  export PLAYER=          # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  # export PLAYER=ajax.testnet
  ```

- Commands
  ```sh
  1.init.sh               # cleanup, compile and deploy contract
  2.play.sh               # play the game, optionally takes a number as payment
  3.reset.sh              # reset the game when it's finished (ie. "active" is false)

  report.sh               # run a report of the game state
  x-configure-fee.sh      # change the fee strategy to any one of many supported strategies
  x-configure-lottery.sh  # change the terms of the lottery by adjusting chance in the range (0..1]
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```

### Terminal **C**

 *This window is used to render contract account state and keys*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract account state (for balance changes) and keys (for nonce changes)
  watch -d -n 1 "near state $CONTRACT && echo && near keys $CONTRACT"
  ```

### Terminal **D**

*This window is used to render the account state of player 1*
- Environment
  ```sh
  export PLAYER=          # any account you control

  # for example (player 1)
  # export PLAYER=ajax.testnet
  ```

- Commands
  ```sh
  # monitor player 1 account state (for balance changes)
  watch -d -n 1 near state $PLAYER
  ```

### Terminal **E**

*This window is used to render the account state of player 2*
- Environment
  ```sh
  export PLAYER=          # any account you control

  # for example (player 2)
  # export PLAYER=bran.testnet
  ```

- Commands
  ```sh
  # monitor player 2 account state (for balance changes)
  watch -d -n 1 near state $PLAYER
  ```

---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linux-watch-command#191068)

'''
'''--- scripts/report.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1
[ -z "$PLAYER" ] && echo "Missing \$PLAYER environment variable" && exit 1

echo "These are the environment variables being used:"
echo
echo "CONTRACT is [ $CONTRACT ]"
echo "OWNER is [ $OWNER ]"
echo "PLAYER is [ $PLAYER ]"
echo
echo

echo "--------------------------------------------"
echo Contract Metadata
echo "--------------------------------------------"
# who owns this lottery? -> AccountId
echo "near view \$CONTRACT get_owner '{}'"
near view $CONTRACT get_owner '{}'
echo

# is the lottery still active? -> bool
echo "near view \$CONTRACT get_active '{}'"
near view $CONTRACT get_active '{}'
echo
echo

echo "--------------------------------------------"
echo Lottery Details
echo "--------------------------------------------"

# explain terms of the lottery -> string
echo "near view \$CONTRACT explain_lottery '{}'"
near view $CONTRACT explain_lottery '{}'
echo

# what is the pot currently? -> string
echo "near view \$CONTRACT get_pot '{}'"
near view $CONTRACT get_pot '{}'
echo

# who played last? -> AccountId
echo "near view \$CONTRACT get_last_played '{}'"
near view $CONTRACT get_last_played '{}'
echo

# has PLAYER played already? -> bool
echo "near view \$CONTRACT get_has_played '{\"player\":\"'\$PLAYER'\"}'"
near view $CONTRACT get_has_played '{"player":"'$PLAYER'"}'
echo

# who, if anyone, won? -> AccountId
# (this will be empty unless get_active returns false)
echo "near view \$CONTRACT get_winner '{}'"
near view $CONTRACT get_winner '{}'
echo
echo

echo "--------------------------------------------"
echo Lottery Fees
echo "--------------------------------------------"

# what is the fee for the lottery? -> string
echo "near view \$CONTRACT get_fee '{}'"
near view $CONTRACT get_fee '{}'
echo

# what is the fee strategy for the lottery? -> StrategyType
echo "near view \$CONTRACT get_fee_strategy '{}'"
near view $CONTRACT get_fee_strategy '{}'
echo

# explain fees for the lottery -> string
echo "near view \$CONTRACT explain_fees '{}'"
near view $CONTRACT explain_fees '{}'
echo

'''
'''--- scripts/x-configure-fee.sh ---
#!/usr/bin/env bash
set -e

[ -z "$1" ] && echo "No fee strategy supplied. Append a 0, 1, 2 or 3" && exit 1
echo
echo 'About to call configure_fee() on the contract'
echo near call \$CONTRACT configure_fee --account_id \$CONTRACT \$1
echo
echo \$CONTRACT is $CONTRACT
echo \$1 is $1
echo
near call $CONTRACT configure_fee '{"strategy": '$1'}' --account_id $CONTRACT

'''
'''--- scripts/x-configure-lottery.sh ---
#!/usr/bin/env bash
set -e

[ -z "$1" ] && echo "No lottery configuration supplied. Append any <f32> value between 0 and 1" && exit 1
echo
echo 'About to call configure_lottery() on the contract'
echo near call \$CONTRACT configure_lottery --account_id \$CONTRACT \$1
echo
echo \$CONTRACT is $CONTRACT
echo \$1 is $1
echo
near call $CONTRACT configure_lottery '{"chance": "'$1'"}' --account_id $CONTRACT

'''
'''--- simulation/Cargo.toml ---
[package]
name = "simulation-starterkit-assemblyscript-contracts"
version = "0.1.0"
authors = ["NEAR Inc <hello@near.org>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = { git = "https://github.com/near/near-sdk-rs.git", tag = "2.2.0" }
near-sdk-sim = { git = "https://github.com/near/near-sdk-rs.git", tag = "2.2.0"}

'''
'''--- simulation/README.md ---
# Simulation Tests

## Usage

`yarn test:simulate`

## File Structure

```txt
simulation
├── Cargo.toml      <-- Rust project config
├── README.md       <-- * you are here
└── src
    ├── lib.rs      <-- this is the business end of simulation
    ├── ping.rs     <-- type wrapper for Ping contract
    └── pong.rs     <-- type wrapper for Pong contract
```

## Orientation

The simulation environment requires that we

## Output

'''
'''--- simulation/src/contract.rs ---

'''
'''--- simulation/src/fee-strategies.rs ---

'''
'''--- simulation/src/lib.rs ---

'''
'''--- simulation/src/lottery.rs ---

'''
'''--- src/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/paw/README.md ---

'''
'''--- src/paw/__tests__/README.md ---
## Unit tests

Unit tests can be run from the top level folder using the following command:

```
yarn test:unit
```

### Tests for Contract in `index.unit.spec.ts`

You can run just these tests using

```
yarn asp -f index.unit
```

```
[Describe]: Contract

 [Success]: ✔ can be initialized with owner
 [Success]: ✔ is active when initialized

[Describe]: Contract interface for Lottery

 [Success]: ✔ provides an explanation of the lottery
 [Success]: ✔ provides a value for what a player may win
 [Success]: ✔ allows a player to play
 [Success]: ✔ provides access to most recent player
 [Success]: ✔ confirms whether a player has played
 [Success]: ✔ reports the winner of the lottery

[Describe]: Contract interface for Lottery Fees

 [Success]: ✔ reports the current fee to play the lottery
 [Success]: ✔ reports the fee strategy
 [Success]: ✔ explains possible fee strategies
 [Success]: ✔ adjusts the fee after 1 player

[Describe]: Contract interface for Lottery Management

 [Success]: ✔ allows ONLY the owner to change the terms of the lottery
 [Success]: ✔ adjusts the fee based on FeeStrategy
 [Success]: ✔ allows ONLY the owner to reset the lottery

    [File]: src/lottery/__tests__/index.unit.spec.ts
  [Groups]: 5 pass, 5 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 15 pass,  0 fail, 15 total
    [Time]: 133.988ms
```

### Tests for Lottery in `lottery.unit.spec.ts`

You can run just these tests using

```
yarn asp -f lottery.unit
```

```
[Describe]: Lottery

 [Success]: ✔ can explain itself

[Describe]: Lottery#play

 [Success]: ✔ plays like a lottery

[Describe]: Lottery#configure

 [Success]: ✔ can be reconfigured
 [Success]: ✔ throws with invalid values for chance

    [File]: src/lottery/__tests__/lottery.unit.spec.ts
  [Groups]: 4 pass, 4 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 4 pass,  0 fail, 4 total
    [Time]: 11.824ms
```

### Tests for FeeStrategy in `fee-strategies.unit.spec.ts`

You can run just these tests using

```
yarn asp -f strategies.unit
```

```
[Describe]: FeeStrategy

 [Success]: ✔ is instantiated with exponential strategy by default
 [Success]: ✔ can be instantiated with a different strategy
 [Success]: ✔ can explain itself

[Describe]: FeeStrategy#calculate_fee

 [Success]: ✔ handles StrategyType.Free
 [Success]: ✔ handles StrategyType.Constant
 [Success]: ✔ handles StrategyType.Linear
 [Success]: ✔ handles StrategyType.Exponential

    [File]: src/lottery/__tests__/fee-strategies.unit.spec.ts
  [Groups]: 3 pass, 3 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 7 pass,  0 fail, 7 total
    [Time]: 6.896ms
```

'''
'''--- src/paw/__tests__/index.unit.spec.ts ---
// import { addAnimal, getAnimals } from '../assembly/index';
import { storage, Context, u128, context } from 'near-sdk-as';
import { Animal, animals, Donor, donors } from '../assembly/model';
import * as contract from '../assembly/index';

describe('Animal ', () => {
	it('should get an animal', () => {
		contract.addAnimal('dog', 'it is a dog', u128.from('10000000000000000000000'));
		expect(contract.getAnimals().length).toBe(Animal.all().length);
		log('testing the test');
	});
});

// cannot see the totalDonation amount after running donate function
describe('Animal ', () => {
	it('should donate to an animal', () => {
		new Donor('cagatay', u128.from('10000000000000000000000'));
		contract.addAnimal('cat', 'it is a cat', u128.Zero);
		contract.addAnimal('mouse', 'it is a mouse', u128.from('10000000000000000000000'));
		Donor.create(u128.from('10000000000000000000000'));
		contract.donate(1);
		Animal.find(1).donate(u128.from('10000000000000000000000'));
		expect(contract.getAnimals().length).toBe(Animal.all().length);
		log(animals);
		log(donors);
	});
});

'''
'''--- src/paw/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/paw/assembly/index.ts ---
import { Animal, animals, Donor, donors } from './model';
import { u128, Context } from 'near-sdk-as';

// --- contract code goes below

export function addAnimal(type: string, description: string, totalDonation: u128): void {
	const animal = new Animal(type, description, totalDonation);

	animals.push(animal);
}

export function getAnimals(): Animal[] {
	return Animal.all();
}

export function donate(animalID: i8): void {
	const amount = Context.attachedDeposit;
	assert(amount > u128.Zero, 'Must attach more than 0 near');

	Donor.create(amount);
	Animal.find(animalID).donate(amount);
}

'''
'''--- src/paw/assembly/model.ts ---
import { context, u128, PersistentVector } from 'near-sdk-as';

type AccountId = string;
// The maximum number of latest animals the contract returns.
const MAX_ANIMALS = 12;

/** 
 * Exporting a new class Animal so it can be used outside of this file.
 */
@nearBindgen
export class Animal {
	owner: string;

	constructor(public type: string, public description: string, public totalDonation: u128) {
		this.owner = context.sender;
	}

	static all(): Animal[] {
		const numAnimals = min(MAX_ANIMALS, animals.length);
		const startIndex = animals.length - numAnimals;
		const result = new Array<Animal>(numAnimals);
		for (let i = 0; i < numAnimals; i++) {
			result[i] = animals[i + startIndex];
		}
		return result;
	}

	static find(animalID: i8): Animal {
		assert(animalID >= 0, 'Animal ID must be >= 0');
		assert(animalID < animals.length, 'Animal ID must be valid');

		//assuming that animal id is an index in the array
		return animals[animalID];
	}

	donate(amount: u128): void {
		this.totalDonation = u128.add(this.totalDonation, amount);
	}
}

@nearBindgen
export class Donor {
	constructor(public account: AccountId, public amount: u128) {}

	static create(amount: u128): void {
		donors.push(new Donor(context.sender, amount));
	}
}

export const animals = new PersistentVector<Animal>('a');
export const donors = new PersistentVector<Donor>('d');

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128 } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

'''