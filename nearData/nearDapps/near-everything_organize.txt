*GitHub Repository "near-everything/organize"*

'''--- README.md ---
This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app), using the [Redux](https://redux.js.org/) and [Redux Toolkit](https://redux-toolkit.js.org/) template.

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br />
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br />
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br />
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

'''
'''--- package.json ---
{
  "name": "organize",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@react-query-firebase/firestore": "^0.4.2",
    "@reduxjs/toolkit": "^1.8.1",
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.5.0",
    "@testing-library/user-event": "^7.2.1",
    "axios": "^0.27.2",
    "buffer": "^6.0.3",
    "classnames": "^2.3.1",
    "firebase": "^9.6.10",
    "graphql-request": "^4.3.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-firebase-hooks": "^5.0.3",
    "react-focus-lock": "^2.8.1",
    "react-hook-form": "^7.32.1",
    "react-query": "^3.39.1",
    "react-redux": "^7.2.8",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "react-select": "^5.3.2",
    "react-transition-group": "^4.4.2",
    "redux-persist": "^6.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.0",
    "autoprefixer": "^10.4.4",
    "postcss": "^8.4.12",
    "tailwindcss": "^3.0.24"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#854d0e" />
    <meta
      name="description"
      content="Utility for organizing the inventory of everything"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>organize</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "organize",
  "name": "organize everything",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#854d0e",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *

'''
'''--- src/App.js ---
import { lazy } from "react";
import {
  BrowserRouter as Router, Navigate,
  Outlet, Route, Routes
} from "react-router-dom";

import { getAuth, onAuthStateChanged } from "firebase/auth";
import { useDispatch, useSelector } from "react-redux";
import { firebase } from "./app/firebase";
import AccessibleNavigationAnnouncer from "./components/AccessibleNavigationAnnouncer";
import { selectUser, setUser } from "./features/auth/authSlice";

const Organize = lazy(() => import("./pages/Organize"));
const Login = lazy(() => import("./pages/Login"));

function App() {
  const dispatch = useDispatch();
  const auth = getAuth(firebase);
  onAuthStateChanged(auth, (user) => {
    if (user) {
      dispatch(setUser(user.uid));
    } else {
      dispatch(setUser(null));
    }
  });

  return (
    <>
      <Router>
        <AccessibleNavigationAnnouncer />
        <Routes>
          <Route path="/login" element={<Login />} />
          {/* Private route */}
          <Route element={<PrivateRoute />}>
            <Route path="/*" element={<Organize />} />
          </Route>
        </Routes>
      </Router>
    </>
  );
}

function PrivateRoute() {
  const user = useSelector(selectUser);
  return user ? <Outlet /> : <Navigate to="/login" />;
}

export default App;

'''
'''--- src/app/api.js ---
import { QueryClient } from "react-query";

export const API_URL = process.env.REACT_APP_EVERYTHING_API_URL;
export const queryClient = new QueryClient();

'''
'''--- src/app/firebase.js ---
import { initializeApp } from "firebase/app";
import { getStorage } from "firebase/storage";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MSG_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,
};

export const firebase = initializeApp(firebaseConfig);

export const st = getStorage(firebase);

'''
'''--- src/app/store.js ---
import { configureStore } from "@reduxjs/toolkit";
import { combineReducers } from "redux";
import { persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";
import thunk from "redux-thunk";

import authReducer from "../features/auth/authSlice";
import itemDeckReducer from "../features/itemDeck/itemDeckSlice";
import requestDeckReducer from "../features/requestDeck/requestDeckSlice";
import labelsReducer from "../features/labels/labelsSlice";

const reducers = combineReducers({
  auth: authReducer,
  itemDeck: itemDeckReducer,
  requestDeck: requestDeckReducer,
  labels: labelsReducer,
});

const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, reducers);

export const store = configureStore({
  reducer: persistedReducer,
  devTools: process.env.NODE_ENV !== "production",
  middleware: [thunk],
});

'''
'''--- src/components/AccessibleNavigationAnnouncer.js ---
import React, { useState, useEffect } from 'react'
import { useLocation } from 'react-router-dom'

function AccessibleNavigationAnnouncer() {
  const [message, setMessage] = useState('')
  const location = useLocation()

  useEffect(() => {
    // ignore the /
    if (location.pathname.slice(1)) {
      // make sure navigation has occurred and screen reader is ready
      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)
    } else {
      setMessage('')
    }
  }, [location])

  return (
    <span className="sr-only" role="status" aria-live="polite" aria-atomic="true">
      {message}
    </span>
  )
}

export default AccessibleNavigationAnnouncer

'''
'''--- src/components/Badge.js ---
import React, { useContext } from 'react'
import classNames from 'classnames'
import { DarkModeContext } from './DarkMode'

const Badge = React.forwardRef(function Badge(props, ref) {
  const { className, children, type = 'primary', ...other } = props

  const {
    theme: { badge },
  } = useContext(DarkModeContext)

  const baseStyle = badge.base
  const typeStyle = {
    success: badge.success,
    danger: badge.danger,
    warning: badge.warning,
    neutral: badge.neutral,
    primary: badge.primary,
  }

  const cls = classNames(baseStyle, typeStyle[type], className)

  return (
    <span className={cls} ref={ref} {...other}>
      {children}
    </span>
  )
})

export default Badge
'''
'''--- src/components/Button.js ---
import classNames from "classnames";
import React, { useContext } from "react";
import { DarkModeContext } from "./DarkMode";

const Button = React.forwardRef(function Button(props, ref) {
  const {
    tag = "button",
    // Fix https://github.com/estevanmaito/windmill-react-ui/issues/7
    type = tag === "button" ? "button" : undefined,
    disabled = false,
    size = "regular",
    layout = "primary",
    block = false,
    icon,
    iconLeft,
    iconRight,
    className,
    children,
    ...other
  } = props;
  const {
    theme: { button }
  } = useContext(DarkModeContext)

  function hasIcon() {
    return !!icon || !!iconLeft || !!iconRight;
  }

  // warn(
  //   hasIcon() && !other['aria-label'] && !children,
  //   'Button',
  //   'You are using an icon button, but no "aria-label" attribute was found. Add an "aria-label" attribute to work as a label for screen readers.'
  // )

  const IconLeft = iconLeft || icon;
  const IconRight = iconRight;

  const baseStyle = button.base;
  const blockStyle = button.block;
  const sizeStyles = {
    larger: button.size.larger,
    large: button.size.large,
    regular: button.size.regular,
    small: button.size.small,
    /**
     * Only used in Pagination.
     * Not meant for general use.
     */
    pagination: button.size.pagination,
  };
  const iconSizeStyles = {
    larger: button.size.icon.larger,
    large: button.size.icon.large,
    regular: button.size.icon.regular,
    small: button.size.icon.small,
    pagination: button.size.icon.regular,
  };
  const iconStyle = button.icon[size];
  const layoutStyles = {
    primary: button.primary.base,
    outline: button.outline.base,
    link: button.link.base,
  };
  const activeStyles = {
    primary: button.primary.active,
    outline: button.outline.active,
    link: button.link.active,
  };
  const disabledStyles = {
    primary: button.primary.disabled,
    outline: button.outline.disabled,
    link: button.link.disabled,
  };

  /**
   * Only used in DropdownItem.
   * Not meant for general use.
   */
  const dropdownItemStyle = button.dropdownItem.base;

  const buttonStyles =
    layout === "__dropdownItem"
      ? classNames(dropdownItemStyle, className)
      : classNames(
          baseStyle,
          // has icon but no children
          hasIcon() && !children && iconSizeStyles[size],
          // has icon and children
          hasIcon() && children && sizeStyles[size],
          // does not have icon
          !hasIcon() && sizeStyles[size],
          layoutStyles[layout],
          disabled ? disabledStyles[layout] : activeStyles[layout],
          block ? blockStyle : null,
          className
        );

  const iconLeftStyles = classNames(
    iconStyle,
    children ? button.icon.left : ""
  );
  const iconRightStyles = classNames(
    iconStyle,
    children ? button.icon.right : ""
  );

  return React.createElement(
    tag,
    {
      className: buttonStyles,
      ref,
      disabled,
      type,
      ...other,
    },
    IconLeft
      ? React.createElement(IconLeft, {
          className: iconLeftStyles,
          "aria-hidden": true,
        })
      : null,
    children,
    IconRight
      ? React.createElement(IconRight, {
          className: iconRightStyles,
          "aria-hidden": true,
        })
      : null
  );
});

export default Button;

'''
'''--- src/components/Card.js ---
import React, { useContext } from 'react'
import classNames from 'classnames'
import { DarkModeContext } from './DarkMode'

const Card = React.forwardRef(function Card(props, ref) {
  const { className, children, colored = false, ...other } = props
  const {
    theme: { card },
  } = useContext(DarkModeContext)

  const baseStyle = card.base
  const uncoloredStyle = card.default

  const cls = classNames(baseStyle, !colored && uncoloredStyle, className)

  return (
    <div className={cls} ref={ref} {...other}>
      {children}
    </div>
  )
})

export default Card
'''
'''--- src/components/CardBody.js ---
import React, { useContext } from 'react'
import classNames from 'classnames'
import { DarkModeContext } from './DarkMode'

const CardBody = React.forwardRef(function CardBody(props, ref) {
  const { className, children, ...other } = props
  const {
    theme: { cardBody },
  } = useContext(DarkModeContext)

  const baseStyle = cardBody.base

  const cls = classNames(baseStyle, className)

  return (
    <div className={cls} ref={ref} {...other}>
      {children}
    </div>
  )
})

export default CardBody
'''
'''--- src/components/Cards/ImageCard.js ---
import React from "react";
import Card from "../Card";
import CardBody from "../CardBody";

function ImageCard({ index, media, removeImage }) {
  return (
    <Card>
      <div className="relative">
        {removeImage ? (
          <button
            className="absolute top-0 right-2 z-10"
            onClick={() => removeImage(index)}
          >
            &times;
          </button>
        ) : null}

        <CardBody className="flex flex-col">
          <img alt="not found" src={media} className="w-32 m-2" />
        </CardBody>
      </div>
    </Card>
  );
}

export default ImageCard;

'''
'''--- src/components/Cards/ItemCard.js ---
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Button from "../Button";
import Card from "../Card";
import CardBody from "../CardBody";
import ThemedSuspense from "../ThemedSuspense";

function ItemCard({ item }) {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const viewItem = (id) => {
    navigate(`/item/${id}`);
  };

  if (loading) {
    return <ThemedSuspense />;
  }

  return (
    <Card>
      <CardBody className="flex flex-col">
        <img alt="not found" src={item.media[0]} className="m-2" />
        <div className="flex flex-col m-2">
          <p className="text-lg font-semibold text-gray-700 dark:text-gray-200">
            {item.categoryByCategoryId.name}
          </p>
          <p className="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400">
            {item.subcategoryBySubcategoryId.name}
          </p>
          <div className="flex justify-end">
            <Button onClick={() => viewItem(item.id)}>view</Button>
          </div>
        </div>
      </CardBody>
    </Card>
  );
}

export default ItemCard;

'''
'''--- src/components/Cards/RequestCard.js ---
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Button from "../Button";
import Card from "../Card";
import CardBody from "../CardBody";
import ThemedSuspense from "../ThemedSuspense";

function RequestCard({ request }) {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const viewRequest = (id) => {
    navigate(`/request/${id}`);
  };

  if (loading) {
    return <ThemedSuspense />;
  }

  return (
    <Card>
      <CardBody className="flex flex-col">
        <img alt="not found" src={request.media[0]} className="m-2" />
        <div className="flex flex-col m-2">
          <p className="text-lg font-semibold text-gray-700 dark:text-gray-200">
            {request.categoryByCategoryId.name}
          </p>
          <p className="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400">
            {request.subcategoryBySubcategoryId.name}
          </p>
          <div className="flex justify-end">
            <Button onClick={() => viewRequest(request.id)}>view</Button>
          </div>
        </div>
      </CardBody>
    </Card>
  );
}

export default RequestCard;

'''
'''--- src/components/DarkMode.js ---
import React, { useLayoutEffect, useMemo } from 'react'
import defaultTheme from '../themes/default'
import { mergeDeep } from '../utils/mergeDeep'
import useDarkMode from '../utils/useDarkMode'

export const DarkModeContext = React.createContext({ theme: defaultTheme })

const DarkModeProvider = ({
  children,
  theme: customTheme,
  dark,
  usePreferences = true,
}) => {
  const mergedTheme = mergeDeep(defaultTheme, customTheme)
  const [mode, setMode, toggleMode] = useDarkMode(usePreferences)

  useLayoutEffect(() => {
    if (dark) {
      if (setMode != null) {
        setMode('dark')
      }
      document.documentElement.classList.add(`dark`)
    }
  }, [dark])

  const value = useMemo(
    () => ({
      theme: mergedTheme,
      mode,
      toggleMode,
    }),
    [mode]
  )

  return <DarkModeContext.Provider value={value}>{children}</DarkModeContext.Provider>
}

export default DarkModeProvider
'''
'''--- src/components/FileUpload.js ---
import React from "react";
import { ImageIcon } from "../icons";

const FileUpload = React.forwardRef(function FileUpload(props, ref) {
  const { ...other } = props;

  return (
    <label className="flex flex-col w-full h-32 border-4 border-dashed hover:bg-gray-100 hover:border-gray-300">
      <div className="flex flex-col items-center justify-center pt-7">
        <ImageIcon />
        <p className="pt-1 text-sm tracking-wider text-gray-400 group-hover:text-gray-600">
          add photos
        </p>
      </div>
      <input type="file" className="opacity-0" multiple ref={ref} {...other} />
    </label>
  );
});

export default FileUpload;

'''
'''--- src/components/Header.js ---
import React, { useContext } from "react";
import { Link } from "react-router-dom";
import { MoonIcon, SunIcon } from "../icons";
import Button from "./Button";
import { DarkModeContext } from "./DarkMode";

function Header() {
  const { mode, toggleMode } = useContext(DarkModeContext);
  return (
    <header className="z-40 py-4 bg-white shadow-bottom dark:bg-black">
      <div className="container flex items-center justify-between h-full px-6 mx-auto text-green-600 dark:text-green-300">
        <Link to="/">
          <p className="text-xl font-bold text-yellow-600">organize</p>
        </Link>
        <ul className="flex items-center flex-shrink-0 space-x-6 text-yellow-600 dark:text-yellow-300">
          {/* <!-- Theme toggler --> */}
          <li className="flex">
            <button
              className="rounded-md focus:outline-none focus:shadow-outline-green"
              onClick={toggleMode}
              aria-label="Toggle color mode"
            >
              {mode === "dark" ? (
                <SunIcon className="w-5 h-5" aria-hidden="true" />
              ) : (
                <MoonIcon className="w-5 h-5" aria-hidden="true" />
              )}
            </button>
          </li>
        </ul>
      </div>
    </header>
  );
}

export default Header;

'''
'''--- src/components/Input.js ---
import React, { useContext } from 'react'
import classNames from 'classnames'
import { DarkModeContext } from './DarkMode'

const Input = React.forwardRef(function Input(props, ref) {
  const { valid, disabled, className, type = 'text', ...other } = props

  const {
    theme: { input },
  } = useContext(DarkModeContext)

  const baseStyle = input.base
  const activeStyle = input.active
  const disabledStyle = input.disabled
  const validStyle = input.valid
  const invalidStyle = input.invalid
  const radioStyle = input.radio
  const checkStyle = input.checkbox

  function hasValidation(valid) {
    return valid !== undefined
  }

  function validationStyle(valid) {
    if (hasValidation(valid)) {
      return valid ? validStyle : invalidStyle
    }
    return ''
  }

  function typeStyle(type) {
    switch (type) {
      case 'radio':
        return radioStyle
      case 'checkbox':
        return checkStyle
      default:
        return baseStyle
    }
  }

  const cls = classNames(
    typeStyle(type),
    // don't apply activeStyle if has valid or disabled
    !hasValidation(valid) && !disabled && activeStyle,
    // don't apply disabledStyle if has valid
    !hasValidation(valid) && disabled && disabledStyle,
    validationStyle(valid),
    className
  )

  return <input className={cls} type={type} ref={ref} disabled={disabled} {...other} />
})

export default Input
'''
'''--- src/components/MainHeader.js ---
import React, { useContext } from "react";
import { MoonIcon, SunIcon } from "../icons";
import { DarkModeContext } from "./DarkMode";

function MainHeader() {
  const { mode, toggleMode } = useContext(DarkModeContext);
  return (
    <header className="z-40 py-4 shadow-bottom">
      <div className="container flex items-center justify-between h-full px-6 mx-auto text-yellow-600 dark:text-yellow-300">
        <ul className="flex items-center flex-shrink-0 space-x-6">
          {/* <!-- Theme toggler --> */}
          <li className="flex">
            <button
              className="rounded-md focus:outline-none focus:shadow-outline-green"
              onClick={toggleMode}
              aria-label="Toggle color mode"
            >
              {mode === "dark" ? (
                <SunIcon className="w-5 h-5" aria-hidden="true" />
              ) : (
                <MoonIcon className="w-5 h-5" aria-hidden="true" />
              )}
            </button>
          </li>
        </ul>
      </div>
    </header>
  );
}

export default MainHeader;

'''
'''--- src/components/RoundIcon.js ---
import React from 'react'
import classNames from 'classnames'

function RoundIcon({
  icon: Icon,
  iconColorClass = 'text-green-600 dark:text-green-100',
  bgColorClass = 'bg-green-100 dark:bg-green-600',
  className,
}) {
  const baseStyle = 'p-3 rounded-full'

  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)
  return (
    <div className={cls}>
      <Icon className="w-5 h-5" />
    </div>
  )
}

export default RoundIcon

'''
'''--- src/components/Select.js ---
import classNames from "classnames";
import React, { useContext } from "react";
import { DarkModeContext } from "./DarkMode";

const Select = React.forwardRef(function Select(props, ref) {
  const { valid, children, className, multiple, disabled, placeholder, options, ...other } = props

  const {
    theme: { select },
  } = useContext(DarkModeContext)

  const baseStyle = select.base
  const activeStyle = select.active
  const validStyle = select.valid
  const invalidStyle = select.invalid
  const disabledStyle = select.disabled
  const selectStyle = select.select

  function hasValidation(valid) {
    return valid !== undefined
  }

  function validationStyle(valid) {
    if (hasValidation(valid)) {
      return valid ? validStyle : invalidStyle
    }
    return ''
  }

  const cls = classNames(
    baseStyle,
    // don't apply activeStyle if has valid or disabled
    !hasValidation(valid) && !disabled && activeStyle,
    // don't apply disabledStyle if has valid
    !hasValidation(valid) && disabled && disabledStyle,
    validationStyle(valid),
    !multiple && selectStyle,
    className
  )

  return (
    <select className={cls} ref={ref} disabled={disabled} multiple={!!multiple} {...other}>
      <option value="">{placeholder}</option>
      {options.map((o) => (
        <option key={o.id} value={o.value}>
          {o.name}
        </option>
      ))}
    </select>
  );
});

export default Select

'''
'''--- src/components/ThemedSuspense.js ---
import React from 'react'

function ThemedSuspense() {
  return (
    <div className="w-full h-screen p-6 text-lg font-medium text-gray-600 bg-green-500 dark:text-gray-400 dark:bg-green-900">
      Loading...
    </div>
  )
}

export default ThemedSuspense

'''
'''--- src/components/Typography/PageTitle.js ---
import React from 'react'

function PageTitle({ children }) {
  return (
    <h1 className="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">{children}</h1>
  )
}

export default PageTitle

'''
'''--- src/components/Typography/SectionTitle.js ---
import React from 'react'

function SectionTitle({ children }) {
  return <h2 className="mb-4 text-lg font-semibold text-gray-600 dark:text-gray-300">{children}</h2>
}

export default SectionTitle

'''
'''--- src/containers/Layout.js ---
import React, { lazy, Suspense } from "react";
import { Outlet, Route, Routes } from "react-router-dom";
import Header from "../components/Header";
import ThemedSuspense from "../components/ThemedSuspense";
import Main from "../pages/Main";

const Organize = lazy(() => import("../pages/Organize"));
const Item = lazy(() => import("../pages/Item"));
const Page404 = lazy(() => import("../pages/404"));

function Layout() {
  return (
    <div className="flex h-screen bg-gray-50 dark:bg-black text-black dark:text-white">
      <div className="flex flex-col flex-1 w-full">
        <main className="container mx-auto h-full overflow-y-auto">
          <Suspense fallback={<ThemedSuspense />}>
            <Outlet />
          </Suspense>
        </main>
      </div>
    </div>

    // <div className="flex h-screen bg-gray-50 dark:bg-gray-900">
    //   <div className="flex flex-col flex-1 w-full">
    //     <Header />
    //     <Main>
    //       <Suspense fallback={<ThemedSuspense />}>
    //         <Routes>
    //           <Route path={"/"} element={<Organize />} />
    //           <Route path="item/:itemId" element={<Item />} />
    //           <Route element={<Page404 />} />
    //         </Routes>
    //       </Suspense>
    //     </Main>
    //   </div>
    // </div>
  );
}

export default Layout;

'''
'''--- src/context/ThemeContext.js ---
import React, { useState, useEffect, useRef, useLayoutEffect, useMemo } from 'react'

/**
 * Saves the old theme for future use
 * @param {string} theme - Name of curent theme
 * @return {string} previousTheme
 */
function usePrevious(theme) {
  const ref = useRef()
  useEffect(() => {
    ref.current = theme
  })
  return ref.current
}

/**
 * Gets user preferences from local storage
 * @param {string} key - localStorage key
 * @return {array} getter and setter for user preferred theme
 */
function useStorageTheme(key) {
  const userPreference =
    !!window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches

  const [theme, setTheme] = useState(
    // use stored theme; fallback to user preference
    localStorage.getItem(key) || userPreference
  )

  // update stored theme
  useEffect(() => {
    localStorage.setItem(key, theme)
  }, [theme, key])

  return [theme, setTheme]
}

// create context
export const ThemeContext = React.createContext()

// create context provider
export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useStorageTheme('theme')

  // update root element class on theme change
  const oldTheme = usePrevious(theme)
  useLayoutEffect(() => {
    document.documentElement.classList.remove(`theme-${oldTheme}`)
    document.documentElement.classList.add(`theme-${theme}`)
  }, [theme, oldTheme])

  function toggleTheme() {
    if (theme === 'light') setTheme('dark')
    else setTheme('light')
  }

  const value = useMemo(
    () => ({
      theme,
      toggleTheme,
    }),
    [theme]
  )

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>
}

'''
'''--- src/features/auth/PhoneNumberVerification.js ---
import { signInWithPhoneNumber } from "firebase/auth";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Button from "../../components/Button";
import Input from "../../components/Input";
import SubmitPhoneNumberButton from "./SubmitPhoneNumberButton";

function PhoneNumberVerification({ recaptcha, auth }) {
  const [digits, setDigits] = useState("");
  const [confirmationResult, setConfirmationResult] = useState(null);
  const [code, setCode] = useState("");

  let navigate = useNavigate();
  const phoneNumber = `+1${digits}`;

  useEffect(() => {
    recaptcha.verify();
  }, [recaptcha]);

  const signIn = async () => {
    setConfirmationResult(
      await signInWithPhoneNumber(auth, phoneNumber, recaptcha)
    );
  };

  const verifyCode = async () => {
    await confirmationResult
      .confirm(code)
      .then((result) => {
        navigate("/");
      })
      .catch((error) => {
        recaptcha.reset(window.recaptchaWidgetId);
        console.log(error);
      });
  };

  return (
    <div className="flex items-center min-h-screen p-6 bg-gray-50 dark:bg-gray-900">
      <div className="flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-white rounded-lg shadow-xl dark:bg-gray-800">
        <div className="flex flex-col overflow-y-auto md:flex-row">
          <div className="flex items-center justify-center p-6 sm:p-12 md:w-1/2">
            <div className="w-full">
              <h1 className="mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200">
                Login
              </h1>
              <div className="flex flex-row">
                <Input
                  type="tel"
                  value={digits}
                  placeholder="XXX-XXX-XXXX"
                  onChange={(e) => setDigits(e.target.value)}
                />
                {phoneNumber.length === 12 ? (
                  <SubmitPhoneNumberButton
                    phoneNumber={phoneNumber}
                    signIn={signIn}
                  />
                ) : null}
              </div>
              <br />
              {confirmationResult && (
                <div className="flex flex-row">
                  <Input
                    type="text"
                    value={code}
                    placeholder="XXXXXX"
                    onChange={(e) => setCode(e.target.value)}
                  />
                  <Button
                    className="mx-2"
                    onClick={verifyCode}
                    aria-live="polite"
                  >
                    Verify
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PhoneNumberVerification;

'''
'''--- src/features/auth/SubmitPhoneNumberButton.js ---
import { useEffect, useState } from "react";
import Button from "../../components/Button";
import { useInviteByPhoneNumber, useRequestInvite } from "./authApi";

function SubmitPhoneNumberButton({ phoneNumber, signIn }) {
  const [invited, setInvited] = useState(false);
  const {
    data: invite,
    isLoading,
    isError,
  } = useInviteByPhoneNumber(phoneNumber);
  const requestInvite = useRequestInvite(); // then force useInvite

  useEffect(() => {
    if (invite) {
      setInvited(true);
    } else {
      setInvited(false);
    }
  }, [invite]);

  return (
    <>
      {invited ? (
        <>
          <Button
            className="mx-2"
            disabled={!invite?.isApproved}
            aria-live="polite"
            onClick={signIn}
          >
            Submit
          </Button>
        </>
      ) : (
        <>
          <Button
            className="mx-2"
            aria-live="polite"
            onClick={() => requestInvite.mutate(phoneNumber)}
          >
            Request Invitation
          </Button>
        </>
      )}
    </>
  );
}

export default SubmitPhoneNumberButton;

'''
'''--- src/features/auth/authApi.js ---
import request, { gql } from "graphql-request";
import { useMutation, useQuery } from "react-query";
import { API_URL, queryClient } from "../../app/api";

export function useInviteByPhoneNumber(phoneNumber) {
  return useQuery("inviteByPhoneNumber", async () => {
    const { inviteByPhoneNumber } = await request(
      API_URL,
      gql`
        query inviteByPhoneNumber($phoneNumber: String!) {
          inviteByPhoneNumber(phoneNumber: $phoneNumber) {
            isApproved
          }
        }
      `,
      { phoneNumber }
    );
    return inviteByPhoneNumber;
  });
}

export function useRequestInvite() {
  return useMutation(
    "requestInvite",
    async (phoneNumber) => {
      return await request(
        API_URL,
        gql`
          mutation requestInvite($phoneNumber: String!) {
            createInvite(input: { invite: { phoneNumber: $phoneNumber } }) {
              invite {
                phoneNumber
              }
            }
          }
        `,
        { phoneNumber }
      );
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries("inviteByPhoneNumber");
      },
    }
  );
}

'''
'''--- src/features/auth/authSlice.js ---
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  user: null
};

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setUser: (state, action) => {
      state.user = action.payload;
    },
  },
});

export const { setUser } = authSlice.actions;

export const selectUser = (state) => state.auth.user;

export default authSlice.reducer;

'''
'''--- src/features/itemDeck/itemDeckApi.js ---
import request, { gql } from "graphql-request";
import { useQuery } from "react-query";
import { API_URL } from "../../app/api";

export function useItems() {
  return useQuery("items", async () => {
    const {
      allItems: { edges },
    } = await request(
      API_URL,
      gql`
        query allItems {
          allItems {
            edges {
              node {
                id
                categoryByCategoryId {
                  name
                }
                media
                subcategoryBySubcategoryId {
                  name
                }
              }
            }
          }
        }
      `
    );
    return edges;
  });
}

export function useItemById(item_id) {
  return useQuery("itemById", async () => {
    const { itemById } = await request(
      API_URL,
      gql`
        query itemById($item_id: Int!) {
          itemById(id: $item_id) {
            id
            categoryByCategoryId {
              name
            }
            itemCharacteristicsByItemId {
              edges {
                node {
                  initialValue
                  attributeByAttributeId {
                    name
                  }
                }
              }
            }
            media
            subcategoryBySubcategoryId {
              name
            }
          }
        }
      `,
      { item_id }
    );
    return itemById;
  });
}

'''
'''--- src/features/itemDeck/itemDeckSlice.js ---
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  currentIndex: 0
};

export const itemDeckSlice = createSlice({
  name: 'itemDeck',
  initialState,
  reducers: {
    setCurrentIndex: (state, action) => {
      state.currentIndex = action.payload;
    },
    nextItem: (state, action) => {
      state.currentIndex += 1;
    },
    lastItem: (state, action) => {
      state.currentIndex -= 1;
    }
  },
});

export const { setCurrentIndex, nextItem, lastItem } = itemDeckSlice.actions;

export const selectCurrentIndex = (state) => state.itemDeck.currentIndex;

export default itemDeckSlice.reducer;

'''
'''--- src/features/labels/labelsSlice.js ---
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
};

export const labelsSlice = createSlice({
  name: 'labels',
  initialState,
  reducers: {
    setLabels: (state, action) => {
      state.schema = action.payload;
    },
  },
});

export const { setLabels } = labelsSlice.actions;

export const selectLabels = (state) => state;

export default labelsSlice.reducer;

'''
'''--- src/features/requestDeck/requestDeckApi.js ---
import request, { gql } from "graphql-request";
import { useQuery } from "react-query";
import { API_URL } from "../../app/api";

export function useRequests() {
  return useQuery("requests", async () => {
    const {
      allRequests: { edges },
    } = await request(
      API_URL,
      gql`
        query allRequests {
          allRequests {
            edges {
              node {
                id
                categoryByCategoryId {
                  name
                }
                media
                subcategoryBySubcategoryId {
                  name
                }
              }
            }
          }
        }
      `
    );
    return edges;
  });
}

export function useRequestById(request_id) {
  return useQuery("requestById", async () => {
    const { requestById } = await request(
      API_URL,
      gql`
        query requestById($request_id: Int!) {
          requestById(id: $request_id) {
            id
            categoryByCategoryId {
              name
            }
            requestCharacteristicsByRequestId {
              edges {
                node {
                  initialValue
                  attributeByAttributeId {
                    name
                  }
                }
              }
            }
            media
            subcategoryBySubcategoryId {
              name
            }
          }
        }
      `,
      { request_id }
    );
    return requestById;
  });
}

'''
'''--- src/features/requestDeck/requestDeckSlice.js ---
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  currentIndex: 0
};

export const requestDeckSlice = createSlice({
  name: 'requestDeck',
  initialState,
  reducers: {
    setCurrentIndex: (state, action) => {
      state.currentIndex = action.payload;
    },
    nextRequest: (state, action) => {
      state.currentIndex += 1;
    },
    lastRequest: (state, action) => {
      state.currentIndex -= 1;
    }
  },
});

export const { setCurrentIndex, nextRequest, lastRequest } = requestDeckSlice.actions;

export const selectCurrentIndex = (state) => state.requestDeck.currentIndex;

export default requestDeckSlice.reducer;

'''
'''--- src/hooks/useItems.js ---
import React from "react";
import {
  useFirestoreInfiniteQuery,
} from "@react-query-firebase/firestore";
import { query, startAfter } from "firebase/firestore";

export const useInfiniteItems = (q) => {
  const [records, setRecords] = React.useState([]);
  const items = useFirestoreInfiniteQuery("items", q, (snapshot) => {
    const lastDocument = snapshot.docs[snapshot.docs.length - 1];

    // Get the next 20 documents starting after the last document fetched.
    return query(q, startAfter(lastDocument));
  });

  React.useEffect(() => {
    if (items.data?.pages) {
      setRecords([]);
      items.data.pages.forEach((page) =>
        page.docs.forEach((docSnapshot) => {
          const rawRecord = docSnapshot.data();

          setRecords((prevState) => [
            ...prevState,
            {
              id: docSnapshot.id,
              ...rawRecord,
              // createdAt: rawRecord.createdAt.toDate(),
              // updatedAt: rawRecord.updatedAt?.toDate(),
            },
          ]);
        })
      );
    }
  }, [items.data?.pages]);

  return { isLoading: items.isLoading, items: records };
};

'''
'''--- src/icons/bell.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"></path>
</svg>
'''
'''--- src/icons/buttons.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"></path>
</svg>
'''
'''--- src/icons/cards.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
</svg>
'''
'''--- src/icons/cart.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"></path>
</svg>
'''
'''--- src/icons/charts.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"></path>
  <path d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z"></path>
</svg>
'''
'''--- src/icons/chat.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M18 5v8a2 2 0 01-2 2h-5l-5 4v-4H4a2 2 0 01-2-2V5a2 2 0 012-2h12a2 2 0 012 2zM7 8H5v2h2V8zm2 0h2v2H9V8zm6 0h-2v2h2V8z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/dropdown.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/edit.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
</svg>
'''
'''--- src/icons/forbidden.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/forms.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
</svg>
'''
'''--- src/icons/github.svg ---
<svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/></svg>
'''
'''--- src/icons/heart.svg ---
<svg
  fill="currentColor"
  aria-hidden="true"
  viewBox="0 0 20 20"
>
  <path
    d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
    clip-rule="evenodd"
    fill-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/home.svg ---
<svg        
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
</svg>
'''
'''--- src/icons/image.svg ---
<svg xmlns="http://www.w3.org/2000/svg" className="w-12 h-12 text-gray-400 group-hover:text-gray-600" viewBox="0 0 20 20" fill="currentColor">
  <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd"/>
</svg>
'''
'''--- src/icons/index.js ---
import { ReactComponent as ButtonsIcon } from './buttons.svg'
import { ReactComponent as CardsIcon } from './cards.svg'
import { ReactComponent as ChartsIcon } from './charts.svg'
import { ReactComponent as FormsIcon } from './forms.svg'
import { ReactComponent as HomeIcon } from './home.svg'
import { ReactComponent as ModalsIcon } from './modals.svg'
import { ReactComponent as PagesIcon } from './pages.svg'
import { ReactComponent as TablesIcon } from './tables.svg'
import { ReactComponent as HeartIcon } from './heart.svg'
import { ReactComponent as EditIcon } from './edit.svg'
import { ReactComponent as TrashIcon } from './trash.svg'
import { ReactComponent as ForbiddenIcon } from './forbidden.svg'
import { ReactComponent as GithubIcon } from './github.svg'
import { ReactComponent as TwitterIcon } from './twitter.svg'
import { ReactComponent as MailIcon } from './mail.svg'
import { ReactComponent as CartIcon } from './cart.svg'
import { ReactComponent as ChatIcon } from './chat.svg'
import { ReactComponent as MoneyIcon } from './money.svg'
import { ReactComponent as PeopleIcon } from './people.svg'
import { ReactComponent as SearchIcon } from './search.svg'
import { ReactComponent as MoonIcon } from './moon.svg'
import { ReactComponent as SunIcon } from './sun.svg'
import { ReactComponent as BellIcon } from './bell.svg'
import { ReactComponent as MenuIcon } from './menu.svg'
import { ReactComponent as DropdownIcon } from './dropdown.svg'
import { ReactComponent as OutlinePersonIcon } from './outlinePerson.svg'
import { ReactComponent as OutlineCogIcon } from './outlineCog.svg'
import { ReactComponent as OutlineLogoutIcon } from './outlineLogout.svg'
import { ReactComponent as ImageIcon } from './image.svg'

export {
  ButtonsIcon,
  CardsIcon,
  ChartsIcon,
  FormsIcon,
  HomeIcon,
  ModalsIcon,
  PagesIcon,
  TablesIcon,
  HeartIcon,
  EditIcon,
  TrashIcon,
  ForbiddenIcon,
  GithubIcon,
  TwitterIcon,
  MailIcon,
  CartIcon,
  ChatIcon,
  MoneyIcon,
  PeopleIcon,
  SearchIcon,
  MoonIcon,
  SunIcon,
  BellIcon,
  MenuIcon,
  DropdownIcon,
  OutlinePersonIcon,
  OutlineCogIcon,
  OutlineLogoutIcon,
  ImageIcon
}

'''
'''--- src/icons/mail.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
</svg>
'''
'''--- src/icons/menu.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/modals.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
</svg>
'''
'''--- src/icons/money.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/moon.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
</svg>
'''
'''--- src/icons/outlineCog.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
  <path d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
</svg>
'''
'''--- src/icons/outlineLogout.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
</svg>
'''
'''--- src/icons/outlinePerson.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
</svg>
'''
'''--- src/icons/pages.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"></path>
</svg>
'''
'''--- src/icons/people.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"></path>
</svg>
'''
'''--- src/icons/search.svg ---
<svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/sun.svg ---
<svg fill="currentColor" viewBox="0 0 20 20">
  <path
    fill-rule="evenodd"
    d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/tables.svg ---
<svg
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  viewBox="0 0 24 24"
  stroke="currentColor"
>
  <path d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
</svg>
'''
'''--- src/icons/trash.svg ---
<svg
  fill="currentColor"
  viewBox="0 0 20 20"
>
  <path
    fill-rule="evenodd"
    d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
    clip-rule="evenodd"
  ></path>
</svg>
'''
'''--- src/icons/twitter.svg ---
<svg viewBox="0 0 24 24" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg>
'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- src/index.js ---
import { Buffer } from "buffer";
import React, { Suspense } from "react";
import ReactDom from "react-dom";
import { QueryClientProvider } from "react-query";
import { ReactQueryDevtools } from "react-query/devtools";
import { Provider } from "react-redux";
import { persistStore } from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";
import App from "./App";
import { queryClient } from "./app/api";
import { store } from "./app/store";
import DarkModeProvider from "./components/DarkMode";
import ThemedSuspense from "./components/ThemedSuspense";
import { ThemeProvider } from "./context/ThemeContext";
import "./index.css";
import * as serviceWorker from "./serviceWorker";
global.Buffer = Buffer;

const persistor = persistStore(store);

ReactDom.render(
  <React.StrictMode>
    <DarkModeProvider>
      <ThemeProvider>
        <Provider store={store}>
          <PersistGate loading={<ThemedSuspense />} persistor={persistor}>
            <Suspense fallback={<ThemedSuspense />}>
              <QueryClientProvider client={queryClient}>
                <App />
                <ReactQueryDevtools initialIsOpen={false} />
              </QueryClientProvider>
            </Suspense>
          </PersistGate>
        </Provider>
      </ThemeProvider>
    </DarkModeProvider>
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><g fill="#764ABC"><path d="M65.6 65.4c2.9-.3 5.1-2.8 5-5.8-.1-3-2.6-5.4-5.6-5.4h-.2c-3.1.1-5.5 2.7-5.4 5.8.1 1.5.7 2.8 1.6 3.7-3.4 6.7-8.6 11.6-16.4 15.7-5.3 2.8-10.8 3.8-16.3 3.1-4.5-.6-8-2.6-10.2-5.9-3.2-4.9-3.5-10.2-.8-15.5 1.9-3.8 4.9-6.6 6.8-8-.4-1.3-1-3.5-1.3-5.1-14.5 10.5-13 24.7-8.6 31.4 3.3 5 10 8.1 17.4 8.1 2 0 4-.2 6-.7 12.8-2.5 22.5-10.1 28-21.4z"/><path d="M83.2 53c-7.6-8.9-18.8-13.8-31.6-13.8H50c-.9-1.8-2.8-3-4.9-3h-.2c-3.1.1-5.5 2.7-5.4 5.8.1 3 2.6 5.4 5.6 5.4h.2c2.2-.1 4.1-1.5 4.9-3.4H52c7.6 0 14.8 2.2 21.3 6.5 5 3.3 8.6 7.6 10.6 12.8 1.7 4.2 1.6 8.3-.2 11.8-2.8 5.3-7.5 8.2-13.7 8.2-4 0-7.8-1.2-9.8-2.1-1.1 1-3.1 2.6-4.5 3.6 4.3 2 8.7 3.1 12.9 3.1 9.6 0 16.7-5.3 19.4-10.6 2.9-5.8 2.7-15.8-4.8-24.3z"/><path d="M32.4 67.1c.1 3 2.6 5.4 5.6 5.4h.2c3.1-.1 5.5-2.7 5.4-5.8-.1-3-2.6-5.4-5.6-5.4h-.2c-.2 0-.5 0-.7.1-4.1-6.8-5.8-14.2-5.2-22.2.4-6 2.4-11.2 5.9-15.5 2.9-3.7 8.5-5.5 12.3-5.6 10.6-.2 15.1 13 15.4 18.3 1.3.3 3.5 1 5 1.5-1.2-16.2-11.2-24.6-20.8-24.6-9 0-17.3 6.5-20.6 16.1-4.6 12.8-1.6 25.1 4 34.8-.5.7-.8 1.8-.7 2.9z"/></g></svg>

'''
'''--- src/pages/404.js ---
import React from 'react'

import { ForbiddenIcon } from '../icons'

function Page404() {
  return (
    <div className="flex flex-col items-center">
      <ForbiddenIcon className="w-12 h-12 mt-8 text-green-200" aria-hidden="true" />
      <h1 className="text-6xl font-semibold text-gray-700 dark:text-gray-200">404</h1>
      <p className="text-gray-700 dark:text-gray-300">
        Page not found. Check the address or{' '}
        <a className="text-green-600 hover:underline dark:text-green-300" href="../index.html">
          go back
        </a>
        .
      </p>
    </div>
  )
}

export default Page404

'''
'''--- src/pages/Item.js ---
import { useParams } from "react-router-dom";
import Card from "../components/Card";
import CardBody from "../components/CardBody";
import ImageCard from "../components/Cards/ImageCard";
import ThemedSuspense from "../components/ThemedSuspense";
import { useItemById } from "../features/itemDeck/itemDeckApi";

function Item() {
  const { itemId } = useParams();
  const { data, isLoading, isError } = useItemById(parseInt(itemId));

  if (isLoading) {
    return <ThemedSuspense />;
  }
  return (
    <>
      <Card>
        <CardBody className="flex flex-col">
          {data.media &&
            data.media.map((url, index) => (
              <ImageCard key={index} index={index} media={url} />
            ))}
          <div className="flex flex-col m-2">
            <p className="text-lg font-semibold text-gray-700 dark:text-gray-200">
              {data.categoryByCategoryId.name}
            </p>
            <p className="mb-2 text-md font-medium text-gray-600 dark:text-gray-400">
              {data.subcategoryBySubcategoryId.name}
            </p>
            {data.itemCharacteristicsByItemId.edges.map((char) => {
              return (
                <p
                  key={char.node.attributeByAttributeId.name}
                  className="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"
                >
                  {char.node.attributeByAttributeId.name}:{" "}
                  {char.node.initialValue}
                </p>
              );
            })}
          </div>
        </CardBody>
      </Card>
    </>
  );
}

export default Item;

'''
'''--- src/pages/ItemDeck.js ---
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import Button from "../components/Button";
import ItemCard from "../components/Cards/ItemCard";
import Header from "../components/Header";
import { useItems } from "../features/itemDeck/itemDeckApi";
import { lastItem, nextItem } from "../features/itemDeck/itemDeckSlice";

function ItemDeck() {
  const [currentItem, setCurrentItem] = useState(null);
  const dispatch = useDispatch();
  const currentIndex = useSelector((state) => state.itemDeck.currentIndex);
  const { data, isLoading, isError } = useItems();

  useEffect(() => {
    if (data && currentIndex < data.length) {
      setCurrentItem(data[currentIndex].node);
    }
  }, [currentIndex, data]);

  const next = () => {
    dispatch(nextItem());
  };

  const last = () => {
    if (currentIndex > 0) {
      dispatch(lastItem());
    }
  };

  return (
    <>
      {isLoading ? (
        <div>Loading</div>
      ) : (
        <>
          <div className="flex flex-col justify-between h-full">
            <Header className="flex flex-1" />
            <div className="flex flex-1">
              {currentItem ? (
                <ItemCard key={currentItem.id} item={currentItem} />
              ) : (
                <p>No item</p>
              )}
            </div>
            <div className="flex">
              <Button
                className="w-1/2 h-16"
                onClick={last}
                disabled={currentIndex === 0}
              >
                &#x2190;
              </Button>
              <Button className="w-1/2 h-16" onClick={next}>
                &#x2192;
              </Button>
            </div>
          </div>
        </>
      )}
    </>
  );
}

export default ItemDeck;

'''
'''--- src/pages/Login.js ---
import { getAuth, RecaptchaVerifier } from "firebase/auth";
import { useEffect, useRef, useState } from "react";
import { firebase } from "../app/firebase";
import PhoneNumberVerification from "../features/auth/PhoneNumberVerification";

function Login() {
  const [recaptcha, setRecaptcha] = useState(null);
  const element = useRef(null);
  const auth = getAuth(firebase);

  useEffect(() => {
    if (!recaptcha) {
      const verifier = new RecaptchaVerifier(
        element.current,
        {
          size: "invisible",
        },
        auth
      );
      verifier.render().then((widgetId) => {
        window.recaptchaWidgetId = widgetId;
      });
      setRecaptcha(verifier);
    }
  }, [recaptcha, auth]);

  return (
    <>
      {recaptcha && (
        <PhoneNumberVerification recaptcha={recaptcha} auth={auth} />
      )}
      <div ref={element}></div>
    </>
  );
}

export default Login;

'''
'''--- src/pages/Main.js ---
import { useEffect } from "react";
import { useDispatch } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import Button from "../components/Button";
import MainHeader from "../components/MainHeader";

function Main() {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  useEffect(() => {}, [dispatch]);

  const organizeItems = (id) => {
    navigate(`/items`);
  };

  const organizeRequests = (id) => {
    navigate(`/requests`);
  };

  return (
    <div className="flex h-screen bg-gray-50 dark:bg-black text-black dark:text-white">
      <div className="flex flex-col flex-1 w-full">
        <MainHeader />
        <main className="h-full overflow-y-auto">
          <div className="flex flex-col justify-center items-center h-full text-center">
            <p className="font-bold text-7xl font-sans text-yellow-600">
              organize
            </p>
            <p className="text-4xl font-light">EVERYTHING</p>
            <br/>
            <div className="flex">
              <Button className="w-1/2 h-16 mr-2" onClick={organizeItems}>
                items
              </Button>

              <Button className="w-1/2 h-16 ml-2" onClick={organizeRequests}>
                requests
              </Button>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}

export default Main;

doadmin
db-postgresql-nyc1-everything-76464-do-user-11815715-0.b.db.ondigitalocean.com

'''
'''--- src/pages/Organize.js ---
import { Suspense } from "react";
import { Route, Routes } from "react-router-dom";
import ThemedSuspense from "../components/ThemedSuspense";
import Layout from "../containers/Layout";
import routes from "../routes";
import Main from "./Main";

function Organize() {
  return (
    <>
      <Suspense fallback={<ThemedSuspense />}>
        <Routes>
          <Route index element={<Main />} />
          <Route element={<Layout />}>
            {routes.map((route, i) => {
              return route.component ? (
                <Route
                  key={i}
                  exact={true}
                  path={`/${route.path}`}
                  element={<route.component />}
                />
              ) : null;
            })}
          </Route>
        </Routes>
      </Suspense>
    </>
  );
}

export default Organize;

'''
'''--- src/pages/Request.js ---
import { useParams } from "react-router-dom";
import Card from "../components/Card";
import CardBody from "../components/CardBody";
import ImageCard from "../components/Cards/ImageCard";
import ThemedSuspense from "../components/ThemedSuspense";
import { useRequestById } from "../features/requestDeck/requestDeckApi";

function Request() {
  const { requestId } = useParams();
  const { data, isLoading, isError } = useRequestById(parseInt(requestId));

  if (isLoading) {
    return <ThemedSuspense />;
  }
  return (
    <>
      <Card>
        <CardBody className="flex flex-col">
          {data.media &&
            data.media.map((url, index) => (
              <ImageCard key={index} index={index} media={url} />
            ))}
          <div className="flex flex-col m-2">
            <p className="text-lg font-semibold text-gray-700 dark:text-gray-200">
              {data.categoryByCategoryId.name}
            </p>
            <p className="mb-2 text-md font-medium text-gray-600 dark:text-gray-400">
              {data.subcategoryBySubcategoryId.name}
            </p>
            {data.requestCharacteristicsByRequestId.edges.map((char) => {
              return (
                <p
                  key={char.node.attributeByAttributeId.name}
                  className="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"
                >
                  {char.node.attributeByAttributeId.name}:{" "}
                  {char.node.initialValue}
                </p>
              );
            })}
          </div>
        </CardBody>
      </Card>
    </>
  );
}

export default Request;

'''
'''--- src/pages/RequestDeck.js ---
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import Button from "../components/Button";
import RequestCard from "../components/Cards/RequestCard";
import Header from "../components/Header";
import { useRequests } from "../features/requestDeck/requestDeckApi";
import {
  lastRequest,
  nextRequest
} from "../features/requestDeck/requestDeckSlice";

function RequestDeck() {
  const [currentRequest, setCurrentRequest] = useState(null);
  const dispatch = useDispatch();
  const currentIndex = useSelector((state) => state.requestDeck.currentIndex);
  const { data, isLoading, isError } = useRequests();

  useEffect(() => {
    if (data && currentIndex < data.length) {
      setCurrentRequest(data[currentIndex].node);
    }
  }, [currentIndex, data]);

  const next = () => {
    dispatch(nextRequest());
  };

  const last = () => {
    if (currentIndex > 0) {
      dispatch(lastRequest());
    }
  };

  return (
    <>
      {isLoading ? (
        <div>Loading</div>
      ) : (
        <>
          <div className="flex flex-col justify-between h-full">
            <Header className="flex flex-1" />
            <div className="flex flex-1">
              {currentRequest ? (
                <RequestCard key={currentRequest.id} request={currentRequest} />
              ) : (
                <p>No Request</p>
              )}
            </div>
            <div className="flex">
              <Button
                className="w-1/2 h-16"
                onClick={last}
                disabled={currentIndex === 0}
              >
                &#x2190;
              </Button>
              <Button className="w-1/2 h-16" onClick={next}>
                &#x2192;
              </Button>
            </div>
          </div>
        </>
      )}
    </>
  );
}

export default RequestDeck;

'''
'''--- src/routes/index.js ---
import { lazy } from "react";

// use lazy for better code splitting, a.k.a. load faster
const Main = lazy(() => import("../pages/Main"));
const ItemDeck = lazy(() => import("../pages/ItemDeck"));
const Item = lazy(() => import("../pages/Item"));
const RequestDeck = lazy(() => import("../pages/RequestDeck"));
const Request = lazy(() => import("../pages/Request"));
const Page404 = lazy(() => import("../pages/404"));

/**
 * ⚠ These are internal routes!
 * They will be rendered inside the app, using the default `containers/Layout`.
 * If you want to add a route to, let's say, a landing page, you should add
 * it to the `App`'s router, exactly like `Login`, `CreateAccount` and other pages
 * are routed.
 *
 * If you're looking for the links rendered in the SidebarContent, go to
 * `routes/sidebar.js`
 */
const routes = [
  {
    path: "/",
    component: Main,
  },
  {
    path: "/items",
    component: ItemDeck,
  },
  {
    path: "/item/:itemId",
    component: Item,
  },
  {
    path: "/requests",
    component: RequestDeck,
  },
  {
    path: "/request/:requestId",
    component: Request,
  },
  {
    path: "/404",
    component: Page404,
  },
];

export default routes;

'''
'''--- src/serviceWorker.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://bit.ly/CRA-PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://bit.ly/CRA-PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(registration => {
        registration.unregister();
      })
      .catch(error => {
        console.error(error.message);
      });
  }
}
'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom/extend-expect';

'''
'''--- src/themes/default.js ---
const theme =  {
  // Alert
  alert: {
    base: 'p-4 pl-12 relative rounded-lg leading-5',
    withClose: 'pr-12',
    success: 'bg-green-50 text-green-900 dark:bg-green-600 dark:text-white',
    danger: 'bg-red-50 text-red-900 dark:bg-red-600 dark:text-white',
    warning: 'bg-yellow-50 text-yellow-900 dark:bg-yellow-600 dark:text-white',
    neutral: 'bg-gray-50 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
    info: 'bg-blue-50 text-blue-900 dark:bg-blue-600 dark:text-white',
    icon: {
      base: 'h-5 w-5',
      success: 'text-green-400 dark:text-green-300',
      danger: 'text-red-400 dark:text-red-300',
      warning: 'text-yellow-400 dark:text-yellow-100',
      neutral: 'text-gray-400 dark:text-gray-500',
      info: 'text-blue-400 dark:text-blue-300',
    },
  },
  // Pagination
  pagination: {
    base: 'flex flex-col justify-between text-xs sm:flex-row text-gray-600 dark:text-gray-400',
  },
  // TableFooter
  tableFooter: {
    base:
      'px-4 py-3 border-t dark:border-gray-700 bg-gray-50 text-gray-500 dark:text-gray-400 dark:bg-gray-800',
  },
  // TableRow
  tableRow: {
    base: '',
  },
  // TableHeader
  tableHeader: {
    base:
      'text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800',
  },
  // TableContainer
  tableContainer: {
    base: 'w-full overflow-hidden rounded-lg ring-1 ring-black ring-opacity-5',
  },
  // TableCell
  tableCell: {
    base: 'px-4 py-3',
  },
  // TableBody
  tableBody: {
    base:
      'bg-white divide-y dark:divide-gray-700 dark:bg-gray-800 text-gray-700 dark:text-gray-400',
  },
  // DropdownItem
  // this is the <li> that lives inside the Dropdown <ul>
  // you're probably looking for the dropdownItem style inside button
  dropdownItem: {
    base: 'mb-2 last:mb-0',
  },
  // Dropdown
  dropdown: {
    base:
      'absolute w-56 p-2 mt-2 text-gray-600 bg-white border border-gray-100 rounded-lg shadow-md min-w-max-content dark:text-gray-300 dark:border-gray-700 dark:bg-gray-700',
    align: {
      left: 'left-0',
      right: 'right-0',
    },
  },
  // Avatar
  avatar: {
    base: 'relative rounded-full inline-block',
    size: {
      large: 'w-10 h-10',
      regular: 'w-8 h-8',
      small: 'w-6 h-6',
    },
  },
  // Modal
  modal: {
    base:
      'w-full px-6 py-4 overflow-hidden bg-white rounded-t-lg dark:bg-gray-800 sm:rounded-lg sm:m-4 sm:max-w-xl',
  },
  // ModalBody
  modalBody: {
    base: 'mb-6 text-sm text-gray-700 dark:text-gray-400',
  },
  // ModalFooter
  modalFooter: {
    base:
      'flex flex-col items-center justify-end px-6 py-3 -mx-6 -mb-4 space-y-4 sm:space-y-0 sm:space-x-6 sm:flex-row bg-gray-50 dark:bg-gray-800',
  },
  // ModalHeader
  modalHeader: {
    base: 'mt-4 mb-2 text-lg font-semibold text-gray-700 dark:text-gray-300',
  },
  // Badge
  badge: {
    base: 'inline-flex px-2 text-xs font-medium leading-5 rounded-full',
    success: 'text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100',
    danger: 'text-red-700 bg-red-100 dark:text-red-100 dark:bg-red-700',
    warning: 'text-orange-700 bg-orange-100 dark:text-white dark:bg-orange-600',
    neutral: 'text-gray-700 bg-gray-100 dark:text-gray-100 dark:bg-gray-700',
    primary: 'text-green-700 bg-green-100 dark:text-white dark:bg-green-600',
  },
  // Backdrop
  backdrop: {
    base:
      'fixed inset-0 z-40 flex items-end bg-black bg-opacity-50 sm:items-center sm:justify-center',
  },
  // Textarea
  textarea: {
    base: 'block w-full text-sm dark:text-gray-300 rounded-md focus:outline-none',
    active:
      'focus:border-green-400 border-gray-300 dark:border-gray-600 dark:focus:border-gray-600 dark:bg-gray-700 dark:focus:ring-gray-300 focus:ring focus:ring-green-300',
    disabled: 'cursor-not-allowed opacity-50 bg-gray-300 dark:bg-gray-800',
    valid:
      'border-green-600 dark:bg-gray-700 focus:border-green-400 dark:focus:border-green-400 focus:ring focus:ring-green-200 dark:focus:ring-green-200',
    invalid:
      'border-red-600 dark:bg-gray-700 focus:border-red-400 dark:focus:border-red-400 focus:ring focus:ring-red-200 dark:focus:ring-red-200',
  },
  // Select
  select: {
    base: 'block w-full text-sm dark:text-gray-300 focus:outline-none rounded-md',
    active:
      'focus:border-green-400 border-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:ring focus:ring-green-300 dark:focus:ring-gray-300 dark:focus:border-gray-600',
    select: 'leading-5',
    disabled: 'cursor-not-allowed opacity-50 bg-gray-300 dark:bg-gray-800',
    valid:
      'border-green-600 dark:bg-gray-700 focus:border-green-400 dark:focus:border-green-400 focus:ring focus:ring-green-200 dark:focus:ring-green-200',
    invalid:
      'border-red-600 dark:bg-gray-700 focus:border-red-400 dark:focus:border-red-400 focus:ring focus:ring-red-200 dark:focus:ring-red-200',
  },
  // Label
  label: {
    base: 'block text-sm text-gray-700 dark:text-gray-400',
    // check and radio get this same style
    check: 'inline-flex items-center',
    disabled: 'opacity-50 cursor-not-allowed',
  },
  // Input
  input: {
    base: 'block w-full text-sm focus:outline-none dark:text-gray-300 leading-5 rounded-md',
    active:
      'focus:border-green-400 border-gray-300 dark:border-gray-600 focus:ring focus:ring-green-300 dark:focus:border-gray-600 dark:focus:ring-gray-300 dark:bg-gray-700',
    disabled: 'cursor-not-allowed opacity-50 bg-gray-300 dark:bg-gray-800',
    valid:
      'border-green-600 dark:bg-gray-700 focus:border-green-400 dark:focus:border-green-400 focus:ring focus:ring-green-200 dark:focus:ring-green-200',
    invalid:
      'border-red-600 dark:bg-gray-700 focus:border-red-400 dark:focus:border-red-400 focus:ring focus:ring-red-200 dark:focus:ring-red-200',
    radio:
      'text-green-600 form-radio focus:border-green-400 focus:outline-none focus:ring focus:ring-green-300 focus:ring-offset-0 dark:focus:ring-gray-300',
    checkbox:
      'text-green-600 form-checkbox focus:border-green-400 focus:outline-none focus:ring focus:ring-green-300 focus:ring-offset-0 rounded dark:focus:ring-gray-300',
  },
  // HelperText
  helperText: {
    base: 'text-xs',
    valid: 'text-green-600 dark:text-green-400',
    invalid: 'text-red-600 dark:text-red-400',
  },
  // Card
  card: {
    base: 'min-w-0 rounded-lg ring-1 ring-black ring-opacity-5 overflow-hidden',
    default: 'bg-white dark:bg-gray-800',
  },
  cardBody: {
    base: 'p-4',
  },
  // Button
  button: {
    base:
      'align-bottom inline-flex items-center justify-center cursor-pointer leading-5 transition-colors duration-150 font-medium focus:outline-none',
    block: 'w-full',
    size: {
      larger: 'px-10 py-4 rounded-lg',
      large: 'px-5 py-3 rounded-lg',
      regular: 'px-4 py-2 rounded-lg text-sm',
      small: 'px-3 py-1 rounded-md text-sm',
      icon: {
        larger: 'p-4 rounded-lg',
        large: 'p-3 rounded-lg',
        regular: 'p-2 rounded-lg',
        small: 'p-2 rounded-md',
      },
      pagination: 'px-3 py-1 rounded-md text-xs',
    },
    // styles applied to the SVG icon
    icon: {
      larger: 'h-5 w-5',
      large: 'h-5 w-5',
      regular: 'h-5 w-5',
      small: 'h-3 w-3',
      left: 'mr-2 -ml-1',
      right: 'ml-2 -mr-1',
    },
    primary: {
      base: 'bg-gray-200 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-800 rounded-none border border-transparent',
      active: 'active:bg-green-600 hover:bg-green-700 focus:ring focus:ring-green-300',
      disabled: 'opacity-50 cursor-not-allowed',
    },
    outline: {
      base: 'text-gray-600 border-gray-300 border dark:text-gray-400 focus:outline-none',
      active:
        'active:bg-transparent hover:border-gray-500 focus:border-gray-500 active:text-gray-500 focus:ring focus:ring-gray-300',
      disabled: 'opacity-50 cursor-not-allowed bg-gray-300',
    },
    link: {
      base: 'text-gray-600 dark:text-gray-400 focus:outline-none border border-transparent',
      active:
        'active:bg-transparent hover:bg-gray-100 focus:ring focus:ring-gray-300 dark:hover:bg-gray-500 dark:hover:text-gray-300 dark:hover:bg-opacity-10',
      disabled: 'opacity-50 cursor-not-allowed',
    },
    // this is the button that lives inside the DropdownItem
    dropdownItem: {
      base:
        'inline-flex items-center cursor-pointer w-full px-2 py-1 text-sm font-medium transition-colors duration-150 rounded-md hover:bg-gray-100 hover:text-gray-800 dark:hover:bg-gray-800 dark:hover:text-gray-200',
    },
  },
}
export default theme
'''
'''--- src/utils/categories.js ---
export const categories = [
  {
    id: "1",
    value: "ca",
    name: "clothing & accessories",
  },
  {
    id: "2",
    value: "hg",
    name: "home & garden",
  },
  {
    id: "3",
    value: "electronics",
    name: "electronics",
  },
  {
    id: "4",
    value: "other",
    name: "other",
  },
];

export const subcategories = {
  ca: [
    {
      id: "11",
      value: "tops",
      name: "tops",
    },
    {
      id: "12",
      value: "bottoms",
      name: "bottoms",
    },
    {
      id: "13",
      value: "shoes",
      name: "shoes",
    },
    {
      id: "14",
      value: "hats",
      name: "hats",
    },
    {
      id: "15",
      value: "bags",
      name: "bags",
    },
  ],
  hg: [
    {
      id: "21",
      value: "furniture",
      name: "furniture",
    },
    {
      id: "22",
      value: "appliances",
      name: "appliances",
    },
    {
      id: "23",
      value: "tools",
      name: "tools",
    },
  ],
  electronics: [
    {
      id: "31",
      value: "ct",
      name: "computers & tablets",
    },
    {
      id: "32",
      value: "cp",
      name: "cameras & photo",
    },
    {
      id: "33",
      value: "tva",
      name: "tv, video, & audio",
    },
  ],
  other: [
    {
      id: "41",
      value: "other",
      name: "other",
    },
  ],
};

export const conditions = [
  {
    id: "1",
    value: "n",
    name: "new",
  },
  {
    id: "2",
    value: "ln",
    name: "like new",
  },
  {
    id: "3",
    value: "r",
    name: "refurbished",
  },
  {
    id: "4",
    value: "vg",
    name: "very good",
  },
  {
    id: "5",
    value: "g",
    name: "good",
  },
  {
    id: "6",
    value: "p",
    name: "poor",
  },
];

export const sizes = {
  tops: [
    {
      id: "1",
      value: "xs",
      name: "XS",
    },
    {
      id: "2",
      value: "s",
      name: "S",
    },
    {
      id: "3",
      value: "m",
      name: "M",
    },
    {
      id: "4",
      value: "l",
      name: "L",
    },
    {
      id: "5",
      value: "xl",
      name: "XL",
    },
    {
      id: "6",
      value: "xll",
      name: "XLL",
    },
  ],
};

export const attributes = [
  {
    name: "color",
    displayName: "Color",
    options: [
      {
        name: "blue",
        displayName: "Blue"
      },
      {
        name: "green",
        displayName: "Green"
      },
      {
        name: "black",
        displayName: "Black"
      },
      {
        name: "red",
        displayName: "Red"
      },
      {
        name: "yellow",
        displayName: "Yellow"
      },
      {
        name: "white",
        displayName: "White"
      },
      {
        name: "brown",
        displayName: "Brown"
      },
      {
        name: "gray",
        displayName: "Gray"
      }
    ]
  }
]

'''
'''--- src/utils/mergeDeep.js ---
/**
 * Check if item is Object
 */
 export function isObject(item) {
  return item && typeof item === 'object' && !Array.isArray(item)
}

/**
 * Deep merge two objects.
 * @return merged object
 */
export function mergeDeep(target, ...sources) {
  if (sources.length === 0) return target
  const source = sources.shift()

  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key]) Object.assign(target, { [key]: {} })
        mergeDeep(target[key], source[key])
      } else {
        Object.assign(target, { [key]: source[key] })
      }
    }
  }

  return mergeDeep(target, ...sources)
}
'''
'''--- src/utils/useDarkMode.js ---
import { useEffect, useState } from "react";

export const useDarkMode = (usePreferences) => {
  const [mode, setMode] = useState(null);

  useEffect(() => {
    const userPreference =
      !!window.matchMedia &&
      window.matchMedia("(prefers-color-scheme: dark)").matches;

    setMode(
      // use stored theme; fallback to user preference
      window.localStorage.getItem("theme") ||
        (userPreference ? "dark" : "light")
    );
  }, []);

  useEffect(() => {
    if (mode) {
      window.localStorage.setItem("theme", mode);
      document.documentElement.classList.add(mode);
    }
  }, [mode]);

  if (!usePreferences) return [null, null, null];

  const toggleMode = () => {
    if (mode === "light") {
      document.documentElement.className = "";
      document.documentElement.classList.add("dark");
      setMode("dark");
    } else {
      document.documentElement.className = "";
      document.documentElement.classList.add("light");
      setMode("light");
    }
  };

  return [mode, setMode, toggleMode];
};

export default useDarkMode;

'''
'''--- tailwind.config.js ---
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {},
  },
  plugins: [
    require('@tailwindcss/forms')
  ],
}

'''